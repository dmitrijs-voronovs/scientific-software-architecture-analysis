id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:188,Integrability,depend,depending,188,"/// Return true if this instruction requires *adjustment*; /// after instruction selection by calling a target hook. For example, this; /// can be used to fill in ARM 's' optional operand depending on whether; /// the conditional flag register is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:134,Performance,optimiz,optimizations,134,"/// Returns true if this instruction has the same cost (or less) than a move; /// instruction. This is useful during certain types of optimizations; /// (e.g., remat during two-address conversion or machine licm); /// where we would like to remat or hoist the instruction, but not if it costs; /// more than moving the instruction into the appropriate register. Note, we; /// are not marking copies from and to the same register class with this flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:212,Modifiability,variab,variables,212,"/// Returns true if this instruction is a debug instruction that represents an; /// identical debug value to \p Other.; /// This function considers these debug instructions equivalent if they have; /// identical variables, debug locations, and debug operands, and if the; /// DIExpressions combined with the directness flags are equivalent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:85,Modifiability,variab,variable,85,/// Return true if the instruction is a debug value which describes a part of; /// a variable as unavailable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:62,Performance,load,load,62,/// Returns true if the register operand can be folded with a load or store; /// into a frame index. Does so by checking the InlineAsm::Flag immediate; /// operand at OpId - 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper for findRegisterUseOperandIdx, it returns; /// a pointer to the MachineOperand rather than an index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:394,Availability,mask,mask,394,"/// Returns the operand index that is a def of the specified register or; /// -1 if it is not found. If isDead is true, defs that are not dead are; /// skipped. If Overlap is true, then it also looks for defs that merely; /// overlap the specified register. If TargetRegisterInfo is non-null,; /// then it also checks if there is a def of a super-register.; /// This may also return a register mask operand when Overlap is true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper for findRegisterDefOperandIdx, it returns; /// a pointer to the MachineOperand rather than an index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Usability,Clear,Clears,4,/// Clears kill flags on all operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Usability,Clear,Clear,4,"/// Clear all kill flags affecting Reg. If RegInfo is provided, this includes; /// all aliasing registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Usability,Clear,Clear,4,/// Clear all dead flags on operands defining register @p Reg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:136,Availability,mask,mask,136,"/// Mark every physreg used by this instruction as; /// dead except those in the UsedRegs list.; ///; /// On instructions with register mask operands, also add implicit-def; /// operands for all registers in UsedRegs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:25,Safety,safe,safe,25,"/// Return true if it is safe to move this instruction. If; /// SawStore is set to true, it means that there is a store (or call) between; /// the instruction's location and its intended destination.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:46,Security,access,access,46,"/// Returns true if this instruction's memory access aliases the memory; /// access of Other.; //; /// Assumes any physical registers used to compute addresses; /// have the same value for both instructions. Returns false if neither; /// instruction writes to memory.; ///; /// @param AA Optional alias analysis, used to compare memory operands.; /// @param Other MachineInstr to check aliasing against.; /// @param UseTBAA Whether to pass TBAA information to alias analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:77,Security,access,access,77,"/// Returns true if this instruction's memory access aliases the memory; /// access of Other.; //; /// Assumes any physical registers used to compute addresses; /// have the same value for both instructions. Returns false if neither; /// instruction writes to memory.; ///; /// @param AA Optional alias analysis, used to compare memory operands.; /// @param Other MachineInstr to check aliasing against.; /// @param UseTBAA Whether to pass TBAA information to alias analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:157,Availability,avail,available,157,"/// Return true if this instruction may have an ordered; /// or volatile memory reference, or if the information describing the memory; /// reference is not available. Return false if it is known to have no; /// ordered or volatile memory references.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:24,Performance,load,load,24,"/// Return true if this load instruction never traps and points to a memory; /// location whose value doesn't change during the execution of this function.; ///; /// Examples include loading a value from the constant pool or from the; /// argument area of a function (if it does not change). If the instruction; /// does multiple loads, this returns true only if all of the loads are; /// dereferenceable and invariant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:183,Performance,load,loading,183,"/// Return true if this load instruction never traps and points to a memory; /// location whose value doesn't change during the execution of this function.; ///; /// Examples include loading a value from the constant pool or from the; /// argument area of a function (if it does not change). If the instruction; /// does multiple loads, this returns true only if all of the loads are; /// dereferenceable and invariant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:330,Performance,load,loads,330,"/// Return true if this load instruction never traps and points to a memory; /// location whose value doesn't change during the execution of this function.; ///; /// Examples include loading a value from the constant pool or from the; /// argument area of a function (if it does not change). If the instruction; /// does multiple loads, this returns true only if all of the loads are; /// dereferenceable and invariant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:374,Performance,load,loads,374,"/// Return true if this load instruction never traps and points to a memory; /// location whose value doesn't change during the execution of this function.; ///; /// Examples include loading a value from the constant pool or from the; /// argument area of a function (if it does not change). If the instruction; /// does multiple loads, this returns true only if all of the loads are; /// dereferenceable and invariant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:44,Performance,load,load,44,/// Returns true if it is illegal to fold a load across this instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:457,Energy Efficiency,allocate,allocate,457,"/// @}; //===--------------------------------------------------------------------===//; // Accessors used to build up machine instructions.; /// Add the specified operand to the instruction. If it is an implicit; /// operand, it is added to the end of the operand list. If it is an; /// explicit operand it is added at the end of the explicit operand list; /// (before the first implicit operand).; ///; /// MF must be the machine function that was used to allocate this; /// instruction.; ///; /// MachineInstrBuilder provides a more convenient interface for creating; /// instructions and adding operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:546,Integrability,interface,interface,546,"/// @}; //===--------------------------------------------------------------------===//; // Accessors used to build up machine instructions.; /// Add the specified operand to the instruction. If it is an implicit; /// operand, it is added to the end of the operand list. If it is an; /// explicit operand it is added at the end of the explicit operand list; /// (before the first implicit operand).; ///; /// MF must be the machine function that was used to allocate this; /// instruction.; ///; /// MachineInstrBuilder provides a more convenient interface for creating; /// instructions and adding operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:91,Security,Access,Accessors,91,"/// @}; //===--------------------------------------------------------------------===//; // Accessors used to build up machine instructions.; /// Add the specified operand to the instruction. If it is an implicit; /// operand, it is added to the end of the operand list. If it is an; /// explicit operand it is added at the end of the explicit operand list; /// (before the first implicit operand).; ///; /// MF must be the machine function that was used to allocate this; /// instruction.; ///; /// MachineInstrBuilder provides a more convenient interface for creating; /// instructions and adding operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:59,Safety,Avoid,Avoid,59,"/// Replace current source information with new such.; /// Avoid using this, the constructor argument is preferable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:242,Performance,perform,performed,242,/// Clear this MachineInstr's memory reference descriptor list. This resets; /// the memrefs to their most conservative state. This should be used only; /// as a last resort since it greatly pessimizes our knowledge of the memory; /// access performed by the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:235,Security,access,access,235,/// Clear this MachineInstr's memory reference descriptor list. This resets; /// the memrefs to their most conservative state. This should be used only; /// as a last resort since it greatly pessimizes our knowledge of the memory; /// access performed by the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:4,Usability,Clear,Clear,4,/// Clear this MachineInstr's memory reference descriptor list. This resets; /// the memrefs to their most conservative state. This should be used only; /// as a last resort since it greatly pessimizes our knowledge of the memory; /// access performed by the instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:109,Energy Efficiency,allocate,allocate,109,"/// Assign this MachineInstr's memory reference descriptor list.; ///; /// Unlike other methods, this *will* allocate them into a new array; /// associated with the provided `MachineFunction`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:203,Safety,avoid,avoid,203,/// Clone another MachineInstr's memory reference descriptor list and replace; /// ours with it.; ///; /// Note that `*this` may be the incoming MI!; ///; /// Prefer this API whenever possible as it can avoid allocations in common; /// cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:226,Safety,avoid,avoid,226,/// Clone the merge of multiple MachineInstrs' memory reference descriptors; /// list and replace ours with it.; ///; /// Note that `*this` may be one of the incoming MIs!; ///; /// Prefer this API whenever possible as it can avoid allocations in common; /// cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:161,Performance,optimiz,optimizations,161,"/// Set a marker on instructions that denotes where we should create and emit; /// heap alloc site labels. This waits until after instruction selection and; /// optimizations to create the label, so it should still work if the; /// instruction is removed or duplicated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:130,Integrability,rout,routine,130,/// Return the MIFlags which represent both MachineInstrs. This; /// should be used when merging two MachineInstrs into one. This routine does; /// not modify the MIFlags of this MachineInstr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:19,Testability,log,logic,19,"/// Implements the logic of getRegClassConstraintEffectForVReg for the; /// this MI and the given operand index \p OpIdx.; /// If the related operand does not constrained Reg, this returns CurRC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:51,Energy Efficiency,allocate,allocates,51,/// Stores extra instruction information inline or allocates as ExtraInfo; /// based on the number of pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:131,Security,hash,hashing,131,"/// Special DenseMapInfo traits to compare MachineInstr* by *value* of the; /// instruction rather than by pointer value.; /// The hashing and equality testing functions ignore definitions so this is; /// useful for CSE, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h:152,Testability,test,testing,152,"/// Special DenseMapInfo traits to compare MachineInstr* by *value* of the; /// instruction rather than by pointer value.; /// The hashing and equality testing functions ignore definitions so this is; /// useful for CSE, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:394,Security,expose,exposes,394,"//===- CodeGen/MachineInstrBuilder.h - Simplify creation of MIs --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes a function named BuildMI, which is useful for dramatically; // simplifying how MachineInstr's are created. It allows use of code like this:; //; // MIMetadata MIMD(MI); // Propagates DebugLoc and other metadata; // M = BuildMI(MBB, MI, MIMD, TII.get(X86::ADD8rr), Dst); // .addReg(argVal1); // .addReg(argVal2);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:39,Usability,Simpl,Simplify,39,"//===- CodeGen/MachineInstrBuilder.h - Simplify creation of MIs --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes a function named BuildMI, which is useful for dramatically; // simplifying how MachineInstr's are created. It allows use of code like this:; //; // MIMetadata MIMD(MI); // Propagates DebugLoc and other metadata; // M = BuildMI(MBB, MI, MIMD, TII.get(X86::ADD8rr), Dst); // .addReg(argVal1); // .addReg(argVal2);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:465,Usability,simpl,simplifying,465,"//===- CodeGen/MachineInstrBuilder.h - Simplify creation of MIs --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes a function named BuildMI, which is useful for dramatically; // simplifying how MachineInstr's are created. It allows use of code like this:; //; // MIMetadata MIMD(MI); // Propagates DebugLoc and other metadata; // M = BuildMI(MBB, MI, MIMD, TII.get(X86::ADD8rr), Dst); // .addReg(argVal1); // .addReg(argVal2);; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:128,Energy Efficiency,allocate,allocate,128,/// Create a MachineInstrBuilder for manipulating an existing instruction.; /// F must be the machine function that was used to allocate I.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:96,Testability,assert,asserted,96,/// Get the register for the operand index.; /// The operand at the index should be a register (asserted by; /// MachineOperand).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:49,Availability,error,error,49,/// Add a virtual register use operand. It is an error for Flags to contain; /// `RegState::Define` when calling this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:187,Usability,clear,clear,187,"// If caller specifies new TargetFlags then use it, otherwise the; // default behavior is to copy the target flags from the existing; // MachineOperand. This means if the caller wants to clear the; // target flags it needs to do so explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:12,Integrability,interface,interface,12,/// Builder interface. Specify how to create the initial instruction itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:97,Availability,avail,available,97,"// Calling the overload for instr_iterator is always correct. However, the; // definition is not available in headers, so inline the check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:97,Availability,avail,available,97,"// Calling the overload for instr_iterator is always correct. However, the; // definition is not available in headers, so inline the check.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:4,Deployability,Update,Update,4,/// Update a DBG_VALUE whose value has been spilled to FrameIndex. Useful when; /// modifying an instruction in place while iterating over a basic block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h:94,Deployability,Update,Update,94,"// MI was inserted in the middle of the bundle, so its neighbors' flags are; // already fine. Update MI's bundle flags manually.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h:161,Integrability,rout,routine,161,"/// finalizeBundle - Finalize a machine instruction bundle which includes; /// a sequence of instructions starting from FirstMI to LastMI (exclusive).; /// This routine adds a BUNDLE instruction to represent the bundle, it adds; /// IsInternalRead markers to MachineOperands which are defined inside the; /// bundle, and it copies externally visible defs and uses to the BUNDLE; /// instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h:26,Availability,mask,masks,26,"/// Return a pair of lane masks (reads, writes) indicating which lanes this; /// instruction uses with Reg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundle.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:3,Safety,Avoid,Avoid,3,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,Testability,assert,assertion,9,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:3,Safety,Avoid,Avoid,3,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,Testability,assert,assertion,9,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:3,Safety,Avoid,Avoid,3,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,Testability,assert,assertion,9,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:3,Safety,Avoid,Avoid,3,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,Testability,assert,assertion,9,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:3,Safety,Avoid,Avoid,3,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,Testability,assert,assertion,9,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:3,Safety,Avoid,Avoid,3,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,Testability,assert,assertion,9,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:3,Safety,Avoid,Avoid,3,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,Testability,assert,assertion,9,// Avoid assertion about validity of R.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:3,Safety,Avoid,Avoid,3,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h:9,Testability,assert,assertion,9,// Avoid assertion about validity of L.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineInstrBundleIterator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineJumpTableInfo.h:70,Deployability,update,update,70,"/// ReplaceMBBInJumpTables - If Old is the target of any jump tables, update; /// the jump tables to branch to New instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineJumpTableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineJumpTableInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineJumpTableInfo.h:67,Deployability,update,update,67,"/// ReplaceMBBInJumpTable - If Old is a target of the jump tables, update; /// the jump table to branch to New instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineJumpTableInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineJumpTableInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h:50,Modifiability,variab,variable,50,"/// Find the block that contains the loop control variable and the; /// loop test. This will return the latch block if it's one of the exiting; /// blocks. Otherwise, return the exiting block. Return 'null' when; /// multiple exiting blocks are present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h:77,Testability,test,test,77,"/// Find the block that contains the loop control variable and the; /// loop test. This will return the latch block if it's one of the exiting; /// blocks. Otherwise, return the exiting block. Return 'null' when; /// multiple exiting blocks are present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h:160,Security,access,accessed,160,"/// Returns true if the instruction is loop invariant.; /// I.e., all virtual register operands are defined outside of the loop,; /// physical registers aren't accessed explicitly, and there are no side; /// effects that aren't captured by the operands or other flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h:17,Integrability,interface,interface,17,/// The iterator interface to the top-level loops in the current function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopUtils.h:394,Deployability,update,updated,394,"/// Peels a single block loop. Loop must have two successors, one of which; /// must be itself. Similarly it must have two predecessors, one of which must; /// be itself.; ///; /// The loop block is copied and inserted into the CFG such that two copies of; /// the loop follow on from each other. The copy is inserted either before or; /// after the loop based on Direction.; ///; /// Phis are updated and an unconditional branch inserted at the end of the; /// clone so as to execute a single iteration.; ///; /// The trip count of Loop is not updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopUtils.h:545,Deployability,update,updated,545,"/// Peels a single block loop. Loop must have two successors, one of which; /// must be itself. Similarly it must have two predecessors, one of which must; /// be itself.; ///; /// The loop block is copied and inserted into the CFG such that two copies of; /// the loop follow on from each other. The copy is inserted either before or; /// after the loop based on Direction.; ///; /// Phis are updated and an unconditional branch inserted at the end of the; /// clone so as to execute a single iteration.; ///; /// The trip count of Loop is not updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineLoopUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:525,Integrability,depend,dependencies,525,"//==- llvm/CodeGen/MachineMemOperand.h - MachineMemOperand class -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the declaration of the MachineMemOperand class, which is a; // description of a memory reference. It is used to help track dependencies; // in the backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:193,Security,expose,exposed,193,"/// This class contains a discriminated union of information about pointers in; /// memory operands, relating them back to LLVM IR or to virtual locations (such; /// as frame indices) that are exposed during codegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:41,Security,access,access,41,"/// This is the IR pointer value for the access, or it is null if unknown.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:27,Security,access,access,27,/// Stack pointer relative access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:182,Performance,Load,LoadInst,182,"//===----------------------------------------------------------------------===//; /// A description of a memory reference used in the backend.; /// Instead of holding a StoreInst or LoadInst, this class holds the address; /// Value of the reference along with a byte size and offset. This allows it; /// to describe lowered loads and stores. Also, the special PseudoSourceValue; /// objects can be used to represent loads and stores to memory locations; /// that aren't explicit in the regular LLVM IR.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:324,Performance,load,loads,324,"//===----------------------------------------------------------------------===//; /// A description of a memory reference used in the backend.; /// Instead of holding a StoreInst or LoadInst, this class holds the address; /// Value of the reference along with a byte size and offset. This allows it; /// to describe lowered loads and stores. Also, the special PseudoSourceValue; /// objects can be used to represent loads and stores to memory locations; /// that aren't explicit in the regular LLVM IR.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:416,Performance,load,loads,416,"//===----------------------------------------------------------------------===//; /// A description of a memory reference used in the backend.; /// Instead of holding a StoreInst or LoadInst, this class holds the address; /// Value of the reference along with a byte size and offset. This allows it; /// to describe lowered loads and stores. Also, the special PseudoSourceValue; /// objects can be used to represent loads and stores to memory locations; /// that aren't explicit in the regular LLVM IR.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,Security,access,access,15,/// The memory access reads data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,Security,access,access,15,/// The memory access writes data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,Security,access,access,15,/// The memory access is volatile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,Security,access,access,15,/// The memory access is non-temporal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,Security,access,access,15,"/// The memory access is dereferenceable (i.e., doesn't trap).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:15,Security,access,access,15,/// The memory access always returns the same value (or traps).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:258,Deployability,update,updated,258,"// Reserved for use by target-specific passes.; // Targets may override getSerializableMachineMemOperandTargetFlags() to; // enable MIR serialization/parsing of these flags. If more of these flags; // are added, the MIR printing/parsing code will need to be updated as well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:4,Integrability,Synchroniz,Synchronization,4,/// Synchronization scope ID for this memory operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:33,Security,access,access,33,/// Track the memory type of the access. An access size which is unknown or; /// too large to be represented by LLT should use the invalid LLT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:44,Security,access,access,44,/// Track the memory type of the access. An access size which is unknown or; /// too large to be represented by LLT should use the invalid LLT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:133,Integrability,synchroniz,synchronization,133,"/// Construct a MachineMemOperand object with the specified PtrInfo, flags,; /// size, and base alignment. For atomic operations the synchronization scope; /// and atomic ordering requirements must also be specified. For cmpxchg; /// atomic operations the atomic ordering requirements when store does not; /// occur must also be specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:42,Security,access,access,42,"/// Return the base address of the memory access. This may either be a normal; /// LLVM IR Value, or one of the special values used in CodeGen.; /// Special values are those obtained via; /// PseudoSourceValue::getFixedStack(int), PseudoSourceValue::getStack, and; /// other PseudoSourceValue member functions which return objects which stand; /// for frame/stack pointer relative references and other special references; /// which are not representable in the high-level IR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:16,Integrability,synchroniz,synchronization,16,/// Returns the synchronization scope ID for this memory operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:92,Availability,failure,failure,92,"/// Return a single atomic ordering that is at least as strong as both the; /// success and failure orderings for an atomic operation. (For operations; /// other than cmpxchg, this is equivalent to getSuccessOrdering().)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:4,Deployability,Update,Update,4,"/// Update this MachineMemOperand to reflect the alignment of MMO, if it has a; /// greater alignment. This must only be used when the new alignment applies; /// to all users of this MachineMemOperand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h:159,Deployability,update,updated,159,/// Change the SourceValue for this MachineMemOperand. This should only be; /// used when an object is being relocated and all references to it are being; /// updated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineMemOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h:228,Security,access,accessed,228,//===----------------------------------------------------------------------===//; /// This class can be derived from and used by targets to hold private; /// target-specific information for each Module. Objects of type are; /// accessed/created with MachineModuleInfo::getObjFileInfo and destroyed when; /// the MachineModuleInfo is destroyed.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h:76,Usability,Clear,Clears,76,/// Return the entries from a DenseMap in a deterministic sorted orer.; /// Clears the map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h:413,Availability,avail,available,413,"/// \}; // TODO: Ideally, what we'd like is to have a switch that allows emitting; // synchronous (precise at call-sites only) CFA into .eh_frame. However,; // even under this switch, we'd like .debug_frame to be precise when using; // -g. At this moment, there's no way to specify that some CFI directives; // go into .eh_frame only, while others go into .debug_frame only.; /// True if debugging information is available in this module.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h:23,Availability,avail,available,23,/// Next unique number available for a MachineFunction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h:23,Performance,cache,cache,23,///< Used for shortcut/cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h:23,Performance,cache,cache,23,///< Used for shortcut/cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:37,Testability,stub,stubs,37,"/// GVStubs - Darwin '$non_lazy_ptr' stubs. The key is something like; /// ""Lfoo$non_lazy_ptr"", the value is something like ""_foo"". The extra bit; /// is true if this GV is external.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:48,Testability,stub,stubs,48,"/// ThreadLocalGVStubs - Darwin '$non_lazy_ptr' stubs. The key is something; /// like ""Lfoo$non_lazy_ptr"", the value is something like ""_foo"". The extra; /// bit is true if this GV is external.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:4,Security,Access,Accessor,4,/// Accessor methods to return the set of stubs in sorted order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:42,Testability,stub,stubs,42,/// Accessor methods to return the set of stubs in sorted order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:20,Testability,stub,stubs,20,/// GVStubs - These stubs are used to materialize global addresses in PIC; /// mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:4,Security,Access,Accessor,4,/// Accessor methods to return the set of stubs in sorted order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:42,Testability,stub,stubs,42,/// Accessor methods to return the set of stubs in sorted order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:20,Testability,stub,stubs,20,/// GVStubs - These stubs are used to materialize global addresses in PIC; /// mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:4,Security,Access,Accessor,4,/// Accessor methods to return the set of stubs in sorted order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h:42,Testability,stub,stubs,42,/// Accessor methods to return the set of stubs in sorted order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineModuleInfoImpls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:310,Integrability,depend,depend,310,"/// MachineOperand class - Representation of each machine instruction operand.; ///; /// This class isn't a POD type because it has a private constructor, but its; /// destructor must be trivial. Functions like MachineInstr::addOperand(),; /// MachineRegisterInfo::moveOperands(), and MF::DeleteMachineInstr() depend on; /// not having to call the MachineOperand destructor.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Integrability,depend,dependent,12,///< Target-dependent index+offset operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:5,Availability,Mask,Mask,5,///< Mask of preserved registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:5,Availability,Mask,Mask,5,///< Mask of live-out registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:41,Availability,mask,masks,41,///< Other IR Constant for ISel (shuffle masks),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:510,Integrability,depend,depend,510,"/// IsUndef - True if this register operand reads an ""undef"" value, i.e. the; /// read value doesn't matter. This flag can be set on both use and def; /// operands. On a sub-register def operand, it refers to the part of the; /// register that isn't written. On a full-register def operand, it is a; /// noop. See readsReg().; ///; /// This is only valid on registers.; ///; /// Note that an instruction may have multiple <undef> operands referring to; /// the same register. In that case, the instruction may depend on those; /// operands reading the same dont-care value. For example:; ///; /// %1 = XOR undef %2, undef %2; ///; /// Any register can be used for %2, and its value doesn't matter, but; /// the two operands must be the same register.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:3,Security,Access,Access,3,// Access list for register. See MRI.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:3,Testability,Assert,Assert,3,// Assert that the layout is what we expect. It's easy to grow this object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:4,Usability,clear,clearParent,4,"/// clearParent - Reset the parent pointer.; ///; /// The MachineOperand copy constructor also copies ParentMI, expecting the; /// original to be deleted. If a MachineOperand is ever stored outside a; /// MachineInstr, the parent pointer must be cleared.; ///; /// Never call clearParent() on an operand in a MachineInstr.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:246,Usability,clear,cleared,246,"/// clearParent - Reset the parent pointer.; ///; /// The MachineOperand copy constructor also copies ParentMI, expecting the; /// original to be deleted. If a MachineOperand is ever stored outside a; /// MachineInstr, the parent pointer must be cleared.; ///; /// Never call clearParent() on an operand in a MachineInstr.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:276,Usability,clear,clearParent,276,"/// clearParent - Reset the parent pointer.; ///; /// The MachineOperand copy constructor also copies ParentMI, expecting the; /// original to be deleted. If a MachineOperand is ever stored outside a; /// MachineInstr, the parent pointer must be cleared.; ///; /// Never call clearParent() on an operand in a MachineInstr.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:308,Integrability,depend,dependent,308,"/// More complex way of printing a MachineOperand.; /// \param TypeToPrint specifies the generic type to be printed on uses and; /// defs. It can be determined using MachineInstr::getTypeToPrint.; /// \param OpIdx - specifies the index of the operand in machine instruction.; /// This will be used by target dependent MIR formatter. Could be std::nullopt; /// if the index is unknown, e.g. called by dump().; /// \param PrintDef - whether we want to print `def` on an operand which; /// isDef. Sometimes, if the operand is printed before '=', we don't print; /// `def`.; /// \param IsStandalone - whether we want a verbose output of the MO. This; /// prints extra information that can be easily inferred when printing the; /// whole function, but not when printing only a fragment of it.; /// \param ShouldPrintRegisterTies - whether we want to print register ties.; /// Sometimes they are easily determined by the instruction's descriptor; /// (MachineInstr::hasComplexRegiterTies can determine if it's needed).; /// \param TiedOperandIdx - if we need to print register ties this needs to; /// provide the index of the tied register. If not, it will be ignored.; /// \param TRI - provide more target-specific information to the printer.; /// Unlike the previous function, this one will not try and get the; /// information from it's parent.; /// \param IntrinsicInfo - same as \p TRI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:83,Security,Access,Accessors,83,//===--------------------------------------------------------------------===//; // Accessors that tell you what kind of MachineOperand you're looking at.; //===--------------------------------------------------------------------===//; /// isReg - Tests if this is a MO_Register operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:247,Testability,Test,Tests,247,//===--------------------------------------------------------------------===//; // Accessors that tell you what kind of MachineOperand you're looking at.; //===--------------------------------------------------------------------===//; /// isReg - Tests if this is a MO_Register operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Testability,Test,Tests,12,/// isImm - Tests if this is a MO_Immediate operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:13,Testability,Test,Test,13,/// isCImm - Test if this is a MO_CImmediate operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:14,Testability,Test,Tests,14,/// isFPImm - Tests if this is a MO_FPImmediate operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Testability,Test,Tests,12,/// isMBB - Tests if this is a MO_MachineBasicBlock operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:11,Testability,Test,Tests,11,/// isFI - Tests if this is a MO_FrameIndex operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Testability,Test,Tests,12,/// isCPI - Tests if this is a MO_ConstantPoolIndex operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:20,Testability,Test,Tests,20,/// isTargetIndex - Tests if this is a MO_TargetIndex operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:12,Testability,Test,Tests,12,/// isJTI - Tests if this is a MO_JumpTableIndex operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:15,Testability,Test,Tests,15,/// isGlobal - Tests if this is a MO_GlobalAddress operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:15,Testability,Test,Tests,15,/// isSymbol - Tests if this is a MO_ExternalSymbol operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:21,Testability,Test,Tests,21,/// isBlockAddress - Tests if this is a MO_BlockAddress operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:16,Testability,Test,Tests,16,/// isRegMask - Tests if this is a MO_RegisterMask operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:19,Testability,Test,Tests,19,/// isRegLiveOut - Tests if this is a MO_RegisterLiveOut operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:17,Testability,Test,Tests,17,/// isMetadata - Tests if this is a MO_Metadata operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:83,Security,Access,Accessors,83,//===--------------------------------------------------------------------===//; // Accessors for Register Operands; //===--------------------------------------------------------------------===//; /// getReg - Returns the register number.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:1185,Integrability,depend,depend,1185,"/// isRenamable - Returns true if this register may be renamed, i.e. it does; /// not generate a value that is somehow read in a way that is not represented; /// by the Machine IR (e.g. to meet an ABI or ISA requirement). This is only; /// valid on physical register operands. Virtual registers are assumed to; /// always be renamable regardless of the value of this field.; ///; /// Operands that are renamable can freely be changed to any other register; /// that is a member of the register class returned by; /// MI->getRegClassConstraint().; ///; /// isRenamable can return false for several different reasons:; ///; /// - ABI constraints (since liveness is not always precisely modeled). We; /// conservatively handle these cases by setting all physical register; /// operands that didn’t start out as virtual regs to not be renamable.; /// Also any physical register operands created after register allocation or; /// whose register is changed after register allocation will not be; /// renamable. This state is tracked in the MachineOperand::IsRenamable; /// bit.; ///; /// - Opcode/target constraints: for opcodes that have complex register class; /// requirements (e.g. that depend on other operands/instructions), we set; /// hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq in the machine opcode; /// description. Operands belonging to instructions with opcodes that are; /// marked hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq return false from; /// isRenamable(). Additionally, the AllowRegisterRenaming target property; /// prevents any operands from being marked renamable for targets that don't; /// have detailed opcode hasExtraSrcRegAllocReq/hasExtraDstRegAllocReq; /// values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:83,Security,Access,Accessors,83,//===--------------------------------------------------------------------===//; // Accessors for various operand types.; //===--------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:123,Availability,mask,mask,123,/// clobbersPhysReg - Returns true if this RegMask clobbers PhysReg.; /// It is sometimes necessary to detach the register mask pointer from its; /// machine operand. This static method can be used for such detached bit; /// mask pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:225,Availability,mask,mask,225,/// clobbersPhysReg - Returns true if this RegMask clobbers PhysReg.; /// It is sometimes necessary to detach the register mask pointer from its; /// machine operand. This static method can be used for such detached bit; /// mask pointers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:31,Availability,mask,mask,31,/// getRegMask - Returns a bit mask of registers preserved by this RegMask; /// operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:34,Availability,mask,mask,34,/// getRegLiveOut - Returns a bit mask of live-out registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:27,Availability,mask,mask,27,"/// Sets value of register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it must; /// remain valid for the lifetime of the operand. See CreateRegMask().; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:52,Availability,Mask,Mask,52,"/// Sets value of register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it must; /// remain valid for the lifetime of the operand. See CreateRegMask().; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:127,Availability,Mask,Mask,127,"/// Sets value of register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it must; /// remain valid for the lifetime of the operand. See CreateRegMask().; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:250,Availability,mask,mask,250,"/// Sets value of register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it must; /// remain valid for the lifetime of the operand. See CreateRegMask().; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:102,Security,hash,hash,102,/// MachineOperand hash_value overload.; ///; /// Note that this includes the same information in the hash that; /// isIdenticalTo uses for comparison. It is thus suited for use in hash; /// tables which use that function for equality comparisons only. This must; /// stay exactly in sync with isIdenticalTo above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:181,Security,hash,hash,181,/// MachineOperand hash_value overload.; ///; /// Note that this includes the same information in the hash that; /// isIdenticalTo uses for comparison. It is thus suited for use in hash; /// tables which use that function for equality comparisons only. This must; /// stay exactly in sync with isIdenticalTo above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:174,Testability,Assert,Asserts,174,"/// getTargetIndexName - If this MachineOperand is a TargetIndex that has a; /// name, attempt to get the name. Returns nullptr if the TargetIndex does not; /// have a name. Asserts if MO is not a TargetIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:39,Availability,mask,mask,39,"/// CreateRegMask - Creates a register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it; /// must remain valid for the lifetime of the operand.; ///; /// A RegMask operand represents a set of non-clobbered physical registers; /// on an instruction that clobbers many registers, typically a call. The; /// bit mask has a bit set for each physreg that is preserved by this; /// instruction, as described in the documentation for; /// TargetRegisterInfo::getCallPreservedMask().; ///; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:64,Availability,Mask,Mask,64,"/// CreateRegMask - Creates a register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it; /// must remain valid for the lifetime of the operand.; ///; /// A RegMask operand represents a set of non-clobbered physical registers; /// on an instruction that clobbers many registers, typically a call. The; /// bit mask has a bit set for each physreg that is preserved by this; /// instruction, as described in the documentation for; /// TargetRegisterInfo::getCallPreservedMask().; ///; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:139,Availability,Mask,Mask,139,"/// CreateRegMask - Creates a register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it; /// must remain valid for the lifetime of the operand.; ///; /// A RegMask operand represents a set of non-clobbered physical registers; /// on an instruction that clobbers many registers, typically a call. The; /// bit mask has a bit set for each physreg that is preserved by this; /// instruction, as described in the documentation for; /// TargetRegisterInfo::getCallPreservedMask().; ///; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:369,Availability,mask,mask,369,"/// CreateRegMask - Creates a register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it; /// must remain valid for the lifetime of the operand.; ///; /// A RegMask operand represents a set of non-clobbered physical registers; /// on an instruction that clobbers many registers, typically a call. The; /// bit mask has a bit set for each physreg that is preserved by this; /// instruction, as described in the documentation for; /// TargetRegisterInfo::getCallPreservedMask().; ///; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h:578,Availability,mask,mask,578,"/// CreateRegMask - Creates a register mask operand referencing Mask. The; /// operand does not take ownership of the memory referenced by Mask, it; /// must remain valid for the lifetime of the operand.; ///; /// A RegMask operand represents a set of non-clobbered physical registers; /// on an instruction that clobbers many registers, typically a call. The; /// bit mask has a bit set for each physreg that is preserved by this; /// instruction, as described in the documentation for; /// TargetRegisterInfo::getCallPreservedMask().; ///; /// Any physreg with a 0 bit in the mask is clobbered by the instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOperand.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:420,Integrability,interface,interfaces,420,"///===- MachineOptimizationRemarkEmitter.h - Opt Diagnostics -*- C++ -*----===//; ///; /// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; /// See https://llvm.org/LICENSE.txt for license information.; /// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; ///; ///===---------------------------------------------------------------------===//; /// \file; /// Optimization diagnostic interfaces for machine passes. It's packaged as an; /// analysis pass so that by using this service passes become dependent on MBFI; /// as well. MBFI is used to compute the ""hotness"" of the diagnostic message.; ///; ///===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:534,Integrability,depend,dependent,534,"///===- MachineOptimizationRemarkEmitter.h - Opt Diagnostics -*- C++ -*----===//; ///; /// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; /// See https://llvm.org/LICENSE.txt for license information.; /// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; ///; ///===---------------------------------------------------------------------===//; /// \file; /// Optimization diagnostic interfaces for machine passes. It's packaged as an; /// analysis pass so that by using this service passes become dependent on MBFI; /// as well. MBFI is used to compute the ""hotness"" of the diagnostic message.; ///; ///===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:622,Integrability,message,message,622,"///===- MachineOptimizationRemarkEmitter.h - Opt Diagnostics -*- C++ -*----===//; ///; /// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; /// See https://llvm.org/LICENSE.txt for license information.; /// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; ///; ///===---------------------------------------------------------------------===//; /// \file; /// Optimization diagnostic interfaces for machine passes. It's packaged as an; /// analysis pass so that by using this service passes become dependent on MBFI; /// as well. MBFI is used to compute the ""hotness"" of the diagnostic message.; ///; ///===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:396,Performance,Optimiz,Optimization,396,"///===- MachineOptimizationRemarkEmitter.h - Opt Diagnostics -*- C++ -*----===//; ///; /// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; /// See https://llvm.org/LICENSE.txt for license information.; /// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; ///; ///===---------------------------------------------------------------------===//; /// \file; /// Optimization diagnostic interfaces for machine passes. It's packaged as an; /// analysis pass so that by using this service passes become dependent on MBFI; /// as well. MBFI is used to compute the ""hotness"" of the diagnostic message.; ///; ///===---------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:49,Performance,optimiz,optimization,49,/// Common features for diagnostics dealing with optimization remarks; /// that are used by machine passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:39,Performance,optimiz,optimization,39,/// Diagnostic information for applied optimization remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:296,Performance,optimiz,optimization,296,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass=, then the diagnostic will; /// be emitted. \p RemarkName is a textual identifier for the remark. \p; /// Loc is the debug location and \p MBB is the block that the optimization; /// operates in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:38,Performance,optimiz,optimization,38,/// Diagnostic information for missed-optimization remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:308,Performance,optimiz,optimization,308,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-missed=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark. \p Loc is the debug location and \p MBB is the block that the; /// optimization operates in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:31,Performance,optimiz,optimization,31,/// Diagnostic information for optimization analysis remarks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:310,Performance,optimiz,optimization,310,"/// \p PassName is the name of the pass emitting this diagnostic. If this name; /// matches the regular expression given in -Rpass-analysis=, then the; /// diagnostic will be emitted. \p RemarkName is a textual identifier for the; /// remark. \p Loc is the debug location and \p MBB is the block that the; /// optimization operates in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:4,Modifiability,Extend,Extend,4,/// Extend llvm::ore:: with MI-specific helper names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:32,Integrability,interface,interface,32,/// The optimization diagnostic interface.; ///; /// It allows reporting when optimizations are performed and when they are not; /// along with the reasons for it. Hotness information of the corresponding; /// code region can be included in the remark if DiagnosticsHotnessRequested is; /// enabled in the LLVM context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:8,Performance,optimiz,optimization,8,/// The optimization diagnostic interface.; ///; /// It allows reporting when optimizations are performed and when they are not; /// along with the reasons for it. Hotness information of the corresponding; /// code region can be included in the remark if DiagnosticsHotnessRequested is; /// enabled in the LLVM context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:78,Performance,optimiz,optimizations,78,/// The optimization diagnostic interface.; ///; /// It allows reporting when optimizations are performed and when they are not; /// along with the reasons for it. Hotness information of the corresponding; /// code region can be included in the remark if DiagnosticsHotnessRequested is; /// enabled in the LLVM context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:96,Performance,perform,performed,96,/// The optimization diagnostic interface.; ///; /// It allows reporting when optimizations are performed and when they are not; /// along with the reasons for it. Hotness information of the corresponding; /// code region can be included in the remark if DiagnosticsHotnessRequested is; /// enabled in the LLVM context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:12,Performance,optimiz,optimization,12,/// Emit an optimization remark.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:54,Performance,perform,perform,54,"/// Whether we allow for extra compile-time budget to perform more; /// analysis to be more informative.; ///; /// This is useful to enable additional missed optimizations to be reported; /// that are normally too noisy. In this mode, we can use the extra analysis; /// (1) to filter trivial false positives or (2) to provide more context so; /// that non-trivial false positives can be quickly detected by the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:158,Performance,optimiz,optimizations,158,"/// Whether we allow for extra compile-time budget to perform more; /// analysis to be more informative.; ///; /// This is useful to enable additional missed optimizations to be reported; /// that are normally too noisy. In this mode, we can use the extra analysis; /// (1) to filter trivial false positives or (2) to provide more context so; /// that non-trivial false positives can be quickly detected by the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:395,Safety,detect,detected,395,"/// Whether we allow for extra compile-time budget to perform more; /// analysis to be more informative.; ///; /// This is useful to enable additional missed optimizations to be reported; /// that are normally too noisy. In this mode, we can use the extra analysis; /// (1) to filter trivial false positives or (2) to provide more context so; /// that non-trivial false positives can be quickly detected by the user.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:3,Safety,Avoid,Avoid,3,// Avoid building the remark unless we know there are at least *some*; // remarks enabled. We can't currently check whether remarks are requested; // for the calling pass since that requires actually building the remark.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:83,Availability,avail,available,83,/// Compute hotness from IR value (currently assumed to be a block) if PGO is; /// available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:46,Deployability,update,update,46,/// Similar but use value from \p OptDiag and update hotness there.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h:23,Integrability,message,messages,23,/// Only allow verbose messages if we know we're filtering by hotness; /// (BFI is only set in this case).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOptimizationRemarkEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:115,Safety,safe,safe,115,"/// Represents how an instruction should be mapped by the outliner.; /// \p Legal instructions are those which are safe to outline.; /// \p LegalTerminator instructions are safe to outline, but only as the; /// last instruction in a sequence.; /// \p Illegal instructions are those which cannot be outlined.; /// \p Invisible instructions are instructions which can be outlined, but; /// shouldn't actually impact the outlining result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:173,Safety,safe,safe,173,"/// Represents how an instruction should be mapped by the outliner.; /// \p Legal instructions are those which are safe to outline.; /// \p LegalTerminator instructions are safe to outline, but only as the; /// last instruction in a sequence.; /// \p Illegal instructions are those which cannot be outlined.; /// \p Invisible instructions are instructions which can be outlined, but; /// shouldn't actually impact the outlining result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:183,Performance,tune,tune,183,"/// Liveness information for this Candidate. Tracks from the end of the; /// block containing this Candidate to the beginning of its sequence.; ///; /// Optional. Can be used to fine-tune the cost model, or fine-tune legality; /// decisions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:212,Performance,tune,tune,212,"/// Liveness information for this Candidate. Tracks from the end of the; /// block containing this Candidate to the beginning of its sequence.; ///; /// Optional. Can be used to fine-tune the cost model, or fine-tune legality; /// decisions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:118,Performance,tune,tune,118,"/// Liveness information restricted to this Candidate's instruction sequence.; ///; /// Optional. Can be used to fine-tune the cost model, or fine-tune legality; /// decisions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:147,Performance,tune,tune,147,"/// Liveness information restricted to this Candidate's instruction sequence.; ///; /// Optional. Can be used to fine-tune the cost model, or fine-tune legality; /// decisions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:31,Availability,avail,available,31,/// \returns True if \p Reg is available from the end of the block to the; /// beginning of the sequence.; ///; /// This query considers the following range:; ///; /// in_seq_1; /// in_seq_2; /// ...; /// in_seq_n; /// not_in_seq_1; /// ...; /// <end of block>,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:31,Availability,avail,available,31,/// \returns True if \p Reg is available within the sequence itself.; ///; /// This query considers the following range:; ///; /// in_seq_1; /// in_seq_2; /// ...; /// in_seq_n,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h:144,Deployability,update,updated,144,/// The number of instructions that would be saved by outlining every; /// candidate of this type.; ///; /// This is a fixed value which is not updated during the candidate pruning; /// process. It is only used for deciding which candidate to keep if two; /// candidates overlap. The true benefit is stored in the OutlinedFunction; /// for some given candidate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineOutliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:459,Deployability,pipeline,pipeline,459,"//===- PassManager.h --- Pass management for CodeGen ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header defines the pass manager interface for codegen. The codegen; // pipeline consists of only machine function passes. There is no container; // relationship between IR module/function and machine function in terms of pass; // manager organization. So there is no need for adaptor classes (for example; // ModuleToMachineFunctionAdaptor). Since invalidation could only happen among; // machine function passes, there is no proxy classes to handle cross-IR-unit; // invalidation. IR analysis results are provided for machine function passes by; // their respective analysis managers such as ModuleAnalysisManager and; // FunctionAnalysisManager.; //; // TODO: Add MachineFunctionProperties support.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:664,Energy Efficiency,adapt,adaptor,664,"//===- PassManager.h --- Pass management for CodeGen ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header defines the pass manager interface for codegen. The codegen; // pipeline consists of only machine function passes. There is no container; // relationship between IR module/function and machine function in terms of pass; // manager organization. So there is no need for adaptor classes (for example; // ModuleToMachineFunctionAdaptor). Since invalidation could only happen among; // machine function passes, there is no proxy classes to handle cross-IR-unit; // invalidation. IR analysis results are provided for machine function passes by; // their respective analysis managers such as ModuleAnalysisManager and; // FunctionAnalysisManager.; //; // TODO: Add MachineFunctionProperties support.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:420,Integrability,interface,interface,420,"//===- PassManager.h --- Pass management for CodeGen ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header defines the pass manager interface for codegen. The codegen; // pipeline consists of only machine function passes. There is no container; // relationship between IR module/function and machine function in terms of pass; // manager organization. So there is no need for adaptor classes (for example; // ModuleToMachineFunctionAdaptor). Since invalidation could only happen among; // machine function passes, there is no proxy classes to handle cross-IR-unit; // invalidation. IR analysis results are provided for machine function passes by; // their respective analysis managers such as ModuleAnalysisManager and; // FunctionAnalysisManager.; //; // TODO: Add MachineFunctionProperties support.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:664,Modifiability,adapt,adaptor,664,"//===- PassManager.h --- Pass management for CodeGen ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This header defines the pass manager interface for codegen. The codegen; // pipeline consists of only machine function passes. There is no container; // relationship between IR module/function and machine function in terms of pass; // manager organization. So there is no need for adaptor classes (for example; // ModuleToMachineFunctionAdaptor). Since invalidation could only happen among; // machine function passes, there is no proxy classes to handle cross-IR-unit; // invalidation. IR analysis results are provided for machine function passes by; // their respective analysis managers such as ModuleAnalysisManager and; // FunctionAnalysisManager.; //; // TODO: Add MachineFunctionProperties support.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:50,Security,expose,exposes,50,/// An AnalysisManager<MachineFunction> that also exposes IR analysis results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:109,Availability,avail,available,109,/// Get the result of an analysis pass for a Function.; ///; /// Runs the analysis if a cached result is not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:88,Performance,cache,cached,88,/// Get the result of an analysis pass for a Function.; ///; /// Runs the analysis if a cached result is not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:12,Performance,cache,cached,12,/// Get the cached result of an analysis pass for a Function.; ///; /// This method never runs the analysis.; ///; /// \returns null if there is no cached result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:148,Performance,cache,cached,148,/// Get the cached result of an analysis pass for a Function.; ///; /// This method never runs the analysis.; ///; /// \returns null if there is no cached result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:107,Availability,avail,available,107,/// Get the result of an analysis pass for a Module.; ///; /// Runs the analysis if a cached result is not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:86,Performance,cache,cached,86,/// Get the result of an analysis pass for a Module.; ///; /// Runs the analysis if a cached result is not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:12,Performance,cache,cached,12,/// Get the cached result of an analysis pass for a Module.; ///; /// This method never runs the analysis.; ///; /// \returns null if there is no cached result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:146,Performance,cache,cached,146,/// Get the cached result of an analysis pass for a Module.; ///; /// This method never runs the analysis.; ///; /// \returns null if there is no cached result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:116,Availability,avail,available,116,/// Get the result of an analysis pass for a MachineFunction.; ///; /// Runs the analysis if a cached result is not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:95,Performance,cache,cached,95,/// Get the result of an analysis pass for a MachineFunction.; ///; /// Runs the analysis if a cached result is not available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:12,Performance,cache,cached,12,/// Get the cached result of an analysis pass for a MachineFunction.; ///; /// This method never runs the analysis.; ///; /// returns null if there is no cached result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:154,Performance,cache,cached,154,/// Get the cached result of an analysis pass for a MachineFunction.; ///; /// This method never runs the analysis.; ///; /// returns null if there is no cached result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:470,Availability,Error,Error,470,"/// MachineFunctionPassManager adds/removes below features to/from the base; /// PassManager template instantiation.; ///; /// - Support passes that implement doInitialization/doFinalization. This is for; /// machine function passes to work on module level constructs. One such pass; /// is AsmPrinter.; ///; /// - Support machine module pass which runs over the module (for example,; /// MachineOutliner). A machine module pass needs to define the method:; ///; /// ```Error run(Module &, MachineFunctionAnalysisManager &)```; ///; /// FIXME: machine module passes still need to define the usual machine; /// function pass interface, namely,; /// `PreservedAnalyses run(MachineFunction &,; /// MachineFunctionAnalysisManager &)`; /// But this interface wouldn't be executed. It is just a placeholder; /// to satisfy the pass manager type-erased inteface. This; /// special-casing of machine module pass is due to its limited use; /// cases and the unnecessary complexity it may bring to the machine; /// pass manager.; ///; /// - The base class `run` method is replaced by an alternative `run` method.; /// See details below.; ///; /// - Support codegening in the SCC order. Users include interprocedural; /// register allocation (IPRA).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:624,Integrability,interface,interface,624,"/// MachineFunctionPassManager adds/removes below features to/from the base; /// PassManager template instantiation.; ///; /// - Support passes that implement doInitialization/doFinalization. This is for; /// machine function passes to work on module level constructs. One such pass; /// is AsmPrinter.; ///; /// - Support machine module pass which runs over the module (for example,; /// MachineOutliner). A machine module pass needs to define the method:; ///; /// ```Error run(Module &, MachineFunctionAnalysisManager &)```; ///; /// FIXME: machine module passes still need to define the usual machine; /// function pass interface, namely,; /// `PreservedAnalyses run(MachineFunction &,; /// MachineFunctionAnalysisManager &)`; /// But this interface wouldn't be executed. It is just a placeholder; /// to satisfy the pass manager type-erased inteface. This; /// special-casing of machine module pass is due to its limited use; /// cases and the unnecessary complexity it may bring to the machine; /// pass manager.; ///; /// - The base class `run` method is replaced by an alternative `run` method.; /// See details below.; ///; /// - Support codegening in the SCC order. Users include interprocedural; /// register allocation (IPRA).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:744,Integrability,interface,interface,744,"/// MachineFunctionPassManager adds/removes below features to/from the base; /// PassManager template instantiation.; ///; /// - Support passes that implement doInitialization/doFinalization. This is for; /// machine function passes to work on module level constructs. One such pass; /// is AsmPrinter.; ///; /// - Support machine module pass which runs over the module (for example,; /// MachineOutliner). A machine module pass needs to define the method:; ///; /// ```Error run(Module &, MachineFunctionAnalysisManager &)```; ///; /// FIXME: machine module passes still need to define the usual machine; /// function pass interface, namely,; /// `PreservedAnalyses run(MachineFunction &,; /// MachineFunctionAnalysisManager &)`; /// But this interface wouldn't be executed. It is just a placeholder; /// to satisfy the pass manager type-erased inteface. This; /// special-casing of machine module pass is due to its limited use; /// cases and the unnecessary complexity it may bring to the machine; /// pass manager.; ///; /// - The base class `run` method is replaced by an alternative `run` method.; /// See details below.; ///; /// - Support codegening in the SCC order. Users include interprocedural; /// register allocation (IPRA).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h:88,Deployability,pipeline,pipeline,88,"/// Run machine passes for a Module.; ///; /// The intended use is to start the codegen pipeline for a Module. The base; /// class's `run` method is deliberately hidden by this due to the observation; /// that we don't yet have the use cases of compositing two instances of; /// machine pass managers, or compositing machine pass managers with other; /// types of pass managers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassManager.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h:749,Deployability,update,updated,749,"//===- llvm/CodeGen/MachinePassRegistry.h -----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the mechanics for machine function pass registries. A; // function pass registry (MachinePassRegistry) is auto filled by the static; // constructors of MachinePassRegistryNode. Further there is a command line; // parser (RegisterPassParser) which listens to each registry for additions; // and deletions, so that the appropriate command option is updated.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h:3,Security,Access,Accessors,3,// Accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h:97,Security,Access,Accessors,97,// NO CONSTRUCTOR - we don't want static constructor ordering to mess; // with the registry.; // Accessors.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePassRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:45,Deployability,Pipeline,Pipeliner,45,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:445,Deployability,pipeline,pipeliner,445,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:419,Energy Efficiency,Schedul,Scheduling,419,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:508,Energy Efficiency,schedul,scheduling,508,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:641,Energy Efficiency,Schedul,Scheduling,641,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:715,Energy Efficiency,schedul,schedules,715,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:862,Energy Efficiency,Schedul,Scheduling,862,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:1104,Energy Efficiency,Schedul,Scheduling,1104,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:1319,Energy Efficiency,Schedul,Scheduling,1319,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:1799,Energy Efficiency,schedul,schedule,1799,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:1591,Integrability,depend,dependence,1591,"//===- MachinePipeliner.h - Machine Software Pipeliner Pass -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // An implementation of the Swing Modulo Scheduling (SMS) software pipeliner.; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlap loop iterations and exploits ILP via a compiler transformation.; //; // Swing Modulo Scheduling is an implementation of software pipelining; // that generates schedules that are near optimal in terms of initiation; // interval, register requirements, and stage count. See the papers:; //; // ""Swing Modulo Scheduling: A Lifetime-Sensitive Approach"", by J. Llosa,; // A. Gonzalez, E. Ayguade, and M. Valero. In PACT '96 Proceedings of the 1996; // Conference on Parallel Architectures and Compilation Techiniques.; //; // ""Lifetime-Sensitive Modulo Scheduling in a Production Environment"", by J.; // Llosa, E. Ayguade, A. Gonzalez, M. Valero, and J. Eckhardt. In IEEE; // Transactions on Computers, Vol. 50, No. 3, 2001.; //; // ""An Implementation of Swing Modulo Scheduling With Extensions for; // Superblocks"", by T. Lattner, Master's Thesis, University of Illinois at; // Urbana-Champaign, 2005.; //; //; // The SMS algorithm consists of three main steps after computing the minimal; // initiation interval (MII).; // 1) Analyze the dependence graph and compute information about each; // instruction in the graph.; // 2) Order the nodes (instructions) by priority based upon the heuristics; // described in the algorithm.; // 3) Attempt to schedule the nodes in the specified order using the MII.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:81,Deployability,pipeline,pipeliner,81,/// The main class in the implementation of the target independent; /// software pipeliner pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:4,Performance,Cache,Cache,4,/// Cache the target analysis information about the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:96,Energy Efficiency,schedul,schedule,96,"/// This class builds the dependence graph for the instructions in a loop,; /// and attempts to schedule the instructions using the SMS algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:26,Integrability,depend,dependence,26,"/// This class builds the dependence graph for the instructions in a loop,; /// and attempts to schedule the instructions using the SMS algorithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:64,Energy Efficiency,schedul,schedule,64,/// The minimum initiation interval between iterations for this schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:64,Energy Efficiency,schedul,schedule,64,/// The maximum initiation interval between iterations for this schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:27,Deployability,pipeline,pipelined,27,/// Set to true if a valid pipelined schedule is found for the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:37,Energy Efficiency,schedul,schedule,37,/// Set to true if a valid pipelined schedule is found for the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:75,Integrability,depend,dependences,75,"/// A toplogical ordering of the SUnits, which is needed for changing; /// dependences and iterating over the SUnits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:31,Energy Efficiency,schedul,scheduling,31,/// Computed node ordering for scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:51,Energy Efficiency,schedul,schedule,51,/// Instructions to change when emitting the final schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:22,Energy Efficiency,Schedul,ScheduleDAGTopologicalSort,22,// Node to Index from ScheduleDAGTopologicalSort,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:44,Energy Efficiency,schedul,scheduled,44,/// Return true if the loop kernel has been scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:51,Energy Efficiency,schedul,scheduled,51,/// Return the earliest time an instruction may be scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:48,Energy Efficiency,schedul,scheduled,48,/// Return the latest time an instruction my be scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:89,Energy Efficiency,schedul,scheduled,89,"/// The mobility function, which the number of slots in which; /// an instruction may be scheduled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:22,Integrability,depend,dependence,22,"/// The depth, in the dependence graph, for a node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:113,Performance,latency,latency,113,/// The maximum unweighted length of a path from an arbitrary node to the; /// given node in which each edge has latency 0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:23,Integrability,depend,dependence,23,"/// The height, in the dependence graph, for a node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:113,Performance,latency,latency,113,/// The maximum unweighted length of a path from the given node to an; /// arbitrary node in which each edge has latency 0,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:23,Integrability,depend,dependence,23,"/// Return true if the dependence is a back-edge in the data dependence graph.; /// Since the DAG doesn't contain cycles, we represent a cycle in the graph; /// using an anti dependence from a Phi to an instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:61,Integrability,depend,dependence,61,"/// Return true if the dependence is a back-edge in the data dependence graph.; /// Since the DAG doesn't contain cycles, we represent a cycle in the graph; /// using an anti dependence from a Phi to an instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:175,Integrability,depend,dependence,175,"/// Return true if the dependence is a back-edge in the data dependence graph.; /// Since the DAG doesn't contain cycles, we represent a cycle in the graph; /// using an anti dependence from a Phi to an instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:80,Integrability,depend,depends,80,"/// The distance function, which indicates that operation V of iteration I; /// depends on operations U of iteration I-distance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:107,Integrability,depend,dependence,107,// Instructions that feed a Phi have a distance of 1. Computing larger; // values for arrays requires data dependence information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:49,Energy Efficiency,schedul,schedule,49,/// Set the Minimum Initiation Interval for this schedule attempt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:49,Energy Efficiency,schedul,schedule,49,/// Set the Maximum Initiation Interval for this schedule attempt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:18,Energy Efficiency,schedul,scheduled,18,"/// The number of scheduled micro operations for each slot. Micro operations; /// are assumed to be scheduled one per cycle, starting with the cycle in; /// which the instruction is scheduled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:100,Energy Efficiency,schedul,scheduled,100,"/// The number of scheduled micro operations for each slot. Micro operations; /// are assumed to be scheduled one per cycle, starting with the cycle in; /// which the instruction is scheduled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:182,Energy Efficiency,schedul,scheduled,182,"/// The number of scheduled micro operations for each slot. Micro operations; /// are assumed to be scheduled one per cycle, starting with the cycle in; /// which the instruction is scheduled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:83,Availability,mask,mask,83,/// Each processor resource is associated with a so-called processor resource; /// mask. This vector allows to correlate processor resource IDs with; /// processor resource masks. There is exactly one element per each processor; /// resource declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:173,Availability,mask,masks,173,/// Each processor resource is associated with a so-called processor resource; /// mask. This vector allows to correlate processor resource IDs with; /// processor resource masks. There is exactly one element per each processor; /// resource declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:258,Energy Efficiency,schedul,scheduling,258,/// Each processor resource is associated with a so-called processor resource; /// mask. This vector allows to correlate processor resource IDs with; /// processor resource masks. There is exactly one element per each processor; /// resource declared by the scheduling model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:47,Energy Efficiency,schedul,scheduled,47,/// The number of micro operations that can be scheduled at a cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:65,Availability,avail,available,65,/// Check if the resources occupied by a machine instruction are available; /// in the current state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:30,Energy Efficiency,schedul,scheduled,30,"/// This class represents the scheduled code. The main data structure is a; /// map from scheduled cycle to instructions. During scheduling, the; /// data structure explicitly represents all stages/iterations. When; /// the algorithm finshes, the schedule is collapsed into a single stage,; /// which represents instructions from different loop iterations.; ///; /// The SMS algorithm allows negative values for cycles, so the first cycle; /// in the schedule is the smallest cycle value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:89,Energy Efficiency,schedul,scheduled,89,"/// This class represents the scheduled code. The main data structure is a; /// map from scheduled cycle to instructions. During scheduling, the; /// data structure explicitly represents all stages/iterations. When; /// the algorithm finshes, the schedule is collapsed into a single stage,; /// which represents instructions from different loop iterations.; ///; /// The SMS algorithm allows negative values for cycles, so the first cycle; /// in the schedule is the smallest cycle value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:129,Energy Efficiency,schedul,scheduling,129,"/// This class represents the scheduled code. The main data structure is a; /// map from scheduled cycle to instructions. During scheduling, the; /// data structure explicitly represents all stages/iterations. When; /// the algorithm finshes, the schedule is collapsed into a single stage,; /// which represents instructions from different loop iterations.; ///; /// The SMS algorithm allows negative values for cycles, so the first cycle; /// in the schedule is the smallest cycle value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:247,Energy Efficiency,schedul,schedule,247,"/// This class represents the scheduled code. The main data structure is a; /// map from scheduled cycle to instructions. During scheduling, the; /// data structure explicitly represents all stages/iterations. When; /// the algorithm finshes, the schedule is collapsed into a single stage,; /// which represents instructions from different loop iterations.; ///; /// The SMS algorithm allows negative values for cycles, so the first cycle; /// in the schedule is the smallest cycle value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:451,Energy Efficiency,schedul,schedule,451,"/// This class represents the scheduled code. The main data structure is a; /// map from scheduled cycle to instructions. During scheduling, the; /// data structure explicitly represents all stages/iterations. When; /// the algorithm finshes, the schedule is collapsed into a single stage,; /// which represents instructions from different loop iterations.; ///; /// The SMS algorithm allows negative values for cycles, so the first cycle; /// in the schedule is the smallest cycle value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:47,Energy Efficiency,schedul,schedule,47,"/// Keep track of the first cycle value in the schedule. It starts; /// as zero, but the algorithm allows negative values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:46,Energy Efficiency,schedul,schedule,46,/// Keep track of the last cycle value in the schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:41,Energy Efficiency,schedul,schedule,41,/// The initiation interval (II) for the schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:41,Energy Efficiency,schedul,schedule,41,/// Set the initiation interval for this schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:44,Energy Efficiency,schedul,schedule,44,/// Return the initiation interval for this schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:44,Energy Efficiency,schedul,schedule,44,/// Return the first cycle in the completed schedule. This; /// can be a negative value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:43,Energy Efficiency,schedul,schedule,43,/// Return the last cycle in the finalized schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:37,Energy Efficiency,schedul,scheduled,37,/// Return the cycle of the earliest scheduled instruction in the dependence; /// chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:66,Integrability,depend,dependence,66,/// Return the cycle of the earliest scheduled instruction in the dependence; /// chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:35,Energy Efficiency,schedul,scheduled,35,/// Return the cycle of the latest scheduled instruction in the dependence; /// chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:64,Integrability,depend,dependence,64,/// Return the cycle of the latest scheduled instruction in the dependence; /// chain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:38,Energy Efficiency,schedul,scheduled,38,/// Return true if the instruction is scheduled at the specified stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:27,Energy Efficiency,schedul,scheduled,27,/// Return the stage for a scheduled instruction. Return -1 if; /// the instruction has not been scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:97,Energy Efficiency,schedul,scheduled,97,/// Return the stage for a scheduled instruction. Return -1 if; /// the instruction has not been scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:27,Energy Efficiency,schedul,scheduled,27,/// Return the cycle for a scheduled instruction. This function normalizes; /// the first cycle to be 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:51,Energy Efficiency,schedul,schedule,51,/// Return the maximum stage count needed for this schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h:37,Energy Efficiency,schedul,scheduled,37,/// Return the instructions that are scheduled at the specified cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePipeliner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h:401,Integrability,interface,interfaces,401,"//===- llvm/CodeGen/MachinePostDominators.h ----------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes interfaces to post dominance information for; // target-specific code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h:393,Security,expose,exposes,393,"//===- llvm/CodeGen/MachinePostDominators.h ----------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file exposes interfaces to post dominance information for; // target-specific code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h:53,Integrability,wrap,wrapper,53,///; /// MachinePostDominatorTree - an analysis pass wrapper for DominatorTree; /// used to compute the post-dominator tree for MachineFunctions.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachinePostDominators.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h:3,Deployability,update,updateStatistics,3,// updateStatistics - Update statistic about created regions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h:22,Deployability,Update,Update,22,// updateStatistics - Update statistic about created regions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h:30,Integrability,interface,interface,30,/// @name MachineFunctionPass interface; //@{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:12,Availability,recover,recovering,12,/// Map for recovering vreg name from vreg number.; /// This map is used by the MIR Printer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:12,Safety,recover,recovering,12,/// Map for recovering vreg name from vreg number.; /// This map is used by the MIR Printer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:29,Deployability,Update,UpdatedCSRs,29,/// The flag is true upon \p UpdatedCSRs initialization; /// and false otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:17,Deployability,update,updated,17,"/// Contains the updated callee saved register list.; /// As opposed to the static list defined in register info,; /// all registers that were disabled are removed from the list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:445,Energy Efficiency,allocate,allocated,445,"/// RegAllocHints - This vector records register allocation hints for; /// virtual registers. For each virtual register, it keeps a pair of hint; /// type and hints vector making up the allocation hints. Only the first; /// hint may be target specific, and in that case this is reflected by the; /// first member of the pair being non-zero. If the hinted register is; /// virtual, it means the allocator should prefer the physical register; /// allocated to it if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:202,Deployability,update,updated,202,//===--------------------------------------------------------------------===//; // Register Info; //===--------------------------------------------------------------------===//; /// Returns true if the updated CSR list was initialized and false otherwise.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:107,Availability,mask,mask,107,/// Disables the register from the list of CSRs.; /// I.e. the register will not appear as part of the CSR mask.; /// \see UpdatedCalleeSavedRegs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:123,Deployability,Update,UpdatedCalleeSavedRegs,123,/// Disables the register from the list of CSRs.; /// I.e. the register will not appear as part of the CSR mask.; /// \see UpdatedCalleeSavedRegs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:74,Deployability,update,updated,74,/// Returns list of callee saved registers.; /// The function returns the updated CSR list (after taking into account; /// registers that are disabled from the CSR list).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:13,Deployability,update,updated,13,/// Sets the updated Callee Saved Registers list.; /// Notice that it will override ant previously disabled/saved CSRs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:30,Security,access,access,30,// Make it a friend so it can access getNextOperandForReg().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:179,Modifiability,extend,extend,179,/// clearKillFlags - Iterate over all the uses of the given register and; /// clear the kill flag from the MachineOperand. This function is used by; /// optimization passes which extend register lifetimes and need only; /// preserve conservative kill flag information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:153,Performance,optimiz,optimization,153,/// clearKillFlags - Iterate over all the uses of the given register and; /// clear the kill flag from the MachineOperand. This function is used by; /// optimization passes which extend register lifetimes and need only; /// preserve conservative kill flag information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:4,Usability,clear,clearKillFlags,4,/// clearKillFlags - Iterate over all the uses of the given register and; /// clear the kill flag from the MachineOperand. This function is used by; /// optimization passes which extend register lifetimes and need only; /// preserve conservative kill flag information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:78,Usability,clear,clear,78,/// clearKillFlags - Iterate over all the uses of the given register and; /// clear the kill flag from the MachineOperand. This function is used by; /// optimization passes which extend register lifetimes and need only; /// preserve conservative kill flag information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:535,Safety,safe,safe,535,"/// Return the register class of \p Reg, or null if Reg has not been assigned; /// a register class yet.; ///; /// \note A null register class can only happen when these two; /// conditions are met:; /// 1. Generic virtual registers are created.; /// 2. The machine function has not completely been through the; /// instruction selection process.; /// None of this condition is possible without GlobalISel for now.; /// In other words, if GlobalISel is not used or if the query happens after; /// the select pass, using getRegClass is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:184,Deployability,upgrade,upgraded,184,"/// recomputeRegClass - Try to find a legal super-class of Reg's register; /// class that still satisfies the constraints from the instructions using; /// Reg. Returns true if Reg was upgraded.; ///; /// This method can be used after constraints have been removed from a; /// virtual register, for example after removing instructions or splitting; /// the live range.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:4,Usability,clear,clearVirtRegs,4,/// clearVirtRegs - Remove all virtual registers (after physreg assignment).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:4,Deployability,update,updateDbgUsersToReg,4,/// updateDbgUsersToReg - Update a collection of debug instructions; /// to refer to the designated register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:26,Deployability,Update,Update,26,/// updateDbgUsersToReg - Update a collection of debug instructions; /// to refer to the designated register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:65,Deployability,update,update,65,"// Iterate through (possibly several) operands to DBG_VALUEs and update; // each. For DBG_PHIs, only one operand will be present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:109,Availability,mask,mask,109,/// addPhysRegsUsedFromRegMask - Mark any registers not in RegMask as used.; /// This corresponds to the bit mask attached to register mask operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:135,Availability,mask,mask,135,/// addPhysRegsUsedFromRegMask - Mark any registers not in RegMask as used.; /// This corresponds to the bit mask attached to register mask operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:512,Safety,avoid,avoid,512,"//===--------------------------------------------------------------------===//; // Reserved Register Info; //===--------------------------------------------------------------------===//; //; // The set of reserved registers must be invariant during register; // allocation. For example, the target cannot suddenly decide it needs a; // frame pointer when the register allocator has already used the frame; // pointer register for something else.; //; // These methods can be used by target hooks like hasFP() to avoid changing; // the reserved register set during register allocation.; /// freezeReservedRegs - Called by the register allocator to freeze the set; /// of reserved registers before allocation begins.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:200,Availability,avail,available,200,"/// reserveReg -- Mark a register as reserved so checks like isAllocatable ; /// will not suggest using it. This should not be used during the middle; /// of a function walk, or when liveness info is available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:281,Availability,avail,availability,281,"/// isAllocatable - Returns true when PhysReg belongs to an allocatable; /// register class and it hasn't been reserved.; ///; /// Allocatable registers may show up in the allocation order of some virtual; /// register, so a register allocator needs to track its liveness and; /// availability.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:263,Availability,error,error,263,//===--------------------------------------------------------------------===//; // LiveIn Management; //===--------------------------------------------------------------------===//; /// addLiveIn - Add the specified register as a live-in. Note that it; /// is an error to add the same register to the same set more than once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:14,Availability,mask,mask,14,/// Returns a mask covering all bits that can appear in lane masks of; /// subregisters of the virtual register @p Reg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h:61,Availability,mask,masks,61,/// Returns a mask covering all bits that can appear in lane masks of; /// subregisters of the virtual register @p Reg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:41,Energy Efficiency,Schedul,Scheduling,41,"//===- MachineScheduler.h - MachineInstr Scheduling Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // Sche",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:762,Energy Efficiency,schedul,scheduled,762,"//===- MachineScheduler.h - MachineInstr Scheduling Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // Sche",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:814,Energy Efficiency,schedul,scheduler,814,"//===- MachineScheduler.h - MachineInstr Scheduling Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // Sche",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:875,Energy Efficiency,Schedul,ScheduleDAGInstrs,875,"//===- MachineScheduler.h - MachineInstr Scheduling Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // Sche",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1036,Energy Efficiency,schedul,scheduler,1036,"//===- MachineScheduler.h - MachineInstr Scheduling Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // Sche",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1047,Energy Efficiency,Schedul,ScheduleDAGMILive,1047,"//===- MachineScheduler.h - MachineInstr Scheduling Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // Sche",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1101,Energy Efficiency,schedul,scheduling,1101,"//===- MachineScheduler.h - MachineInstr Scheduling Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // Sche",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1259,Energy Efficiency,schedul,scheduler,1259,"tion; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the fol",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1305,Energy Efficiency,schedul,scheduling,1305,"tion; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the fol",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1472,Energy Efficiency,Schedul,ScheduleDAGInstrs,1472,"assManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1580,Energy Efficiency,Schedul,ScheduleDAGMILive,1580,"assManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1762,Energy Efficiency,schedul,scheduling,1762,"assManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1900,Energy Efficiency,Schedul,ScheduleDAGInstrs,1900,"eScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsign",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1997,Energy Efficiency,Schedul,ScheduleDAGMI,1997,"eScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsign",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:2160,Energy Efficiency,schedul,schedulers,2160," DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsigned NumRegionInstrs) const {; // Policy.<Flag> = true;; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:2320,Energy Efficiency,Schedul,ScheduleDAGInstrs,2320," DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsigned NumRegionInstrs) const {; // Policy.<Flag> = true;; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:2528,Energy Efficiency,schedul,scheduler,2528," DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsigned NumRegionInstrs) const {; // Policy.<Flag> = true;; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:2724,Energy Efficiency,schedul,scheduler,2724," DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsigned NumRegionInstrs) const {; // Policy.<Flag> = true;; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:2756,Energy Efficiency,schedul,scheduling,2756," DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsigned NumRegionInstrs) const {; // Policy.<Flag> = true;; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:405,Integrability,interface,interface,405,"//===- MachineScheduler.h - MachineInstr Scheduling Pass --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // Sche",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1803,Integrability,depend,dependencies,1803,"eScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsign",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1335,Modifiability,plugin,plugin,1335,"tion; //; //===----------------------------------------------------------------------===//; //; // This file provides an interface for customizing the standard MachineScheduler; // pass. Note that the entire pass may be replaced as follows:; //; // <Target>TargetMachine::createPassConfig(PassManagerBase &PM) {; // PM.substitutePass(&MachineSchedulerID, &CustomSchedulerPassID);; // ...}; //; // The MachineScheduler pass is only responsible for choosing the regions to be; // scheduled. Targets can override the DAG builder and scheduler without; // replacing the pass as follows:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; //; // The default scheduler, ScheduleDAGMILive, builds the DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the fol",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:2672,Modifiability,config,configure,2672," DAG and drives list; // scheduling while updating the instruction stream, register pressure, and live; // intervals. Most targets don't need to override the DAG builder and list; // scheduler, but subtargets that require custom scheduling heuristics may; // plugin an alternate MachineSchedStrategy. The strategy is responsible for; // selecting the highest priority node from the list:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // return new ScheduleDAGMILive(C, CustomStrategy(C));; // }; //; // The DAG builder can also be customized in a sense by adding DAG mutations; // that will run after DAG building and before list scheduling. DAG mutations; // can adjust dependencies based on target-specific knowledge or add weak edges; // to aid heuristics:; //; // ScheduleDAGInstrs *<Target>PassConfig::; // createMachineScheduler(MachineSchedContext *C) {; // ScheduleDAGMI *DAG = createGenericSchedLive(C);; // DAG->addMutation(new CustomDAGMutation(...));; // return DAG;; // }; //; // A target that supports alternative schedulers can use the; // MachineSchedRegistry to allow command line selection. This can be done by; // implementing the following boilerplate:; //; // static ScheduleDAGInstrs *createCustomMachineSched(MachineSchedContext *C) {; // return new CustomMachineScheduler(C);; // }; // static MachineSchedRegistry; // SchedCustomRegistry(""custom"", ""Run my target's custom scheduler"",; // createCustomMachineSched);; //; //; // Finally, subtargets that don't need to implement custom heuristics but would; // like to configure the GenericScheduler's policy for a given scheduler region,; // including scheduling direction and register pressure tracking policy, can do; // this:; //; // void <SubTarget>Subtarget::; // overrideSchedPolicy(MachineSchedPolicy &Policy,; // unsigned NumRegionInstrs) const {; // Policy.<Flag> = true;; // }; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:116,Energy Efficiency,schedul,scheduler,116,/// MachineSchedContext provides enough context from the MachineScheduler pass; /// for the target to instantiate a scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:49,Availability,avail,available,49,/// MachineSchedRegistry provides a selection of available machine instruction; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:84,Energy Efficiency,schedul,schedulers,84,/// MachineSchedRegistry provides a selection of available machine instruction; /// schedulers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:3,Security,Access,Accessors,3,// Accessors.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:21,Energy Efficiency,schedul,scheduling,21,/// Define a generic scheduling policy for targets that don't provide their own; /// MachineSchedStrategy. This can be overriden for each scheduling region; /// before building the DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:138,Energy Efficiency,schedul,scheduling,138,/// Define a generic scheduling policy for targets that don't provide their own; /// MachineSchedStrategy. This can be overriden for each scheduling region; /// before building the DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:13,Energy Efficiency,schedul,scheduler,13,// Allow the scheduler to disable register pressure tracking.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:36,Availability,down,down,36,"// Allow the scheduler to force top-down or bottom-up scheduling. If neither; // is true, the scheduler runs in both directions and converges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:13,Energy Efficiency,schedul,scheduler,13,"// Allow the scheduler to force top-down or bottom-up scheduling. If neither; // is true, the scheduler runs in both directions and converges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:54,Energy Efficiency,schedul,scheduling,54,"// Allow the scheduler to force top-down or bottom-up scheduling. If neither; // is true, the scheduler runs in both directions and converges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:94,Energy Efficiency,schedul,scheduler,94,"// Allow the scheduler to force top-down or bottom-up scheduling. If neither; // is true, the scheduler runs in both directions and converges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:57,Integrability,depend,dependency,57,// Disable heuristic that tries to fetch nodes from long dependency chains; // first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:32,Energy Efficiency,schedul,scheduling,32,// Compute DFSResult for use in scheduling heuristics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:44,Energy Efficiency,schedul,scheduling,44,/// MachineSchedStrategy - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Initialization sequence:; /// initPolicy -> shouldTrackPressure -> initialize(DAG) -> registerRoots,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:78,Energy Efficiency,Schedul,ScheduleDAGMI,78,/// MachineSchedStrategy - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Initialization sequence:; /// initPolicy -> shouldTrackPressure -> initialize(DAG) -> registerRoots,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:27,Integrability,Interface,Interface,27,/// MachineSchedStrategy - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Initialization sequence:; /// initPolicy -> shouldTrackPressure -> initialize(DAG) -> registerRoots,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:39,Energy Efficiency,schedul,scheduling,39,/// Optionally override the per-region scheduling policy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:48,Energy Efficiency,schedul,scheduling,48,"// If this method returns true, handling of the scheduling regions; // themselves (in case of a scheduling boundary in MBB) will be done; // beginning with the topmost region of MBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:96,Energy Efficiency,schedul,scheduling,96,"// If this method returns true, handling of the scheduling regions; // themselves (in case of a scheduling boundary in MBB) will be done; // beginning with the topmost region of MBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:50,Deployability,release,released,50,/// Notify this strategy that all roots have been released (including those; /// that depend on EntrySU or ExitSU).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:86,Integrability,depend,depend,86,/// Notify this strategy that all roots have been released (including those; /// that depend on EntrySU or ExitSU).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:26,Energy Efficiency,schedul,schedule,26,"/// Pick the next node to schedule, or return NULL. Set IsTopNode to true to; /// schedule the node at the top of the unscheduled region. Otherwise it will; /// be scheduled at the bottom.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:82,Energy Efficiency,schedul,schedule,82,"/// Pick the next node to schedule, or return NULL. Set IsTopNode to true to; /// schedule the node at the top of the unscheduled region. Otherwise it will; /// be scheduled at the bottom.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:164,Energy Efficiency,schedul,scheduled,164,"/// Pick the next node to schedule, or return NULL. Set IsTopNode to true to; /// schedule the node at the top of the unscheduled region. Otherwise it will; /// be scheduled at the bottom.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:4,Energy Efficiency,Schedul,Scheduler,4,/// Scheduler callback to notify that a new subtree is scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:55,Energy Efficiency,schedul,scheduled,55,/// Scheduler callback to notify that a new subtree is scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:89,Deployability,update,updated,89,/// Notify MachineSchedStrategy that ScheduleDAGMI has scheduled an; /// instruction and updated scheduled/remaining flags in the DAG nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:37,Energy Efficiency,Schedul,ScheduleDAGMI,37,/// Notify MachineSchedStrategy that ScheduleDAGMI has scheduled an; /// instruction and updated scheduled/remaining flags in the DAG nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:55,Energy Efficiency,schedul,scheduled,55,/// Notify MachineSchedStrategy that ScheduleDAGMI has scheduled an; /// instruction and updated scheduled/remaining flags in the DAG nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:97,Energy Efficiency,schedul,scheduled,97,/// Notify MachineSchedStrategy that ScheduleDAGMI has scheduled an; /// instruction and updated scheduled/remaining flags in the DAG nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:86,Availability,down,down,86,"/// When all predecessor dependencies have been resolved, free this node for; /// top-down scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:91,Energy Efficiency,schedul,scheduling,91,"/// When all predecessor dependencies have been resolved, free this node for; /// top-down scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:25,Integrability,depend,dependencies,25,"/// When all predecessor dependencies have been resolved, free this node for; /// top-down scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:90,Energy Efficiency,schedul,scheduling,90,"/// When all successor dependencies have been resolved, free this node for; /// bottom-up scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:23,Integrability,depend,dependencies,23,"/// When all successor dependencies have been resolved, free this node for; /// bottom-up scheduling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:4,Energy Efficiency,Schedul,ScheduleDAGMI,4,/// ScheduleDAGMI is an implementation of ScheduleDAGInstrs that simply; /// schedules machine instructions according to the given MachineSchedStrategy; /// without much extra book-keeping. This is the common functionality between; /// PreRA and PostRA MachineScheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:42,Energy Efficiency,Schedul,ScheduleDAGInstrs,42,/// ScheduleDAGMI is an implementation of ScheduleDAGInstrs that simply; /// schedules machine instructions according to the given MachineSchedStrategy; /// without much extra book-keeping. This is the common functionality between; /// PreRA and PostRA MachineScheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:77,Energy Efficiency,schedul,schedules,77,/// ScheduleDAGMI is an implementation of ScheduleDAGInstrs that simply; /// schedules machine instructions according to the given MachineSchedStrategy; /// without much extra book-keeping. This is the common functionality between; /// PreRA and PostRA MachineScheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:65,Usability,simpl,simply,65,/// ScheduleDAGMI is an implementation of ScheduleDAGInstrs that simply; /// schedules machine instructions according to the given MachineSchedStrategy; /// without much extra book-keeping. This is the common functionality between; /// PreRA and PostRA MachineScheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:30,Energy Efficiency,schedul,scheduled,30,/// Record the next node in a scheduled cluster.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:31,Energy Efficiency,schedul,scheduled,31,/// The number of instructions scheduled so far. Used to cut off the; /// scheduler at the point determined by misched-cutoff.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:74,Energy Efficiency,schedul,scheduler,74,/// The number of instructions scheduled so far. Used to cut off the; /// scheduler at the point determined by misched-cutoff.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:49,Energy Efficiency,schedul,scheduling,49,"/// If this method returns true, handling of the scheduling regions; /// themselves (in case of a scheduling boundary in MBB) will be done; /// beginning with the topmost region of MBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:98,Energy Efficiency,schedul,scheduling,98,"/// If this method returns true, handling of the scheduling regions; /// themselves (in case of a scheduling boundary in MBB) will be done; /// beginning with the topmost region of MBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:199,Energy Efficiency,Schedul,ScheduleDAGMI,199,/// Add a postprocessing step to the DAG builder.; /// Mutations are applied in the order that they are added after normal DAG; /// building and before MachineSchedStrategy initialization.; ///; /// ScheduleDAGMI takes ownership of the Mutation object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:18,Energy Efficiency,Schedul,ScheduleDAGInstrs,18,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:68,Energy Efficiency,schedul,scheduling,68,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:139,Energy Efficiency,schedul,schedule,139,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:36,Integrability,interface,interface,36,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:14,Energy Efficiency,Schedul,ScheduleDAGInstrs,14,/// Implement ScheduleDAGInstrs interface for scheduling a sequence of; /// reorderable instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:46,Energy Efficiency,schedul,scheduling,46,/// Implement ScheduleDAGInstrs interface for scheduling a sequence of; /// reorderable instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:32,Integrability,interface,interface,32,/// Implement ScheduleDAGInstrs interface for scheduling a sequence of; /// reorderable instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:69,Deployability,update,update,69,/// Change the position of an instruction within the basic block and update; /// live ranges and region boundary iterators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:34,Energy Efficiency,schedul,schedule,34,// Top-Level entry points for the schedule() driver...; /// Apply each ScheduleDAGMutation step in order. This allows different; /// instances of ScheduleDAGMI to perform custom DAG postprocessing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:71,Energy Efficiency,Schedul,ScheduleDAGMutation,71,// Top-Level entry points for the schedule() driver...; /// Apply each ScheduleDAGMutation step in order. This allows different; /// instances of ScheduleDAGMI to perform custom DAG postprocessing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:146,Energy Efficiency,Schedul,ScheduleDAGMI,146,// Top-Level entry points for the schedule() driver...; /// Apply each ScheduleDAGMutation step in order. This allows different; /// instances of ScheduleDAGMI to perform custom DAG postprocessing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:163,Performance,perform,perform,163,// Top-Level entry points for the schedule() driver...; /// Apply each ScheduleDAGMutation step in order. This allows different; /// instances of ScheduleDAGMI to perform custom DAG postprocessing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:4,Deployability,Release,Release,4,/// Release ExitSU predecessors and setup scheduler queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:42,Energy Efficiency,schedul,scheduler,42,/// Release ExitSU predecessors and setup scheduler queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:52,Performance,queue,queues,52,/// Release ExitSU predecessors and setup scheduler queues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:4,Deployability,Update,Update,4,/// Update scheduler DAG and queues after scheduling an instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:11,Energy Efficiency,schedul,scheduler,11,/// Update scheduler DAG and queues after scheduling an instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:42,Energy Efficiency,schedul,scheduling,42,/// Update scheduler DAG and queues after scheduling an instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:29,Performance,queue,queues,29,/// Update scheduler DAG and queues after scheduling an instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:38,Energy Efficiency,Schedul,ScheduleDAGInstrs,38,/// Reinsert debug_values recorded in ScheduleDAGInstrs::DbgValues.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:13,Energy Efficiency,schedul,scheduled,13,/// dump the scheduled Sequence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:46,Availability,down,down,46,/// Print execution trace of the schedule top-down or bottom-up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:33,Energy Efficiency,schedul,schedule,33,/// Print execution trace of the schedule top-down or bottom-up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:4,Energy Efficiency,Schedul,ScheduleDAGMILive,4,/// ScheduleDAGMILive is an implementation of ScheduleDAGInstrs that schedules; /// machine instructions while updating LiveIntervals and tracking regpressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:46,Energy Efficiency,Schedul,ScheduleDAGInstrs,46,/// ScheduleDAGMILive is an implementation of ScheduleDAGInstrs that schedules; /// machine instructions while updating LiveIntervals and tracking regpressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:69,Energy Efficiency,schedul,schedules,69,/// ScheduleDAGMILive is an implementation of ScheduleDAGInstrs that schedules; /// machine instructions while updating LiveIntervals and tracking regpressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:63,Energy Efficiency,Schedul,SchedulerTrees,63,"/// Information about DAG subtrees. If DFSResult is NULL, then SchedulerTrees; /// will be empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:58,Energy Efficiency,schedul,scheduling,58,/// Maps vregs to the SUnits of their uses in the current scheduling region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:123,Availability,down,down,123,// Map each SU to its summary of pressure changes. This array is updated for; // liveness during bottom-up scheduling. Top-down scheduling may proceed but; // has no affect on the pressure diffs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:65,Deployability,update,updated,65,// Map each SU to its summary of pressure changes. This array is updated for; // liveness during bottom-up scheduling. Top-down scheduling may proceed but; // has no affect on the pressure diffs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:107,Energy Efficiency,schedul,scheduling,107,// Map each SU to its summary of pressure changes. This array is updated for; // liveness during bottom-up scheduling. Top-down scheduling may proceed but; // has no affect on the pressure diffs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:128,Energy Efficiency,schedul,scheduling,128,// Map each SU to its summary of pressure changes. This array is updated for; // liveness during bottom-up scheduling. Top-down scheduling may proceed but; // has no affect on the pressure diffs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:78,Energy Efficiency,schedul,scheduling,78,"/// List of pressure sets that exceed the target's pressure limit before; /// scheduling, listed in increasing set ID order. Each pressure set is paired; /// with its max pressure in the currently scheduled regions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:197,Energy Efficiency,schedul,scheduled,197,"/// List of pressure sets that exceed the target's pressure limit before; /// scheduling, listed in increasing set ID order. Each pressure set is paired; /// with its max pressure in the currently scheduled regions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:46,Energy Efficiency,schedul,scheduled,46,/// Get current register pressure for the top scheduled instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:49,Energy Efficiency,schedul,scheduled,49,/// Get current register pressure for the bottom scheduled instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:41,Energy Efficiency,schedul,scheduling,41,/// Get register pressure for the entire scheduling region before scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:66,Energy Efficiency,schedul,scheduling,66,/// Get register pressure for the entire scheduling region before scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:76,Performance,queue,queue,76,"/// Compute a DFSResult after DAG building is complete, and before any; /// queue comparisons.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:40,Energy Efficiency,schedul,scheduling,40,/// Return a non-null DFS result if the scheduling strategy initialized it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:18,Energy Efficiency,Schedul,ScheduleDAGInstrs,18,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:68,Energy Efficiency,schedul,scheduling,68,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:139,Energy Efficiency,schedul,schedule,139,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:36,Integrability,interface,interface,36,"/// Implement the ScheduleDAGInstrs interface for handling the next scheduling; /// region. This covers all instructions in a block, while schedule() may only; /// cover a subset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:14,Energy Efficiency,Schedul,ScheduleDAGInstrs,14,/// Implement ScheduleDAGInstrs interface for scheduling a sequence of; /// reorderable instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:46,Energy Efficiency,schedul,scheduling,46,/// Implement ScheduleDAGInstrs interface for scheduling a sequence of; /// reorderable instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:32,Integrability,interface,interface,32,/// Implement ScheduleDAGInstrs interface for scheduling a sequence of; /// reorderable instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:34,Energy Efficiency,schedul,schedule,34,"// Top-Level entry points for the schedule() driver...; /// Call ScheduleDAGInstrs::buildSchedGraph with register pressure tracking; /// enabled. This sets up three trackers. RPTracker will cover the entire DAG; /// region, TopTracker and BottomTracker will be initialized to the top and; /// bottom of the DAG region without covereing any unscheduled instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:65,Energy Efficiency,Schedul,ScheduleDAGInstrs,65,"// Top-Level entry points for the schedule() driver...; /// Call ScheduleDAGInstrs::buildSchedGraph with register pressure tracking; /// enabled. This sets up three trackers. RPTracker will cover the entire DAG; /// region, TopTracker and BottomTracker will be initialized to the top and; /// bottom of the DAG region without covereing any unscheduled instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:4,Deployability,Release,Release,4,/// Release ExitSU predecessors and setup scheduler queues. Re-position; /// the Top RP tracker in case the region beginning has changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:42,Energy Efficiency,schedul,scheduler,42,/// Release ExitSU predecessors and setup scheduler queues. Re-position; /// the Top RP tracker in case the region beginning has changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:52,Performance,queue,queues,52,/// Release ExitSU predecessors and setup scheduler queues. Re-position; /// the Top RP tracker in case the region beginning has changed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:28,Deployability,update,update,28,/// Move an instruction and update register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:523,Availability,mask,mask,523,"//===----------------------------------------------------------------------===//; ///; /// Helpers for implementing custom MachineSchedStrategy classes. These take; /// care of the book-keeping associated with list scheduling heuristics.; ///; //===----------------------------------------------------------------------===//; /// ReadyQueue encapsulates vector of ""ready"" SUnits with basic convenience; /// methods for pushing and removing nodes. ReadyQueue's are uniquely identified; /// by an ID. SUnit::NodeQueueId is a mask of the ReadyQueues the SUnit is in.; ///; /// This is a convenience class that may be used by implementations of; /// MachineSchedStrategy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:215,Energy Efficiency,schedul,scheduling,215,"//===----------------------------------------------------------------------===//; ///; /// Helpers for implementing custom MachineSchedStrategy classes. These take; /// care of the book-keeping associated with list scheduling heuristics.; ///; //===----------------------------------------------------------------------===//; /// ReadyQueue encapsulates vector of ""ready"" SUnits with basic convenience; /// methods for pushing and removing nodes. ReadyQueue's are uniquely identified; /// by an ID. SUnit::NodeQueueId is a mask of the ReadyQueues the SUnit is in.; ///; /// This is a convenience class that may be used by implementations of; /// MachineSchedStrategy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:17,Performance,queue,queue,17,// SU is in this queue if it's NodeQueueID is a superset of this ID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:45,Performance,latency,latency,45,// Critical path through the DAG in expected latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:37,Energy Efficiency,schedul,schedule,37,// Scaled count of micro-ops left to schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:345,Testability,assert,assertion,345,"/// Adds an interval [a, b) to the collection of the instance.; ///; /// When adding [a, b[ to the collection, the operation merges the; /// adjacent intervals. For example; ///; /// 0 1 2 3 4 5 6 7 8 9 10; /// [-----) [--) [--); /// + [--); /// = [-----------) [--); ///; /// To be able to debug duplicate resource usage, the function has; /// assertion that checks that no interval should be added if it; /// overlaps any of the intervals in the collection. We can; /// require this because by definition a \ref ResourceSegments is; /// attached only to an individual resource instance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:659,Availability,DOWN,DOWN,659,"/// These function return the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resou",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1071,Availability,down,down,1071," the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (Releas",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:265,Deployability,Release,ReleaseAtCycle,265,"/// These function return the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resou",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1127,Deployability,Release,ReleaseAtCycle,1127," the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (Releas",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1884,Deployability,Release,ReleaseAtCycle,1884,"urce in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (ReleaseAtCycle - AcquireAtCycle).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:2020,Deployability,Release,ReleaseAtCycle,2020,"urce in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (ReleaseAtCycle - AcquireAtCycle).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:81,Energy Efficiency,schedul,scheduling,81,"/// These function return the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resou",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:541,Energy Efficiency,schedul,schedule,541,"/// These function return the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resou",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:664,Energy Efficiency,SCHEDUL,SCHEDULING,664,"/// These function return the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resou",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:692,Energy Efficiency,schedul,scheduling,692,"/// These function return the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resou",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1043,Energy Efficiency,schedul,scheduled,1043," the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (Releas",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1081,Energy Efficiency,schedul,scheduling,1081," the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (Releas",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1170,Energy Efficiency,SCHEDUL,SCHEDULING,1170," the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (Releas",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1198,Energy Efficiency,schedul,scheduling,1198," the interval used by a resource in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (Releas",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1289,Energy Efficiency,schedul,scheduling,1289,"urce in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (ReleaseAtCycle - AcquireAtCycle).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1305,Energy Efficiency,schedul,scheduling,1305,"urce in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (ReleaseAtCycle - AcquireAtCycle).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1431,Energy Efficiency,schedul,scheduled,1431,"urce in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (ReleaseAtCycle - AcquireAtCycle).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1478,Energy Efficiency,allocate,allocated,1478,"urce in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (ReleaseAtCycle - AcquireAtCycle).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1817,Energy Efficiency,schedul,scheduled,1817,"urce in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (ReleaseAtCycle - AcquireAtCycle).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1856,Energy Efficiency,schedul,scheduling,1856,"urce in bottom and top; /// scheduling.; ///; /// Consider an instruction that uses resources X0, X1 and X2 as follows:; ///; /// X0 X1 X1 X2 +--------+-------------+--------------+; /// |Resource|AcquireAtCycle|ReleaseAtCycle|; /// +--------+-------------+--------------+; /// | X0 | 0 | 1 |; /// +--------+-------------+--------------+; /// | X1 | 1 | 3 |; /// +--------+-------------+--------------+; /// | X2 | 3 | 4 |; /// +--------+-------------+--------------+; ///; /// If we can schedule the instruction at cycle C, we need to; /// compute the interval of the resource as follows:; ///; /// # TOP DOWN SCHEDULING; ///; /// Cycles scheduling flows to the _right_, in the same direction; /// of time.; ///; /// C 1 2 3 4 5 ...; /// ------|------|------|------|------|------|----->; /// X0 X1 X1 X2 ---> direction of time; /// X0 [C, C+1); /// X1 [C+1, C+3); /// X2 [C+3, C+4); ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in top-down; /// scheduling is:; ///; /// [C+AcquireAtCycle, C+ReleaseAtCycle); ///; ///; /// # BOTTOM UP SCHEDULING; ///; /// Cycles scheduling flows to the _left_, in opposite direction; /// of time.; ///; /// In bottom up scheduling, the scheduling happens in opposite; /// direction to the execution of the cycles of the; /// instruction. When the instruction is scheduled at cycle `C`,; /// the resources are allocated in the past relative to `C`:; ///; /// 2 1 C -1 -2 -3 -4 -5 ...; /// <-----|------|------|------|------|------|------|------|---; /// X0 X1 X1 X2 ---> direction of time; /// X0 (C+1, C]; /// X1 (C, C-2]; /// X2 (C-2, C-3]; ///; /// Therefore, the formula to compute the interval for a resource; /// of an instruction that can be scheduled at cycle C in bottom-up; /// scheduling is:; ///; /// [C-ReleaseAtCycle+1, C-AcquireAtCycle+1); ///; ///; /// NOTE: In both cases, the number of cycles booked by a; /// resources is the value (ReleaseAtCycle - AcquireAtCycle).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1440,Availability,down,down,1440,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1695,Availability,down,down,1695,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:247,Deployability,Release,ReleaseAtCycle,247,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:860,Deployability,Release,ReleaseAtCycle,860,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:53,Energy Efficiency,allocate,allocated,53,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:660,Energy Efficiency,allocate,allocated,660,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1036,Energy Efficiency,schedul,scheduling,1036,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1266,Energy Efficiency,schedul,scheduling,1266,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1551,Energy Efficiency,schedul,scheduling,1551,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:1700,Energy Efficiency,schedul,scheduling,1700,"/// Finds the first cycle in which a resource can be allocated.; ///; /// The function uses the \param IntervalBuider [*] to build a; /// resource interval [a, b[ out of the input parameters \param; /// CurrCycle, \param AcquireAtCycle and \param ReleaseAtCycle.; ///; /// The function then loops through the intervals in the ResourceSegments; /// and shifts the interval [a, b[ and the ReturnCycle to the; /// right until there is no intersection between the intervals of; /// the \ref ResourceSegments instance and the new shifted [a, b[. When; /// this condition is met, the ReturnCycle (which; /// correspond to the cycle in which the resource can be; /// allocated) is returned.; ///; /// c = CurrCycle in input; /// c 1 2 3 4 5 6 7 8 9 10 ... ---> (time; /// flow); /// ResourceSegments... [---) [-------) [-----------); /// c [1 3[ -> AcquireAtCycle=1, ReleaseAtCycle=3; /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3); /// ++c [1 3) ---> returns c; /// incremented by 5 (c+5); ///; ///; /// Notice that for bottom-up scheduling the diagram is slightly; /// different because the current cycle c is always on the right; /// of the interval [a, b) (see \ref; /// `getResourceIntervalBottom`). This is because the cycle; /// increments for bottom-up scheduling moved in the direction; /// opposite to the direction of time:; ///; /// --------> direction of time.; /// XXYZZZ (resource usage); /// --------> direction of top-down execution cycles.; /// <-------- direction of bottom-up execution cycles.; ///; /// Even though bottom-up scheduling moves against the flow of; /// time, the algorithm used to find the first free slot in between; /// intervals is the same as for top-down scheduling.; ///; /// [*] See \ref `getResourceIntervalTop` and; /// \ref `getResourceIntervalBottom` to see how such resource intervals; /// are built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:98,Performance,perform,performs,98,"/// Merge all adjacent intervals in the collection. For all pairs; /// of adjacient intervals, it performs [a, b) + [b, c) -> [a, c).; ///; /// Before performing the merge operation, the intervals are; /// sorted with \ref sort_predicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:151,Performance,perform,performing,151,"/// Merge all adjacent intervals in the collection. For all pairs; /// of adjacient intervals, it performs [a, b) + [b, c) -> [a, c).; ///; /// Before performing the merge operation, the intervals are; /// sorted with \ref sort_predicate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:9,Energy Efficiency,Schedul,Scheduling,9,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in the direction of movement, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:54,Performance,queue,queues,54,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in the direction of movement, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:158,Safety,hazard,hazards,158,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in the direction of movement, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:177,Safety,interlock,interlocks,177,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in the direction of movement, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:177,Security,interlock,interlocks,177,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in the direction of movement, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:44,Deployability,update,updated,44,/// True if the pending Q should be checked/updated before scheduling another; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:59,Energy Efficiency,schedul,scheduling,59,/// True if the pending Q should be checked/updated before scheduling another; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:56,Energy Efficiency,schedul,scheduled,56,/// Number of cycles it takes to issue the instructions scheduled in this; /// zone. It is defined as: scheduled-micro-ops / issue-width + stalls.; /// See getStalls().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:103,Energy Efficiency,schedul,scheduled-micro-ops,103,/// Number of cycles it takes to issue the instructions scheduled in this; /// zone. It is defined as: scheduled-micro-ops / issue-width + stalls.; /// See getStalls().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:41,Availability,avail,available,41,/// MinReadyCycle - Cycle of the soonest available instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:53,Energy Efficiency,schedul,scheduled,53,// The expected latency of the critical path in this scheduled zone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:16,Performance,latency,latency,16,// The expected latency of the critical path in this scheduled zone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:78,Energy Efficiency,schedul,scheduled,78,"// The latency of dependence chains leading into this zone.; // For each node scheduled bottom-up: DLat = max DLat, N.Depth.; // For each cycle scheduled: DLat -= 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:144,Energy Efficiency,schedul,scheduled,144,"// The latency of dependence chains leading into this zone.; // For each node scheduled bottom-up: DLat = max DLat, N.Depth.; // For each cycle scheduled: DLat -= 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:18,Integrability,depend,dependence,18,"// The latency of dependence chains leading into this zone.; // For each node scheduled bottom-up: DLat = max DLat, N.Depth.; // For each cycle scheduled: DLat -= 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:7,Performance,latency,latency,7,"// The latency of dependence chains leading into this zone.; // For each node scheduled bottom-up: DLat = max DLat, N.Depth.; // For each cycle scheduled: DLat -= 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:14,Energy Efficiency,schedul,scheduled,14,/// Count the scheduled (issued) micro-ops that can be retired by; /// time=CurrCycle assuming the first scheduled instr is retired at time=0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:105,Energy Efficiency,schedul,scheduled,105,/// Count the scheduled (issued) micro-ops that can be retired by; /// time=CurrCycle assuming the first scheduled instr is retired at time=0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:9,Energy Efficiency,schedul,scheduled,9,// Count scheduled resources that have been executed. Resources are; // considered executed if they become ready in the time that it takes to; // saturate any resource including the one in question. Counts are scaled; // for direct comparison with other resources. Counts can be compared with; // MOps * getMicroOpFactor and Latency * getLatencyFactor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:325,Performance,Latency,Latency,325,// Count scheduled resources that have been executed. Resources are; // considered executed if they become ready in the time that it takes to; // saturate any resource including the one in question. Counts are scaled; // for direct comparison with other resources. Counts can be compared with; // MOps * getMicroOpFactor and Latency * getLatencyFactor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:4,Performance,Cache,Cache,4,/// Cache the max count for a single resource.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:43,Energy Efficiency,schedul,scheduled,43,// Cache the critical resources ID in this scheduled zone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:3,Performance,Cache,Cache,3,// Cache the critical resources ID in this scheduled zone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:10,Energy Efficiency,schedul,scheduled,10,// Is the scheduled region resource limited vs. latency limited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:48,Performance,latency,latency,48,// Is the scheduled region resource limited vs. latency limited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:35,Energy Efficiency,allocate,allocated,35,/// Record how resources have been allocated across the cycles of; /// the execution.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:113,Performance,queue,queue,113,// Remember the greatest possible stall as an upper bound on the number of; // times we should retry the pending queue because of a hazard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:132,Safety,hazard,hazard,132,// Remember the greatest possible stall as an upper bound on the number of; // times we should retry the pending queue because of a hazard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:19,Modifiability,extend,extend,19,/// Pending queues extend the ready queues with the same ID and the; /// PendingFlag set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:12,Performance,queue,queues,12,/// Pending queues extend the ready queues with the same ID and the; /// PendingFlag set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:36,Performance,queue,queues,36,/// Pending queues extend the ready queues with the same ID and the; /// PendingFlag set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:47,Energy Efficiency,schedul,scheduled,47,/// Number of cycles to issue the instructions scheduled in this zone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:18,Integrability,depend,dependence,18,// The latency of dependence chains leading into this zone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:7,Performance,latency,latency,7,// The latency of dependence chains leading into this zone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:54,Energy Efficiency,schedul,scheduled,54,"/// Get the number of latency cycles ""covered"" by the scheduled; /// instructions. This is the larger of the critical path within the zone; /// and the number of cycles required to issue the instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:22,Performance,latency,latency,22,"/// Get the number of latency cycles ""covered"" by the scheduled; /// instructions. This is the larger of the critical path within the zone; /// and the number of cycles required to issue the instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:28,Energy Efficiency,schedul,scheduled,28,"/// Get the scaled count of scheduled micro-ops and resources, including; /// executed resources.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:61,Energy Efficiency,schedul,scheduled,61,/// Get a scaled count for the minimum execution time of the scheduled; /// micro-ops that are ready to execute by getExecutedCount. Notice the; /// feedback loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:149,Usability,feedback,feedback,149,/// Get a scaled count for the minimum execution time of the scheduled; /// micro-ops that are ready to execute by getExecutedCount. Notice the; /// feedback loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:10,Energy Efficiency,schedul,scheduled,10,// Is the scheduled region resource limited vs. latency limited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:48,Performance,latency,latency,48,// Is the scheduled region resource limited vs. latency limited.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:120,Availability,avail,available,120,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:4,Deployability,Release,Release,4,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:220,Deployability,release,released,220,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:84,Performance,queue,queue,84,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:130,Performance,queue,queue,130,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:178,Performance,queue,queue,178,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:344,Performance,queue,queue,344,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:394,Performance,queue,queue,394,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:48,Safety,hazard,hazard,48,"/// Release SU to make it ready. If it's not in hazard, remove it from; /// pending queue (if already in) and push into available queue.; /// Otherwise, push the SU into pending queue.; ///; /// @param SU The unit to be released.; /// @param ReadyCycle Until which cycle the unit is ready.; /// @param InPQueue Whether SU is already in pending queue.; /// @param Idx Position offset in pending queue (if in it).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:58,Availability,Avail,Available,58,"/// Call this before applying any other heuristics to the Available queue.; /// Updates the Available/Pending Q's if necessary and returns the single; /// available instruction, or NULL if there are multiple candidates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:92,Availability,Avail,Available,92,"/// Call this before applying any other heuristics to the Available queue.; /// Updates the Available/Pending Q's if necessary and returns the single; /// available instruction, or NULL if there are multiple candidates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:155,Availability,avail,available,155,"/// Call this before applying any other heuristics to the Available queue.; /// Updates the Available/Pending Q's if necessary and returns the single; /// available instruction, or NULL if there are multiple candidates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:80,Deployability,Update,Updates,80,"/// Call this before applying any other heuristics to the Available queue.; /// Updates the Available/Pending Q's if necessary and returns the single; /// available instruction, or NULL if there are multiple candidates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:68,Performance,queue,queue,68,"/// Call this before applying any other heuristics to the Available queue.; /// Updates the Available/Pending Q's if necessary and returns the single; /// available instruction, or NULL if there are multiple candidates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:81,Energy Efficiency,schedul,scheduling,81,/// Base class for GenericScheduler. This class maintains information about; /// scheduling candidates based on TargetSchedModel making it easy to implement; /// heuristics for either preRA or postRA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:200,Energy Efficiency,schedul,scheduling,200,/// Base class for GenericScheduler. This class maintains information about; /// scheduling candidates based on TargetSchedModel making it easy to implement; /// heuristics for either preRA or postRA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:97,Integrability,depend,depends,97,/// Represent the type of SchedCandidate found within a single queue.; /// pickNodeBidirectional depends on these listed by decreasing priority.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:63,Performance,queue,queue,63,/// Represent the type of SchedCandidate found within a single queue.; /// pickNodeBidirectional depends on these listed by decreasing priority.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:15,Energy Efficiency,schedul,scheduling,15,/// Policy for scheduling the next instruction in the candidate's zone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:49,Energy Efficiency,consumption,consumption,49,/// Status of an instruction's critical resource consumption.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:35,Energy Efficiency,schedul,scheduled,35,// Count critical resources in the scheduled region required by SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:36,Energy Efficiency,schedul,scheduled,36,// Whether this candidate should be scheduled at top/bottom.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:21,Energy Efficiency,consumption,consumption,21,// Critical resource consumption of the best candidate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:87,Energy Efficiency,schedul,schedule,87,/// GenericScheduler shrinks the unscheduled zone using heuristics to balance; /// the schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:31,Energy Efficiency,schedul,scheduled,31,// State of the top and bottom scheduled instruction boundaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:44,Energy Efficiency,schedul,scheduling,44,/// PostGenericScheduler - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Callbacks from ScheduleDAGMI:; /// initPolicy -> initialize(DAG) -> registerRoots -> pickNode ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:78,Energy Efficiency,Schedul,ScheduleDAGMI,78,/// PostGenericScheduler - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Callbacks from ScheduleDAGMI:; /// initPolicy -> initialize(DAG) -> registerRoots -> pickNode ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:118,Energy Efficiency,Schedul,ScheduleDAGMI,118,/// PostGenericScheduler - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Callbacks from ScheduleDAGMI:; /// initPolicy -> initialize(DAG) -> registerRoots -> pickNode ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:27,Integrability,Interface,Interface,27,/// PostGenericScheduler - Interface to the scheduling algorithm used by; /// ScheduleDAGMI.; ///; /// Callbacks from ScheduleDAGMI:; /// initPolicy -> initialize(DAG) -> registerRoots -> pickNode ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:6,Modifiability,config,configurable,6,/* no configurable policy */,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:11,Energy Efficiency,schedul,scheduling,11,/// PostRA scheduling does not track pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:43,Energy Efficiency,schedul,scheduler,43,/// Create the standard converging machine scheduler. This will be used as the; /// default scheduler if the target does not set a default.; /// Adds default DAG mutations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:92,Energy Efficiency,schedul,scheduler,92,/// Create the standard converging machine scheduler. This will be used as the; /// default scheduler if the target does not set a default.; /// Adds default DAG mutations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:21,Energy Efficiency,schedul,scheduler,21,/// Create a generic scheduler with no vreg liveness or DAG mutation passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:78,Energy Efficiency,reduce,reduce,78,"/// If ReorderWhileClustering is set to true, no attempt will be made to; /// reduce reordering due to store clustering.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h:78,Energy Efficiency,reduce,reduce,78,"/// If ReorderWhileClustering is set to true, no attempt will be made to; /// reduce reordering due to store clustering.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h:40,Performance,optimiz,optimization,40,"//===- MachineSizeOpts.h - machine size optimization ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains some shared machine IR code size optimization related; // code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h:435,Performance,optimiz,optimization,435,"//===- MachineSizeOpts.h - machine size optimization ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains some shared machine IR code size optimization related; // code.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h:67,Performance,optimiz,optimized,67,/// Returns true if machine function \p MF is suggested to be size-optimized; /// based on the profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h:71,Performance,optimiz,optimized,71,/// Returns true if machine basic block \p MBB is suggested to be size-optimized; /// based on the profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h:71,Performance,optimiz,optimized,71,/// Returns true if machine basic block \p MBB is suggested to be size-optimized; /// based on the profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSizeOpts.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:46,Deployability,Update,Update,46,"//===- MachineSSAUpdater.h - Unstructured SSA Update Tool -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the MachineSSAUpdater class.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:35,Deployability,update,updates,35,/// MachineSSAUpdater - This class updates SSA form for a set of virtual; /// registers defined in multiple blocks. This is used when code duplication; /// or another unstructured transformation wants to rewrite a set of uses of one; /// vreg with uses of a set of vregs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:204,Modifiability,rewrite,rewrite,204,/// MachineSSAUpdater - This class updates SSA form for a set of virtual; /// registers defined in multiple blocks. This is used when code duplication; /// or another unstructured transformation wants to rewrite a set of uses of one; /// vreg with uses of a set of vregs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:4,Availability,Avail,AvailableVals,4,"/// AvailableVals - This keeps track of which value to use on a per-block; /// basis. When we insert PHI nodes, we keep track of them here.; //typedef DenseMap<MachineBasicBlock*, Register> AvailableValsTy;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:190,Availability,Avail,AvailableValsTy,190,"/// AvailableVals - This keeps track of which value to use on a per-block; /// basis. When we insert PHI nodes, we keep track of them here.; //typedef DenseMap<MachineBasicBlock*, Register> AvailableValsTy;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:74,Deployability,update,updates,74,/// Initialize - Reset this object to get ready for a new set of SSA; /// updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:59,Availability,avail,available,59,/// AddAvailableValue - Indicate that a rewritten value is available at the; /// end of the specified block with the specified value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:652,Availability,Avail,AvailableVals,652,"/// GetValueInMiddleOfBlock - Construct SSA form, materializing a value that; /// is live in the middle of the specified block. If ExistingValueOnly is; /// true then this will only return an existing value or $noreg; otherwise new; /// instructions may be inserted to materialize a value.; ///; /// GetValueInMiddleOfBlock is the same as GetValueAtEndOfBlock except in one; /// important case: if there is a definition of the rewritten value after the; /// 'use' in BB. Consider code like this:; ///; /// X1 = ...; /// SomeBB:; /// use(X); /// X2 = ...; /// br Cond, SomeBB, OutBB; ///; /// In this case, there are two values (X1 and X2) added to the AvailableVals; /// set by the client of the rewriter, and those values are both live out of; /// their respective blocks. However, the use of X happens in the *middle* of; /// a block. Because of this, we need to insert a new PHI node in SomeBB to; /// merge the appropriate values, and this value isn't live out of the block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:696,Modifiability,rewrite,rewriter,696,"/// GetValueInMiddleOfBlock - Construct SSA form, materializing a value that; /// is live in the middle of the specified block. If ExistingValueOnly is; /// true then this will only return an existing value or $noreg; otherwise new; /// instructions may be inserted to materialize a value.; ///; /// GetValueInMiddleOfBlock is the same as GetValueAtEndOfBlock except in one; /// important case: if there is a definition of the rewritten value after the; /// 'use' in BB. Consider code like this:; ///; /// X1 = ...; /// SomeBB:; /// use(X); /// X2 = ...; /// br Cond, SomeBB, OutBB; ///; /// In this case, there are two values (X1 and X2) added to the AvailableVals; /// set by the client of the rewriter, and those values are both live out of; /// their respective blocks. However, the use of X happens in the *middle* of; /// a block. Because of this, we need to insert a new PHI node in SomeBB to; /// merge the appropriate values, and this value isn't live out of the block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:4,Modifiability,Rewrite,RewriteUse,4,"/// RewriteUse - Rewrite a use of the symbolic value. This handles PHI nodes,; /// which use their value in the corresponding predecessor. Note that this; /// will not work if the use is supposed to be rewritten to a value defined in; /// the same block as the use, but above it. Any 'AddAvailableValue's added; /// for the use's block will be considered to be below it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h:17,Modifiability,Rewrite,Rewrite,17,"/// RewriteUse - Rewrite a use of the symbolic value. This handles PHI nodes,; /// which use their value in the corresponding predecessor. Note that this; /// will not work if the use is supposed to be rewritten to a value defined in; /// the same block as the use, but above it. Any 'AddAvailableValue's added; /// for the use's block will be considered to be below it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineSSAUpdater.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h:51,Security,Hash,Hashing,51,"//===------------ MachineStableHash.h - MIR Stable Hashing Utilities ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Stable hashing for MachineInstr and MachineOperand. Useful or getting a; // hash across runs, modules, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h:390,Security,hash,hashing,390,"//===------------ MachineStableHash.h - MIR Stable Hashing Utilities ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Stable hashing for MachineInstr and MachineOperand. Useful or getting a; // hash across runs, modules, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h:459,Security,hash,hash,459,"//===------------ MachineStableHash.h - MIR Stable Hashing Utilities ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Stable hashing for MachineInstr and MachineOperand. Useful or getting a; // hash across runs, modules, etc.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineStableHash.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:405,Integrability,interface,interface,405,"//===- lib/CodeGen/MachineTraceMetrics.h - Super-scalar metrics -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface for the MachineTraceMetrics analysis pass; // that estimates CPU resource usage and critical data dependency paths through; // preferred traces. This is useful for super-scalar CPUs where execution speed; // can be limited both by data dependencies and by limited execution resources.; //; // Out-of-order CPUs will often be executing instructions from multiple basic; // blocks at the same time. This makes it difficult to estimate the resource; // usage accurately in a single basic block. Resources can be estimated better; // by looking at a trace through the current basic block.; //; // For every block, the MachineTraceMetrics pass will pick a preferred trace; // that passes through the block. The trace is chosen based on loop structure,; // branch probabilities, and resource usage. The intention is to pick likely; // traces that would be the most affected by code transformations.; //; // It is expensive to compute a full arbitrary trace for every block, so to; // save some computations, traces are chosen to be convergent. This means that; // if the traces through basic blocks A and B ever cross when moving away from; // A and B, they never diverge again. This applies in both directions - If the; // traces meet above A and B, they won't diverge when going further back.; //; // Traces tend to align with loops. The trace through a block in an inner loop; // will begin at the loop entry block and end at a back edge. If there are; // nested loops, the trace may begin and end at those instead.; //; // For each trace, we compute the critical path length, which is the",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:513,Integrability,depend,dependency,513,"//===- lib/CodeGen/MachineTraceMetrics.h - Super-scalar metrics -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface for the MachineTraceMetrics analysis pass; // that estimates CPU resource usage and critical data dependency paths through; // preferred traces. This is useful for super-scalar CPUs where execution speed; // can be limited both by data dependencies and by limited execution resources.; //; // Out-of-order CPUs will often be executing instructions from multiple basic; // blocks at the same time. This makes it difficult to estimate the resource; // usage accurately in a single basic block. Resources can be estimated better; // by looking at a trace through the current basic block.; //; // For every block, the MachineTraceMetrics pass will pick a preferred trace; // that passes through the block. The trace is chosen based on loop structure,; // branch probabilities, and resource usage. The intention is to pick likely; // traces that would be the most affected by code transformations.; //; // It is expensive to compute a full arbitrary trace for every block, so to; // save some computations, traces are chosen to be convergent. This means that; // if the traces through basic blocks A and B ever cross when moving away from; // A and B, they never diverge again. This applies in both directions - If the; // traces meet above A and B, they won't diverge when going further back.; //; // Traces tend to align with loops. The trace through a block in an inner loop; // will begin at the loop entry block and end at a back edge. If there are; // nested loops, the trace may begin and end at those instead.; //; // For each trace, we compute the critical path length, which is the",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:651,Integrability,depend,dependencies,651,"//===- lib/CodeGen/MachineTraceMetrics.h - Super-scalar metrics -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the interface for the MachineTraceMetrics analysis pass; // that estimates CPU resource usage and critical data dependency paths through; // preferred traces. This is useful for super-scalar CPUs where execution speed; // can be limited both by data dependencies and by limited execution resources.; //; // Out-of-order CPUs will often be executing instructions from multiple basic; // blocks at the same time. This makes it difficult to estimate the resource; // usage accurately in a single basic block. Resources can be estimated better; // by looking at a trace through the current basic block.; //; // For every block, the MachineTraceMetrics pass will pick a preferred trace; // that passes through the block. The trace is chosen based on loop structure,; // branch probabilities, and resource usage. The intention is to pick likely; // traces that would be the most affected by code transformations.; //; // It is expensive to compute a full arbitrary trace for every block, so to; // save some computations, traces are chosen to be convergent. This means that; // if the traces through basic blocks A and B ever cross when moving away from; // A and B, they never diverge again. This applies in both directions - If the; // traces meet above A and B, they won't diverge when going further back.; //; // Traces tend to align with loops. The trace through a block in an inner loop; // will begin at the loop entry block and end at a back edge. If there are; // nested loops, the trace may begin and end at those instead.; //; // For each trace, we compute the critical path length, which is the",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:2091,Integrability,depend,dependencies,2091,"paths through; // preferred traces. This is useful for super-scalar CPUs where execution speed; // can be limited both by data dependencies and by limited execution resources.; //; // Out-of-order CPUs will often be executing instructions from multiple basic; // blocks at the same time. This makes it difficult to estimate the resource; // usage accurately in a single basic block. Resources can be estimated better; // by looking at a trace through the current basic block.; //; // For every block, the MachineTraceMetrics pass will pick a preferred trace; // that passes through the block. The trace is chosen based on loop structure,; // branch probabilities, and resource usage. The intention is to pick likely; // traces that would be the most affected by code transformations.; //; // It is expensive to compute a full arbitrary trace for every block, so to; // save some computations, traces are chosen to be convergent. This means that; // if the traces through basic blocks A and B ever cross when moving away from; // A and B, they never diverge again. This applies in both directions - If the; // traces meet above A and B, they won't diverge when going further back.; //; // Traces tend to align with loops. The trace through a block in an inner loop; // will begin at the loop entry block and end at a back edge. If there are; // nested loops, the trace may begin and end at those instead.; //; // For each trace, we compute the critical path length, which is the number of; // cycles required to execute the trace when execution is limited by data; // dependencies only. We also compute the resource height, which is the number; // of cycles required to execute all instructions in the trace when ignoring; // data dependencies.; //; // Every instruction in the current block has a slack - the number of cycles; // execution of the instruction can be delayed without extending the critical; // path.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:2254,Integrability,depend,dependencies,2254,"paths through; // preferred traces. This is useful for super-scalar CPUs where execution speed; // can be limited both by data dependencies and by limited execution resources.; //; // Out-of-order CPUs will often be executing instructions from multiple basic; // blocks at the same time. This makes it difficult to estimate the resource; // usage accurately in a single basic block. Resources can be estimated better; // by looking at a trace through the current basic block.; //; // For every block, the MachineTraceMetrics pass will pick a preferred trace; // that passes through the block. The trace is chosen based on loop structure,; // branch probabilities, and resource usage. The intention is to pick likely; // traces that would be the most affected by code transformations.; //; // It is expensive to compute a full arbitrary trace for every block, so to; // save some computations, traces are chosen to be convergent. This means that; // if the traces through basic blocks A and B ever cross when moving away from; // A and B, they never diverge again. This applies in both directions - If the; // traces meet above A and B, they won't diverge when going further back.; //; // Traces tend to align with loops. The trace through a block in an inner loop; // will begin at the loop entry block and end at a back edge. If there are; // nested loops, the trace may begin and end at those instead.; //; // For each trace, we compute the critical path length, which is the number of; // cycles required to execute the trace when execution is limited by data; // dependencies only. We also compute the resource height, which is the number; // of cycles required to execute all instructions in the trace when ignoring; // data dependencies.; //; // Every instruction in the current block has a slack - the number of cycles; // execution of the instruction can be delayed without extending the critical; // path.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:2406,Modifiability,extend,extending,2406,"paths through; // preferred traces. This is useful for super-scalar CPUs where execution speed; // can be limited both by data dependencies and by limited execution resources.; //; // Out-of-order CPUs will often be executing instructions from multiple basic; // blocks at the same time. This makes it difficult to estimate the resource; // usage accurately in a single basic block. Resources can be estimated better; // by looking at a trace through the current basic block.; //; // For every block, the MachineTraceMetrics pass will pick a preferred trace; // that passes through the block. The trace is chosen based on loop structure,; // branch probabilities, and resource usage. The intention is to pick likely; // traces that would be the most affected by code transformations.; //; // It is expensive to compute a full arbitrary trace for every block, so to; // save some computations, traces are chosen to be convergent. This means that; // if the traces through basic blocks A and B ever cross when moving away from; // A and B, they never diverge again. This applies in both directions - If the; // traces meet above A and B, they won't diverge when going further back.; //; // Traces tend to align with loops. The trace through a block in an inner loop; // will begin at the loop entry block and end at a back edge. If there are; // nested loops, the trace may begin and end at those instead.; //; // For each trace, we compute the critical path length, which is the number of; // cycles required to execute the trace when execution is limited by data; // dependencies only. We also compute the resource height, which is the number; // of cycles required to execute all instructions in the trace when ignoring; // data dependencies.; //; // Every instruction in the current block has a slack - the number of cycles; // execution of the instruction can be delayed without extending the critical; // path.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:30,Integrability,depend,dependencies,30,"// Keep track of physreg data dependencies by recording each live register unit.; // Associate each regunit with an instruction operand. Depending on the; // direction instructions are scanned, it could be the operand that defined the; // regunit, or the highest operand to read the regunit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:137,Integrability,Depend,Depending,137,"// Keep track of physreg data dependencies by recording each live register unit.; // Associate each regunit with an instruction operand. Depending on the; // direction instructions are scanned, it could be the operand that defined the; // regunit, or the highest operand to read the regunit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:45,Integrability,depend,depend,45,/// Per-basic block information that doesn't depend on the trace through the; /// block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:172,Integrability,depend,dependencies,172,"/// Assuming that this is a dominator of TBI, determine if it contains; /// useful instruction depths. A dominating block can be above the current; /// trace head, and any dependencies from such a far away dominator are not; /// expected to affect the critical path.; ///; /// Also returns true when TBI == this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:8,Integrability,depend,dependency-related,8,"// Data-dependency-related information. Per-instruction depth and height; // are computed from data dependencies in the current trace, using; // itinerary data.; /// Instruction depths have been computed. This implies hasValidDepth().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:100,Integrability,depend,dependencies,100,"// Data-dependency-related information. Per-instruction depth and height; // are computed from data dependencies in the current trace, using; // itinerary data.; /// Instruction depths have been computed. This implies hasValidDepth().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:80,Integrability,depend,dependency,80,/// Critical path length. This is the number of cycles in the longest data; /// dependency chain through the trace. This is only valid when both; /// HasValidInstrDepths and HasValidInstrHeights are set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:47,Integrability,depend,dependencies,47,/// Earliest issue cycle as determined by data dependencies and instruction; /// latencies from the beginning of the trace. Data dependencies from; /// before the trace are not included.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:129,Integrability,depend,dependencies,129,/// Earliest issue cycle as determined by data dependencies and instruction; /// latencies from the beginning of the trace. Data dependencies from; /// before the trace are not included.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:109,Integrability,depend,dependencies,109,"/// Minimum number of cycles from this instruction is issued to the of the; /// trace, as determined by data dependencies and instruction latencies.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:175,Performance,cache,cached,175,/// A trace represents a plausible sequence of executed basic blocks that; /// passes through the current basic block one. The Trace class serves as a; /// handle to internal cached data structures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:274,Integrability,depend,dependencies,274,"/// Return the resource depth of the top/bottom of the trace center block.; /// This is the number of cycles required to execute all instructions from; /// the trace head to the trace center block. The resource depth only; /// considers execution resources, it ignores data dependencies.; /// When Bottom is set, instructions in the trace center block are included.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:357,Energy Efficiency,schedul,scheduling,357,"/// Return the resource length of the trace. This is the number of cycles; /// required to execute the instructions in the trace if they were all; /// independent, exposing the maximum instruction-level parallelism.; ///; /// Any blocks in Extrablocks are included as if they were part of the; /// trace. Likewise, extra resources required by the specified scheduling; /// classes are included. For the caller to account for extra machine; /// instructions, it must first resolve each instruction's scheduling class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:499,Energy Efficiency,schedul,scheduling,499,"/// Return the resource length of the trace. This is the number of cycles; /// required to execute the instructions in the trace if they were all; /// independent, exposing the maximum instruction-level parallelism.; ///; /// Any blocks in Extrablocks are included as if they were part of the; /// trace. Likewise, extra resources required by the specified scheduling; /// classes are included. For the caller to account for extra machine; /// instructions, it must first resolve each instruction's scheduling class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:35,Integrability,depend,dependency,35,/// Return the length of the (data dependency) critical path through the; /// trace.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:6,Integrability,depend,dependence,6,/// A dependence is useful if the basic block of the defining instruction; /// is part of the trace of the user instruction. It is assumed that DefMI; /// dominates UseMI (see also isUsefulDominator).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:4,Deployability,Update,Updates,4,"/// Updates the depth of an machine instruction, given RegUnits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:4,Deployability,Update,Updates,4,/// Updates the depth of the instructions from Start to End.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:346,Deployability,update,update,346,"/// Invalidate cached information about MBB. This must be called *before* MBB; /// is erased, or the CFG is otherwise changed.; ///; /// This invalidates per-block information about resource usage for MBB only,; /// and it invalidates per-trace information for any trace that passes; /// through MBB.; ///; /// Call Ensemble::getTrace() again to update any trace handles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h:15,Performance,cache,cached,15,"/// Invalidate cached information about MBB. This must be called *before* MBB; /// is erased, or the CFG is otherwise changed.; ///; /// This invalidates per-block information about resource usage for MBB only,; /// and it invalidates per-trace information for any trace that passes; /// through MBB.; ///; /// Call Ensemble::getTrace() again to update any trace handles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineTraceMetrics.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:89,Modifiability,extend,extended,89,// Simple value types that aren't explicitly part of this enumeration; // are considered extended value types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:3,Usability,Simpl,Simple,3,// Simple value types that aren't explicitly part of this enumeration; // are considered extended value types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:94,Testability,assert,asserts,94,// This is the current maximum for LAST_VALUETYPE.; // MVT::MAX_ALLOWED_VALUETYPE is used for asserts and to size bit vectors; // This value must be a multiple of 32.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:35,Usability,simpl,simple,35,/// Return true if this is a valid simple valuetype.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:88,Integrability,depend,dependent,88,/// Return true if this is a vector value type where the; /// runtime length is machine dependent,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:59,Performance,scalab,scalable,59,/// Return true if this is a custom target type that has a scalable size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:33,Performance,scalab,scalable,33,/// Return true if the type is a scalable type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:42,Energy Efficiency,power,power,42,/// Returns true if the given vector is a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:64,Energy Efficiency,power,power,64,/// Widens the length of the given vector MVT up to the nearest power of 2; /// and returns that type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:84,Performance,scalab,scalable,84,"/// Returns the size of the specified MVT in bits.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:110,Performance,scalab,scalable,110,"/// Returns the size of the specified MVT in bits.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:114,Performance,scalab,scalable,114,/// Return the size of the specified fixed width value type in bits. The; /// function will assert if the type is scalable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:92,Testability,assert,assert,92,/// Return the size of the specified fixed width value type in bits. The; /// function will assert if the type is scalable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:121,Performance,scalab,scalable,121,"/// Return the number of bytes overwritten by a store of the specified value; /// type.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:147,Performance,scalab,scalable,147,"/// Return the number of bytes overwritten by a store of the specified value; /// type.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:120,Performance,scalab,scalable,120,"/// Return the number of bits overwritten by a store of the specified value; /// type.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:146,Performance,scalab,scalable,146,"/// Return the number of bits overwritten by a store of the specified value; /// type.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h:4,Usability,Simpl,SimpleValueType,4,/// SimpleValueType Iteration; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MachineValueType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h:435,Energy Efficiency,schedul,scheduling,435,"//===- MacroFusion.h - Macro Fusion -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This file contains the definition of the DAG scheduling mutation to; /// pair instructions back to back.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h:168,Energy Efficiency,schedul,scheduled,168,/// Create an artificial edge between FirstSU and SecondSU.; /// Make data dependencies from the FirstSU also dependent on the SecondSU to; /// prevent them from being scheduled between the FirstSU and the SecondSU; /// and vice-versa.; /// Fusing more than 2 instructions is not currently supported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h:75,Integrability,depend,dependencies,75,/// Create an artificial edge between FirstSU and SecondSU.; /// Make data dependencies from the FirstSU also dependent on the SecondSU to; /// prevent them from being scheduled between the FirstSU and the SecondSU; /// and vice-versa.; /// Fusing more than 2 instructions is not currently supported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h:110,Integrability,depend,dependent,110,/// Create an artificial edge between FirstSU and SecondSU.; /// Make data dependencies from the FirstSU also dependent on the SecondSU to; /// prevent them from being scheduled between the FirstSU and the SecondSU; /// and vice-versa.; /// Fusing more than 2 instructions is not currently supported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h:17,Energy Efficiency,schedul,scheduling,17,"/// Create a DAG scheduling mutation to pair instructions back to back; /// for instructions that benefit according to the target-specific; /// predicate functions. shouldScheduleAdjacent will be true if any of the; /// provided predicates are true.; /// If BranchOnly is true, only branch instructions with one of their; /// predecessors will be fused.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MacroFusion.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRFormatter.h:18,Integrability,Interface,Interface,18,/// MIRFormater - Interface to format MIR operand based on target,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRFormatter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRFormatter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRSampleProfile.h:460,Performance,load,loader,460,"//===----- MIRSampleProfile.h: SampleFDO Support in MIR ---*- c++ -*-------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the supoorting functions for machine level Sample FDO; // loader. This is used in Flow Sensitive SampelFDO.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRSampleProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRSampleProfile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRSampleProfile.h:46,Availability,Mask,Mask,46,/// FS bits will only use the '1' bits in the Mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRSampleProfile.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRSampleProfile.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h:6,Integrability,wrap,wrapper,6,/// A wrapper around std::string which contains a source range that's being; /// set during parsing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h:6,Integrability,wrap,wrapper,6,/// A wrapper around unsigned which contains a source range that's being set; /// during parsing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h:83,Modifiability,Variab,VariableDbgInfo,83,/// Serializable representation of the MCRegister variant of; /// MachineFunction::VariableDbgInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h:40,Availability,mask,masks,40,// TODO: Serialize the various register masks.; // Frame information,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRYamlMapping.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:35,Deployability,pipeline,pipeline,35,"//===- ModuloSchedule.h - Software pipeline schedule expansion ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlaps loop iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:1516,Deployability,pipeline,pipelined,1516," iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===-------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:1565,Deployability,pipeline,pipeline,1565,"its ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:2382,Deployability,pipeline,pipeline,2382,"its ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:44,Energy Efficiency,schedul,schedule,44,"//===- ModuloSchedule.h - Software pipeline schedule expansion ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlaps loop iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:427,Energy Efficiency,schedul,scheduling,427,"//===- ModuloSchedule.h - Software pipeline schedule expansion ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlaps loop iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:610,Energy Efficiency,schedul,schedule,610,"//===- ModuloSchedule.h - Software pipeline schedule expansion ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlaps loop iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:661,Energy Efficiency,Schedul,Scheduling,661,"//===- ModuloSchedule.h - Software pipeline schedule expansion ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlaps loop iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:736,Energy Efficiency,schedul,schedule,736,"//===- ModuloSchedule.h - Software pipeline schedule expansion ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlaps loop iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:837,Energy Efficiency,schedul,schedule,837,"//===- ModuloSchedule.h - Software pipeline schedule expansion ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlaps loop iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:891,Energy Efficiency,schedul,schedule,891,"//===- ModuloSchedule.h - Software pipeline schedule expansion ------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Software pipelining (SWP) is an instruction scheduling technique for loops; // that overlaps loop iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:1769,Energy Efficiency,schedul,schedule,1769,"its ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:1830,Energy Efficiency,schedul,scheduled,1830,"its ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:2160,Energy Efficiency,schedul,schedule,2160,"its ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:1484,Testability,log,logical,1484," iterations and exploits ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===-------------------------------------------------------",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:2078,Usability,simpl,simple,2078,"its ILP via compiler transformations.; //; // There are multiple methods for analyzing a loop and creating a schedule.; // An example algorithm is Swing Modulo Scheduling (implemented by the; // MachinePipeliner). The details of how a schedule is arrived at are irrelevant; // for the task of actually rewriting a loop to adhere to the schedule, which; // is what this file does.; //; // A schedule is, for every instruction in a block, a Cycle and a Stage. Note; // that we only support single-block loops, so ""block"" and ""loop"" can be used; // interchangably.; //; // The Cycle of an instruction defines a partial order of the instructions in; // the remapped loop. Instructions within a cycle must not consume the output; // of any instruction in the same cycle. Cycle information is assumed to have; // been calculated such that the processor will execute instructions in; // lock-step (for example in a VLIW ISA).; //; // The Stage of an instruction defines the mapping between logical loop; // iterations and pipelined loop iterations. An example (unrolled) pipeline; // may look something like:; //; // I0[0] Execute instruction I0 of iteration 0; // I1[0], I0[1] Execute I0 of iteration 1 and I1 of iteration 1; // I1[1], I0[2]; // I1[2], I0[3]; //; // In the schedule for this unrolled sequence we would say that I0 was scheduled; // in stage 0 and I1 in stage 1:; //; // loop:; // [stage 0] x = I0; // [stage 1] I1 x (from stage 0); //; // And to actually generate valid code we must insert a phi:; //; // loop:; // x' = phi(x); // x = I0; // I1 x'; //; // This is a simple example; the rules for how to generate correct code given; // an arbitrary schedule containing loop-carried values are complex.; //; // Note that these examples only mention the steady-state kernel of the; // generated loop; prologs and epilogs must be generated also that prime and; // flush the pipeline. Doing so is nontrivial.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:17,Energy Efficiency,schedul,schedule,17,/// Represents a schedule for a single-block loop. For every instruction we; /// maintain a Cycle and Stage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:145,Energy Efficiency,schedul,schedule,145,"/// The instructions to be generated, in total order. Cycle provides a partial; /// order; the total order within cycles has been decided by the schedule; /// producer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:33,Energy Efficiency,schedul,schedule,33,/// The number of stages in this schedule (Max(Stage) + 1).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:43,Energy Efficiency,Schedul,ScheduledInstrs,43,"/// Create a new ModuloSchedule.; /// \arg ScheduledInstrs The new loop instructions, in total resequenced; /// order.; /// \arg Cycle Cycle index for all instructions in ScheduledInstrs. Cycle does; /// not need to start at zero. ScheduledInstrs must be partially ordered by; /// Cycle.; /// \arg Stage Stage index for all instructions in ScheduleInstrs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:171,Energy Efficiency,Schedul,ScheduledInstrs,171,"/// Create a new ModuloSchedule.; /// \arg ScheduledInstrs The new loop instructions, in total resequenced; /// order.; /// \arg Cycle Cycle index for all instructions in ScheduledInstrs. Cycle does; /// not need to start at zero. ScheduledInstrs must be partially ordered by; /// Cycle.; /// \arg Stage Stage index for all instructions in ScheduleInstrs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:231,Energy Efficiency,Schedul,ScheduledInstrs,231,"/// Create a new ModuloSchedule.; /// \arg ScheduledInstrs The new loop instructions, in total resequenced; /// order.; /// \arg Cycle Cycle index for all instructions in ScheduledInstrs. Cycle does; /// not need to start at zero. ScheduledInstrs must be partially ordered by; /// Cycle.; /// \arg Stage Stage index for all instructions in ScheduleInstrs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:340,Energy Efficiency,Schedul,ScheduleInstrs,340,"/// Create a new ModuloSchedule.; /// \arg ScheduledInstrs The new loop instructions, in total resequenced; /// order.; /// \arg Cycle Cycle index for all instructions in ScheduledInstrs. Cycle does; /// not need to start at zero. ScheduledInstrs must be partially ordered by; /// Cycle.; /// \arg Stage Stage index for all instructions in ScheduleInstrs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:39,Energy Efficiency,schedul,scheduled,39,/// Return the single-block loop being scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:50,Energy Efficiency,schedul,schedule,50,"/// Return the number of stages contained in this schedule, which is the; /// largest stage index + 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:34,Energy Efficiency,schedul,schedule,34,"/// Return the first cycle in the schedule, which is the cycle index of the; /// first instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:34,Energy Efficiency,schedul,schedule,34,"/// Return the final cycle in the schedule, which is the cycle index of the; /// last instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:32,Energy Efficiency,schedul,scheduled,32,"/// Return the stage that MI is scheduled in, or -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:32,Energy Efficiency,schedul,scheduled,32,"/// Return the cycle that MI is scheduled at, or -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:226,Energy Efficiency,schedul,scheduled,226,/// Map for each register and the max difference between its uses and def.; /// The first element in the pair is the max difference in stages. The; /// second is true if the register defines a Phi value and loop value is; /// scheduled before the Phi.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:51,Energy Efficiency,schedul,schedule,51,/// Instructions to change when emitting the final schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:251,Energy Efficiency,schedul,scheduled,251,/// The number of stages for a Phi is a little different than other; /// instructions. The minimum value computed in RegToStageDiff is 1; /// because we assume the Phi is needed for at least 1 iteration.; /// This is not the case if the loop value is scheduled prior to the; /// Phi in the same stage. This function returns the number of stages; /// or iterations needed between the Phi definition and any uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:207,Performance,optimiz,optimization,207,/// Create a new ModuloScheduleExpander.; /// \arg InstrChanges Modifications to make to instructions with memory; /// operands.; /// FIXME: InstrChanges is opaque and is an implementation detail of an; /// optimization in MachinePipeliner that crosses abstraction boundaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:4,Performance,Perform,Performs,4,/// Performs the actual expansion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:4,Performance,Perform,Performs,4,/// Performs final cleanup after expansion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:74,Performance,optimiz,optimized,74,"/// Returns the newly rewritten kernel block, or nullptr if this was; /// optimized away.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:67,Security,validat,validate,67,/// Runs ModuloScheduleExpander and treats it as a golden input to validate; /// aspects of the code generated by PeelingModuloScheduleExpander.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:41,Availability,avail,available,41,"/// For every block, the stages that are available. A stage can be available; /// but not produced (in the epilog) or produced but not available (in the; /// prolog).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:67,Availability,avail,available,67,"/// For every block, the stages that are available. A stage can be available; /// but not produced (in the epilog) or produced but not available (in the; /// prolog).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:135,Availability,avail,available,135,"/// For every block, the stages that are available. A stage can be available; /// but not produced (in the epilog) or produced but not available (in the; /// prolog).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:62,Deployability,pipeline,pipelined,62,"/// Converts BB from the original loop body to the rewritten, pipelined; /// steady-state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:53,Energy Efficiency,schedul,schedule,53,/// Helper to get the stage of an instruction in the schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:40,Energy Efficiency,schedul,scheduled,40,"/// Expander that simply annotates each scheduled instruction with a post-instr; /// symbol that can be consumed by the ModuloScheduleTest pass.; ///; /// The post-instr symbol is a way of annotating an instruction that can be; /// roundtripped in MIR. The syntax is:; /// MYINST %0, post-instr-symbol <mcsymbol Stage-1_Cycle-5>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:18,Usability,simpl,simply,18,"/// Expander that simply annotates each scheduled instruction with a post-instr; /// symbol that can be consumed by the ModuloScheduleTest pass.; ///; /// The post-instr symbol is a way of annotating an instruction that can be; /// roundtripped in MIR. The syntax is:; /// MYINST %0, post-instr-symbol <mcsymbol Stage-1_Cycle-5>",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h:4,Performance,Perform,Performs,4,/// Performs the annotation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ModuloSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h:44,Energy Efficiency,Schedul,Scheduling,44,"//=- llvm/CodeGen/MultiHazardRecognizer.h - Scheduling Support ----*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the MultiHazardRecognizer class, which is a wrapper; // for a set of ScheduleHazardRecognizer instances; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h:473,Energy Efficiency,Schedul,ScheduleHazardRecognizer,473,"//=- llvm/CodeGen/MultiHazardRecognizer.h - Scheduling Support ----*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the MultiHazardRecognizer class, which is a wrapper; // for a set of ScheduleHazardRecognizer instances; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h:448,Integrability,wrap,wrapper,448,"//=- llvm/CodeGen/MultiHazardRecognizer.h - Scheduling Support ----*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the MultiHazardRecognizer class, which is a wrapper; // for a set of ScheduleHazardRecognizer instances; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MultiHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h:46,Usability,simpl,simply,46,/// Entries are stored into the StringMap and simply linked together through; /// the second element of this pair in order to keep track of insertion; /// order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h:102,Integrability,interface,interface,102,/// It's very easy to introduce bugs by passing the wrong string pool.; /// By using strong types the interface enforces that the right; /// kind of pool is used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/NonRelocatableStringpool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:401,Integrability,interface,interfaces,401,"//===-- Passes.h - Target independent code generation passes ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces to access the target independent code generation; // passes provided by the LLVM backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:415,Security,access,access,415,"//===-- Passes.h - Target independent code generation passes ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines interfaces to access the target independent code generation; // passes provided by the LLVM backend.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:116,Performance,optimiz,optimization,116,"/// createGCEmptyBasicblocksPass - Empty basic blocks (basic blocks without; /// real code) appear as the result of optimization passes removing; /// instructions. These blocks confuscate profile analysis (e.g., basic block; /// sections) since they will share the address of their fallthrough blocks.; /// This pass garbage-collects such basic blocks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:239,Safety,Abort,AbortOnFailedISel,239,"/// This pass resets a MachineFunction when it has the FailedISel property; /// as if it was just created.; /// If EmitFallbackDiag is true, the pass will emit a; /// DiagnosticInfoISelFallback for every MachineFunction it resets.; /// If AbortOnFailedISel is true, abort compilation instead of resetting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:266,Safety,abort,abort,266,"/// This pass resets a MachineFunction when it has the FailedISel property; /// as if it was just created.; /// If EmitFallbackDiag is true, the pass will emit a; /// DiagnosticInfoISelFallback for every MachineFunction it resets.; /// If AbortOnFailedISel is true, abort compilation instead of resetting.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:59,Security,expose,expose,59,/// createCodeGenPrepareLegacyPass - Transform the code to expose more pattern; /// matching during instruction selection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:79,Performance,load,load-linked,79,/// AtomicExpandID -- Lowers atomic operations in terms of either cmpxchg; /// load-linked/store-conditional loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:81,Modifiability,variab,variable,81,/// LiveVariables pass - This pass computes the set of blocks in which each; /// variable is life and sets machine operand kill flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:38,Energy Efficiency,reduce,reduces,38,/// TwoAddressInstruction - This pass reduces two-address instructions to; /// use two operands. This destroys SSA information but it is desired by; /// register allocators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:33,Energy Efficiency,schedul,schedules,33,/// MachineScheduler - This pass schedules machine instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:37,Energy Efficiency,schedul,schedules,37,/// PostMachineScheduler - This pass schedules machine instructions postRA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:92,Deployability,update,update,92,/// ShrinkWrap pass. Look for the best place to insert save and restore; // instruction and update the MachineFunctionInfo with that information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:26,Modifiability,Rewrite,Rewrite,26,/// VirtRegRewriter pass. Rewrite virtual registers to physical registers as; /// assigned in VirtRegMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:14,Performance,perform,perform,14,/// This pass perform post-ra machine sink for COPY instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:53,Energy Efficiency,allocate,allocates,53,/// FastRegisterAllocation Pass - This pass register allocates as fast as; /// possible. It is best suited for debug code where live ranges are short.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:96,Performance,optimiz,optimized,96,/// Greedy register allocation pass - This pass implements a global register; /// allocator for optimized builds.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:56,Safety,hazard,hazard,56,/// PostRAHazardRecognizer - This pass runs the post-ra hazard; /// recognizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:71,Energy Efficiency,schedul,scheduling,71,/// PostRAScheduler - This pass performs post register allocation; /// scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:32,Performance,perform,performs,32,/// PostRAScheduler - This pass performs post register allocation; /// scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:30,Performance,perform,performs,30,"/// BranchFolding - This pass performs machine code CFG based; /// optimizations to delete branches to branches, eliminate branches to; /// successor blocks (creating fall throughs), and eliminating branches over; /// branches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:67,Performance,optimiz,optimizations,67,"/// BranchFolding - This pass performs machine code CFG based; /// optimizations to delete branches to branches, eliminate branches to; /// successor blocks (creating fall throughs), and eliminating branches over; /// branches.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:33,Performance,perform,performs,33,/// EarlyIfConverter - This pass performs if-conversion on SSA form by; /// inserting cmov instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:34,Performance,perform,performs,34,/// EarlyIfPredicator - This pass performs if-conversion on SSA form by; /// predicating if/else block and insert select at the join point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:14,Performance,perform,performs,14,/// This pass performs instruction combining using trace metrics to estimate; /// critical-path and resource depth.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:106,Energy Efficiency,reduce,reduce,106,/// StackSlotColoring - This pass performs stack coloring and merging.; /// It merges disjoint allocas to reduce the stack size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:34,Performance,perform,performs,34,/// StackSlotColoring - This pass performs stack coloring and merging.; /// It merges disjoint allocas to reduce the stack size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:68,Modifiability,variab,variable,68,/// StackFramePrinter - This pass prints the stack frame layout and variable; /// mappings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:28,Performance,perform,performs,28,/// IfConverter - This pass performs machine code if conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:41,Performance,perform,perform,41,/// GCLowering Pass - Used by gc.root to perform its default lowering; /// operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:41,Performance,perform,perform,41,/// GCLowering Pass - Used by gc.root to perform its default lowering; /// operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:60,Safety,safe,safe,60,"/// GCMachineCodeAnalysis - Target-independent pass to mark safe points; /// in machine code. Must be added very late during code generation, just; /// prior to output, and importantly after all CFG transformations (such as; /// branch folding).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:27,Performance,perform,performs,27,/// MachineCSE - This pass performs global CSE on machine instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:14,Performance,perform,performs,14,/// This pass performs loop invariant code motion on machine instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:14,Performance,perform,performs,14,/// This pass performs loop invariant code motion on machine instructions.; /// This variant works before register allocation. \see MachineLICMID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:31,Performance,perform,performs,31,/// MachineSinking - This pass performs sinking on machine instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:39,Performance,perform,performs,39,/// MachineCopyPropagation - This pass performs copy propagation on; /// machine instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:49,Availability,redundant,redundant,49,/// MachineLateInstrsCleanup - This pass removes redundant identical; /// instructions after register allocation and rematerialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:49,Safety,redund,redundant,49,/// MachineLateInstrsCleanup - This pass removes redundant identical; /// instructions after register allocation and rematerialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:34,Performance,perform,performs,34,/// PeepholeOptimizer - This pass performs peephole optimizations -; /// like extension and comparison eliminations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:52,Performance,optimiz,optimizations,52,/// PeepholeOptimizer - This pass performs peephole optimizations -; /// like extension and comparison eliminations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:4,Performance,Optimiz,OptimizePHIs,4,/// OptimizePHIs - This pass optimizes machine instruction PHIs; /// to take advantage of opportunities created during DAG legalization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:29,Performance,optimiz,optimizes,29,/// OptimizePHIs - This pass optimizes machine instruction PHIs; /// to take advantage of opportunities created during DAG legalization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:34,Performance,perform,performs,34,/// StackSlotColoring - This pass performs stack slot coloring.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:30,Deployability,patch,patchable-function,30,"/// This pass implements the ""patchable-function"" attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:83,Energy Efficiency,adapt,adapted,83,/// createDwarfEHPass - This pass mulches exception handling code into a form; /// adapted to code generation. Required if using dwarf exception handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:83,Modifiability,adapt,adapted,83,/// createDwarfEHPass - This pass mulches exception handling code into a form; /// adapted to code generation. Required if using dwarf exception handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:40,Energy Efficiency,adapt,adapts,40,/// createSjLjEHPreparePass - This pass adapts exception handling code to use; /// the GCC-style builtin setjmp/longjmp (sjlj) to handling EH control flow.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:40,Modifiability,adapt,adapts,40,/// createSjLjEHPreparePass - This pass adapts exception handling code to use; /// the GCC-style builtin setjmp/longjmp (sjlj) to handling EH control flow.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:33,Energy Efficiency,adapt,adapts,33,/// createWasmEHPass - This pass adapts exception handling code to use; /// WebAssembly's exception handling scheme.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:33,Modifiability,adapt,adapts,33,/// createWasmEHPass - This pass adapts exception handling code to use; /// WebAssembly's exception handling scheme.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:117,Energy Efficiency,allocate,allocates,117,/// LocalStackSlotAllocation - This pass assigns local frame indices to stack; /// slots relative to one another and allocates base registers to access them; /// when it is estimated by the target to be out of range of normal frame; /// pointer or stack pointer index addressing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:145,Security,access,access,145,/// LocalStackSlotAllocation - This pass assigns local frame indices to stack; /// slots relative to one another and allocates base registers to access them; /// when it is estimated by the target to be out of range of normal frame; /// pointer or stack pointer index addressing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:118,Energy Efficiency,schedul,scheduling,118,"/// FinalizeMachineBundles - This pass finalize machine instruction; /// bundles (created earlier, e.g. during pre-RA scheduling).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:85,Deployability,patch,patchpoint,85,/// StackMapLiveness - This pass analyses the register live-out set of; /// stackmap/patchpoint intrinsics and attaches the calculated information to; /// the intrinsic for later emission to the StackMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:54,Security,sanitiz,sanitizer,54,// MachineSanitizerBinaryMetadata - appends/finalizes sanitizer binary; // metadata after llvm SanitizerBinaryMetadata pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:95,Security,Sanitiz,SanitizerBinaryMetadata,95,// MachineSanitizerBinaryMetadata - appends/finalizes sanitizer binary; // metadata after llvm SanitizerBinaryMetadata pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:86,Security,access,accesses,86,/// InterleavedAccess Pass - This pass identifies and matches interleaved; /// memory accesses to target specific intrinsics.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:68,Performance,load,loads,68,/// InterleavedLoadCombines Pass - This pass identifies interleaved loads and; /// combines them into wide loads detectable by InterleavedAccessPass; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:107,Performance,load,loads,107,/// InterleavedLoadCombines Pass - This pass identifies interleaved loads and; /// combines them into wide loads detectable by InterleavedAccessPass; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:113,Safety,detect,detectable,113,/// InterleavedLoadCombines Pass - This pass identifies interleaved loads and; /// combines them into wide loads detectable by InterleavedAccessPass; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:56,Modifiability,variab,variables,56,/// LowerEmuTLS - This pass generates __emutls_[vt].xyz variables for all; /// TLS variables for the emulated TLS model.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:83,Modifiability,variab,variables,83,/// LowerEmuTLS - This pass generates __emutls_[vt].xyz variables for all; /// TLS variables for the emulated TLS model.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:32,Performance,load,load,32,"/// This pass lowers the \@llvm.load.relative and \@llvm.objc.* intrinsics to; /// instructions. This is unsafe to do earlier because a pass may combine the; /// constant initializer into the load, which may result in an overflowing; /// evaluation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:192,Performance,load,load,192,"/// This pass lowers the \@llvm.load.relative and \@llvm.objc.* intrinsics to; /// instructions. This is unsafe to do earlier because a pass may combine the; /// constant initializer into the load, which may result in an overflowing; /// evaluation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:105,Safety,unsafe,unsafe,105,"/// This pass lowers the \@llvm.load.relative and \@llvm.objc.* intrinsics to; /// instructions. This is unsafe to do earlier because a pass may combine the; /// constant initializer into the load, which may result in an overflowing; /// evaluation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:166,Modifiability,config,configured,166,/// GlobalMerge - This pass merges internal (by default) globals into structs; /// to enable reuse of a base pointer by indexed addressing modes.; /// It can also be configured to focus on size optimizations only.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:194,Performance,optimiz,optimizations,194,/// GlobalMerge - This pass merges internal (by default) globals into structs; /// to enable reuse of a base pointer by indexed addressing modes.; /// It can also be configured to focus on size optimizations only.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:38,Safety,safe,safe,38,/// This pass splits the stack into a safe stack and an unsafe stack to; /// protect against stack-based overflow vulnerabilities.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:56,Safety,unsafe,unsafe,56,/// This pass splits the stack into a safe stack and an unsafe stack to; /// protect against stack-based overflow vulnerabilities.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:14,Safety,detect,detects,14,/// This pass detects subregister lanes in a virtual register that are used; /// independently of other lanes and splits them into separate virtual; /// registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:136,Availability,avail,available,136,/// Return a MachineFunction pass that identifies call sites; /// and propagates register usage information of callee to caller; /// if available with PysicalRegisterUsageInfo pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:14,Performance,perform,performs,14,/// This pass performs software pipelining on machine instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:14,Performance,perform,performs,14,/// This pass performs outlining on machine instructions directly before; /// printing assembly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:164,Availability,mask,mask,164,/// This pass expands the vector predication intrinsics into unpredicated; /// instructions with selects or just the explicit vector length into the; /// predicate mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:33,Performance,load,load,33,// This pass expands memcmp() to load/stores.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:24,Integrability,Depend,Dependencies,24,/// Creates Break False Dependencies pass. \see BreakFalseDeps.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:24,Performance,load,load,24,/// The pass transforms load/store <256 x i32> to AMX load/store intrinsics; /// or split the data to two <128 x i32>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:54,Performance,load,load,54,/// The pass transforms load/store <256 x i32> to AMX load/store intrinsics; /// or split the data to two <128 x i32>.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h:9,Usability,learn,learning,9,"/// When learning an eviction policy, extract score(reward) information,; /// otherwise this does nothing",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Passes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQPRAConstraint.h:417,Integrability,interface,interface,417,"//===- llvm/CodeGen/PBQPRAConstraint.h --------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the PBQPBuilder interface, for classes which build PBQP; // instances to represent register allocation problems, and the RegAllocPBQP; // interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQPRAConstraint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQPRAConstraint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQPRAConstraint.h:539,Integrability,interface,interface,539,"//===- llvm/CodeGen/PBQPRAConstraint.h --------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the PBQPBuilder interface, for classes which build PBQP; // instances to represent register allocation problems, and the RegAllocPBQP; // interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQPRAConstraint.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQPRAConstraint.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PreISelIntrinsicLowering.h:429,Performance,load,load,429,"//===- PreISelIntrinsicLowering.h - Pre-ISel intrinsic lowering pass ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass implements IR lowering for the llvm.load.relative and llvm.objc.*; // intrinsics.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PreISelIntrinsicLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PreISelIntrinsicLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h:93,Security,access,access,93,"/// Special value supplied for machine level alias analysis. It indicates that; /// a memory access references the functions stack frame (e.g., a spill slot),; /// below the stack frame (e.g., argument space), or constant pool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h:4,Testability,Test,Test,4,/// Test whether the memory pointed to by this PseudoSourceValue has a; /// constant value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h:4,Testability,Test,Test,4,/// Test whether the memory pointed to by this PseudoSourceValue may also be; /// pointed to by an LLVM IR Value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PseudoSourceValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:1465,Energy Efficiency,consumption,consumption,1465,"r data flow (RDF); // for a non-SSA program representation (e.g. post-RA machine code).; //; //; // *** Introduction; //; // The RDF graph is a collection of nodes, each of which denotes some element; // of the program. There are two main types of such elements: code and refe-; // rences. Conceptually, ""code"" is something that represents the structure; // of the program, e.g. basic block or a statement, while ""reference"" is an; // instance of accessing a register, e.g. a definition or a use. Nodes are; // connected with each other based on the structure of the program (such as; // blocks, instructions, etc.), and based on the data flow (e.g. reaching; // definitions, reached uses, etc.). The single-reaching-definition principle; // of SSA is generally observed, although, due to the non-SSA representation; // of the program, there are some differences between the graph and a ""pure""; // SSA representation.; //; //; // *** Implementation remarks; //; // Since the graph can contain a large number of nodes, memory consumption; // was one of the major design considerations. As a result, there is a single; // base class NodeBase which defines all members used by all possible derived; // classes. The members are arranged in a union, and a derived class cannot; // add any data members of its own. Each derived class only defines the; // functional interface, i.e. member functions. NodeBase must be a POD,; // which implies that all of its members must also be PODs.; // Since nodes need to be connected with other nodes, pointers have been; // replaced with 32-bit identifiers: each node has an id of type NodeId.; // There are mapping functions in the graph that translate between actual; // memory addresses and the corresponding identifiers.; // A node id of 0 is equivalent to nullptr.; //; //; // *** Structure of the graph; //; // A code node is always a collection of other nodes. For example, a code; // node corresponding to a basic block will contain code nodes corresponding; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:1800,Integrability,interface,interface,1800,"the structure; // of the program, e.g. basic block or a statement, while ""reference"" is an; // instance of accessing a register, e.g. a definition or a use. Nodes are; // connected with each other based on the structure of the program (such as; // blocks, instructions, etc.), and based on the data flow (e.g. reaching; // definitions, reached uses, etc.). The single-reaching-definition principle; // of SSA is generally observed, although, due to the non-SSA representation; // of the program, there are some differences between the graph and a ""pure""; // SSA representation.; //; //; // *** Implementation remarks; //; // Since the graph can contain a large number of nodes, memory consumption; // was one of the major design considerations. As a result, there is a single; // base class NodeBase which defines all members used by all possible derived; // classes. The members are arranged in a union, and a derived class cannot; // add any data members of its own. Each derived class only defines the; // functional interface, i.e. member functions. NodeBase must be a POD,; // which implies that all of its members must also be PODs.; // Since nodes need to be connected with other nodes, pointers have been; // replaced with 32-bit identifiers: each node has an id of type NodeId.; // There are mapping functions in the graph that translate between actual; // memory addresses and the corresponding identifiers.; // A node id of 0 is equivalent to nullptr.; //; //; // *** Structure of the graph; //; // A code node is always a collection of other nodes. For example, a code; // node corresponding to a basic block will contain code nodes corresponding; // to instructions. In turn, a code node corresponding to an instruction will; // contain a list of reference nodes that correspond to the definitions and; // uses of registers in that instruction. The members are arranged into a; // circular list, which is yet another consequence of the effort to save; // memory: for each member node it s",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:887,Security,access,accessing,887,"//===- RDFGraph.h -----------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Target-independent, SSA-based data flow graph for register data flow (RDF); // for a non-SSA program representation (e.g. post-RA machine code).; //; //; // *** Introduction; //; // The RDF graph is a collection of nodes, each of which denotes some element; // of the program. There are two main types of such elements: code and refe-; // rences. Conceptually, ""code"" is something that represents the structure; // of the program, e.g. basic block or a statement, while ""reference"" is an; // instance of accessing a register, e.g. a definition or a use. Nodes are; // connected with each other based on the structure of the program (such as; // blocks, instructions, etc.), and based on the data flow (e.g. reaching; // definitions, reached uses, etc.). The single-reaching-definition principle; // of SSA is generally observed, although, due to the non-SSA representation; // of the program, there are some differences between the graph and a ""pure""; // SSA representation.; //; //; // *** Implementation remarks; //; // Since the graph can contain a large number of nodes, memory consumption; // was one of the major design considerations. As a result, there is a single; // base class NodeBase which defines all members used by all possible derived; // classes. The members are arranged in a union, and a derived class cannot; // add any data members of its own. Each derived class only defines the; // functional interface, i.e. member functions. NodeBase must be a POD,; // which implies that all of its members must also be PODs.; // Since nodes need to be connected with other nodes, pointers have been; // repl",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:2853,Security,access,access,2853,"ived class only defines the; // functional interface, i.e. member functions. NodeBase must be a POD,; // which implies that all of its members must also be PODs.; // Since nodes need to be connected with other nodes, pointers have been; // replaced with 32-bit identifiers: each node has an id of type NodeId.; // There are mapping functions in the graph that translate between actual; // memory addresses and the corresponding identifiers.; // A node id of 0 is equivalent to nullptr.; //; //; // *** Structure of the graph; //; // A code node is always a collection of other nodes. For example, a code; // node corresponding to a basic block will contain code nodes corresponding; // to instructions. In turn, a code node corresponding to an instruction will; // contain a list of reference nodes that correspond to the definitions and; // uses of registers in that instruction. The members are arranged into a; // circular list, which is yet another consequence of the effort to save; // memory: for each member node it should be possible to obtain its owner,; // and it should be possible to access all other members. There are other; // ways to accomplish that, but the circular list seemed the most natural.; //; // +- CodeNode -+; // | | <---------------------------------------------------+; // +-+--------+-+ |; // |FirstM |LastM |; // | +-------------------------------------+ |; // | | |; // V V |; // +----------+ Next +----------+ Next Next +----------+ Next |; // | |----->| |-----> ... ----->| |----->-+; // +- Member -+ +- Member -+ +- Member -+; //; // The order of members is such that related reference nodes (see below); // should be contiguous on the member list.; //; // A reference node is a node that encapsulates an access to a register,; // in other words, data flowing into or out of a register. There are two; // major kinds of reference nodes: defs and uses. A def node will contain; // the id of the first reached use, and the id of the first reached def.; // Each def an",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:3498,Security,access,access,3498,"on will; // contain a list of reference nodes that correspond to the definitions and; // uses of registers in that instruction. The members are arranged into a; // circular list, which is yet another consequence of the effort to save; // memory: for each member node it should be possible to obtain its owner,; // and it should be possible to access all other members. There are other; // ways to accomplish that, but the circular list seemed the most natural.; //; // +- CodeNode -+; // | | <---------------------------------------------------+; // +-+--------+-+ |; // |FirstM |LastM |; // | +-------------------------------------+ |; // | | |; // V V |; // +----------+ Next +----------+ Next Next +----------+ Next |; // | |----->| |-----> ... ----->| |----->-+; // +- Member -+ +- Member -+ +- Member -+; //; // The order of members is such that related reference nodes (see below); // should be contiguous on the member list.; //; // A reference node is a node that encapsulates an access to a register,; // in other words, data flowing into or out of a register. There are two; // major kinds of reference nodes: defs and uses. A def node will contain; // the id of the first reached use, and the id of the first reached def.; // Each def and use will contain the id of the reaching def, and also the; // id of the next reached def (for def nodes) or use (for use nodes).; // The ""next node sharing the same reaching def"" is denoted as ""sibling"".; // In summary:; // - Def node contains: reaching def, sibling, first reached def, and first; // reached use.; // - Use node contains: reaching def and sibling.; //; // +-- DefNode --+; // | R2 = ... | <---+--------------------+; // ++---------+--+ | |; // |Reached |Reached | |; // |Def |Use | |; // | | |Reaching |Reaching; // | V |Def |Def; // | +-- UseNode --+ Sib +-- UseNode --+ Sib Sib; // | | ... = R2 |----->| ... = R2 |----> ... ----> 0; // | +-------------+ +-------------+; // V; // +-- DefNode --+ Sib; // | R2 = ... |----> ...; // +",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:3,Testability,Test,Test,3,// Test if A contains B.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:53,Safety,avoid,avoid,53,// Use these short names with rdf:: qualification to avoid conflicts with; // preexisting names. Do not use 'using namespace rdf'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:294,Energy Efficiency,allocate,allocated,294,"// Fast memory allocation and translation between node id and node address.; // This is really the same idea as the one underlying the ""bump pointer; // allocator"", the difference being in the translation. A node id is; // composed of two components: the index of the block in which it was; // allocated, and the index within the block. With the default settings,; // where the number of nodes per block is 4096, the node id (minus 1) is:; //; // bit position: 11 0; // +----------------------------+--------------+; // | Index of the block |Index in block|; // +----------------------------+--------------+; //; // The actual node id is the above plus 1, to avoid creating a node id of 0.; //; // This method significantly improved the build time, compared to using maps; // (std::unordered_map or DenseMap) to translate between pointers and ids.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:659,Safety,avoid,avoid,659,"// Fast memory allocation and translation between node id and node address.; // This is really the same idea as the one underlying the ""bump pointer; // allocator"", the difference being in the translation. A node id is; // composed of two components: the index of the block in which it was; // allocated, and the index within the block. With the default settings,; // where the number of nodes per block is 4096, the node id (minus 1) is:; //; // bit position: 11 0; // +----------------------------+--------------+; // | Index of the block |Index in block|; // +----------------------------+--------------+; //; // The actual node id is the above plus 1, to avoid creating a node id of 0.; //; // This method significantly improved the build time, compared to using maps; // (std::unordered_map or DenseMap) to translate between pointers and ids.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:23,Safety,avoid,avoid,23,"// Add 1 to the id, to avoid the id of 0, which is treated as ""null"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:147,Usability,clear,clearer,147,"// Id of the next node in the circular chain.; // Definitions of nested types. Using anonymous nested structs would make; // this class definition clearer, but unnamed structs are not a part of; // the standard.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:17,Energy Efficiency,allocate,allocates,17,// The allocator allocates chunks of 32 bytes for each node. The fact that; // each node takes 32 bytes in memory is used for fast translation between; // the node id and the node address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:45,Security,access,accessing,45,// Make this std::unordered_map for speed of accessing elements.; // Map: Register (physical or virtual) -> DefStack,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h:8,Availability,mask,mask,8,// Lane mask map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFGraph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFLiveness.h:126,Energy Efficiency,reduce,reduces,126,// Cache of mapping from node ids (for RefNodes) to the containing; // basic blocks. Not computing it each time for each node reduces; // the liveness calculation time by a large fraction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFLiveness.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFLiveness.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFLiveness.h:3,Performance,Cache,Cache,3,// Cache of mapping from node ids (for RefNodes) to the containing; // basic blocks. Not computing it each time for each node reduces; // the liveness calculation time by a large fraction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFLiveness.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFLiveness.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h:247,Energy Efficiency,allocate,allocated,247,"// Template class for a map translating uint32_t into arbitrary types.; // The map will act like an indexed set: upon insertion of a new object,; // it will automatically assign a new index to it. Index of 0 is treated; // as invalid and is never allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h:13,Availability,Mask,MaskId,13,// RegId and MaskId are unchanged.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h:107,Security,access,accessed,107,"// This is really a std::map, except that it provides a non-trivial; // default constructor to the element accessed via [].",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h:18,Availability,mask,mask,18,// Print the lane mask in a short form (or not at all if all bits are set).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RDFRegisters.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:566,Usability,clear,clearance,566,"//==--- llvm/CodeGen/ReachingDefAnalysis.h - Reaching Def Analysis -*- C++ -*---==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Reaching Defs Analysis pass.; ///; /// This pass tracks for each instruction what is the ""closest"" reaching def of; /// a given register. It is used by BreakFalseDeps (for clearance calculation); /// and ExecutionDomainFix (for arbitrating conflicting domains).; ///; /// Note that this is different from the usual definition notion of liveness.; /// The CPU doesn't care whether or not we consider a register killed.; ///; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:9,Integrability,wrap,wrapper,9,"/// Thin wrapper around ""int"" used to store reaching definitions,; /// using an encoding that makes it compatible with TinyPtrVector.; /// The 0th LSB is forced zero (and will be used for pointer union tagging),; /// The 1st LSB is forced one (to make sure the value is non-zero).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:10,Usability,clear,clearance,10,/// Keeps clearance information for all registers. Note that this; /// is different from the usual definition notion of liveness. The CPU; /// doesn't care whether or not we consider a register killed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:17,Usability,clear,clearance,17,/// Provides the clearance - the number of instructions since the closest; /// reaching def instuction of PhysReg that reaches MI.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:100,Availability,redundant,redundant,100,"/// Return whether removing this instruction will have no effect on the; /// program, returning the redundant use-def chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:100,Safety,redund,redundant,100,"/// Return whether removing this instruction will have no effect on the; /// program, returning the redundant use-def chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:157,Availability,redundant,redundant,157,"/// Return whether removing this instruction will have no effect on the; /// program, ignoring the possible effects on some instructions, returning; /// the redundant use-def chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:157,Safety,redund,redundant,157,"/// Return whether removing this instruction will have no effect on the; /// program, ignoring the possible effects on some instructions, returning; /// the redundant use-def chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:62,Safety,safe,safely,62,/// Return whether a MachineInstr could be inserted at MI and safely define; /// the given register without affecting the program.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:62,Safety,safe,safely,62,"/// Return whether a MachineInstr could be inserted at MI and safely define; /// the given register without affecting the program, ignoring any effects; /// on the provided instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:4,Deployability,Update,Update,4,/// Update live-out values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:4,Deployability,Update,Update,4,/// Update def-ages for registers defined by MI.; /// Also break dependencies on partial defs and undef uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:65,Integrability,depend,dependencies,65,/// Update def-ages for registers defined by MI.; /// Also break dependencies on partial defs and undef uses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:157,Availability,redundant,redundant,157,"/// Return whether removing this instruction will have no effect on the; /// program, ignoring the possible effects on some instructions, returning; /// the redundant use-def chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h:157,Safety,redund,redundant,157,"/// Return whether removing this instruction will have no effect on the; /// program, ignoring the possible effects on some instructions, returning; /// the redundant use-def chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ReachingDefAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocCommon.h:105,Energy Efficiency,allocate,allocated,105,/// Default register class filter function for register allocation. All virtual; /// registers should be allocated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocCommon.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:417,Integrability,interface,interface,417,"//===- RegAllocPBQP.h -------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the PBQPBuilder interface, for classes which build PBQP; // instances to represent register allocation problems, and the RegAllocPBQP; // interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:539,Integrability,interface,interface,539,"//===- RegAllocPBQP.h -------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the PBQPBuilder interface, for classes which build PBQP; // instances to represent register allocation problems, and the RegAllocPBQP; // interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:37,Testability,test,test,37,/// Metadata to speed allocatability test.; ///; /// Keeps track of the number of infinities in each row and column.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:83,Availability,avail,available,83,// Remember this state to assert later that a non-infinite register; // option was available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:26,Testability,assert,assert,26,// Remember this state to assert later that a non-infinite register; // option was available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:47,Deployability,update,update,47,"// Metadata are computed incrementally. First, update them; // by removing the old cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:7,Deployability,update,update,7,// And update now the metadata with the new cost.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:45,Deployability,update,update,45,"// As the metadata may have changed with the update, the nodes may have; // become ConservativelyAllocatable or OptimallyReducible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:245,Energy Efficiency,reduce,reduced,245,"// Compute a reduction order for the graph by iteratively applying PBQP; // reduction rules. Locally optimal rules are applied whenever possible (R0,; // R1, R2). If no locally-optimal rules apply then any conservatively; // allocatable node is reduced. Finally, if no conservatively allocatable; // node exists then the node with the lowest spill-cost:degree ratio is; // selected.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h:146,Performance,optimiz,optimizing,146,"// Conservatively allocatable nodes will never spill. For now just; // take the first node in the set and push it on the stack. When we; // start optimizing more heavily for register preferencing, it may; // would be better to push nodes with lower 'expected' or worst-case; // register costs first (since early nodes are the most; // constrained).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocPBQP.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocRegistry.h:3,Security,Access,Accessors,3,// Accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegAllocRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h:4,Integrability,Wrap,Wrapper,4,/// Wrapper class representing virtual and physical registers. Should be passed; /// by value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h:406,Energy Efficiency,allocate,allocated,406,"// Register numbers can represent physical registers, virtual registers, and; // sometimes stack slots. The unsigned values are divided into these ranges:; //; // 0 Not a register, can be used as a sentinel.; // [1;2^30) Physical registers assigned by TableGen.; // [2^30;2^31) Stack slots. (Rarely used.); // [2^31;2^32) Virtual registers assigned by MachineRegisterInfo.; //; // Further sentinels can be allocated from the small negative integers.; // DenseMapInfo<unsigned> uses -1u and -2u.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h:99,Modifiability,variab,variable,99,/// isStackSlot - Sometimes it is useful the be able to store a non-negative; /// frame index in a variable that normally holds a register. isStackSlot(); /// returns true if Reg is in the range used for stack slots.; ///; /// FIXME: remove in favor of member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h:101,Security,validat,validated,101,"/// Utility to check-convert this value to a MCRegister. The caller is; /// expected to have already validated that this Register is, indeed,; /// physical.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Register.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h:157,Testability,assert,assertions,157,"/// Check if this register bank is valid. In other words,; /// if it has been properly constructed.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h:22,Availability,mask,mask,22,/// Dump the register mask on dbgs() stream.; /// The dump is verbose.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h:23,Availability,mask,mask,23,"/// Print the register mask on OS.; /// If IsForDebug is false, then only the name of the register bank; /// is printed. Otherwise, all the fields are printing.; /// TRI is then used to print the name of the register classes that; /// this register bank covers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBank.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:228,Availability,Mask,Mask,228,/// Helper struct that represents how a value is partially mapped; /// into a register.; /// The StartIdx and Length represent what region of the orginal; /// value this partial mapping covers.; /// This can be represented as a Mask of contiguous bit starting; /// at StartIdx bit and spanning Length bits.; /// StartIdx is the number of bits from the less significant bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:19,Availability,Mask,Mask,19,"/// Check that the Mask is compatible with the RegBank.; /// Indeed, if the RegBank cannot accomadate the ""active bits"" of the mask,; /// there is no way this mapping is valid.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:127,Availability,mask,mask,127,"/// Check that the Mask is compatible with the RegBank.; /// Indeed, if the RegBank cannot accomadate the ""active bits"" of the mask,; /// there is no way this mapping is valid.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:234,Testability,assert,assertions,234,"/// Check that the Mask is compatible with the RegBank.; /// Indeed, if the RegBank cannot accomadate the ""active bits"" of the mask,; /// there is no way this mapping is valid.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:28,Availability,down,down,28,/// How the value is broken down between the different register banks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:39,Availability,down,down,39,/// Number of partial mapping to break down this value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:136,Testability,assert,assertions,136,/// Verify that this mapping makes sense for a value of; /// \p MeaningfulBitWidth.; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:91,Performance,optimiz,optimizers,91,/// Identifier of the mapping.; /// This is used to communicate between the target and the optimizers; /// which mapping should be realized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:186,Energy Efficiency,efficient,efficient,186,/// Constructor for the mapping of an instruction.; /// \p NumOperands must be equal to number of all the operands of; /// the related instruction.; /// The rationale is that it is more efficient for the optimizers; /// to be able to assume that the mapping of the ith operand is; /// at the index i.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:204,Performance,optimiz,optimizers,204,/// Constructor for the mapping of an instruction.; /// \p NumOperands must be equal to number of all the operands of; /// the related instruction.; /// The rationale is that it is more efficient for the optimizers; /// to be able to assume that the mapping of the ith operand is; /// at the index i.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:166,Testability,assert,assertions,166,/// Verifiy that this mapping makes sense for \p MI.; /// \pre \p MI must be connected to a MachineFunction.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:183,Safety,avoid,avoid,183,/// The OpIdx-th cell contains the index in NewVRegs where the VRegs of the; /// OpIdx-th operand starts. -1 means we do not have such mapping yet.; /// Note: We use a SmallVector to avoid heap allocation for most cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:21,Energy Efficiency,allocate,allocated,21,/// Keep dynamically allocated PartialMapping in a separate map.; /// This shouldn't be needed when everything gets TableGen'ed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:21,Energy Efficiency,allocate,allocated,21,/// Keep dynamically allocated ValueMapping in a separate map.; /// This shouldn't be needed when everything gets TableGen'ed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:21,Energy Efficiency,allocate,allocated,21,/// Keep dynamically allocated array of ValueMapping in a separate map.; /// This shouldn't be needed when everything gets TableGen'ed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:21,Energy Efficiency,allocate,allocated,21,/// Keep dynamically allocated InstructionMapping in a separate map.; /// This shouldn't be needed when everything gets TableGen'ed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:71,Performance,Cache,Cache,71,/// Getting the minimal register class of a physreg is expensive.; /// Cache this information as we get it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:257,Availability,failure,failures,257,"/// This constructor is meaningless.; /// It just provides a default constructor that can be used at link time; /// when GlobalISel is not built.; /// That way, targets can still inherit from this class without doing; /// crazy gymnastic to avoid link time failures.; /// \note That works because the constructor is inlined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:179,Modifiability,inherit,inherit,179,"/// This constructor is meaningless.; /// It just provides a default constructor that can be used at link time; /// when GlobalISel is not built.; /// That way, targets can still inherit from this class without doing; /// crazy gymnastic to avoid link time failures.; /// \note That works because the constructor is inlined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:241,Safety,avoid,avoid,241,"/// This constructor is meaningless.; /// It just provides a default constructor that can be used at link time; /// when GlobalISel is not built.; /// That way, targets can still inherit from this class without doing; /// crazy gymnastic to avoid link time failures.; /// \note That works because the constructor is inlined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:583,Safety,abort,abort,583,"/// Helper method to apply something that is like the default mapping.; /// Basically, that means that \p OpdMapper.getMI() is left untouched; /// aside from the reassignment of the register operand that have been; /// remapped.; ///; /// The type of all the new registers that have been created by the; /// mapper are properly remapped to the type of the original registers; /// they replace. In other words, the semantic of the instruction does; /// not change, only the register banks.; ///; /// If the mapping of one of the operand spans several registers, this; /// method will abort as this is not like a default mapping anymore.; ///; /// \pre For OpIdx in {0..\p OpdMapper.getMI().getNumOperands()); /// the range OpdMapper.getVRegs(OpIdx) is empty or of size 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:157,Safety,avoid,avoid,157,/// Identifier used when the related instruction mapping instance; /// is generated by target independent code.; /// Make sure not to use that identifier to avoid possible collision.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:277,Deployability,update,updated,277,"/// Get the mapping of the different operands of \p MI; /// on the register bank.; /// This mapping should be the direct translation of \p MI.; /// In other words, when \p MI is mapped with the returned mapping,; /// only the register banks of the operands of \p MI need to be updated.; /// In particular, neither the opcode nor the type of \p MI needs to be; /// updated for this direct mapping.; ///; /// The target independent implementation gives a mapping based on; /// the register classes for the target specific opcode.; /// It uses the ID RegisterBankInfo::DefaultMappingID for that mapping.; /// Make sure you do not use that ID for the alternative mapping; /// for MI. See getInstrAlternativeMappings for the alternative; /// mappings.; ///; /// For instance, if \p MI is a vector add, the mapping should; /// not be a scalarization of the add.; ///; /// \post returnedVal.verify(MI).; ///; /// \note If returnedVal does not verify MI, this would probably mean; /// that the target does not support that instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:364,Deployability,update,updated,364,"/// Get the mapping of the different operands of \p MI; /// on the register bank.; /// This mapping should be the direct translation of \p MI.; /// In other words, when \p MI is mapped with the returned mapping,; /// only the register banks of the operands of \p MI need to be updated.; /// In particular, neither the opcode nor the type of \p MI needs to be; /// updated for this direct mapping.; ///; /// The target independent implementation gives a mapping based on; /// the register classes for the target specific opcode.; /// It uses the ID RegisterBankInfo::DefaultMappingID for that mapping.; /// Make sure you do not use that ID for the alternative mapping; /// for MI. See getInstrAlternativeMappings for the alternative; /// mappings.; ///; /// For instance, if \p MI is a vector add, the mapping should; /// not be a scalarization of the add.; ///; /// \post returnedVal.verify(MI).; ///; /// \note If returnedVal does not verify MI, this would probably mean; /// that the target does not support that instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:144,Testability,assert,assertions,144,/// Check that information hold by this instance make sense for the; /// given \p TRI.; ///; /// \note This method does not check anything when assertions are disabled.; ///; /// \return True is the check was successful.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:4,Security,Hash,Hashing,4,/// Hashing function for PartialMapping.; /// It is required for the hashing of ValueMapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h:69,Security,hash,hashing,69,/// Hashing function for PartialMapping.; /// It is required for the hashing of ValueMapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterBankInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h:542,Integrability,depend,depends,542,"//===- RegisterClassInfo.h - Dynamic Register Class Info --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the RegisterClassInfo class which provides dynamic; // information about target register classes. Callee saved and reserved; // registers depends on calling conventions and other dynamic information, so; // some things cannot be determined statically.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h:9,Performance,cache,cached,9,// Brief cached information for each register class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h:24,Performance,cache,cached,24,// Tag changes whenever cached information needs to be recomputed. An RCInfo; // entry is valid when its tag matches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h:71,Deployability,update,update,71,// Callee saved registers of last MF.; // Used only to determine if an update for CalleeSavedAliases is necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterClassInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:365,Availability,avail,available,365,"/// RegisterPressure computed within a region of instructions delimited by; /// TopIdx and BottomIdx. During pressure computation, the maximum pressure per; /// register pressure set is increased. Once pressure within a region is fully; /// computed, the live-in and live-out sets are recorded.; ///; /// This is preferable to RegionPressure when LiveIntervals are available,; /// because delimiting regions by SlotIndex is more robust and convenient than; /// holding block iterators. The block contents can change without invalidating; /// the pressure result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:429,Availability,robust,robust,429,"/// RegisterPressure computed within a region of instructions delimited by; /// TopIdx and BottomIdx. During pressure computation, the maximum pressure per; /// register pressure set is increased. Once pressure within a region is fully; /// computed, the live-in and live-out sets are recorded.; ///; /// This is preferable to RegionPressure when LiveIntervals are available,; /// because delimiting regions by SlotIndex is more robust and convenient than; /// holding block iterators. The block contents can change without invalidating; /// the pressure result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:112,Availability,down,downward,112,"/// Capture a change in pressure for a single pressure set. UnitInc may be; /// expressed in terms of upward or downward pressure depending on the client; /// and will be dynamically adjusted for current liveness.; ///; /// Pressure increments are tiny, typically 1-2 units, and this is only for; /// heuristics, so we don't check UnitInc overflow. Instead, we may have a; /// higher level assert that pressure is consistent within a region. We also; /// effectively ignore dead defs which don't affect heuristics much.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:130,Integrability,depend,depending,130,"/// Capture a change in pressure for a single pressure set. UnitInc may be; /// expressed in terms of upward or downward pressure depending on the client; /// and will be dynamically adjusted for current liveness.; ///; /// Pressure increments are tiny, typically 1-2 units, and this is only for; /// heuristics, so we don't check UnitInc overflow. Instead, we may have a; /// higher level assert that pressure is consistent within a region. We also; /// effectively ignore dead defs which don't affect heuristics much.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:390,Testability,assert,assert,390,"/// Capture a change in pressure for a single pressure set. UnitInc may be; /// expressed in terms of upward or downward pressure depending on the client; /// and will be dynamically adjusted for current liveness.; ///; /// Pressure increments are tiny, typically 1-2 units, and this is only for; /// heuristics, so we don't check UnitInc overflow. Instead, we may have a; /// higher level assert that pressure is consistent within a region. We also; /// effectively ignore dead defs which don't affect heuristics much.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:208,Energy Efficiency,schedul,scheduling,208,"// The initial design was for MaxPSets=4, but that requires PSet partitions,; // which are not yet implemented. (PSet partitions are equivalent PSets given; // the register classes actually in use within the scheduling region.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:64,Energy Efficiency,schedul,scheduler,64,"/// Store the effects of a change in pressure on things that MI scheduler cares; /// about.; ///; /// Excess records the value of the largest difference in register units beyond; /// the target's pressure limits across the affected pressure sets, where; /// largest is defined as the absolute value of the difference. Negative; /// ExcessUnits indicates a reduction in pressure that had already exceeded the; /// target's limits.; ///; /// CriticalMax records the largest increase in the tracker's max pressure that; /// exceeds the critical limit for some pressure set determined by the client.; ///; /// CurrentMax records the largest increase in the tracker's max pressure that; /// exceeds the current limit for some pressure set determined by the client.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:85,Integrability,wrap,wrapper,85,/// A set of live virtual registers and physical register units.; ///; /// This is a wrapper around a SparseSet which deals with mapping register unit; /// and virtual register indexes to an index usable by the sparse set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:197,Usability,usab,usable,197,/// A set of live virtual registers and physical register units.; ///; /// This is a wrapper around a SparseSet which deals with mapping register unit; /// and virtual register indexes to an index usable by the sparse set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:4,Usability,Clear,Clears,4,/// Clears the \p Pair.LaneMask lanes of \p Pair.Reg (mark them as dead).; /// Returns the previously live lanes of \p Pair.Reg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:682,Availability,down,downward,682,"/// Track the current register pressure at some position in the instruction; /// stream, and remember the high water mark within the region traversed. This; /// does not automatically consider live-through ranges. The client may; /// independently adjust for global liveness.; ///; /// Each RegPressureTracker only works within a MachineBasicBlock. Pressure can; /// be tracked across a larger region by storing a RegisterPressure result at; /// each block boundary and explicitly adjusting pressure to account for block; /// live-in and live-out register sets.; ///; /// RegPressureTracker holds a reference to a RegisterPressure result that it; /// computes incrementally. During downward tracking, P.BottomIdx or P.BottomPos; /// is invalid until it reaches the end of the block or closeRegion() is; /// explicitly called. Similarly, P.TopIdx is invalid during upward; /// tracking. Changing direction has the side effect of closing region, and; /// traversing past TopIdx or BottomIdx reopens it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:21,Integrability,depend,dependending,21,"/// Run in two modes dependending on whether constructed with IntervalPressure; /// or RegisterPressure. If requireIntervals is false, LIS are ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:81,Energy Efficiency,schedul,schedulers,81,"// Reset the MI position corresponding to the register pressure. This allows; // schedulers to move instructions above the RegPressureTracker's; // CurrPos. Since the pressure is computed before CurrPos, the iterator; // position changes while pressure does not.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:82,Availability,down,down,82,"/// Consider the pressure increase caused by traversing this instruction; /// top-down. Find the pressure set with the most change beyond its pressure; /// limit based on the tracker's current pressure, and record the number of; /// excess register units of that pressure set introduced by this instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:129,Availability,down,downward,129,/// Find the pressure set with the most change beyond its pressure limit after; /// traversing this instruction either upward or downward depending on the; /// closed end of the current region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:138,Integrability,depend,depending,138,/// Find the pressure set with the most change beyond its pressure limit after; /// traversing this instruction either upward or downward depending on the; /// closed end of the current region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h:72,Availability,down,down,72,/// Get the pressure of each PSet after traversing this instruction top-down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterPressure.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h:599,Availability,avail,available,599,"//===- RegisterScavenging.h - Machine register scavenging -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file declares the machine register scavenger class. It can provide; /// information such as unused register at any point in a machine basic block.; /// It also provides a mechanism to make registers available by evicting them; /// to spill slots.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h:154,Deployability,update,update,154,"/// Record that \p Reg is in use at scavenging index \p FI. This is for; /// targets which need to directly manage the spilling process, and need to; /// update the scavenger's internal state. It's expected this be called a; /// second time with \p Restore set to a non-null value, so that the; /// externally inserted restore instruction resets the scavenged slot; /// liveness when encountered.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h:4,Deployability,Update,Update,4,/// Update internal register state and move MBB iterator backwards. This; /// method gives precise results even in the absence of kill flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h:23,Deployability,update,update,23,/// Call backward() to update internal register state to just before \p *I.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h:15,Availability,avail,available,15,/// Return all available registers in the register class in Mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h:60,Availability,Mask,Mask,60,/// Return all available registers in the register class in Mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h:51,Availability,avail,available,51,"/// Make a register of the specific register class available from the current; /// position backwards to the place before \p To. If \p RestoreAfter is true; /// this includes the instruction following the current position.; /// SPAdj is the stack adjustment due to call frame, it's passed along to; /// eliminateFrameIndex().; /// Returns the scavenged register.; ///; /// If \p AllowSpill is false, fail if a spill is required to make the; /// register available, and return NoRegister.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h:454,Availability,avail,available,454,"/// Make a register of the specific register class available from the current; /// position backwards to the place before \p To. If \p RestoreAfter is true; /// this includes the instruction following the current position.; /// SPAdj is the stack adjustment due to call frame, it's passed along to; /// eliminateFrameIndex().; /// Returns the scavenged register.; ///; /// If \p AllowSpill is false, fail if a spill is required to make the; /// register available, and return NoRegister.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterScavenging.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h:518,Usability,simpl,simple,518,"//==- RegisterUsageInfo.h - Register Usage Informartion Storage --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This pass is required to take advantage of the interprocedural register; /// allocation infrastructure.; ///; /// This pass is simple immutable pass which keeps RegMasks (calculated based on; /// actual register allocation) for functions in a module and provides simple; /// API to query this information.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h:654,Usability,simpl,simple,654,"//==- RegisterUsageInfo.h - Register Usage Informartion Storage --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This pass is required to take advantage of the interprocedural register; /// allocation infrastructure.; ///; /// This pass is simple immutable pass which keeps RegMasks (calculated based on; /// actual register allocation) for functions in a module and provides simple; /// API to query this information.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RegisterUsageInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:451,Energy Efficiency,Schedul,SchedulingPriorityQueue,451,"//===----- ResourcePriorityQueue.h - A DFA-oriented priority queue -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that schedules using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:480,Energy Efficiency,schedul,schedules,480,"//===----- ResourcePriorityQueue.h - A DFA-oriented priority queue -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that schedules using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:513,Energy Efficiency,reduce,reduce,513,"//===----- ResourcePriorityQueue.h - A DFA-oriented priority queue -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that schedules using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:61,Performance,queue,queue,61,"//===----- ResourcePriorityQueue.h - A DFA-oriented priority queue -------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ResourcePriorityQueue class, which is a; // SchedulingPriorityQueue that schedules using DFA state to; // reduce the length of the critical path through the basic block; // on VLIW platforms.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:30,Availability,Avail,Available,30,/// Sorting functions for the Available queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:40,Performance,queue,queue,40,/// Sorting functions for the Available queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:78,Performance,Queue,Queue,78,"/// NumNodesSolelyBlocking - This vector contains, for every node in the; /// Queue, the number of nodes that the node is the sole unscheduled; /// predecessor for. This is used as a tie-breaker heuristic for better; /// mobility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:4,Performance,Queue,Queue,4,/// Queue - The queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:16,Performance,queue,queue,16,/// Queue - The queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:47,Energy Efficiency,schedul,scheduling,47,/// Single cost function reflecting benefit of scheduling SU; /// in the current cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h:4,Energy Efficiency,schedul,scheduledNode,4,/// scheduledNode - Main resource tracking point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ResourcePriorityQueue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RuntimeLibcalls.h:68,Security,access,access,68,"/// Return the outline atomics value for the given atomic ordering, access; /// size and set of libcalls for a given atomic, or UNKNOWN_LIBCALL if there; /// is none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/RuntimeLibcalls.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/RuntimeLibcalls.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SafeStack.h:40,Safety,Safe,SafeStack,40,"//===--------------------- llvm/CodeGen/SafeStack.h -------------*- C++-*--===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SafeStack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SafeStack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:20,Energy Efficiency,Schedul,ScheduleDAG,20,"//===- llvm/CodeGen/ScheduleDAG.h - Common Base Class -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAG class, which is used as the common base; /// class for instruction schedulers. This encapsulates the scheduling DAG,; /// which is shared between SelectionDAG and MachineInstr scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:405,Energy Efficiency,Schedul,ScheduleDAG,405,"//===- llvm/CodeGen/ScheduleDAG.h - Common Base Class -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAG class, which is used as the common base; /// class for instruction schedulers. This encapsulates the scheduling DAG,; /// which is shared between SelectionDAG and MachineInstr scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:484,Energy Efficiency,schedul,schedulers,484,"//===- llvm/CodeGen/ScheduleDAG.h - Common Base Class -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAG class, which is used as the common base; /// class for instruction schedulers. This encapsulates the scheduling DAG,; /// which is shared between SelectionDAG and MachineInstr scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:518,Energy Efficiency,schedul,scheduling,518,"//===- llvm/CodeGen/ScheduleDAG.h - Common Base Class -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAG class, which is used as the common base; /// class for instruction schedulers. This encapsulates the scheduling DAG,; /// which is shared between SelectionDAG and MachineInstr scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:593,Energy Efficiency,schedul,scheduling,593,"//===- llvm/CodeGen/ScheduleDAG.h - Common Base Class -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAG class, which is used as the common base; /// class for instruction schedulers. This encapsulates the scheduling DAG,; /// which is shared between SelectionDAG and MachineInstr scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Energy Efficiency,Schedul,Scheduling,4,/// Scheduling dependency. This represents one direction of an edge in the; /// scheduling DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:80,Energy Efficiency,schedul,scheduling,80,/// Scheduling dependency. This represents one direction of an edge in the; /// scheduling DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:15,Integrability,depend,dependency,15,/// Scheduling dependency. This represents one direction of an edge in the; /// scheduling DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:37,Energy Efficiency,schedul,scheduling,37,/// These are the different kinds of scheduling dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:48,Integrability,depend,dependencies,48,/// These are the different kinds of scheduling dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:18,Integrability,depend,dependence,18,///< Regular data dependence (aka true-dependence).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:39,Integrability,depend,dependence,39,///< Regular data dependence (aka true-dependence).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:21,Integrability,depend,dependence,21,///< A register anti-dependence (aka WAR).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:23,Integrability,depend,dependence,23,///< A register output-dependence (aka WAW).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:24,Integrability,depend,dependency,24,///< Any other ordering dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:119,Availability,redundant,redundant,119,"// Strong dependencies must be respected by the scheduler. Artificial; // dependencies may be removed only if they are redundant with another; // strong dependence.; //; // Weak dependencies may be violated by the scheduling strategy, but only if; // the strategy can prove it is correct to do so.; //; // Strong OrderKinds must occur before ""Weak"".; // Weak OrderKinds must occur after ""Weak"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:48,Energy Efficiency,schedul,scheduler,48,"// Strong dependencies must be respected by the scheduler. Artificial; // dependencies may be removed only if they are redundant with another; // strong dependence.; //; // Weak dependencies may be violated by the scheduling strategy, but only if; // the strategy can prove it is correct to do so.; //; // Strong OrderKinds must occur before ""Weak"".; // Weak OrderKinds must occur after ""Weak"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:214,Energy Efficiency,schedul,scheduling,214,"// Strong dependencies must be respected by the scheduler. Artificial; // dependencies may be removed only if they are redundant with another; // strong dependence.; //; // Weak dependencies may be violated by the scheduling strategy, but only if; // the strategy can prove it is correct to do so.; //; // Strong OrderKinds must occur before ""Weak"".; // Weak OrderKinds must occur after ""Weak"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:10,Integrability,depend,dependencies,10,"// Strong dependencies must be respected by the scheduler. Artificial; // dependencies may be removed only if they are redundant with another; // strong dependence.; //; // Weak dependencies may be violated by the scheduling strategy, but only if; // the strategy can prove it is correct to do so.; //; // Strong OrderKinds must occur before ""Weak"".; // Weak OrderKinds must occur after ""Weak"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:74,Integrability,depend,dependencies,74,"// Strong dependencies must be respected by the scheduler. Artificial; // dependencies may be removed only if they are redundant with another; // strong dependence.; //; // Weak dependencies may be violated by the scheduling strategy, but only if; // the strategy can prove it is correct to do so.; //; // Strong OrderKinds must occur before ""Weak"".; // Weak OrderKinds must occur after ""Weak"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:153,Integrability,depend,dependence,153,"// Strong dependencies must be respected by the scheduler. Artificial; // dependencies may be removed only if they are redundant with another; // strong dependence.; //; // Weak dependencies may be violated by the scheduling strategy, but only if; // the strategy can prove it is correct to do so.; //; // Strong OrderKinds must occur before ""Weak"".; // Weak OrderKinds must occur after ""Weak"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:178,Integrability,depend,dependencies,178,"// Strong dependencies must be respected by the scheduler. Artificial; // dependencies may be removed only if they are redundant with another; // strong dependence.; //; // Weak dependencies may be violated by the scheduling strategy, but only if; // the strategy can prove it is correct to do so.; //; // Strong OrderKinds must occur before ""Weak"".; // Weak OrderKinds must occur after ""Weak"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:119,Safety,redund,redundant,119,"// Strong dependencies must be respected by the scheduler. Artificial; // dependencies may be removed only if they are redundant with another; // strong dependence.; //; // Weak dependencies may be violated by the scheduling strategy, but only if; // the strategy can prove it is correct to do so.; //; // Strong OrderKinds must occur before ""Weak"".; // Weak OrderKinds must occur after ""Weak"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:16,Energy Efficiency,schedul,scheduling,16,///< An unknown scheduling barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:17,Performance,load,load,17,///< Nonvolatile load/Store instructions that may alias.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:17,Performance,load,load,17,///< Nonvolatile load/Store instructions that must alias.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:40,Integrability,depend,dependence,40,///< Arbitrary strong DAG edge (no real dependence).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:21,Integrability,depend,depending,21,"/// A pointer to the depending/depended-on SUnit, and an enum; /// indicating the kind of the dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:31,Integrability,depend,depended-on,31,"/// A pointer to the depending/depended-on SUnit, and an enum; /// indicating the kind of the dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:94,Integrability,depend,dependency,94,"/// A pointer to the depending/depended-on SUnit, and an enum; /// indicating the kind of the dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:33,Integrability,depend,dependence,33,/// A union discriminated by the dependence kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:31,Integrability,depend,dependencies,31,"/// For Data, Anti, and Output dependencies, the associated register. For; /// Data dependencies that don't currently have a register/ assigned, this; /// is set to zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:84,Integrability,depend,dependencies,84,"/// For Data, Anti, and Output dependencies, the associated register. For; /// Data dependencies that don't currently have a register/ assigned, this; /// is set to zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:39,Integrability,depend,dependencies,39,/// Additional information about Order dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:81,Performance,Latency,Latency,81,"/// The time associated with this edge. Often this is just the value of the; /// Latency field of the predecessor, however advanced models may provide; /// additional information about specific edges.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:64,Performance,latency,latency,64,/// Returns true if the specified SDep is equivalent except for latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:16,Performance,latency,latency,16,"/// Returns the latency value for this edge, which roughly means the; /// minimum number of cycles that must elapse between the predecessor and; /// the successor, given that they have this edge between them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:13,Performance,latency,latency,13,/// Sets the latency for this edge.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:55,Integrability,depend,dependence,55,/// Returns an enum value representing the kind of the dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,Integrability,depend,dependence,30,/// Tests if this is an Order dependence between two memory accesses; /// where both sides of the dependence access memory in non-volatile and; /// fully modeled ways.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:98,Integrability,depend,dependence,98,/// Tests if this is an Order dependence between two memory accesses; /// where both sides of the dependence access memory in non-volatile and; /// fully modeled ways.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:60,Security,access,accesses,60,/// Tests if this is an Order dependence between two memory accesses; /// where both sides of the dependence access memory in non-volatile and; /// fully modeled ways.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:109,Security,access,access,109,/// Tests if this is an Order dependence between two memory accesses; /// where both sides of the dependence access memory in non-volatile and; /// fully modeled ways.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,/// Tests if this is an Order dependence between two memory accesses; /// where both sides of the dependence access memory in non-volatile and; /// fully modeled ways.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,Integrability,depend,dependence,30,/// Tests if this is an Order dependence that is marked as a barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,/// Tests if this is an Order dependence that is marked as a barrier.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:49,Integrability,depend,dependence,49,/// Tests if this is could be any kind of memory dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,/// Tests if this is could be any kind of memory dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,Integrability,depend,dependence,30,"/// Tests if this is an Order dependence that is marked as; /// ""must alias"", meaning that the SUnits at either end of the edge have a; /// memory dependence on a known memory location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:147,Integrability,depend,dependence,147,"/// Tests if this is an Order dependence that is marked as; /// ""must alias"", meaning that the SUnits at either end of the edge have a; /// memory dependence on a known memory location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,"/// Tests if this is an Order dependence that is marked as; /// ""must alias"", meaning that the SUnits at either end of the edge have a; /// memory dependence on a known memory location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:199,Energy Efficiency,schedul,scheduler,199,"/// Tests if this a weak dependence. Weak dependencies are considered DAG; /// edges for height computation and other heuristics, but do not force; /// ordering. Breaking a weak edge may require the scheduler to compensate,; /// for example by inserting a copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:25,Integrability,depend,dependence,25,"/// Tests if this a weak dependence. Weak dependencies are considered DAG; /// edges for height computation and other heuristics, but do not force; /// ordering. Breaking a weak edge may require the scheduler to compensate,; /// for example by inserting a copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:42,Integrability,depend,dependencies,42,"/// Tests if this a weak dependence. Weak dependencies are considered DAG; /// edges for height computation and other heuristics, but do not force; /// ordering. Breaking a weak edge may require the scheduler to compensate,; /// for example by inserting a copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,"/// Tests if this a weak dependence. Weak dependencies are considered DAG; /// edges for height computation and other heuristics, but do not force; /// ordering. Breaking a weak edge may require the scheduler to compensate,; /// for example by inserting a copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,Integrability,depend,dependence,30,"/// Tests if this is an Order dependence that is marked as; /// ""artificial"", meaning it isn't necessary for correctness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,"/// Tests if this is an Order dependence that is marked as; /// ""artificial"", meaning it isn't necessary for correctness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:30,Integrability,depend,dependence,30,"/// Tests if this is an Order dependence that is marked as ""cluster"",; /// meaning it is artificial and wants to be adjacent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,"/// Tests if this is an Order dependence that is marked as ""cluster"",; /// meaning it is artificial and wants to be adjacent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:28,Integrability,depend,dependence,28,/// Tests if this is a Data dependence that is associated with a register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,/// Tests if this is a Data dependence that is associated with a register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Energy Efficiency,Schedul,Scheduling,4,/// Scheduling unit. This is a node in the scheduling DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:43,Energy Efficiency,schedul,scheduling,43,/// Scheduling unit. This is a node in the scheduling DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:69,Energy Efficiency,schedul,scheduling,69,"///< If not this, the node from which this node; /// was cloned. (SD scheduling only)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:5,Performance,Queue,Queue,5,///< Queue id of node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:20,Energy Efficiency,schedul,scheduled,20,///< # of preds not scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:20,Energy Efficiency,schedul,scheduled,20,///< # of succs not scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:25,Energy Efficiency,schedul,scheduled,25,///< # of weak preds not scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:25,Energy Efficiency,schedul,scheduled,25,///< # of weak succs not scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:27,Energy Efficiency,schedul,scheduled,27,///< # of reg defs with no scheduled use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:10,Performance,latency,latency,10,///< Node latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:15,Availability,avail,available,15,///< True once available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:15,Energy Efficiency,schedul,scheduled,15,///< True once scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:27,Energy Efficiency,schedul,schedule,27,///< True if preferable to schedule high.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:27,Energy Efficiency,schedul,schedule,27,///< True if preferable to schedule low.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:5,Energy Efficiency,Schedul,Scheduling,5,///< Scheduling preference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:41,Energy Efficiency,schedul,scheduling,41,/// Constructs an SUnit for pre-regalloc scheduling to represent an; /// SDNode and any nodes flagged to it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:42,Energy Efficiency,schedul,scheduling,42,/// Constructs an SUnit for post-regalloc scheduling to represent a; /// MachineInstr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:65,Energy Efficiency,schedul,scheduling,65,"/// Boundary nodes are placeholders for the boundary of the; /// scheduling region.; ///; /// BoundaryNodes can have DAG edges, including Data edges, but they do not; /// correspond to schedulable entities (e.g. instructions) and do not have a; /// valid ID. Consequently, always check for boundary nodes before accessing; /// an associative data structure keyed on node ID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:185,Energy Efficiency,schedul,schedulable,185,"/// Boundary nodes are placeholders for the boundary of the; /// scheduling region.; ///; /// BoundaryNodes can have DAG edges, including Data edges, but they do not; /// correspond to schedulable entities (e.g. instructions) and do not have a; /// valid ID. Consequently, always check for boundary nodes before accessing; /// an associative data structure keyed on node ID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:312,Security,access,accessing,312,"/// Boundary nodes are placeholders for the boundary of the; /// scheduling region.; ///; /// BoundaryNodes can have DAG edges, including Data edges, but they do not; /// correspond to schedulable entities (e.g. instructions) and do not have a; /// valid ID. Consequently, always check for boundary nodes before accessing; /// an associative data structure keyed on node ID.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:96,Energy Efficiency,schedul,scheduling,96,/// Assigns the representative SDNode for this SUnit. This may be used; /// during pre-regalloc scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:96,Energy Efficiency,schedul,scheduling,96,/// Returns the representative SDNode for this SUnit. This may be used; /// during pre-regalloc scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:86,Energy Efficiency,schedul,scheduling,86,/// Assigns the instruction for the SUnit. This may be used during; /// post-regalloc scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:103,Energy Efficiency,schedul,scheduling,103,/// Returns the representative MachineInstr for this SUnit. This may be used; /// during post-regalloc scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:57,Performance,latency,latency,57,"/// Adds a barrier edge to SU by calling addPred(), with latency 0; /// generally or latency 1 for a store followed by a load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:85,Performance,latency,latency,85,"/// Adds a barrier edge to SU by calling addPred(), with latency 0; /// generally or latency 1 for a store followed by a load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:121,Performance,load,load,121,"/// Adds a barrier edge to SU by calling addPred(), with latency 0; /// generally or latency 1 for a store followed by a load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:82,Availability,down,down,82,"/// Returns the height of this node, which is the length of the; /// maximum path down to any node which has no successors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,/// Tests if node N is a predecessor of this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,/// Tests if node N is a successor of this node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:64,Performance,latency,latency,64,/// Returns true if the specified SDep is equivalent except for latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:55,Integrability,depend,dependence,55,/// Returns an enum value representing the kind of the dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:178,Energy Efficiency,schedul,scheduler,178,"//===--------------------------------------------------------------------===//; /// This interface is used to plug different priorities computation; /// algorithms into the list scheduler. It implements the interface of a; /// standard priority queue, where nodes are inserted in arbitrary order and; /// returned in priority order. The computation of the priority and the; /// representation of the queue are totally up to the implementation to; /// decide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:89,Integrability,interface,interface,89,"//===--------------------------------------------------------------------===//; /// This interface is used to plug different priorities computation; /// algorithms into the list scheduler. It implements the interface of a; /// standard priority queue, where nodes are inserted in arbitrary order and; /// returned in priority order. The computation of the priority and the; /// representation of the queue are totally up to the implementation to; /// decide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:207,Integrability,interface,interface,207,"//===--------------------------------------------------------------------===//; /// This interface is used to plug different priorities computation; /// algorithms into the list scheduler. It implements the interface of a; /// standard priority queue, where nodes are inserted in arbitrary order and; /// returned in priority order. The computation of the priority and the; /// representation of the queue are totally up to the implementation to; /// decide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:245,Performance,queue,queue,245,"//===--------------------------------------------------------------------===//; /// This interface is used to plug different priorities computation; /// algorithms into the list scheduler. It implements the interface of a; /// standard priority queue, where nodes are inserted in arbitrary order and; /// returned in priority order. The computation of the priority and the; /// representation of the queue are totally up to the implementation to; /// decide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:400,Performance,queue,queue,400,"//===--------------------------------------------------------------------===//; /// This interface is used to plug different priorities computation; /// algorithms into the list scheduler. It implements the interface of a; /// standard priority queue, where nodes are inserted in arbitrary order and; /// returned in priority order. The computation of the priority and the; /// representation of the queue are totally up to the implementation to; /// decide.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:20,Energy Efficiency,schedul,scheduled,20,"/// As each node is scheduled, this method is invoked. This allows the; /// priority function to adjust the priority of related unscheduled nodes,; /// for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:9,Energy Efficiency,schedul,scheduling,9,///< The scheduling units.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Usability,Clear,Clears,4,/// Clears the DAG state (between regions).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:42,Energy Efficiency,Schedul,ScheduleDAG,42,/// Pops up a GraphViz/gv window with the ScheduleDAG rendered using 'dot'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:64,Energy Efficiency,Schedul,ScheduleDAG,64,/// Returns a label for an SUnit node in a visualization of the ScheduleDAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:52,Energy Efficiency,Schedul,ScheduleDAG,52,/// Adds custom features for a visualization of the ScheduleDAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:34,Energy Efficiency,schedul,scheduled,34,/// Verifies that all SUnits were scheduled and that their state is; /// consistent. Returns the number of scheduled SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:107,Energy Efficiency,schedul,scheduled,107,/// Verifies that all SUnits were scheduled and that their state is; /// consistent. Returns the number of scheduled SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:39,Integrability,depend,dependence,39,/// Tests if this is not an SDep::Data dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Testability,Test,Tests,4,/// Tests if this is not an SDep::Data dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:23,Energy Efficiency,Schedul,ScheduleDAG,23,/// A reference to the ScheduleDAG's SUnits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:93,Deployability,update,updates,93,"/// Fix the ordering, by either recomputing from scratch or by applying; /// any outstanding updates. Uses a heuristic to estimate what will be; /// cheaper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:64,Energy Efficiency,schedul,scheduled,64,/// Creates the initial topological ordering from the DAG to be scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Deployability,Update,Updates,4,/// Updates the topological ordering to accommodate an edge to be; /// added from SUnit \p X to SUnit \p Y.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:14,Deployability,update,update,14,/// Queues an update to the topological ordering to accommodate an edge to; /// be added from SUnit \p X to SUnit \p Y.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Performance,Queue,Queues,4,/// Queues an update to the topological ordering to accommodate an edge to; /// be added from SUnit \p X to SUnit \p Y.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h:4,Deployability,Update,Updates,4,/// Updates the topological ordering to accommodate an edge to be; /// removed from the specified node \p N from the predecessors of the; /// current node \p M.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:7,Energy Efficiency,Schedul,ScheduleDAGInstrs,7,"//===- ScheduleDAGInstrs.h - MachineInstr Scheduling ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAGInstrs class, which implements scheduling; /// for a MachineInstr-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:42,Energy Efficiency,Schedul,Scheduling,42,"//===- ScheduleDAGInstrs.h - MachineInstr Scheduling ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAGInstrs class, which implements scheduling; /// for a MachineInstr-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:405,Energy Efficiency,Schedul,ScheduleDAGInstrs,405,"//===- ScheduleDAGInstrs.h - MachineInstr Scheduling ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAGInstrs class, which implements scheduling; /// for a MachineInstr-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:447,Energy Efficiency,schedul,scheduling,447,"//===- ScheduleDAGInstrs.h - MachineInstr Scheduling ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAGInstrs class, which implements scheduling; /// for a MachineInstr-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:488,Integrability,depend,dependency,488,"//===- ScheduleDAGInstrs.h - MachineInstr Scheduling ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Implements the ScheduleDAGInstrs class, which implements scheduling; /// for a MachineInstr-based dependency graph.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:57,Integrability,depend,dependent,57,"/// Record a physical register access.; /// For non-data-dependent uses, OpIdx == -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:31,Security,access,access,31,"/// Record a physical register access.; /// For non-data-dependent uses, OpIdx == -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:75,Energy Efficiency,allocate,allocated,75,/// Use a SparseMultiSet to track physical registers. Storage is only; /// allocated once for the pass. It can be cleared in constant time and reused; /// without any frees.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:114,Usability,clear,cleared,114,/// Use a SparseMultiSet to track physical registers. Storage is only; /// allocated once for the pass. It can be cleared in constant time and reused; /// without any frees.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:161,Energy Efficiency,schedul,scheduling,161,"/// Use SparseSet as a SparseMap by relying on the fact that it never; /// compares ValueT's, only unsigned keys. This allows the set to be cleared; /// between scheduling regions in constant time as long as ValueT does not; /// require a destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:140,Usability,clear,cleared,140,"/// Use SparseSet as a SparseMap by relying on the fact that it never; /// compares ValueT's, only unsigned keys. This allows the set to be cleared; /// between scheduling regions in constant time as long as ValueT does not; /// require a destructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:119,Energy Efficiency,schedul,scheduler,119,/// Track local uses of virtual registers. These uses are gathered by the DAG; /// builder and may be consulted by the scheduler to avoid iterating an entire; /// vreg use list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:132,Safety,avoid,avoid,132,/// Track local uses of virtual registers. These uses are gathered by the DAG; /// builder and may be consulted by the scheduler to avoid iterating an entire; /// vreg use list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:6,Energy Efficiency,Schedul,ScheduleDAG,6,/// A ScheduleDAG for scheduling lists of MachineInstr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:22,Energy Efficiency,schedul,scheduling,22,/// A ScheduleDAG for scheduling lists of MachineInstr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:33,Integrability,interface,interface,33,/// TargetSchedModel provides an interface to the machine model.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:181,Energy Efficiency,schedul,scheduler,181,/// The standard DAG builder does not normally include terminators as DAG; /// nodes because it does not create the necessary dependencies to prevent; /// reordering. A specialized scheduler can override; /// TargetInstrInfo::isSchedulingBoundary then enable this flag to indicate; /// it has taken responsibility for scheduling the terminator correctly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:318,Energy Efficiency,schedul,scheduling,318,/// The standard DAG builder does not normally include terminators as DAG; /// nodes because it does not create the necessary dependencies to prevent; /// reordering. A specialized scheduler can override; /// TargetInstrInfo::isSchedulingBoundary then enable this flag to indicate; /// it has taken responsibility for scheduling the terminator correctly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:126,Integrability,depend,dependencies,126,/// The standard DAG builder does not normally include terminators as DAG; /// nodes because it does not create the necessary dependencies to prevent; /// reordering. A specialized scheduler can override; /// TargetInstrInfo::isSchedulingBoundary then enable this flag to indicate; /// it has taken responsibility for scheduling the terminator correctly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:17,Availability,mask,masks,17,/// Whether lane masks should get tracked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:33,Energy Efficiency,schedul,scheduling,33,// State specific to the current scheduling region.; // ------------------------------------------------; /// The block in which to insert instructions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:37,Energy Efficiency,schedul,scheduled,37,/// The beginning of the range to be scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:31,Energy Efficiency,schedul,scheduled,31,/// The end of the range to be scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:80,Energy Efficiency,schedul,scheduling,80,"/// After calling BuildSchedGraph, each machine instruction in the current; /// scheduling region is mapped to an SUnit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:199,Energy Efficiency,allocate,allocated,199,"// State internal to DAG building.; // -------------------------------; /// Defs, Uses - Remember where defs and uses of each register are as we; /// iterate upward through the instructions. This is allocated here instead; /// of inside BuildSchedGraph to avoid the need for it to be initialized and; /// destructed for each block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:256,Safety,avoid,avoid,256,"// State internal to DAG building.; // -------------------------------; /// Defs, Uses - Remember where defs and uses of each register are as we; /// iterate upward through the instructions. This is allocated here instead; /// of inside BuildSchedGraph to avoid the need for it to be initialized and; /// destructed for each block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:92,Energy Efficiency,schedul,scheduled,92,/// Remember a generic side-effecting instruction as we proceed.; /// No other SU ever gets scheduled around it (except in the special; /// case of a huge region that gets reduced).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:172,Energy Efficiency,reduce,reduced,172,/// Remember a generic side-effecting instruction as we proceed.; /// No other SU ever gets scheduled around it (except in the special; /// case of a huge region that gets reduced).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:129,Performance,optimiz,optimized,129,"/// A list of SUnits, used in Value2SUsMap, during DAG construction.; /// Note: to gain speed it might be worth investigating an optimized; /// implementation of this data structure, such as a singly linked list; /// with a memory pool (SmallVector was tried but slow and SparseSet is not; /// applicable).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:107,Integrability,depend,depend,107,"/// A map from ValueType to SUList, used during DAG construction, as; /// a means of remembering which SUs depend on which memory locations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:4,Energy Efficiency,Reduce,Reduces,4,"/// Reduces maps in FIFO order, by N SUs. This is better than turning; /// every Nth memory SU into BarrierChain in buildSchedGraph(), since; /// it avoids unnecessary edges between seen SUs above the new BarrierChain,; /// and those below it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:149,Safety,avoid,avoids,149,"/// Reduces maps in FIFO order, by N SUs. This is better than turning; /// every Nth memory SU into BarrierChain in buildSchedGraph(), since; /// it avoids unnecessary edges between seen SUs above the new BarrierChain,; /// and those below it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:103,Integrability,depend,dependency,103,"/// Adds a chain edge between SUa and SUb, but only if both; /// AAResults and Target fail to deny the dependency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:9,Integrability,depend,dependencies,9,/// Adds dependencies as needed from all SUs in list to SU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:9,Integrability,depend,dependencies,9,"/// Adds dependencies as needed from all SUs in map, to SU.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:9,Integrability,depend,dependencies,9,"/// Adds dependencies as needed to SU, from all SUs mapped to V.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:127,Performance,optimiz,optimized,127,"/// Adds barrier chain edges from all SUs in map, and then clear the map.; /// This is equivalent to insertBarrierChain(), but optimized for the common; /// case where the new BarrierChain (a global memory object) has a higher; /// NodeNum than all SUs in map. It is assumed BarrierChain has been set; /// before calling this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:59,Usability,clear,clear,59,"/// Adds barrier chain edges from all SUs in map, and then clear the map.; /// This is equivalent to insertBarrierChain(), but optimized for the common; /// case where the new BarrierChain (a global memory object) has a higher; /// NodeNum than all SUs in map. It is assumed BarrierChain has been set; /// before calling this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:31,Security,access,access,31,"/// For an unanalyzable memory access, this Value is used in maps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:161,Energy Efficiency,schedul,schedule,161,/// Remember instruction that precedes DBG_VALUE.; /// These are generated by buildSchedGraph but persist so they can be; /// referenced when emitting the final schedule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:43,Energy Efficiency,schedul,scheduling,43,/// Gets the machine model for instruction scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:34,Energy Efficiency,schedul,scheduling,34,/// Resolves and cache a resolved scheduling class for an SUnit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:17,Performance,cache,cache,17,/// Resolves and cache a resolved scheduling class for an SUnit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:50,Energy Efficiency,schedul,scheduling,50,/// Returns an iterator to the top of the current scheduling region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:53,Energy Efficiency,schedul,scheduling,53,/// Returns an iterator to the bottom of the current scheduling region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:49,Energy Efficiency,schedul,scheduling,49,"/// If this method returns true, handling of the scheduling regions; /// themselves (in case of a scheduling boundary in MBB) will be done; /// beginning with the topmost region of MBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:98,Energy Efficiency,schedul,scheduling,98,"/// If this method returns true, handling of the scheduling regions; /// themselves (in case of a scheduling boundary in MBB) will be done; /// beginning with the topmost region of MBB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:24,Energy Efficiency,schedul,scheduling,24,/// Prepares to perform scheduling in the given block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:16,Performance,perform,perform,16,/// Prepares to perform scheduling in the given block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:20,Energy Efficiency,schedul,scheduling,20,/// Cleans up after scheduling in the given block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:34,Energy Efficiency,schedul,scheduler,34,"/// Initialize the DAG and common scheduler state for a new; /// scheduling region. This does not actually create the DAG, only clears; /// it. The scheduling driver may call BuildSchedGraph multiple times per; /// scheduling region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:65,Energy Efficiency,schedul,scheduling,65,"/// Initialize the DAG and common scheduler state for a new; /// scheduling region. This does not actually create the DAG, only clears; /// it. The scheduling driver may call BuildSchedGraph multiple times per; /// scheduling region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:148,Energy Efficiency,schedul,scheduling,148,"/// Initialize the DAG and common scheduler state for a new; /// scheduling region. This does not actually create the DAG, only clears; /// it. The scheduling driver may call BuildSchedGraph multiple times per; /// scheduling region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:215,Energy Efficiency,schedul,scheduling,215,"/// Initialize the DAG and common scheduler state for a new; /// scheduling region. This does not actually create the DAG, only clears; /// it. The scheduling driver may call BuildSchedGraph multiple times per; /// scheduling region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:128,Usability,clear,clears,128,"/// Initialize the DAG and common scheduler state for a new; /// scheduling region. This does not actually create the DAG, only clears; /// it. The scheduling driver may call BuildSchedGraph multiple times per; /// scheduling region.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:20,Energy Efficiency,schedul,scheduler,20,/// Called when the scheduler has finished scheduling the current region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:43,Energy Efficiency,schedul,scheduling,43,/// Called when the scheduler has finished scheduling the current region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:147,Energy Efficiency,efficient,efficient,147,"/// Builds SUnits for the current region.; /// If \p RPTracker is non-null, compute register pressure as a side effect.; /// The DAG builder is an efficient place to do it because it already visits; /// operands.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:87,Energy Efficiency,schedul,scheduled,87,/// Adds dependencies from instructions in the current list of; /// instructions being scheduled to scheduling barrier. We want to make sure; /// instructions which define registers that are either used by the; /// terminator or are live-out are properly scheduled. This is especially; /// important when the definition latency of the return value(s) are too; /// high to be hidden by the branch or when the liveout registers used by; /// instructions in the fallthrough block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:100,Energy Efficiency,schedul,scheduling,100,/// Adds dependencies from instructions in the current list of; /// instructions being scheduled to scheduling barrier. We want to make sure; /// instructions which define registers that are either used by the; /// terminator or are live-out are properly scheduled. This is especially; /// important when the definition latency of the return value(s) are too; /// high to be hidden by the branch or when the liveout registers used by; /// instructions in the fallthrough block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:255,Energy Efficiency,schedul,scheduled,255,/// Adds dependencies from instructions in the current list of; /// instructions being scheduled to scheduling barrier. We want to make sure; /// instructions which define registers that are either used by the; /// terminator or are live-out are properly scheduled. This is especially; /// important when the definition latency of the return value(s) are too; /// high to be hidden by the branch or when the liveout registers used by; /// instructions in the fallthrough block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:9,Integrability,depend,dependencies,9,/// Adds dependencies from instructions in the current list of; /// instructions being scheduled to scheduling barrier. We want to make sure; /// instructions which define registers that are either used by the; /// terminator or are live-out are properly scheduled. This is especially; /// important when the definition latency of the return value(s) are too; /// high to be hidden by the branch or when the liveout registers used by; /// instructions in the fallthrough block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:320,Performance,latency,latency,320,/// Adds dependencies from instructions in the current list of; /// instructions being scheduled to scheduling barrier. We want to make sure; /// instructions which define registers that are either used by the; /// terminator or are live-out are properly scheduled. This is especially; /// important when the definition latency of the return value(s) are too; /// high to be hidden by the branch or when the liveout registers used by; /// instructions in the fallthrough block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:69,Energy Efficiency,schedul,scheduling,69,"/// Orders nodes according to selected style.; ///; /// Typically, a scheduling algorithm will implement schedule() without; /// overriding enterRegion() or exitRegion().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:105,Energy Efficiency,schedul,schedule,105,"/// Orders nodes according to selected style.; ///; /// Typically, a scheduling algorithm will implement schedule() without; /// overriding enterRegion() or exitRegion().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:35,Energy Efficiency,schedul,scheduling,35,/// Allow targets to perform final scheduling actions at the level of the; /// whole MachineFunction. By default does nothing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:21,Performance,perform,perform,21,/// Allow targets to perform final scheduling actions at the level of the; /// whole MachineFunction. By default does nothing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:35,Energy Efficiency,schedul,scheduling,35,/// Fixes register kill flags that scheduling has made invalid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:221,Availability,failure,failure,221,/// Add a DAG edge to the given SU with the given predecessor; /// dependence data.; ///; /// \returns true if the edge may be added without creating a cycle OR if an; /// equivalent edge already existed (false indicates failure).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:67,Integrability,depend,dependence,67,/// Add a DAG edge to the given SU with the given predecessor; /// dependence data.; ///; /// \returns true if the edge may be added without creating a cycle OR if an; /// equivalent edge already existed (false indicates failure).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h:14,Availability,mask,mask,14,/// Returns a mask for which lanes get read/written by the given (register); /// machine operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h:7,Energy Efficiency,Schedul,ScheduleDAGMutation,7,"//===- ScheduleDAGMutation.h - MachineInstr Scheduling ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGMutation class, which represents; // a target-specific mutation of the dependency graph for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h:44,Energy Efficiency,Schedul,Scheduling,44,"//===- ScheduleDAGMutation.h - MachineInstr Scheduling ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGMutation class, which represents; // a target-specific mutation of the dependency graph for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h:408,Energy Efficiency,Schedul,ScheduleDAGMutation,408,"//===- ScheduleDAGMutation.h - MachineInstr Scheduling ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGMutation class, which represents; // a target-specific mutation of the dependency graph for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h:511,Energy Efficiency,schedul,scheduling,511,"//===- ScheduleDAGMutation.h - MachineInstr Scheduling ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGMutation class, which represents; // a target-specific mutation of the dependency graph for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h:490,Integrability,depend,dependency,490,"//===- ScheduleDAGMutation.h - MachineInstr Scheduling ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleDAGMutation class, which represents; // a target-specific mutation of the dependency graph for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDAGMutation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:7,Energy Efficiency,Schedul,ScheduleDFS,7,"//===- ScheduleDFS.h - ILP metric for ScheduleDAGInstrs ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Definition of an ILP metric for machine level instruction scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:38,Energy Efficiency,Schedul,ScheduleDAGInstrs,38,"//===- ScheduleDFS.h - ILP metric for ScheduleDAGInstrs ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Definition of an ILP metric for machine level instruction scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:441,Energy Efficiency,schedul,scheduling,441,"//===- ScheduleDFS.h - ILP metric for ScheduleDAGInstrs ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Definition of an ILP metric for machine level instruction scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:340,Energy Efficiency,schedul,schedule,340,"/// Represent the ILP of the subDAG rooted at a DAG node.; ///; /// ILPValues summarize the DAG subtree rooted at each node. ILPValues are; /// valid for all nodes regardless of their subtree membership.; ///; /// When computed using bottom-up DFS, this metric assumes that the DAG is a; /// forest of trees with roots at the bottom of the schedule branching upward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:53,Integrability,depend,depending,53,"/// Length may either correspond to depth or height, depending on direction,; /// and cycles or nodes depending on context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:102,Integrability,depend,depending,102,"/// Length may either correspond to depth or height, depending on direction,; /// and cycles or nodes depending on context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:83,Deployability,update,updated,83,/// Cache the current connection level of each subtree.; /// This mutable array is updated during scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:98,Energy Efficiency,schedul,scheduling,98,/// Cache the current connection level of each subtree.; /// This mutable array is updated during scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:4,Performance,Cache,Cache,4,/// Cache the current connection level of each subtree.; /// This mutable array is updated during scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:4,Usability,Clear,Clear,4,/// Clear the results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:27,Safety,detect,detected,27,/// The number of subtrees detected in this DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:102,Performance,latency,latency,102,"/// Get the connection level of a subtree.; ///; /// For bottom-up trees, the connection level is the latency depth (in cycles); /// of the deepest connection to another subtree.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:26,Deployability,update,update,26,/// Scheduler callback to update SubtreeConnectLevels when a tree is; /// initially scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:4,Energy Efficiency,Schedul,Scheduler,4,/// Scheduler callback to update SubtreeConnectLevels when a tree is; /// initially scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h:84,Energy Efficiency,schedul,scheduled,84,/// Scheduler callback to update SubtreeConnectLevels when a tree is; /// initially scheduled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleDFS.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:18,Energy Efficiency,Schedul,ScheduleHazardRecognizer,18,"//=- llvm/CodeGen/ScheduleHazardRecognizer.h - Scheduling Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleHazardRecognizer class, which implements; // hazard-avoidance heuristics for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:47,Energy Efficiency,Schedul,Scheduling,47,"//=- llvm/CodeGen/ScheduleHazardRecognizer.h - Scheduling Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleHazardRecognizer class, which implements; // hazard-avoidance heuristics for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:408,Energy Efficiency,Schedul,ScheduleHazardRecognizer,408,"//=- llvm/CodeGen/ScheduleHazardRecognizer.h - Scheduling Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleHazardRecognizer class, which implements; // hazard-avoidance heuristics for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:493,Energy Efficiency,schedul,scheduling,493,"//=- llvm/CodeGen/ScheduleHazardRecognizer.h - Scheduling Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleHazardRecognizer class, which implements; // hazard-avoidance heuristics for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:461,Safety,hazard,hazard-avoidance,461,"//=- llvm/CodeGen/ScheduleHazardRecognizer.h - Scheduling Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the ScheduleHazardRecognizer class, which implements; // hazard-avoidance heuristics for scheduling.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:4,Safety,Hazard,HazardRecognizer,4,"/// HazardRecognizer - This determines whether or not an instruction can be; /// issued this cycle, and whether or not a noop needs to be inserted to handle; /// the hazard.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:166,Safety,hazard,hazard,166,"/// HazardRecognizer - This determines whether or not an instruction can be; /// issued this cycle, and whether or not a noop needs to be inserted to handle; /// the hazard.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:265,Energy Efficiency,schedul,scheduler,265,"/// MaxLookAhead - Indicate the number of cycles in the scoreboard; /// state. Important to restore the state after backtracking. Additionally,; /// MaxLookAhead=0 identifies a fake recognizer, allowing the client to; /// bypass virtual calls. Currently the PostRA scheduler ignores it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:282,Availability,avail,available,282,"/// getHazardType - Return the hazard type of emitting this node. There are; /// three possible results. Either:; /// * NoHazard: it is legal to issue this instruction on this cycle.; /// * Hazard: issuing this instruction would stall the machine. If some; /// other instruction is available, issue it first.; /// * NoopHazard: issuing this instruction would break the program. If; /// some other instruction can be issued, do so, otherwise issue a noop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:31,Safety,hazard,hazard,31,"/// getHazardType - Return the hazard type of emitting this node. There are; /// three possible results. Either:; /// * NoHazard: it is legal to issue this instruction on this cycle.; /// * Hazard: issuing this instruction would stall the machine. If some; /// other instruction is available, issue it first.; /// * NoopHazard: issuing this instruction would break the program. If; /// some other instruction can be issued, do so, otherwise issue a noop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:190,Safety,Hazard,Hazard,190,"/// getHazardType - Return the hazard type of emitting this node. There are; /// three possible results. Either:; /// * NoHazard: it is legal to issue this instruction on this cycle.; /// * Hazard: issuing this instruction would stall the machine. If some; /// other instruction is available, issue it first.; /// * NoopHazard: issuing this instruction would break the program. If; /// some other instruction can be issued, do so, otherwise issue a noop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:90,Energy Efficiency,schedul,schedule,90,/// Reset - This callback is invoked when a new block of; /// instructions is about to be schedule. The hazard state should be; /// set to an initialized state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:104,Safety,hazard,hazard,104,/// Reset - This callback is invoked when a new block of; /// instructions is about to be schedule. The hazard state should be; /// set to an initialized state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:99,Safety,hazard,hazard,99,"/// EmitInstruction - This callback is invoked when an instruction is; /// emitted, to advance the hazard state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:86,Energy Efficiency,schedul,scheduling,86,"/// This overload will be used when the hazard recognizer is being used; /// by a non-scheduling pass, which does not use SUnits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:40,Safety,hazard,hazard,40,"/// This overload will be used when the hazard recognizer is being used; /// by a non-scheduling pass, which does not use SUnits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:211,Energy Efficiency,schedul,scheduling,211,/// PreEmitNoops - This callback is invoked prior to emitting an instruction.; /// It should return the number of noops to emit prior to the provided; /// instruction.; /// Note: This is only used during PostRA scheduling. EmitNoop is not called; /// for these noops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:86,Energy Efficiency,schedul,scheduling,86,"/// This overload will be used when the hazard recognizer is being used; /// by a non-scheduling pass, which does not use SUnits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:40,Safety,hazard,hazard,40,"/// This overload will be used when the hazard recognizer is being used; /// by a non-scheduling pass, which does not use SUnits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:175,Availability,avail,available,175,"/// ShouldPreferAnother - This callback may be invoked if getHazardType; /// returns NoHazard. If, even though there is no hazard, it would be better to; /// schedule another available instruction, this callback should return true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:158,Energy Efficiency,schedul,schedule,158,"/// ShouldPreferAnother - This callback may be invoked if getHazardType; /// returns NoHazard. If, even though there is no hazard, it would be better to; /// schedule another available instruction, this callback should return true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:123,Safety,hazard,hazard,123,"/// ShouldPreferAnother - This callback may be invoked if getHazardType; /// returns NoHazard. If, even though there is no hazard, it would be better to; /// schedule another available instruction, this callback should return true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:66,Availability,down,down,66,"/// AdvanceCycle - This callback is invoked whenever the next top-down; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts. This should increment the; /// internal state of the hazard recognizer so that previously ""Hazard""; /// instructions will now not be hazards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:94,Energy Efficiency,schedul,scheduled,94,"/// AdvanceCycle - This callback is invoked whenever the next top-down; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts. This should increment the; /// internal state of the hazard recognizer so that previously ""Hazard""; /// instructions will now not be hazards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:162,Performance,latency,latency,162,"/// AdvanceCycle - This callback is invoked whenever the next top-down; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts. This should increment the; /// internal state of the hazard recognizer so that previously ""Hazard""; /// instructions will now not be hazards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:246,Safety,hazard,hazard,246,"/// AdvanceCycle - This callback is invoked whenever the next top-down; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts. This should increment the; /// internal state of the hazard recognizer so that previously ""Hazard""; /// instructions will now not be hazards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:284,Safety,Hazard,Hazard,284,"/// AdvanceCycle - This callback is invoked whenever the next top-down; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts. This should increment the; /// internal state of the hazard recognizer so that previously ""Hazard""; /// instructions will now not be hazards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:326,Safety,hazard,hazards,326,"/// AdvanceCycle - This callback is invoked whenever the next top-down; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts. This should increment the; /// internal state of the hazard recognizer so that previously ""Hazard""; /// instructions will now not be hazards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:94,Energy Efficiency,schedul,scheduled,94,"/// RecedeCycle - This callback is invoked whenever the next bottom-up; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h:162,Performance,latency,latency,162,"/// RecedeCycle - This callback is invoked whenever the next bottom-up; /// instruction to be scheduled cannot issue in the current cycle, either; /// because of latency or resource conflicts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScheduleHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:20,Energy Efficiency,Schedul,SchedulerRegistry,20,"//===- llvm/CodeGen/SchedulerRegistry.h -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation for instruction scheduler function; // pass registry (RegisterScheduler).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:437,Energy Efficiency,schedul,scheduler,437,"//===- llvm/CodeGen/SchedulerRegistry.h -------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains the implementation for instruction scheduler function; // pass registry (RegisterScheduler).; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:155,Energy Efficiency,schedul,schedulers,155,//===----------------------------------------------------------------------===//; ///; /// RegisterScheduler class - Track the registration of instruction schedulers.; ///; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:3,Security,Access,Accessors,3,// Accessors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:93,Energy Efficiency,schedul,scheduler,93,/// createBURRListDAGScheduler - This creates a bottom up register usage; /// reduction list scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:65,Energy Efficiency,schedul,scheduler,65,/// createSourceListDAGScheduler - This creates a bottom up list scheduler that; /// schedules nodes in source code order when possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:85,Energy Efficiency,schedul,schedules,85,/// createSourceListDAGScheduler - This creates a bottom up list scheduler that; /// schedules nodes in source code order when possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:94,Energy Efficiency,schedul,scheduler,94,/// createHybridListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that make use of latency information to avoid stalls; /// for long latency instructions in low register pressure mode. In high; /// register pressure mode it schedules to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:262,Energy Efficiency,schedul,schedules,262,/// createHybridListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that make use of latency information to avoid stalls; /// for long latency instructions in low register pressure mode. In high; /// register pressure mode it schedules to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:275,Energy Efficiency,reduce,reduce,275,/// createHybridListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that make use of latency information to avoid stalls; /// for long latency instructions in low register pressure mode. In high; /// register pressure mode it schedules to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:121,Performance,latency,latency,121,/// createHybridListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that make use of latency information to avoid stalls; /// for long latency instructions in low register pressure mode. In high; /// register pressure mode it schedules to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:171,Performance,latency,latency,171,/// createHybridListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that make use of latency information to avoid stalls; /// for long latency instructions in low register pressure mode. In high; /// register pressure mode it schedules to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:144,Safety,avoid,avoid,144,/// createHybridListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that make use of latency information to avoid stalls; /// for long latency instructions in low register pressure mode. In high; /// register pressure mode it schedules to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:91,Energy Efficiency,schedul,scheduler,91,/// createILPListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that tries to increase instruction level parallelism; /// in low register pressure mode. In high register pressure mode it schedules; /// to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:224,Energy Efficiency,schedul,schedules,224,/// createILPListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that tries to increase instruction level parallelism; /// in low register pressure mode. In high register pressure mode it schedules; /// to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:242,Energy Efficiency,reduce,reduce,242,/// createILPListDAGScheduler - This creates a bottom up register pressure; /// aware list scheduler that tries to increase instruction level parallelism; /// in low register pressure mode. In high register pressure mode it schedules; /// to reduce register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:51,Energy Efficiency,schedul,scheduler,51,"/// createFastDAGScheduler - This creates a ""fast"" scheduler.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:74,Availability,down,down,74,/// createVLIWDAGScheduler - Scheduler for VLIW targets. This creates top down; /// DFA driven list scheduler with clustering heuristic to control; /// register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:29,Energy Efficiency,Schedul,Scheduler,29,/// createVLIWDAGScheduler - Scheduler for VLIW targets. This creates top down; /// DFA driven list scheduler with clustering heuristic to control; /// register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:100,Energy Efficiency,schedul,scheduler,100,/// createVLIWDAGScheduler - Scheduler for VLIW targets. This creates top down; /// DFA driven list scheduler with clustering heuristic to control; /// register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:57,Energy Efficiency,schedul,scheduler,57,/// createDefaultScheduler - This creates an instruction scheduler appropriate; /// for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:45,Energy Efficiency,schedul,scheduling,45,"/// createDAGLinearizer - This creates a ""no-scheduling"" scheduler which; /// linearize the DAG using topological order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h:57,Energy Efficiency,schedul,scheduler,57,"/// createDAGLinearizer - This creates a ""no-scheduling"" scheduler which; /// linearize the DAG using topological order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SchedulerRegistry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:49,Energy Efficiency,Schedul,Schedule,49,"//=- llvm/CodeGen/ScoreboardHazardRecognizer.h - Schedule Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScoreboardHazardRecognizer class, which; // encapsulates hazard-avoidance heuristics for scheduling, based on the; // scheduling itineraries specified for the target.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:494,Energy Efficiency,schedul,scheduling,494,"//=- llvm/CodeGen/ScoreboardHazardRecognizer.h - Schedule Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScoreboardHazardRecognizer class, which; // encapsulates hazard-avoidance heuristics for scheduling, based on the; // scheduling itineraries specified for the target.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:523,Energy Efficiency,schedul,scheduling,523,"//=- llvm/CodeGen/ScoreboardHazardRecognizer.h - Schedule Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScoreboardHazardRecognizer class, which; // encapsulates hazard-avoidance heuristics for scheduling, based on the; // scheduling itineraries specified for the target.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:462,Safety,hazard,hazard-avoidance,462,"//=- llvm/CodeGen/ScoreboardHazardRecognizer.h - Schedule Support -*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the ScoreboardHazardRecognizer class, which; // encapsulates hazard-avoidance heuristics for scheduling, based on the; // scheduling itineraries specified for the target.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:67,Availability,mask,mask,67,"// Scoreboard to track function unit usage. Scoreboard[0] is a; // mask of the FUs in use in the cycle currently being; // schedule. Scoreboard[1] is a mask for the next cycle. The; // Scoreboard is used as a circular buffer with the current cycle; // indicated by Head.; //; // Scoreboard always counts cycles in forward execution order. If used by a; // bottom-up scheduler, then the scoreboard cycles are the inverse of the; // scheduler's cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:152,Availability,mask,mask,152,"// Scoreboard to track function unit usage. Scoreboard[0] is a; // mask of the FUs in use in the cycle currently being; // schedule. Scoreboard[1] is a mask for the next cycle. The; // Scoreboard is used as a circular buffer with the current cycle; // indicated by Head.; //; // Scoreboard always counts cycles in forward execution order. If used by a; // bottom-up scheduler, then the scoreboard cycles are the inverse of the; // scheduler's cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:123,Energy Efficiency,schedul,schedule,123,"// Scoreboard to track function unit usage. Scoreboard[0] is a; // mask of the FUs in use in the cycle currently being; // schedule. Scoreboard[1] is a mask for the next cycle. The; // Scoreboard is used as a circular buffer with the current cycle; // indicated by Head.; //; // Scoreboard always counts cycles in forward execution order. If used by a; // bottom-up scheduler, then the scoreboard cycles are the inverse of the; // scheduler's cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:366,Energy Efficiency,schedul,scheduler,366,"// Scoreboard to track function unit usage. Scoreboard[0] is a; // mask of the FUs in use in the cycle currently being; // schedule. Scoreboard[1] is a mask for the next cycle. The; // Scoreboard is used as a circular buffer with the current cycle; // indicated by Head.; //; // Scoreboard always counts cycles in forward execution order. If used by a; // bottom-up scheduler, then the scoreboard cycles are the inverse of the; // scheduler's cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:431,Energy Efficiency,schedul,scheduler,431,"// Scoreboard to track function unit usage. Scoreboard[0] is a; // mask of the FUs in use in the cycle currently being; // schedule. Scoreboard[1] is a mask for the next cycle. The; // Scoreboard is used as a circular buffer with the current cycle; // indicated by Head.; //; // Scoreboard always counts cycles in forward execution order. If used by a; // bottom-up scheduler, then the scoreboard cycles are the inverse of the; // scheduler's cycles.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:32,Energy Efficiency,monitor,monitored,32,// The maximum number of cycles monitored by the Scoreboard. This; // value is determined based on the target itineraries to ensure; // that all hazards can be tracked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:145,Safety,hazard,hazards,145,// The maximum number of cycles monitored by the Scoreboard. This; // value is determined based on the target itineraries to ensure; // that all hazards can be tracked.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:29,Energy Efficiency,power,power-of-,29,// Depth is expected to be a power-of-2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:55,Energy Efficiency,schedul,scheduled,55,// Stalls provides an cycle offset at which SU will be scheduled. It will be; // negative for bottom-up scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h:104,Energy Efficiency,schedul,scheduling,104,// Stalls provides an cycle offset at which SU will be scheduled. It will be; // negative for bottom-up scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ScoreboardHazardRecognizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:168,Security,access,accessed,168,/// A reference to an Interned FoldingSetNodeID for this node.; /// The Allocator in SelectionDAG holds the data.; /// SDVTList contains all types which are frequently accessed in SelectionDAG.; /// The size of this list is not expected to be big so it won't introduce; /// a memory penalty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:45,Performance,cache,cache,45,"/// The hash value for SDVTList is fixed, so cache it to avoid; /// hash calculation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:57,Safety,avoid,avoid,57,"/// The hash value for SDVTList is fixed, so cache it to avoid; /// hash calculation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:8,Security,hash,hash,8,"/// The hash value for SDVTList is fixed, so cache it to avoid; /// hash calculation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:68,Security,hash,hash,68,"/// The hash value for SDVTList is fixed, so cache it to avoid; /// hash calculation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:56,Safety,avoid,avoid,56,/// Specialize FoldingSetTrait for SDVTListNode; /// to avoid computing temp FoldingSetNodeID and hash value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:98,Security,hash,hash,98,/// Specialize FoldingSetTrait for SDVTListNode; /// to avoid computing temp FoldingSetNodeID and hash value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:523,Energy Efficiency,power,powerful,523,"/// This is used to represent a portion of an LLVM function in a low-level; /// Data Dependence DAG representation suitable for instruction selection.; /// This DAG is constructed as the first step of instruction selection in order; /// to allow implementation of machine specific optimizations; /// and code simplifications.; ///; /// The representation used by the SelectionDAG is a target-independent; /// representation, which has some similarities to the GCC RTL representation,; /// but is significantly more simple, powerful, and is a graph form instead of a; /// linear form.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:85,Integrability,Depend,Dependence,85,"/// This is used to represent a portion of an LLVM function in a low-level; /// Data Dependence DAG representation suitable for instruction selection.; /// This DAG is constructed as the first step of instruction selection in order; /// to allow implementation of machine specific optimizations; /// and code simplifications.; ///; /// The representation used by the SelectionDAG is a target-independent; /// representation, which has some similarities to the GCC RTL representation,; /// but is significantly more simple, powerful, and is a graph form instead of a; /// linear form.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:281,Performance,optimiz,optimizations,281,"/// This is used to represent a portion of an LLVM function in a low-level; /// Data Dependence DAG representation suitable for instruction selection.; /// This DAG is constructed as the first step of instruction selection in order; /// to allow implementation of machine specific optimizations; /// and code simplifications.; ///; /// The representation used by the SelectionDAG is a target-independent; /// representation, which has some similarities to the GCC RTL representation,; /// but is significantly more simple, powerful, and is a graph form instead of a; /// linear form.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:309,Usability,simpl,simplifications,309,"/// This is used to represent a portion of an LLVM function in a low-level; /// Data Dependence DAG representation suitable for instruction selection.; /// This DAG is constructed as the first step of instruction selection in order; /// to allow implementation of machine specific optimizations; /// and code simplifications.; ///; /// The representation used by the SelectionDAG is a target-independent; /// representation, which has some similarities to the GCC RTL representation,; /// but is significantly more simple, powerful, and is a graph form instead of a; /// linear form.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:515,Usability,simpl,simple,515,"/// This is used to represent a portion of an LLVM function in a low-level; /// Data Dependence DAG representation suitable for instruction selection.; /// This DAG is constructed as the first step of instruction selection in order; /// to allow implementation of machine specific optimizations; /// and code simplifications.; ///; /// The representation used by the SelectionDAG is a target-independent; /// representation, which has some similarities to the GCC RTL representation,; /// but is significantly more simple, powerful, and is a graph form instead of a; /// linear form.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:23,Performance,optimiz,optimization,23,/// The function-level optimization remark emitter. Used to emit remarks; /// whenever manipulating the DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:59,Performance,perform,performing,59,"/// This structure is used to memoize nodes, automatically performing; /// CSE with existing nodes when a duplicate is requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:171,Deployability,update,updates,171,"/// Clients of various APIs that cause global effects on; /// the DAG can optionally implement this interface. This allows the clients; /// to handle the various sorts of updates that happen.; ///; /// A DAGUpdateListener automatically registers itself with DAG when it is; /// constructed, and removes itself when destroyed in RAII fashion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:100,Integrability,interface,interface,100,"/// Clients of various APIs that cause global effects on; /// the DAG can optionally implement this interface. This allows the clients; /// to handle the various sorts of updates that happen.; ///; /// A DAGUpdateListener automatically registers itself with DAG when it is; /// constructed, and removes itself when destroyed in RAII fashion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:24,Deployability,update,updated,24,/// The node N that was updated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:88,Usability,resume,resume,88,/// Help to insert SDNodeFlags automatically in transforming. Use; /// RAII to save and resume flags in current scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:20,Energy Efficiency,reduce,reduce,20,"// The compiler can reduce this expression to a constant iff we pass an; // empty DebugLoc. Thankfully, the debug location doesn't have any bearing; // on the subclass data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Usability,Clear,Clear,4,/// Clear state and free memory necessary to make this; /// SelectionDAG ready to process a new block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:75,Availability,avail,available,75,"/// Returns the result of the AssignmentTrackingAnalysis pass if it's; /// available, otherwise return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:314,Availability,Error,Error,314,/// Just dump dot graph to a user-provided path and title.; /// This doesn't open the dot viewer program and; /// helps visualization when outside debugging session.; /// FileName expects absolute path. If provided; /// without any path separators then the file; /// will be created in the current directory.; /// Error will be emitted if the path is insane.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Usability,Clear,Clear,4,/// Clear all previously defined node graph attributes.; /// Intended to be used from a debugging tool (eg. gdb).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:558,Deployability,Update,UpdatedNodes,558,"/// Transforms a SelectionDAG node and any operands to it into a node; /// that is compatible with the target instruction selector, as indicated by; /// the TargetLowering object.; ///; /// \returns true if \c N is a valid, legal node after calling this.; ///; /// This essentially runs a single recursive walk of the \c Legalize process; /// over the given node (and its operands). This can be used to incrementally; /// legalize the DAG. All of the nodes which are directly replaced,; /// potentially including N, are added to the output parameter \c; /// UpdatedNodes so that the delta to the DAG can be understood by the; /// caller.; ///; /// When this returns false, N has been legalized in a way that make the; /// pointer passed in no longer valid. It may have even been deleted from the; /// DAG, and so it shouldn't be used further. When this returns true, the; /// N passed in is a legal node, and can be immediately processed as such.; /// This may still have done some work on the DAG, and will still populate; /// UpdatedNodes with any new nodes replacing those originally in the DAG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:1028,Deployability,Update,UpdatedNodes,1028,"/// Transforms a SelectionDAG node and any operands to it into a node; /// that is compatible with the target instruction selector, as indicated by; /// the TargetLowering object.; ///; /// \returns true if \c N is a valid, legal node after calling this.; ///; /// This essentially runs a single recursive walk of the \c Legalize process; /// over the given node (and its operands). This can be used to incrementally; /// legalize the DAG. All of the nodes which are directly replaced,; /// potentially including N, are added to the output parameter \c; /// UpdatedNodes so that the delta to the DAG can be understood by the; /// caller.; ///; /// When this returns false, N has been legalized in a way that make the; /// pointer passed in no longer valid. It may have even been deleted from the; /// DAG, and so it shouldn't be used further. When this returns true, the; /// N passed in is a legal node, and can be immediately processed as such.; /// This may still have done some work on the DAG, and will still populate; /// UpdatedNodes with any new nodes replacing those originally in the DAG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:135,Integrability,wrap,wrapping,135,"//===--------------------------------------------------------------------===//; // Node creation methods.; /// Create a ConstantSDNode wrapping a constant value.; /// If VT is a vector type, the constant is splatted into a BUILD_VECTOR.; ///; /// If only legal types can be produced, this does the necessary; /// transformations (e.g., if the vector element type is illegal).; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:38,Integrability,wrap,wrapping,38,"/// @}; /// Create a ConstantFPSDNode wrapping a constant value.; /// If VT is a vector type, the constant is splatted into a BUILD_VECTOR.; ///; /// If only legal types can be produced, this does the necessary; /// transformations (e.g., if the vector element type is illegal).; /// The forms that take a double should only be used for simple constants; /// that can be exactly represented in VT. No checks are made.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:337,Usability,simpl,simple,337,"/// @}; /// Create a ConstantFPSDNode wrapping a constant value.; /// If VT is a vector type, the constant is splatted into a BUILD_VECTOR.; ///; /// If only legal types can be produced, this does the necessary; /// transformations (e.g., if the vector element type is illegal).; /// The forms that take a double should only be used for simple constants; /// that can be exactly represented in VT. No checks are made.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:129,Availability,mask,mask,129,"/// Return an ISD::VECTOR_SHUFFLE node. The number of elements in VT,; /// which must be a vector type, must match the number of mask elements; /// NumElts. An integer mask element equal to -1 is treated as undefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:168,Availability,mask,mask,168,"/// Return an ISD::VECTOR_SHUFFLE node. The number of elements in VT,; /// which must be a vector type, must match the number of mask elements; /// NumElts. An integer mask element equal to -1 is treated as undefined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:177,Integrability,depend,depending,177,/// Returns a node representing a splat of one value into all lanes; /// of the provided vector type. This is a utility which returns; /// either a BUILD_VECTOR or SPLAT_VECTOR depending on the; /// scalability of the desired vector type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:199,Performance,scalab,scalability,199,/// Returns a node representing a splat of one value into all lanes; /// of the provided vector type. This is a utility which returns; /// either a BUILD_VECTOR or SPLAT_VECTOR depending on the; /// scalability of the desired vector type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:82,Modifiability,extend,extending,82,"/// Convert Op, which must be of float type, to the; /// float type VT, by either extending or rounding (by truncation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:101,Modifiability,extend,extending,101,"/// Convert Op, which must be a STRICT operation of float type, to the; /// float type VT, by either extending or rounding (by truncation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:90,Modifiability,extend,extending,90,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either any-extending or truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:91,Modifiability,extend,extending,91,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either sign-extending or truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:91,Modifiability,extend,extending,91,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either zero-extending or truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:111,Integrability,depend,depending,111,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either any/sign/zero-extending (depending on IsAny /; /// IsSigned) or truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:100,Modifiability,extend,extending,100,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either any/sign/zero-extending (depending on IsAny /; /// IsSigned) or truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:107,Integrability,depend,depending,107,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either sign/zero-extending (depending on IsSigned) or; /// truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:96,Modifiability,extend,extending,96,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by either sign/zero-extending (depending on IsSigned) or; /// truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:170,Modifiability,extend,extending,170,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by first bitcasting (from potential vector) to; /// corresponding scalar type then either any-extending or truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:171,Modifiability,extend,extending,171,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by first bitcasting (from potential vector) to; /// corresponding scalar type then either sign-extending or truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:171,Modifiability,extend,extending,171,"/// Convert Op, which must be of integer type, to the; /// integer type VT, by first bitcasting (from potential vector) to; /// corresponding scalar type then either zero-extending or truncating it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:43,Modifiability,extend,extend,43,/// Return the expression required to zero extend the Op; /// value assuming it was the smaller SrcTy value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:103,Performance,perform,performing,103,"/// Convert Op, which must be of integer type, to the integer type VT, by; /// either truncating it or performing either zero or sign extension as; /// appropriate extension for the pointer's semantics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:38,Modifiability,extend,extend,38,/// Return the expression required to extend the Op as a pointer value; /// assuming it was the smaller SrcTy value. This may be either a zero extend; /// or a sign extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:143,Modifiability,extend,extend,143,/// Return the expression required to extend the Op as a pointer value; /// assuming it was the smaller SrcTy value. This may be either a zero extend; /// or a sign extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:165,Modifiability,extend,extend,165,/// Return the expression required to extend the Op as a pointer value; /// assuming it was the smaller SrcTy value. This may be either a zero extend; /// or a sign extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:13,Testability,log,logical,13,"/// Create a logical NOT operation as (XOR Val, BooleanOne).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:86,Availability,Mask,Mask,86,"/// Create a vector-predicated logical NOT operation as (VP_XOR Val,; /// BooleanOne, Mask, EVL).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:31,Testability,log,logical,31,"/// Create a vector-predicated logical NOT operation as (VP_XOR Val,; /// BooleanOne, Mask, EVL).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:100,Performance,perform,performing,100,"/// Convert a vector-predicated Op, which must be an integer vector, to the; /// vector-type VT, by performing either vector-predicated zext or truncating; /// it. The Op will be returned as-is if Op and VT are vectors containing; /// integer with same width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:135,Performance,perform,performing,135,"/// Convert a vector-predicated Op, which must be of integer type, to the; /// vector-type integer type VT, by either truncating it or performing either; /// vector-predicated zero or sign extension as appropriate extension for the; /// pointer's semantics. This function just redirects to getVPZExtOrTrunc; /// right now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:119,Performance,load,load,119,"/// Create an add instruction with appropriate flags when used for; /// addressing some offset of an object. i.e. if a load is split into multiple; /// components, create an add nuw from the base pointer to the offset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:27,Integrability,wrap,wrap,27,"// The object itself can't wrap around the address space, so it shouldn't be; // possible for the adds of the offsets to the split parts to overflow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:79,Performance,load,loaded,79,/// Compute a TokenFactor to force all the incoming stack arguments to be; /// loaded from the stack. This is used in tail call lowering to protect; /// stack arguments from being clobbered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:11,Usability,simpl,simplify,11,/// Try to simplify a select/vselect into 1 of its operands or a constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:11,Usability,simpl,simplify,11,/// Try to simplify a shift into 1 of its operands or a constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:11,Usability,simpl,simplify,11,/// Try to simplify a floating-point binary operation into 1 of its operands; /// or a constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:116,Performance,load,loaded,116,"/// Gets a node for an atomic cmpxchg op. There are two; /// valid Opcodes. ISD::ATOMIC_CMO_SWAP produces the value loaded and a; /// chain result. ISD::ATOMIC_CMP_SWAP_WITH_SUCCESS produces the value loaded,; /// a success flag (initially i1), and a chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:201,Performance,load,loaded,201,"/// Gets a node for an atomic cmpxchg op. There are two; /// valid Opcodes. ISD::ATOMIC_CMO_SWAP produces the value loaded and a; /// chain result. ISD::ATOMIC_CMP_SWAP_WITH_SUCCESS produces the value loaded,; /// a success flag (initially i1), and a chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:46,Usability,GUID,GUID,46,"/// Creates a PseudoProbeSDNode with function GUID `Guid` and; /// the index of the block `Index` it is probing, as well as the attributes; /// `attr` of the probe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:52,Usability,Guid,Guid,52,"/// Creates a PseudoProbeSDNode with function GUID `Guid` and; /// the index of the block `Index` it is probing, as well as the attributes; /// `attr` of the probe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Performance,Load,Loads,4,"/// Loads are not normal binary operators: their result type is not; /// determined by their operands, and they produce a value AND a token chain.; ///; /// This function will set the MOLoad flag on MMOFlags, but you can set it if; /// you want. The MOStore flag must not be set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:14,Testability,Assert,AssertAlignSDNode,14,/// Return an AssertAlignSDNode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:43,Availability,avail,available,43,"/// Get the specified node if it's already available, or else return NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:122,Deployability,Update,UpdateListener,122,"/// Remove the specified node from the system. If any of its; /// operands then becomes dead, remove them as well. Inform UpdateListener; /// for each node deleted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:378,Deployability,Update,UpdateListener,378,"/// Modify anything using 'From' to use 'To' instead.; /// This can cause recursive merging of nodes in the DAG. Use the first; /// version if 'From' is known to have a single result, use the second; /// if you have two nodes with identical results (or if 'To' has a superset; /// of the results of 'From'), use the third otherwise.; ///; /// These methods all take an optional UpdateListener, which (if not null) is; /// informed about nodes that are deleted and modified due to recursive; /// changes in the dag.; ///; /// These functions only replace all existing uses. It's possible that as; /// these replacements are being performed, CSE may cause the From node; /// to be given new uses. These new uses of From are left in place, and; /// not automatically transferred to To.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:629,Performance,perform,performed,629,"/// Modify anything using 'From' to use 'To' instead.; /// This can cause recursive merging of nodes in the DAG. Use the first; /// version if 'From' is known to have a single result, use the second; /// if you have two nodes with identical results (or if 'To' has a superset; /// of the results of 'From'), use the third otherwise.; ///; /// These methods all take an optional UpdateListener, which (if not null) is; /// informed about nodes that are deleted and modified due to recursive; /// changes in the dag.; ///; /// These functions only replace all existing uses. It's possible that as; /// these replacements are being performed, CSE may cause the From node; /// to be given new uses. These new uses of From are left in place, and; /// not automatically transferred to To.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:131,Deployability,update,update,131,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:265,Integrability,depend,dependency,265,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:19,Performance,load,load,19,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:296,Performance,load,load,296,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:330,Performance,load,load,330,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:131,Deployability,update,update,131,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:265,Integrability,depend,dependency,265,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:19,Performance,load,load,19,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:296,Performance,load,load,296,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:330,Performance,load,load,330,"/// If an existing load has uses of its chain, create a token factor node with; /// that chain and the new memory node's chain and update users of the old; /// chain to the token factor. This ensures that the new memory node will have; /// the same relative memory dependency position as the old load. Returns the; /// new merged load chain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:116,Deployability,update,update,116,/// Move node N in the AllNodes list to be immediately; /// before the given iterator Position. This may be used to update the; /// topological ordering when the list of nodes is modified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:210,Availability,down,down,210,"/// In most cases this function returns the ABI alignment for a given type,; /// except for illegal vector types where the alignment exceeds that of the; /// stack. In such cases we attempt to break the vector down to a legal type; /// and return the ABI alignment for that instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:109,Availability,down,downstream,109,/// Return true if the sign bit of Op is known to be zero.; /// We use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:89,Usability,simpl,simplify,89,/// Return true if the sign bit of Op is known to be zero.; /// We use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:25,Availability,Mask,Mask,25,/// Return true if 'Op & Mask' is known to be zero. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:102,Availability,down,downstream,102,/// Return true if 'Op & Mask' is known to be zero. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:121,Availability,Mask,Mask,121,/// Return true if 'Op & Mask' is known to be zero. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:82,Usability,simpl,simplify,82,/// Return true if 'Op & Mask' is known to be zero. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:25,Availability,Mask,Mask,25,/// Return true if 'Op & Mask' is known to be zero in DemandedElts. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:118,Availability,down,downstream,118,/// Return true if 'Op & Mask' is known to be zero in DemandedElts. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:137,Availability,Mask,Mask,137,/// Return true if 'Op & Mask' is known to be zero in DemandedElts. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:98,Usability,simpl,simplify,98,/// Return true if 'Op & Mask' is known to be zero in DemandedElts. We; /// use this predicate to simplify operations downstream. Op and Mask are; /// known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:111,Availability,down,downstream,111,/// Return true if 'Op' is known to be zero in DemandedElts. We; /// use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:91,Usability,simpl,simplify,91,/// Return true if 'Op' is known to be zero in DemandedElts. We; /// use this predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:26,Availability,Mask,Mask,26,/// Return true if '(Op & Mask) == Mask'.; /// Op and Mask are known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:35,Availability,Mask,Mask,35,/// Return true if '(Op & Mask) == Mask'.; /// Op and Mask are known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:54,Availability,Mask,Mask,54,/// Return true if '(Op & Mask) == Mask'.; /// Op and Mask are known to be the same type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,/// Test if the given value is known to have exactly one bit set. This differs; /// from computeKnownBits in that it doesn't necessarily determine which bit; /// is set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:209,Integrability,wrap,wrapper,209,/// Get the upper bound on bit size for this Value \p Op as a signed integer.; /// i.e. x == sext(trunc(x to MaxSignedBits) to bitwidth(x)).; /// Similar to the APInt::getSignificantBits function.; /// Helper wrapper to ComputeNumSignBits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:209,Integrability,wrap,wrapper,209,/// Get the upper bound on bit size for this Value \p Op as a signed integer.; /// i.e. x == sext(trunc(x to MaxSignedBits) to bitwidth(x)).; /// Similar to the APInt::getSignificantBits function.; /// Helper wrapper to ComputeNumSignBits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,"/// Test whether the given SDValue (or all elements of it, if it is a; /// vector) is known to never be NaN. If \p SNaN is true, returns if \p Op is; /// known to never be a signaling NaN (it may still be a qNaN).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,/// Test whether the given floating point SDValue is known to never be; /// positive or negative zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,/// Test whether the given SDValue is known to contain non-zero value(s).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,"/// Test whether two SDValues are known to compare equal. This; /// is true if they are the same value, or if one is negative zero and the; /// other positive zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,"/// Test whether \p V has a splatted value for all the demanded elements.; ///; /// On success \p UndefElts will indicate the elements that have UNDEF; /// values instead of the splat value, this is only guaranteed to be correct; /// for \p DemandedElts.; ///; /// NOTE: The function will return true for a demanded splat of UNDEF values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,/// Test whether \p V has a splatted value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:341,Energy Efficiency,reduce,reduced,341,"/// Match a binop + shuffle pyramid that represents a horizontal reduction; /// over the elements of a vector starting from the EXTRACT_VECTOR_ELT node /p; /// Extract. The reduction must use one of the opcodes listed in /p; /// CandidateBinOps and on success /p BinOp will contain the matching opcode.; /// Returns the vector that is being reduced on, or SDValue() if a reduction; /// was not matched. If \p AllowPartials is set then in the case of a; /// reduction pattern that only matches the first few stages, the extracted; /// subvector of the start of the reduction is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:19,Performance,load,loads,19,/// Return true if loads are next to each other and can be; /// merged. Check that both are nonvolatile and if LD is loading; /// 'Bytes' bytes from a location that is 'Dist' units away from the; /// location that the 'Base' load is loading from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:117,Performance,load,loading,117,/// Return true if loads are next to each other and can be; /// merged. Check that both are nonvolatile and if LD is loading; /// 'Bytes' bytes from a location that is 'Dist' units away from the; /// location that the 'Base' load is loading from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:225,Performance,load,load,225,/// Return true if loads are next to each other and can be; /// merged. Check that both are nonvolatile and if LD is loading; /// 'Bytes' bytes from a location that is 'Dist' units away from the; /// location that the 'Base' load is loading from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:233,Performance,load,loading,233,/// Return true if loads are next to each other and can be; /// merged. Check that both are nonvolatile and if LD is loading; /// 'Bytes' bytes from a location that is 'Dist' units away from the; /// location that the 'Base' load is loading from.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:25,Performance,load,load,25,/// Infer alignment of a load / store address. Return std::nullopt if it; /// cannot be inferred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:59,Integrability,depend,dependent,59,"/// Compute the VTs needed for the low/hi parts of a type, dependent on an; /// enveloping VT that has been split into two identical pieces. Sets the; /// HisIsEmpty flag when hi type has zero storage size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:36,Energy Efficiency,power,power,36,/// Widen the vector up to the next power of two using INSERT_SUBVECTOR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,/// Test whether the given value is a constant int or similar node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:4,Testability,Test,Test,4,/// Test whether the given value is a constant FP or similar node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:180,Safety,safe,safe,180,"/// Some opcodes may create immediate undefined behavior when used with some; /// values (integer division-by-zero for example). Therefore, these operations; /// are not generally safe to move around or change.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:134,Safety,safe,safe,134,"/// Check if the provided node is save to speculatively executed given its; /// current arguments. So, while `udiv` the opcode is not safe to; /// speculatively execute, a given `udiv` node may be if the denominator is; /// known nonzero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h:146,Performance,Perform,Performs,146,"/// Look up the node specified by ID in CSEMap. If it exists, return it. If; /// not, return the insertion token that will make insertion faster. Performs; /// additional processing for constant nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAG.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h:312,Performance,load,load,312,/// Helper struct to parse and store a memory address as base + index + offset.; /// We ignore sign extensions when it is safe to do so.; /// The following two expressions are not equivalent. To differentiate we need; /// to store whether there was a sign extension involved in the index; /// computation.; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (add (i8 load %index); /// (i8 1)))); /// vs; ///; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (i32 add (i32 signextend (i8 load %index)); /// (i32 1))))),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h:377,Performance,load,load,377,/// Helper struct to parse and store a memory address as base + index + offset.; /// We ignore sign extensions when it is safe to do so.; /// The following two expressions are not equivalent. To differentiate we need; /// to store whether there was a sign extension involved in the index; /// computation.; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (add (i8 load %index); /// (i8 1)))); /// vs; ///; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (i32 add (i32 signextend (i8 load %index)); /// (i32 1))))),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h:424,Performance,load,load,424,/// Helper struct to parse and store a memory address as base + index + offset.; /// We ignore sign extensions when it is safe to do so.; /// The following two expressions are not equivalent. To differentiate we need; /// to store whether there was a sign extension involved in the index; /// computation.; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (add (i8 load %index); /// (i8 1)))); /// vs; ///; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (i32 add (i32 signextend (i8 load %index)); /// (i32 1))))),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h:509,Performance,load,load,509,/// Helper struct to parse and store a memory address as base + index + offset.; /// We ignore sign extensions when it is safe to do so.; /// The following two expressions are not equivalent. To differentiate we need; /// to store whether there was a sign extension involved in the index; /// computation.; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (add (i8 load %index); /// (i8 1)))); /// vs; ///; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (i32 add (i32 signextend (i8 load %index)); /// (i32 1))))),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h:122,Safety,safe,safe,122,/// Helper struct to parse and store a memory address as base + index + offset.; /// We ignore sign extensions when it is safe to do so.; /// The following two expressions are not equivalent. To differentiate we need; /// to store whether there was a sign extension involved in the index; /// computation.; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (add (i8 load %index); /// (i8 1)))); /// vs; ///; /// (load (i64 add (i64 copyfromreg %c); /// (i64 signextend (i32 add (i32 signextend (i8 load %index)); /// (i32 1))))),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGAddressAnalysis.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:95,Availability,failure,failures,95,/// Current optimization remark emitter.; /// Used to report things like combines and FastISel failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:12,Performance,optimiz,optimization,12,/// Current optimization remark emitter.; /// Used to report things like combines and FastISel failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:9,Performance,optimiz,optimized,9,// Space-optimized forms that implicitly encode VT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:9,Performance,optimiz,optimized,9,// Space-optimized forms that implicitly encode integer VT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:9,Performance,optimiz,optimized,9,// Space-optimized forms that implicitly encode integer VT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:9,Performance,optimiz,optimized,9,// Space-optimized forms that implicitly encode number of result VTs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:9,Performance,optimiz,optimized,9,// Space-optimized forms that implicitly encode EmitNodeInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:9,Performance,optimiz,optimized,9,// Space-optimized forms that implicitly encode number of result VTs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:9,Performance,optimiz,optimized,9,// Space-optimized forms that implicitly encode EmitNodeInfo.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:4,Performance,Perform,Perform,4,/// Perform instruction selection on all basic blocks in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:4,Performance,Perform,Perform,4,"/// Perform instruction selection on a single basic block, for; /// instructions between \p Begin and \p End. \p HadTailCall will be set; /// to true if a call in the block was translated as a tail call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:15,Energy Efficiency,schedul,scheduler,15,"/// Create the scheduler. If a specific scheduler was specified; /// via the SchedulerRegistry, use it, otherwise select the; /// one preferred by the target.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:40,Energy Efficiency,schedul,scheduler,40,"/// Create the scheduler. If a specific scheduler was specified; /// via the SchedulerRegistry, use it, otherwise select the; /// one preferred by the target.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:77,Energy Efficiency,Schedul,SchedulerRegistry,77,"/// Create the scheduler. If a specific scheduler was specified; /// via the SchedulerRegistry, use it, otherwise select the; /// one preferred by the target.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:52,Energy Efficiency,efficient,efficiently,52,/// OpcodeOffset - This is a cache used to dispatch efficiently into isel; /// state machines that start with a OPC_SwitchOpcode node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h:29,Performance,cache,cache,29,/// OpcodeOffset - This is a cache used to dispatch efficiently into isel; /// state machines that start with a OPC_SwitchOpcode node.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGISel.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:107,Usability,simpl,simple,107,/// This represents a list of ValueType's that has been intern'd by; /// a SelectionDAG. Instances of this simple value class are returned by; /// SelectionDAG::getVTList(...).; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:257,Performance,load,loads,257,"// end namespace ISD; //===----------------------------------------------------------------------===//; /// Unlike LLVM values, Selection DAG nodes may return multiple; /// values as the result of a computation. Many nodes return multiple values,; /// from loads (which define a token and a return value) to ADDC (which returns; /// a result and a carry value), to calls (which may return an arbitrary number; /// of values).; ///; /// As such, each use of a SelectionDAG computation must indicate the node that; /// computes it as well as which return value to use from that node. This pair; /// of information is represented with the SDValue value type.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:15,Usability,simpl,simple,15,/// Return the simple ValueType of the referenced return value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:76,Performance,scalab,scalable,76,"/// Returns the size of the value in bits.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:102,Performance,scalab,scalable,102,"/// Returns the size of the value in bits.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:240,Energy Efficiency,efficient,efficient,240,"/// Return true if this operand (which must be a chain) reaches the; /// specified operand without crossing any side-effecting instructions.; /// In practice, this looks through token factors and non-volatile loads.; /// In order to remain efficient, this only; /// looks a couple of nodes in, it does not do an exhaustive search.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:209,Performance,load,loads,209,"/// Return true if this operand (which must be a chain) reaches the; /// specified operand without crossing any side-effecting instructions.; /// In practice, this looks through token factors and non-volatile loads.; /// In order to remain efficient, this only; /// looks a couple of nodes in, it does not do an exhaustive search.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:53,Energy Efficiency,allocate,allocated,53,"/// Like set, but only supports initializing a newly-allocated; /// SDUse with a non-null value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:23,Performance,optimiz,optimization,23,/// These are IR-level optimization flags that may be propagated to SDNodes.; /// TODO: This data structure should be shared by the IR optimizer and the; /// the backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:135,Performance,optimiz,optimizer,135,/// These are IR-level optimization flags that may be propagated to SDNodes.; /// TODO: This data structure should be shared by the IR optimizer and the; /// the backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:294,Testability,log,logic,294,"// We assume instructions do not raise floating-point exceptions by default,; // and only those marked explicitly may do so. We could choose to represent; // this via a positive ""FPExcept"" flags like on the MI level, but having a; // negative ""NoFPExcept"" flag here makes the flag intersection logic more; // straightforward.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:38,Performance,optimiz,optimization,38,/// Default constructor turns off all optimization flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:13,Security,access,accessors,13,// These are accessors for each flag.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Usability,Clear,Clear,4,/// Clear any flags in this flag set that aren't also set in Flags. All; /// flags will be cleared if Flags are undefined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:91,Usability,clear,cleared,91,/// Clear any flags in this flag set that aren't also set in Flags. All; /// flags will be cleared if Flags are undefined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:33,Performance,perform,performs,33,/// The operation that this node performs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:232,Availability,Mask,MaskedLoadStoreBaseSDNode,232,// This storage is shared between disparate class hierarchies to hold an; // enumeration specific to the class hierarchy in use.; // LSBaseSDNode => enum ISD::MemIndexedMode; // VPLoadStoreBaseSDNode => enum ISD::MemIndexedMode; // MaskedLoadStoreBaseSDNode => enum ISD::MemIndexedMode; // VPGatherScatterSDNode => enum ISD::MemIndexType; // MaskedGatherScatterSDNode => enum ISD::MemIndexType,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:342,Availability,Mask,MaskedGatherScatterSDNode,342,// This storage is shared between disparate class hierarchies to hold an; // enumeration specific to the class hierarchy in use.; // LSBaseSDNode => enum ISD::MemIndexedMode; // VPLoadStoreBaseSDNode => enum ISD::MemIndexedMode; // MaskedLoadStoreBaseSDNode => enum ISD::MemIndexedMode; // VPGatherScatterSDNode => enum ISD::MemIndexType; // MaskedGatherScatterSDNode => enum ISD::MemIndexType,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:13,Performance,Load,LoadExtType,13,// enum ISD::LoadExtType,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:143,Energy Efficiency,schedul,scheduling,143,"// The ordering of the SDNodes. It roughly corresponds to the ordering of the; // original LLVM instructions.; // This is used for turning off scheduling, because we'll forgo; // the normal scheduling algorithms and output the instructions according to; // this ordering.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:190,Energy Efficiency,schedul,scheduling,190,"// The ordering of the SDNodes. It roughly corresponds to the ordering of the; // original LLVM instructions.; // This is used for turning off scheduling, because we'll forgo; // the normal scheduling algorithms and output the instructions according to; // this ordering.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:83,Security,Access,Accessors,83,"//===--------------------------------------------------------------------===//; // Accessors; //; /// Return the SelectionDAG opcode value for this node. For; /// pre-isel nodes (those for which isMachineOpcode returns false), these; /// are the opcode values in the ISD and <target>ISD namespaces. For; /// post-isel opcodes, see getMachineOpcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Testability,Test,Test,4,/// Test if this node has a target-specific opcode (in the; /// \<target\>ISD namespace).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Testability,Test,Test,4,/// Test if this node has a target-specific opcode that may raise; /// FP exceptions (in the \<target\>ISD namespace and greater than; /// FIRST_TARGET_STRICTFP_OPCODE). Note that all target memory; /// opcode are currently automatically considered to possibly raise; /// FP exceptions as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Testability,Test,Test,4,/// Test if this node has a target-specific; /// memory-referencing opcode (in the \<target\>ISD namespace and; /// greater than FIRST_TARGET_MEMORY_OPCODE).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Testability,Test,Test,4,"/// Test if this node is a memory intrinsic (with valid pointer information).; /// INTRINSIC_W_CHAIN and INTRINSIC_VOID nodes are sometimes created for; /// non-memory intrinsics (with chains) that are not really instances of; /// MemSDNode. For such nodes, we need some extra state to determine the; /// proper classof relationship.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Testability,Test,Test,4,/// Test if this node is a strict floating point pseudo-op.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Testability,Test,Test,4,/// Test if this node is a vector predication operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Testability,Test,Test,4,"/// Test if this node has a post-isel opcode, directly; /// corresponding to a MachineInstr opcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:37,Safety,avoid,avoid,37,"/// Set source location info. Try to avoid this, putting; /// it in the constructor is preferable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:160,Performance,perform,performed,160,"/// Returns true if N is a predecessor of any node in Worklist. This; /// helper keeps Visited and Worklist sets externally to allow unions; /// searches to be performed in parallel, caching of results across; /// queries and incremental addition to Worklist. Stops early if N is; /// found but will resume. Remember to clear Visited and Worklists; /// if DAG changes. MaxSteps gives a maximum number of nodes to visit before; /// giving up. The TopologicalPrune flag signals that positive NodeIds are; /// topologically ordered (Operands have strictly smaller node id) and search; /// can be pruned leveraging this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:300,Usability,resume,resume,300,"/// Returns true if N is a predecessor of any node in Worklist. This; /// helper keeps Visited and Worklist sets externally to allow unions; /// searches to be performed in parallel, caching of results across; /// queries and incremental addition to Worklist. Stops early if N is; /// found but will resume. Remember to clear Visited and Worklists; /// if DAG changes. MaxSteps gives a maximum number of nodes to visit before; /// giving up. The TopologicalPrune flag signals that positive NodeIds are; /// topologically ordered (Operands have strictly smaller node id) and search; /// can be pruned leveraging this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:320,Usability,clear,clear,320,"/// Returns true if N is a predecessor of any node in Worklist. This; /// helper keeps Visited and Worklist sets externally to allow unions; /// searches to be performed in parallel, caching of results across; /// queries and incremental addition to Worklist. Stops early if N is; /// found but will resume. Remember to clear Visited and Worklists; /// if DAG changes. MaxSteps gives a maximum number of nodes to visit before; /// giving up. The TopologicalPrune flag signals that positive NodeIds are; /// topologically ordered (Operands have strictly smaller node id) and search; /// can be pruned leveraging this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:35,Modifiability,extend,extended,35,/// Helper method returns the zero-extended integer value of a ConstantSDNode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Usability,Clear,Clear,4,/// Clear any flags in this node that aren't also set in Flags.; /// If Flags is not in a defined state then this has no effect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:47,Usability,simpl,simple,47,/// Return the type of a specified result as a simple type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:86,Performance,scalab,scalable,86,"/// Returns MVT::getSizeInBits(getValueType(ResNo)).; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:112,Performance,scalab,scalable,112,"/// Returns MVT::getSizeInBits(getValueType(ResNo)).; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:47,Availability,down,down,47,"/// Print a SelectionDAG node and all children down to; /// the leaves. The given SelectionDAG allows target-specific nodes; /// to be printed in human-readable form. Unlike printr, this will; /// print the whole DAG, including children that appear multiple; /// times.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Deployability,Release,Release,4,/// Release the operands and set this node to have zero operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Integrability,Wrap,Wrapper,4,"/// Wrapper class for IR location info (IR ordering and DebugLoc) to be passed; /// into SDNode creation functions.; /// When an SDNode is created from the DAGBuilder, the DebugLoc is extracted; /// from the original Instruction, and IROrder is the ordinal position of; /// the instruction.; /// When an SDNode is created after the DAG is being built, both DebugLoc and; /// the IROrder are propagated from the original SDNode.; /// So SDLoc class provides two constructors besides the default one, one to; /// be used by the DAGBuilder, the other to be used by others.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:34,Safety,avoid,avoid,34,"// Explicitly check for !ResNo to avoid use-after-free, because there are; // callers that use SDValue(N, 0) with a deleted N to indicate successful; // combines.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:91,Deployability,update,updated,91,/// This class is used to form a handle around another node that; /// is persistent and is updated across invocations of replaceAllUsesWith on its; /// operand. This node should be directly created by end-users and not added to; /// the AllNodes list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:93,Energy Efficiency,allocate,allocated,93,"// Manually set up the operand list. This node type is special in that it's; // always stack allocated and SelectionDAG does not manage its operands.; // TODO: This should either (a) not be in the SDNode hierarchy, or (b) not; // be so special.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:51,Security,access,access,51,/// Returns alignment and volatility of the memory access,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:253,Availability,mask,masked,253,"/// Return the SubclassData value, without HasDebugValue. This contains an; /// encoding of the volatile flag, as well as bits used by subclasses. This; /// function should only be used to compute a FoldingSetNodeID value.; /// The HasDebugValue bit is masked out because CSE map needs to match; /// nodes with debug info with nodes without debug info. Same is about; /// isDivergent bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:47,Security,access,access,47,// Returns the offset from the location of the access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:16,Integrability,synchroniz,synchronization,16,/// Returns the synchronization scope ID for this memory operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:92,Availability,failure,failure,92,"/// Return a single atomic ordering that is at least as strong as both the; /// success and failure orderings for an atomic operation. (For operations; /// other than cmpxchg, this is equivalent to getSuccessOrdering().)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:75,Performance,perform,performed,75,/// Return a MachineMemOperand object describing the memory; /// reference performed by operation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Deployability,Update,Update,4,"/// Update this MemSDNode's MachineMemOperand information; /// to reflect the alignment of NewMMO, if it has a greater alignment.; /// This must only be used when the new alignment applies to all users of; /// this MachineMemOperand.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:303,Availability,mask,mask,303,"/// This SDNode is used to implement the code generator; /// support for the llvm IR shufflevector instruction. It combines elements; /// from two input vectors into a new input vector, with the selection and; /// ordering of elements determined by an array of integers, referred to as; /// the shuffle mask. For input vectors of width N, mask indices of 0..N-1; /// refer to elements from the LHS input, and indices from N to 2N-1 the RHS.; /// An index of -1 is treated as undef, such that the code generator may put; /// any value in the corresponding element of the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:339,Availability,mask,mask,339,"/// This SDNode is used to implement the code generator; /// support for the llvm IR shufflevector instruction. It combines elements; /// from two input vectors into a new input vector, with the selection and; /// ordering of elements determined by an array of integers, referred to as; /// the shuffle mask. For input vectors of width N, mask indices of 0..N-1; /// refer to elements from the LHS input, and indices from N to 2N-1 the RHS.; /// An index of -1 is treated as undef, such that the code generator may put; /// any value in the corresponding element of the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:18,Availability,Mask,Mask,18,"// The memory for Mask is owned by the SelectionDAG's OperandAllocator, and; // is freed when the SelectionDAG object is destroyed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:138,Usability,simpl,simplify,138,// We can choose any index value here and be correct because all elements; // are undefined. Return 0 for better potential for callers to simplify.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:39,Availability,mask,mask,39,/// Change values in a shuffle permute mask assuming; /// the two vector operands have swapped position.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:427,Testability,log,logic,427,"/// We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.; /// We leave the version with the double argument here because it's just so; /// convenient to write ""2.0"" and the like. Without this function we'd; /// have to duplicate its logic everywhere it's called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:102,Usability,clear,clearly,102,"/// We don't rely on operator== working on double values, as; /// it returns true for things that are clearly not equal, like -0.0 and 0.0.; /// As such, this method can be used to do an exact bit-for-bit comparison of; /// two floating point values.; /// We leave the version with the double argument here because it's just so; /// convenient to write ""2.0"" and the like. Without this function we'd; /// have to duplicate its logic everywhere it's called.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:121,Availability,Mask,Mask,121,"/// If \p V is a bitwise not, returns the inverted operand. Otherwise returns; /// an empty SDValue. Only bits set in \p Mask are required to be inverted,; /// other bits may be arbitrary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:72,Usability,guid,guid,72,"/// This SDNode is used for PSEUDO_PROBE values, which are the function guid and; /// the index of the basic block being probed. A pseudo probe serves as a place; /// holder and will be removed at the end of compilation. It does not have any; /// operand because we do not want the instruction selection to deal with any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:22,Integrability,depend,dependent,22,/// Completely target-dependent object reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:422,Availability,mask,mask,422,"/// Check if this is a constant splat, and if so, find the; /// smallest element size that splats the vector. If MinSplatBits is; /// nonzero, the element size must be at least that large. Note that the; /// splat element may be the entire vector (i.e., a one element vector).; /// Returns the splat element value in SplatValue. Any undefined bits in; /// that value are zero, and the corresponding bits in the SplatUndef mask; /// are set. The SplatBitSize value is set to the splat element size in; /// bits. HasAnyUndefs is set to true if any bits in the vector are; /// undefined. isBigEndian describes the endianness of the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:112,Availability,mask,mask,112,"/// Returns the demanded splatted value or a null value if this is not a; /// splat.; ///; /// The DemandedElts mask indicates the elements that must be in the splat.; /// If passed a non-null UndefElements bitvector, it will resize it to match; /// the vector width and set the bits where elements are undef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:249,Availability,mask,mask,249,"/// Find the shortest repeating sequence of values in the build vector.; ///; /// e.g. { u, X, u, X, u, u, X, u } -> { X }; /// { X, Y, u, Y, u, u, X, u } -> { X, Y }; ///; /// Currently this must be a power-of-2 build vector.; /// The DemandedElts mask indicates the elements that must be present,; /// undemanded elements in Sequence may be null (SDValue()). If passed a; /// non-null UndefElements bitvector, it will resize it to match the original; /// vector width and set the bits where elements are undef. If result is; /// false, Sequence will be empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:202,Energy Efficiency,power,power-of-,202,"/// Find the shortest repeating sequence of values in the build vector.; ///; /// e.g. { u, X, u, X, u, u, X, u } -> { X }; /// { X, Y, u, Y, u, u, X, u } -> { X, Y }; ///; /// Currently this must be a power-of-2 build vector.; /// The DemandedElts mask indicates the elements that must be present,; /// undemanded elements in Sequence may be null (SDValue()). If passed a; /// non-null UndefElements bitvector, it will resize it to match the original; /// vector width and set the bits where elements are undef. If result is; /// false, Sequence will be empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:202,Energy Efficiency,power,power-of-,202,"/// Find the shortest repeating sequence of values in the build vector.; ///; /// e.g. { u, X, u, X, u, u, X, u } -> { X }; /// { X, Y, u, Y, u, u, X, u } -> { X, Y }; ///; /// Currently this must be a power-of-2 build vector.; /// If passed a non-null UndefElements bitvector, it will resize it to match; /// the original vector width and set the bits where elements are undef.; /// If result is false, Sequence will be empty.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:116,Availability,mask,mask,116,"/// Returns the demanded splatted constant or null if this is not a constant; /// splat.; ///; /// The DemandedElts mask indicates the elements that must be in the splat.; /// If passed a non-null UndefElements bitvector, it will resize it to match; /// the vector width and set the bits where elements are undef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:122,Availability,mask,mask,122,"/// Returns the demanded splatted constant FP or null if this is not a; /// constant FP splat.; ///; /// The DemandedElts mask indicates the elements that must be in the splat.; /// If passed a non-null UndefElements bitvector, it will resize it to match; /// the vector width and set the bits where elements are undef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:81,Energy Efficiency,power,power,81,"/// If this is a constant FP splat and the splatted constant FP is an; /// exact power or 2, return the log base 2 integer value. Otherwise,; /// return -1.; ///; /// The BitWidth specifies the necessary bit precision.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:104,Testability,log,log,104,"/// If this is a constant FP splat and the splatted constant FP is an; /// exact power or 2, return the log base 2 integer value. Otherwise,; /// return -1.; ///; /// The BitWidth specifies the necessary bit precision.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:109,Usability,simpl,simple,109,/// An SDNode that holds an arbitrary LLVM IR Value. This is; /// used when the SelectionDAG needs to make a simple reference to something; /// in the LLVM IR representation.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:66,Modifiability,parameteriz,parameterize,66,"/// This class is used to represent EVT's, which are used; /// to parameterize some operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:19,Performance,Load,LoadSDNode,19,/// Base class for LoadSDNode and StoreSDNode,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:40,Performance,load,load,40,"/// Return the addressing mode for this load or store:; /// unindexed, pre-inc, pre-dec, post-inc, or post-dec.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:46,Performance,load,load,46,/// Return true if this is a pre/post inc/dec load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:50,Performance,load,load,50,/// Return true if this is NOT a pre/post inc/dec load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:41,Performance,LOAD,LOAD,41,/// This class is used to represent ISD::LOAD nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:79,Modifiability,extend,extending,79,"/// Return whether this is a plain node,; /// or one of the varieties of value-extending loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:89,Performance,load,loads,89,"/// Return whether this is a plain node,; /// or one of the varieties of value-extending loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:59,Availability,Mask,Mask,59,"// VPStridedStoreSDNode (Chain, Data, Ptr, Offset, Stride, Mask, EVL); // VPStoreSDNode (Chain, Data, Ptr, Offset, Mask, EVL); // VPStridedLoadSDNode (Chain, Ptr, Offset, Stride, Mask, EVL); // VPLoadSDNode (Chain, Ptr, Offset, Mask, EVL); // Mask is a vector of i1 elements;; // the type of EVL is TLI.getVPExplicitVectorLengthTy().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:115,Availability,Mask,Mask,115,"// VPStridedStoreSDNode (Chain, Data, Ptr, Offset, Stride, Mask, EVL); // VPStoreSDNode (Chain, Data, Ptr, Offset, Mask, EVL); // VPStridedLoadSDNode (Chain, Ptr, Offset, Stride, Mask, EVL); // VPLoadSDNode (Chain, Ptr, Offset, Mask, EVL); // Mask is a vector of i1 elements;; // the type of EVL is TLI.getVPExplicitVectorLengthTy().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:179,Availability,Mask,Mask,179,"// VPStridedStoreSDNode (Chain, Data, Ptr, Offset, Stride, Mask, EVL); // VPStoreSDNode (Chain, Data, Ptr, Offset, Mask, EVL); // VPStridedLoadSDNode (Chain, Ptr, Offset, Stride, Mask, EVL); // VPLoadSDNode (Chain, Ptr, Offset, Mask, EVL); // Mask is a vector of i1 elements;; // the type of EVL is TLI.getVPExplicitVectorLengthTy().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:228,Availability,Mask,Mask,228,"// VPStridedStoreSDNode (Chain, Data, Ptr, Offset, Stride, Mask, EVL); // VPStoreSDNode (Chain, Data, Ptr, Offset, Mask, EVL); // VPStridedLoadSDNode (Chain, Ptr, Offset, Stride, Mask, EVL); // VPLoadSDNode (Chain, Ptr, Offset, Mask, EVL); // Mask is a vector of i1 elements;; // the type of EVL is TLI.getVPExplicitVectorLengthTy().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:243,Availability,Mask,Mask,243,"// VPStridedStoreSDNode (Chain, Data, Ptr, Offset, Stride, Mask, EVL); // VPStoreSDNode (Chain, Data, Ptr, Offset, Mask, EVL); // VPStridedLoadSDNode (Chain, Ptr, Offset, Stride, Mask, EVL); // VPLoadSDNode (Chain, Ptr, Offset, Mask, EVL); // Mask is a vector of i1 elements;; // the type of EVL is TLI.getVPExplicitVectorLengthTy().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:40,Performance,load,load,40,"/// Return the addressing mode for this load or store:; /// unindexed, pre-inc, pre-dec, post-inc, or post-dec.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:46,Performance,load,load,46,/// Return true if this is a pre/post inc/dec load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:50,Performance,load,load,50,/// Return true if this is NOT a pre/post inc/dec load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:3,Availability,Mask,MaskedLoadSDNode,3,"// MaskedLoadSDNode (Chain, ptr, offset, mask, passthru); // MaskedStoreSDNode (Chain, data, ptr, offset, mask); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:41,Availability,mask,mask,41,"// MaskedLoadSDNode (Chain, ptr, offset, mask, passthru); // MaskedStoreSDNode (Chain, data, ptr, offset, mask); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:61,Availability,Mask,MaskedStoreSDNode,61,"// MaskedLoadSDNode (Chain, ptr, offset, mask, passthru); // MaskedStoreSDNode (Chain, data, ptr, offset, mask); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:106,Availability,mask,mask,106,"// MaskedLoadSDNode (Chain, ptr, offset, mask, passthru); // MaskedStoreSDNode (Chain, data, ptr, offset, mask); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:116,Availability,Mask,Mask,116,"// MaskedLoadSDNode (Chain, ptr, offset, mask, passthru); // MaskedStoreSDNode (Chain, data, ptr, offset, mask); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:40,Performance,load,load,40,"/// Return the addressing mode for this load or store:; /// unindexed, pre-inc, pre-dec, post-inc, or post-dec.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:46,Performance,load,load,46,/// Return true if this is a pre/post inc/dec load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:50,Performance,load,load,50,/// Return true if this is NOT a pre/post inc/dec load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:37,Availability,mask,mask,37,"// In the both nodes address is Op1, mask is Op2:; // VPGatherSDNode (Chain, base, index, scale, mask, vlen); // VPScatterSDNode (Chain, value, base, index, scale, mask, vlen); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:97,Availability,mask,mask,97,"// In the both nodes address is Op1, mask is Op2:; // VPGatherSDNode (Chain, base, index, scale, mask, vlen); // VPScatterSDNode (Chain, value, base, index, scale, mask, vlen); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:164,Availability,mask,mask,164,"// In the both nodes address is Op1, mask is Op2:; // VPGatherSDNode (Chain, base, index, scale, mask, vlen); // VPScatterSDNode (Chain, value, base, index, scale, mask, vlen); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:180,Availability,Mask,Mask,180,"// In the both nodes address is Op1, mask is Op2:; // VPGatherSDNode (Chain, base, index, scale, mask, vlen); // VPScatterSDNode (Chain, value, base, index, scale, mask, vlen); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:37,Availability,mask,mask,37,"// In the both nodes address is Op1, mask is Op2:; // MaskedGatherSDNode (Chain, passthru, mask, base, index, scale); // MaskedScatterSDNode (Chain, value, mask, base, index, scale); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:54,Availability,Mask,MaskedGatherSDNode,54,"// In the both nodes address is Op1, mask is Op2:; // MaskedGatherSDNode (Chain, passthru, mask, base, index, scale); // MaskedScatterSDNode (Chain, value, mask, base, index, scale); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:91,Availability,mask,mask,91,"// In the both nodes address is Op1, mask is Op2:; // MaskedGatherSDNode (Chain, passthru, mask, base, index, scale); // MaskedScatterSDNode (Chain, value, mask, base, index, scale); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:121,Availability,Mask,MaskedScatterSDNode,121,"// In the both nodes address is Op1, mask is Op2:; // MaskedGatherSDNode (Chain, passthru, mask, base, index, scale); // MaskedScatterSDNode (Chain, value, mask, base, index, scale); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:156,Availability,mask,mask,156,"// In the both nodes address is Op1, mask is Op2:; // MaskedGatherSDNode (Chain, passthru, mask, base, index, scale); // MaskedScatterSDNode (Chain, value, mask, base, index, scale); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:186,Availability,Mask,Mask,186,"// In the both nodes address is Op1, mask is Op2:; // MaskedGatherSDNode (Chain, passthru, mask, base, index, scale); // MaskedScatterSDNode (Chain, value, mask, base, index, scale); // Mask is a vector of i1 elements",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:308,Energy Efficiency,allocate,allocated,308,"// We use a pointer union between a single `MachineMemOperand` pointer and; // a pointer to an array of `MachineMemOperand` pointers. This is null when; // the number of these is zero, the single pointer variant used when the; // number is one, and the array is used for larger numbers.; //; // The array is allocated via the `SelectionDAG`'s allocator and so will; // always live until the DAG is cleaned up and doesn't require ownership here.; //; // We can't use something simpler like `TinyPtrVector` here because `SDNode`; // subclasses aren't managed in a conforming C++ manner. See the comments on; // `SelectionDAG::MorphNodeTo` which details what all goes on, but the; // constraint here is that these don't manage memory with their constructor or; // destructor and can be initialized to a good state even if they start off; // uninitialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:476,Usability,simpl,simpler,476,"// We use a pointer union between a single `MachineMemOperand` pointer and; // a pointer to an array of `MachineMemOperand` pointers. This is null when; // the number of these is zero, the single pointer variant used when the; // number is one, and the array is used for larger numbers.; //; // The array is allocated via the `SelectionDAG`'s allocator and so will; // always live until the DAG is cleaned up and doesn't require ownership here.; //; // We can't use something simpler like `TinyPtrVector` here because `SDNode`; // subclasses aren't managed in a conforming C++ manner. See the comments on; // `SelectionDAG::MorphNodeTo` which details what all goes on, but the; // constraint here is that these don't manage memory with their constructor or; // destructor and can be initialized to a good state even if they start off; // uninitialized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:270,Usability,simpl,simpler,270,"// Note that this could be folded into the above `MemRefs` member if doing so; // is advantageous at some point. We don't need to store this in most cases.; // However, at the moment this doesn't appear to make the allocation any; // smaller and makes the code somewhat simpler to read.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:4,Usability,Clear,Clear,4,/// Clear out the memory reference descriptor list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:48,Modifiability,extend,extending,48,/// Returns true if the specified node is a non-extending and unindexed load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:72,Performance,load,load,72,/// Returns true if the specified node is a non-extending and unindexed load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:48,Modifiability,extend,extending,48,/// Returns true if the specified node is a non-extending load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:58,Performance,load,load,58,/// Returns true if the specified node is a non-extending load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h:55,Performance,load,load,55,/// Returns true if the specified node is an unindexed load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGNodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:470,Modifiability,parameteriz,parameterize,470,"//==- llvm/CodeGen/SelectionDAGTargetInfo.h - SelectionDAG Info --*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file declares the SelectionDAGTargetInfo class, which targets can; // subclass to parameterize the SelectionDAG lowering and instruction; // selection process.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:115,Modifiability,parameteriz,parameterize,115,//===----------------------------------------------------------------------===//; /// Targets can subclass this to parameterize the; /// SelectionDAG lowering and instruction selection process.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:212,Energy Efficiency,efficient,efficient,212,"/// Emit target-specific code that performs a memcpy.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.; ///; /// If AlwaysInline is true, the size is constant and the target should not; /// emit any calls and is strongly encouraged to attempt to emit inline code; /// even if it is beyond the usual threshold because this intrinsic is being; /// expanded in a place where calls are not feasible (e.g. within the prologue; /// for another call). If the target chooses to decline an AlwaysInline; /// request here, legalize will resort to using simple loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:35,Performance,perform,performs,35,"/// Emit target-specific code that performs a memcpy.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.; ///; /// If AlwaysInline is true, the size is constant and the target should not; /// emit any calls and is strongly encouraged to attempt to emit inline code; /// even if it is beyond the usual threshold because this intrinsic is being; /// expanded in a place where calls are not feasible (e.g. within the prologue; /// for another call). If the target chooses to decline an AlwaysInline; /// request here, legalize will resort to using simple loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:178,Performance,load,loads,178,"/// Emit target-specific code that performs a memcpy.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.; ///; /// If AlwaysInline is true, the size is constant and the target should not; /// emit any calls and is strongly encouraged to attempt to emit inline code; /// even if it is beyond the usual threshold because this intrinsic is being; /// expanded in a place where calls are not feasible (e.g. within the prologue; /// for another call). If the target chooses to decline an AlwaysInline; /// request here, legalize will resort to using simple loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:838,Performance,load,loads,838,"/// Emit target-specific code that performs a memcpy.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.; ///; /// If AlwaysInline is true, the size is constant and the target should not; /// emit any calls and is strongly encouraged to attempt to emit inline code; /// even if it is beyond the usual threshold because this intrinsic is being; /// expanded in a place where calls are not feasible (e.g. within the prologue; /// for another call). If the target chooses to decline an AlwaysInline; /// request here, legalize will resort to using simple loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:171,Usability,simpl,simple,171,"/// Emit target-specific code that performs a memcpy.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.; ///; /// If AlwaysInline is true, the size is constant and the target should not; /// emit any calls and is strongly encouraged to attempt to emit inline code; /// even if it is beyond the usual threshold because this intrinsic is being; /// expanded in a place where calls are not feasible (e.g. within the prologue; /// for another call). If the target chooses to decline an AlwaysInline; /// request here, legalize will resort to using simple loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:831,Usability,simpl,simple,831,"/// Emit target-specific code that performs a memcpy.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.; ///; /// If AlwaysInline is true, the size is constant and the target should not; /// emit any calls and is strongly encouraged to attempt to emit inline code; /// even if it is beyond the usual threshold because this intrinsic is being; /// expanded in a place where calls are not feasible (e.g. within the prologue; /// for another call). If the target chooses to decline an AlwaysInline; /// request here, legalize will resort to using simple loads and stores.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:213,Energy Efficiency,efficient,efficient,213,/// Emit target-specific code that performs a memmove.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:35,Performance,perform,performs,35,/// Emit target-specific code that performs a memmove.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:179,Performance,load,loads,179,/// Emit target-specific code that performs a memmove.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:172,Usability,simpl,simple,172,/// Emit target-specific code that performs a memmove.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple loads/stores and can be; /// more efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:206,Energy Efficiency,efficient,efficient,206,/// Emit target-specific code that performs a memset.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple stores and can be more; /// efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used. Note that if AlwaysInline is true the; /// function has to return a valid SDValue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:35,Performance,perform,performs,35,/// Emit target-specific code that performs a memset.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple stores and can be more; /// efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used. Note that if AlwaysInline is true the; /// function has to return a valid SDValue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:171,Usability,simpl,simple,171,/// Emit target-specific code that performs a memset.; /// This can be used by targets to provide code sequences for cases; /// that don't fit the target's parameters for simple stores and can be more; /// efficient than using a library call. This function can return a null; /// SDValue if the target declines to use custom code and a different; /// lowering strategy should be used. Note that if AlwaysInline is true the; /// function has to return a valid SDValue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:35,Performance,perform,performs,35,"/// Emit target-specific code that performs a memcmp/bcmp, in cases where that is; /// faster than a libcall. The first returned SDValue is the result of the; /// memcmp and the second is the chain. Both SDValues can be null if a normal; /// libcall should be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:35,Performance,perform,performs,35,"/// Emit target-specific code that performs a memchr, in cases where that is; /// faster than a libcall. The first returned SDValue is the result of the; /// memchr and the second is the chain. Both SDValues can be null if a normal; /// libcall should be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:35,Performance,perform,performs,35,"/// Emit target-specific code that performs a strcpy or stpcpy, in cases; /// where that is faster than a libcall.; /// The first returned SDValue is the result of the copy (the start; /// of the destination string for strcpy, a pointer to the null terminator; /// for stpcpy) and the second is the chain. Both SDValues can be null; /// if a normal libcall should be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h:35,Performance,perform,performs,35,"/// Emit target-specific code that performs a strcmp, in cases where that is; /// faster than a libcall.; /// The first returned SDValue is the result of the strcmp and the second is; /// the chain. Both SDValues can be null if a normal libcall should be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectionDAGTargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectOptimize.h:508,Performance,optimiz,optimize,508,"//===--- llvm/CodeGen/SelectOptimize.h ---------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the declaration of the SelectOptimizePass class,; /// its corresponding pass name is `select-optimize`.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectOptimize.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SelectOptimize.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h:731,Performance,perform,perform,731,"//===- llvm/CodeGen/SlotIndexes.h - Slot indexes representation -*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements SlotIndex and related classes. The purpose of SlotIndex; // is to describe a position at which a register can become live, or cease to; // be live.; //; // SlotIndex is mostly a proxy for entries of the SlotIndexList, a class which; // is held is LiveIntervals and provides the real numbering. This allows; // LiveIntervals to perform largely transparent renumbering.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h:185,Integrability,interface,interface,185,/// This class represents an entry in the slot index list held in the; /// SlotIndexes pass. It should not be used directly. See the; /// SlotIndex & SlotIndexes classes for the public interface to this; /// information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h:26,Integrability,wrap,wrapper,26,/// SlotIndex - An opaque wrapper around machine indexes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h:158,Testability,test,tests,158,// Creates a SlotIndex from an IndexListEntry and a slot. Generally should; // not be used. This method is only public to facilitate writing certain; // unit tests.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h:4,Availability,Repair,Repair,4,/// Repair indexes after adding and removing instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SlotIndexes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Spiller.h:12,Integrability,interface,interface,12,/// Spiller interface.; ///; /// Implementations are utility classes which insert spill or remat code on; /// demand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/Spiller.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/Spiller.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:25,Deployability,patch,patchable,25,/// Return the number of patchable bytes the given stackmap should emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:33,Modifiability,variab,variable,33,"/// Get the operand index of the variable list of non-argument operands.; /// These hold the ""live state"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:13,Deployability,patch,patchpoint,13,"/// MI-level patchpoint operands.; ///; /// MI patchpoint operations take the form:; /// [<def>], <id>, <numBytes>, <target>, <numArgs>, <cc>, ...; ///; /// IR patchpoint intrinsics do not have the <cc> operand because calling; /// convention is part of the subclass data.; ///; /// SD patchpoint nodes do not have a def operand because it is part of the; /// SDValue.; ///; /// Patchpoints following the anyregcc convention are handled specially. For; /// these, the stack map also records the location of the return value and; /// arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:47,Deployability,patch,patchpoint,47,"/// MI-level patchpoint operands.; ///; /// MI patchpoint operations take the form:; /// [<def>], <id>, <numBytes>, <target>, <numArgs>, <cc>, ...; ///; /// IR patchpoint intrinsics do not have the <cc> operand because calling; /// convention is part of the subclass data.; ///; /// SD patchpoint nodes do not have a def operand because it is part of the; /// SDValue.; ///; /// Patchpoints following the anyregcc convention are handled specially. For; /// these, the stack map also records the location of the return value and; /// arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:160,Deployability,patch,patchpoint,160,"/// MI-level patchpoint operands.; ///; /// MI patchpoint operations take the form:; /// [<def>], <id>, <numBytes>, <target>, <numArgs>, <cc>, ...; ///; /// IR patchpoint intrinsics do not have the <cc> operand because calling; /// convention is part of the subclass data.; ///; /// SD patchpoint nodes do not have a def operand because it is part of the; /// SDValue.; ///; /// Patchpoints following the anyregcc convention are handled specially. For; /// these, the stack map also records the location of the return value and; /// arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:286,Deployability,patch,patchpoint,286,"/// MI-level patchpoint operands.; ///; /// MI patchpoint operations take the form:; /// [<def>], <id>, <numBytes>, <target>, <numArgs>, <cc>, ...; ///; /// IR patchpoint intrinsics do not have the <cc> operand because calling; /// convention is part of the subclass data.; ///; /// SD patchpoint nodes do not have a def operand because it is part of the; /// SDValue.; ///; /// Patchpoints following the anyregcc convention are handled specially. For; /// these, the stack map also records the location of the return value and; /// arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:379,Deployability,Patch,Patchpoints,379,"/// MI-level patchpoint operands.; ///; /// MI patchpoint operations take the form:; /// [<def>], <id>, <numBytes>, <target>, <numArgs>, <cc>, ...; ///; /// IR patchpoint intrinsics do not have the <cc> operand because calling; /// convention is part of the subclass data.; ///; /// SD patchpoint nodes do not have a def operand because it is part of the; /// SDValue.; ///; /// Patchpoints following the anyregcc convention are handled specially. For; /// these, the stack map also records the location of the return value and; /// arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:32,Deployability,patch,patchpoint,32,/// Return the ID for the given patchpoint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:25,Deployability,patch,patchable,25,/// Return the number of patchable bytes the given patchpoint should emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:51,Deployability,patch,patchpoint,51,/// Return the number of patchable bytes the given patchpoint should emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:33,Modifiability,variab,variable,33,"/// Get the operand index of the variable list of non-argument operands.; /// These hold the ""live state"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:94,Deployability,patch,patch,94,"/// MI-level Statepoint operands; ///; /// Statepoint operands take the form:; /// <id>, <num patch bytes >, <num call arguments>, <call target>,; /// [call arguments...],; /// <StackMaps::ConstantOp>, <calling convention>,; /// <StackMaps::ConstantOp>, <statepoint flags>,; /// <StackMaps::ConstantOp>, <num deopt args>, [deopt args...],; /// <StackMaps::ConstantOp>, <num gc pointer args>, [gc pointer args...],; /// <StackMaps::ConstantOp>, <num gc allocas>, [gc allocas args...],; /// <StackMaps::ConstantOp>, <num entries in gc map>, [base/derived pairs]; /// base/derived pairs in gc map are logical indices into <gc pointer args>; /// section.; /// All gc pointers assigned to VRegs produce new value (in form of MI Def; /// operand) and are tied to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:598,Testability,log,logical,598,"/// MI-level Statepoint operands; ///; /// Statepoint operands take the form:; /// <id>, <num patch bytes >, <num call arguments>, <call target>,; /// [call arguments...],; /// <StackMaps::ConstantOp>, <calling convention>,; /// <StackMaps::ConstantOp>, <statepoint flags>,; /// <StackMaps::ConstantOp>, <num deopt args>, [deopt args...],; /// <StackMaps::ConstantOp>, <num gc pointer args>, [gc pointer args...],; /// <StackMaps::ConstantOp>, <num gc allocas>, [gc allocas args...],; /// <StackMaps::ConstantOp>, <num entries in gc map>, [base/derived pairs]; /// base/derived pairs in gc map are logical indices into <gc pointer args>; /// section.; /// All gc pointers assigned to VRegs produce new value (in form of MI Def; /// operand) and are tied to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:21,Deployability,Patch,Patch,21,/// Get index of Num Patch Bytes operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:25,Deployability,patch,patchable,25,/// Return the number of patchable bytes the given statepoint should emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:110,Testability,log,logical,110,/// Get vector of base/derived pairs from statepoint.; /// Elements are indices into GC Pointer operand list (logical).; /// Returns number of elements in GCMap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:62,Testability,log,logical,62,// OpTypes are used to encode information about the following logical; // operand (which may consist of several MachineOperands) for the; // OpParser.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:102,Deployability,PATCH,PATCHPOINT,102,"/// Generate a stackmap record for a stackmap instruction.; ///; /// MI must be a raw STACKMAP, not a PATCHPOINT.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:37,Deployability,patch,patchpoint,37,/// Generate a stackmap record for a patchpoint instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:109,Usability,clear,clears,109,"/// If there is any stack map data, create a stack map section and serialize; /// the map info into it. This clears the stack map data structures; /// afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:32,Availability,mask,mask,32,/// Parse the register live-out mask and return a vector of live-out; /// registers that need to be recorded in the stackmap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:239,Deployability,PATCH,PATCHPOINT,239,"/// Record the locations of the operands of the provided instruction in a; /// record keyed by the provided label. For instructions w/AnyReg calling; /// convention the return register is also recorded if requested. For; /// STACKMAP, and PATCHPOINT the label is expected to immediately *preceed*; /// lowering of the MI to MCInsts. For STATEPOINT, it expected to; /// immediately *follow*. It's not clear this difference was intentional,; /// but it exists today. ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:400,Usability,clear,clear,400,"/// Record the locations of the operands of the provided instruction in a; /// record keyed by the provided label. For instructions w/AnyReg calling; /// convention the return register is also recorded if requested. For; /// STACKMAP, and PATCHPOINT the label is expected to immediately *preceed*; /// lowering of the MI to MCInsts. For STATEPOINT, it expected to; /// immediately *follow*. It's not clear this difference was intentional,; /// but it exists today. ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h:45,Deployability,patch,patchpoint,45,/// Emit the callsite info for each stackmap/patchpoint intrinsic call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackMaps.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h:551,Energy Efficiency,allocate,allocated,551,"//===- StackProtector.h - Stack Protector Insertion -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts stack protectors into functions which need them. A variable; // with a random value in it is stored onto the stack before the local variables; // are allocated. Upon exiting the block, the stored value is checked. If it's; // changed, then there was some sort of violation and the program aborts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h:452,Modifiability,variab,variable,452,"//===- StackProtector.h - Stack Protector Insertion -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts stack protectors into functions which need them. A variable; // with a random value in it is stored onto the stack before the local variables; // are allocated. Upon exiting the block, the stored value is checked. If it's; // changed, then there was some sort of violation and the program aborts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h:533,Modifiability,variab,variables,533,"//===- StackProtector.h - Stack Protector Insertion -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts stack protectors into functions which need them. A variable; // with a random value in it is stored onto the stack before the local variables; // are allocated. Upon exiting the block, the stored value is checked. If it's; // changed, then there was some sort of violation and the program aborts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h:690,Safety,abort,aborts,690,"//===- StackProtector.h - Stack Protector Insertion -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass inserts stack protectors into functions which need them. A variable; // with a random value in it is stored onto the stack before the local variables; // are allocated. Upon exiting the block, the stored value is checked. If it's; // changed, then there was some sort of violation and the program aborts.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h:101,Deployability,update,update,101,/// Layout - Mapping of allocations to the required SSPLayoutKind.; /// StackProtector analysis will update this map when determining if an; /// AllocaInst triggers a stack protector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/StackProtector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwiftErrorValueTracking.h:26,Energy Efficiency,reduce,reduce,26,// Some useful objects to reduce the number of function arguments needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SwiftErrorValueTracking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwiftErrorValueTracking.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwiftErrorValueTracking.h:21,Security,expose,exposed,21,/// A list of upward exposed vreg uses that need to be satisfied by either a; /// copy def or a phi node at the beginning of the basic block representing; /// the predecessor(s) swifterror value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SwiftErrorValueTracking.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwiftErrorValueTracking.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h:40,Testability,test,test,40,/// A cluster of cases suitable for bit test lowering.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h:17,Integrability,interface,interface,17,// For the GISel interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h:16,Testability,test,test,16,/// Build a bit test cluster from Clusters[First..Last]. Returns false if it; /// decides it's not a good idea.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/SwitchLoweringUtils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h:21,Performance,perform,perform,21,/// Utility class to perform tail duplication.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h:44,Deployability,update,update,44,// A list of virtual registers for which to update SSA form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h:137,Deployability,update,updated,137,"/// Tail duplicate a single basic block into its predecessors, and then clean; /// up.; /// If \p DuplicatePreds is not null, it will be updated to contain the list; /// of predecessors that received a copy of \p MBB.; /// If \p RemovalCallback is non-null. It will be called before MBB is; /// deleted.; /// If \p CandidatePtr is not null, duplicate into these blocks only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TailDuplicator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h:10,Modifiability,extend,extended,10,///< Zero extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h:10,Modifiability,extend,extended,10,///< Sign extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h:11,Availability,error,error,11,///< Swift error parameter,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h:5,Testability,Log,Log,5,///< Log 2 of alignment when arg is passed in memory; ///< (including byval/byref). The max alignment is; ///< verified in IR verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h:5,Testability,Log,Log,5,///< Log 2 of original alignment,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetCallingConv.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:383,Integrability,Interface,Interface,383,"//===-- llvm/CodeGen/TargetFrameLowering.h ----------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Interface to describe the layout of a stack frame on the target machine.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:342,Modifiability,variab,variables,342,"/// Information about stack frame layout on the target. It holds the direction; /// of stack growth, the known stack alignment on entry to each function, and; /// the offset to the locals area.; ///; /// The offset to the local area is the offset from the stack pointer on; /// function entry to the first location where function data (local variables,; /// spill locations) can be stored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:45,Safety,safe,safe,45,/// This method returns whether or not it is safe for an object with the; /// given stack id to be bundled into the local area.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:193,Energy Efficiency,allocate,allocated,193,"/// Control the placement of special register scavenging spill slots when; /// allocating a stack frame.; ///; /// If this returns true, the frame indexes used by the RegScavenger will be; /// allocated closest to the incoming stack pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:87,Testability,log,logic,87,"/// assignCalleeSavedSpillSlots - Allows target to override spill slot; /// assignment logic. If implemented, assignCalleeSavedSpillSlots() should; /// assign frame slots to all CSI entries and return true. If this method; /// returns false, spill slots will be assigned using generic implementation.; /// assignCalleeSavedSpillSlots() may add, delete or rearrange elements of; /// CSI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:60,Integrability,wrap,wrapping,60,/// Returns true if the target will correctly handle shrink wrapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:142,Energy Efficiency,reduce,reduce,142,/// Returns true if the stack slot holes in the fixed and callee-save stack; /// area should be used when allocating other stack locations to reduce stack; /// size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:35,Safety,safe,safely,35,/// Returns true if the target can safely skip saving callee-saved registers; /// for noreturn nounwind functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:25,Testability,stub,stub,25,/// Replace a StackProbe stub (if any) with the actual probe code inline,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:187,Performance,load,load,187,"/// restoreCalleeSavedRegisters - Issues instruction(s) to restore all callee; /// saved registers and returns true if it isn't possible / profitable to do; /// so by issuing a series of load instructions via loadRegToStackSlot().; /// If it returns true, and any of the registers in CSI is not restored,; /// it sets the corresponding Restored flag in CSI to false.; /// Returns false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:209,Performance,load,loadRegToStackSlot,209,"/// restoreCalleeSavedRegisters - Issues instruction(s) to restore all callee; /// saved registers and returns true if it isn't possible / profitable to do; /// so by issuing a series of load instructions via loadRegToStackSlot().; /// If it returns true, and any of the registers in CSI is not restored,; /// it sets the corresponding Restored flag in CSI to false.; /// Returns false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:163,Modifiability,variab,variable,163,/// hasFP - Return true if the specified function should have a dedicated; /// frame pointer register. For most targets this is true only if the function; /// has variable sized allocas or if frame pointer elimination is disabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:62,Usability,simpl,simplify,62,"/// canSimplifyCallFramePseudos - When possible, it's best to simplify the; /// call frame pseudo ops before doing frame index elimination. This is; /// possible only when frame index references between the pseudos won't; /// need adjusting for the call frame adjustments. Normally, that's true; /// if the function has a reserved call frame or a frame pointer. Some; /// targets (Thumb2, for example) may have more complicated criteria,; /// however, and can override this behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:45,Performance,perform,perform,45,"// needsFrameIndexResolution - Do we need to perform FI resolution for; // this function. Normally, this is required only when the function; // has any stack objects. However, targets may want to override this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:10,Safety,safe,safe,10,// Always safe to dispatch to getFrameIndexReference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:446,Availability,avail,available,446,"/// This method determines which of the registers reported by; /// TargetRegisterInfo::getCalleeSavedRegs() should actually get saved.; /// The default implementation checks populates the \p SavedRegs bitset with; /// all registers which are modified in the function, targets may override; /// this function to save additional registers.; /// This method also sets up the register scavenger ensuring there is a free; /// register or a frameindex available.; /// This method should not be called by any passes outside of PEI, because; /// it may change state passed in by \p MF and \p RS. The preferred; /// interface outside PEI is getCalleeSaves.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:607,Integrability,interface,interface,607,"/// This method determines which of the registers reported by; /// TargetRegisterInfo::getCalleeSavedRegs() should actually get saved.; /// The default implementation checks populates the \p SavedRegs bitset with; /// all registers which are modified in the function, targets may override; /// this function to save additional registers.; /// This method also sets up the register scavenger ensuring there is a free; /// register or a frameindex available.; /// This method should not be called by any passes outside of PEI, because; /// it may change state passed in by \p MF and \p RS. The preferred; /// interface outside PEI is getCalleeSaves.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:190,Integrability,wrap,wrapping,190,"/// Check whether or not the given \p MBB can be used as a prologue; /// for the target.; /// The prologue will be inserted first in this basic block.; /// This method is used by the shrink-wrapping pass to decide if; /// \p MBB will be correctly handled by the target.; /// As soon as the target enable shrink-wrapping without overriding; /// this method, we assume that each basic block is a valid; /// prologue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:311,Integrability,wrap,wrapping,311,"/// Check whether or not the given \p MBB can be used as a prologue; /// for the target.; /// The prologue will be inserted first in this basic block.; /// This method is used by the shrink-wrapping pass to decide if; /// \p MBB will be correctly handled by the target.; /// As soon as the target enable shrink-wrapping without overriding; /// this method, we assume that each basic block is a valid; /// prologue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:206,Integrability,wrap,wrapping,206,"/// Check whether or not the given \p MBB can be used as a epilogue; /// for the target.; /// The epilogue will be inserted before the first terminator of that block.; /// This method is used by the shrink-wrapping pass to decide if; /// \p MBB will be correctly handled by the target.; /// As soon as the target enable shrink-wrapping without overriding; /// this method, we assume that each basic block is a valid; /// epilogue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:327,Integrability,wrap,wrapping,327,"/// Check whether or not the given \p MBB can be used as a epilogue; /// for the target.; /// The epilogue will be inserted before the first terminator of that block.; /// This method is used by the shrink-wrapping pass to decide if; /// \p MBB will be correctly handled by the target.; /// As soon as the target enable shrink-wrapping without overriding; /// this method, we assume that each basic block is a valid; /// epilogue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:29,Performance,scalab,scalable,29,/// Returns the StackID that scalable vectors should be associated with.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h:31,Safety,safe,safe,31,/// Check if given function is safe for not having callee saved registers.; /// This is used when interprocedural register allocation is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetFrameLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:106,Integrability,Interface,Interface,106,//---------------------------------------------------------------------------; ///; /// TargetInstrInfo - Interface to description of machine instruction set; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:146,Availability,avail,available,146,"/// Return true if the instruction is trivially rematerializable, meaning it; /// has no side effects and requires no operands that aren't always available.; /// This means the only allowed uses are constants and unallocatable physical; /// registers so that the instructions result is independent of the place; /// in the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:405,Availability,avail,available,405,"/// For instructions with opcodes for which the M_REMATERIALIZABLE flag is; /// set, this hook lets the target specify whether the instruction is actually; /// trivially rematerializable, taking into consideration its operands. This; /// predicate must return false if the instruction has any side effects other; /// than producing a value, or if it requres any address registers that are; /// not always available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:406,Usability,simpl,simply,406,"/// This method commutes the operands of the given machine instruction MI.; /// The operands to be commuted are specified by their indices OpIdx1 and; /// OpIdx2.; ///; /// If a target has any instructions that are commutable but require; /// converting to different instructions or making non-trivial changes; /// to commute them, this method can be overloaded to do that.; /// The default implementation simply swaps the commutable operands.; ///; /// If NewMI is false, MI is modified in place and returned; otherwise, a; /// new machine instruction is created and returned.; ///; /// Do not call this method for a non-commutable instruction.; /// Even though the instruction is commutable, the method may still; /// fail to commute the operands, null pointer is returned in such cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:269,Availability,avail,available,269,"/// Return true if the instruction is a ""coalescable"" extension instruction.; /// That is, it's like a copy where it's legal for the source to overlap the; /// destination. e.g. X86::MOVSX64rr32. If this returns true, then it's; /// expected the pre-extension value is available as a subreg of the result; /// register. This also returns the sub-register index in SubIdx.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:58,Performance,load,load,58,"/// If the specified machine instruction is a direct; /// load from a stack slot, return the virtual or physical register number of; /// the destination along with the FrameIndex of the loaded stack slot. If; /// not, return 0. This predicate must return 0 if the instruction has; /// any side effects other than loading from the stack slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:186,Performance,load,loaded,186,"/// If the specified machine instruction is a direct; /// load from a stack slot, return the virtual or physical register number of; /// the destination along with the FrameIndex of the loaded stack slot. If; /// not, return 0. This predicate must return 0 if the instruction has; /// any side effects other than loading from the stack slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:313,Performance,load,loading,313,"/// If the specified machine instruction is a direct; /// load from a stack slot, return the virtual or physical register number of; /// the destination along with the FrameIndex of the loaded stack slot. If; /// not, return 0. This predicate must return 0 if the instruction has; /// any side effects other than loading from the stack slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:84,Performance,load,loaded,84,/// Optional extension of isLoadFromStackSlot that returns the number of; /// bytes loaded from the stack. This must be implemented if a backend; /// supports partial stack slot spills/loads to further disambiguate; /// what the load does.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:185,Performance,load,loads,185,/// Optional extension of isLoadFromStackSlot that returns the number of; /// bytes loaded from the stack. This must be implemented if a backend; /// supports partial stack slot spills/loads to further disambiguate; /// what the load does.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:229,Performance,load,load,229,/// Optional extension of isLoadFromStackSlot that returns the number of; /// bytes loaded from the stack. This must be implemented if a backend; /// supports partial stack slot spills/loads to further disambiguate; /// what the load does.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:105,Availability,reliab,reliable,105,/// Check for post-frame ptr elimination stack locations as well.; /// This uses a heuristic so it isn't reliable for correctness.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:47,Performance,load,load,47,"/// If the specified machine instruction has a load from a stack slot,; /// return true along with the FrameIndices of the loaded stack slot and the; /// machine mem operands containing the reference.; /// If not, return false. Unlike isLoadFromStackSlot, this returns true for; /// any instructions that loads from the stack. This is just a hint, as some; /// cases may be missed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:123,Performance,load,loaded,123,"/// If the specified machine instruction has a load from a stack slot,; /// return true along with the FrameIndices of the loaded stack slot and the; /// machine mem operands containing the reference.; /// If not, return false. Unlike isLoadFromStackSlot, this returns true for; /// any instructions that loads from the stack. This is just a hint, as some; /// cases may be missed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:305,Performance,load,loads,305,"/// If the specified machine instruction has a load from a stack slot,; /// return true along with the FrameIndices of the loaded stack slot and the; /// machine mem operands containing the reference.; /// If not, return false. Unlike isLoadFromStackSlot, this returns true for; /// any instructions that loads from the stack. This is just a hint, as some; /// cases may be missed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:184,Performance,load,loaded,184,"/// If the specified machine instruction is a direct; /// store to a stack slot, return the virtual or physical register number of; /// the source reg along with the FrameIndex of the loaded stack slot. If; /// not, return 0. This predicate must return 0 if the instruction has; /// any side effects other than storing to the stack slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:182,Performance,load,loads,182,/// Optional extension of isStoreToStackSlot that returns the number of; /// bytes stored to the stack. This must be implemented if a backend; /// supports partial stack slot spills/loads to further disambiguate; /// what the store does.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:106,Availability,reliab,reliable,106,"/// Check for post-frame ptr elimination stack locations as well.; /// This uses a heuristic, so it isn't reliable for correctness.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:122,Performance,load,loaded,122,"/// If the specified machine instruction has a store to a stack slot,; /// return true along with the FrameIndices of the loaded stack slot and the; /// machine mem operands containing the reference.; /// If not, return false. Unlike isStoreToStackSlot,; /// this returns true for any instructions that stores to the; /// stack. This is just a hint, as some cases may be missed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:189,Performance,tune,tuned,189,"/// Return true if the instruction is as cheap as a move instruction.; ///; /// Targets for different archs need to override this, and different; /// micro-architectures can also be finely tuned inside.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:137,Safety,safe,safe,137,/// Return true if the instruction should be sunk by MachineSink.; ///; /// MachineSink determines on its own whether the instruction is safe to sink;; /// this gives the target a hook to override the default behavior with regards; /// to which instructions should be sunk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:197,Modifiability,extend,extend,197,/// Return false if the instruction should not be hoisted by MachineLICM.; ///; /// MachineLICM determines on its own whether the instruction is safe to; /// hoist; this gives the target a hook to extend this assessment and prevent; /// an instruction being hoisted from a given loop for target specific; /// reasons.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:145,Safety,safe,safe,145,/// Return false if the instruction should not be hoisted by MachineLICM.; ///; /// MachineLICM determines on its own whether the instruction is safe to; /// hoist; this gives the target a hook to extend this assessment and prevent; /// an instruction being hoisted from a given loop for target specific; /// reasons.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:130,Deployability,update,update,130,/// Clones instruction or the whole instruction bundle \p Orig and; /// insert into \p MBB before \p InsertBefore. The target may update operands; /// that are required to be unique.; ///; /// \p Orig must not return true for MachineInstr::isNotDuplicable().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:628,Deployability,update,updated,628,"/// This method must be implemented by targets that; /// set the M_CONVERTIBLE_TO_3_ADDR flag. When this flag is set, the target; /// may be able to convert a two-address instruction into one or more true; /// three-address instructions on demand. This allows the X86 target (for; /// example) to convert ADD and SHL instructions into LEA instructions if they; /// would require register copies due to two-addressness.; ///; /// This method returns a null pointer if the transformation cannot be; /// performed, otherwise it returns the last new instruction.; ///; /// If \p LIS is not nullptr, the LiveIntervals info should be updated for; /// replacing \p MI with new instructions, even though this function does not; /// remove MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:501,Performance,perform,performed,501,"/// This method must be implemented by targets that; /// set the M_CONVERTIBLE_TO_3_ADDR flag. When this flag is set, the target; /// may be able to convert a two-address instruction into one or more true; /// three-address instructions on demand. This allows the X86 target (for; /// example) to convert ADD and SHL instructions into LEA instructions if they; /// would require register copies due to two-addressness.; ///; /// This method returns a null pointer if the transformation cannot be; /// performed, otherwise it returns the last new instruction.; ///; /// If \p LIS is not nullptr, the LiveIntervals info should be updated for; /// replacing \p MI with new instructions, even though this function does not; /// remove MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:25,Integrability,rout,routine,25,"/// Returns true iff the routine could find two commutable operands in the; /// given machine instruction.; /// The 'SrcOpIdx1' and 'SrcOpIdx2' are INPUT and OUTPUT arguments.; /// If any of the INPUT values is set to the special value; /// 'CommuteAnyOperandIndex' then the method arbitrarily picks a commutable; /// operand, then returns its index in the corresponding argument.; /// If both of INPUT values are set to 'CommuteAnyOperandIndex' then method; /// looks for 2 commutable operands.; /// If INPUT values refer to some operands of MI, then the method simply; /// returns true if the corresponding operands are commutable and returns; /// false otherwise.; ///; /// For example, calling this method this way:; /// unsigned Op1 = 1, Op2 = CommuteAnyOperandIndex;; /// findCommutedOpIndices(MI, Op1, Op2);; /// can be interpreted as a query asking to find an operand that would be; /// commutable with the operand#1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:563,Usability,simpl,simply,563,"/// Returns true iff the routine could find two commutable operands in the; /// given machine instruction.; /// The 'SrcOpIdx1' and 'SrcOpIdx2' are INPUT and OUTPUT arguments.; /// If any of the INPUT values is set to the special value; /// 'CommuteAnyOperandIndex' then the method arbitrarily picks a commutable; /// operand, then returns its index in the corresponding argument.; /// If both of INPUT values are set to 'CommuteAnyOperandIndex' then method; /// looks for 2 commutable operands.; /// If INPUT values refer to some operands of MI, then the method simply; /// returns true if the corresponding operands are commutable and returns; /// false otherwise.; ///; /// For example, calling this method this way:; /// unsigned Op1 = 1, Op2 = CommuteAnyOperandIndex;; /// findCommutedOpIndices(MI, Op1, Op2);; /// can be interpreted as a query asking to find an operand that would be; /// commutable with the operand#1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1294,Integrability,rout,routine,1294,"/// Analyze the branching code at the end of MBB, returning; /// true if it cannot be understood (e.g. it's a switch dispatch or isn't; /// implemented for a target). Upon success, this returns false and returns; /// with the following information in various cases:; ///; /// 1. If this block ends with no branches (it just falls through to its succ); /// just return false, leaving TBB/FBB null.; /// 2. If this block ends with only an unconditional branch, it sets TBB to be; /// the destination block.; /// 3. If this block ends with a conditional branch and it falls through to a; /// successor block, it sets TBB to be the branch destination block and a; /// list of operands that evaluate the condition. These operands can be; /// passed to other TargetInstrInfo methods to create new branches.; /// 4. If this block ends with a conditional branch followed by an; /// unconditional branch, it returns the 'true' destination in TBB, the; /// 'false' destination in FBB, and a list of operands that evaluate the; /// condition. These operands can be passed to other TargetInstrInfo; /// methods to create new branches.; ///; /// Note that removeBranch and insertBranch must be implemented to support; /// cases where this method returns success.; ///; /// If AllowModify is true, then this routine is allowed to modify the basic; /// block (e.g. delete instructions after the unconditional branch).; ///; /// The CFG information in MBB.Predecessors and MBB.Successors must be valid; /// before calling this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:164,Availability,failure,failure,164,"/// Analyze the branching code at the end of MBB and parse it into the; /// MachineBranchPredicate structure if possible. Returns false on success; /// and true on failure.; ///; /// If AllowModify is true, then this routine is allowed to modify the basic; /// block (e.g. delete instructions after the unconditional branch).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:217,Integrability,rout,routine,217,"/// Analyze the branching code at the end of MBB and parse it into the; /// MachineBranchPredicate structure if possible. Returns false on success; /// and true on failure.; ///; /// If AllowModify is true, then this routine is allowed to modify the basic; /// block (e.g. delete instructions after the unconditional branch).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:135,Deployability,pipeline,pipelined,135,/// Object returned by analyzeLoopForPipelining. Allows software pipelining; /// implementations to query attributes of the loop being pipelined and to; /// apply target-specific updates to the loop once pipelining is complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:179,Deployability,update,updates,179,/// Object returned by analyzeLoopForPipelining. Allows software pipelining; /// implementations to query attributes of the loop being pipelined and to; /// apply target-specific updates to the loop once pipelining is complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:55,Deployability,pipeline,pipelined,55,"/// Return true if the given instruction should not be pipelined and should; /// be ignored. An example could be a loop comparison, or induction variable; /// update with no users being pipelined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:159,Deployability,update,update,159,"/// Return true if the given instruction should not be pipelined and should; /// be ignored. An example could be a loop comparison, or induction variable; /// update with no users being pipelined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:186,Deployability,pipeline,pipelined,186,"/// Return true if the given instruction should not be pipelined and should; /// be ignored. An example could be a loop comparison, or induction variable; /// update with no users being pipelined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:145,Modifiability,variab,variable,145,"/// Return true if the given instruction should not be pipelined and should; /// be ignored. An example could be a loop comparison, or induction variable; /// update with no users being pipelined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:89,Deployability,pipeline,pipeline,89,/// Return true if the proposed schedule should used. Otherwise return; /// false to not pipeline the loop. This function should be used to ensure; /// that pipelined loops meet target-specific quality heuristics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:157,Deployability,pipeline,pipelined,157,/// Return true if the proposed schedule should used. Otherwise return; /// false to not pipeline the loop. This function should be used to ensure; /// that pipelined loops meet target-specific quality heuristics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:32,Energy Efficiency,schedul,schedule,32,/// Return true if the proposed schedule should used. Otherwise return; /// false to not pipeline the loop. This function should be used to ensure; /// that pipelined loops meet target-specific quality heuristics.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:588,Deployability,pipeline,pipelined,588,"/// Create a condition to determine if the trip count of the loop is greater; /// than TC, where TC is always one more than for the previous prologue or; /// 0 if this is being called for the outermost prologue.; ///; /// If the trip count is statically known to be greater than TC, return; /// true. If the trip count is statically known to be not greater than TC,; /// return false. Otherwise return nullopt and fill out Cond with the test; /// condition.; ///; /// Note: This hook is guaranteed to be called from the innermost to the; /// outermost prologue of the loop being software pipelined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:437,Testability,test,test,437,"/// Create a condition to determine if the trip count of the loop is greater; /// than TC, where TC is always one more than for the previous prologue or; /// 0 if this is being called for the outermost prologue.; ///; /// If the trip count is statically known to be greater than TC, return; /// true. If the trip count is statically known to be not greater than TC,; /// return false. Otherwise return nullopt and fill out Cond with the test; /// condition.; ///; /// Note: This hook is guaranteed to be called from the innermost to the; /// outermost prologue of the loop being software pipelined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:123,Deployability,Pipeline,PipelinerLoopInfo,123,"/// Analyze loop L, which must be a single-basic-block loop, and if the; /// conditions can be understood enough produce a PipelinerLoopInfo object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:163,Modifiability,variab,variable,163,"/// Analyze the loop code, return true if it cannot be understood. Upon; /// success, this function returns false and returns information about the; /// induction variable and compare instruction used at the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:21,Energy Efficiency,reduce,reduce,21,/// Generate code to reduce the loop iteration by one and check if the loop; /// is finished. Return the value/register of the new loop count. We need; /// this function when peeling off one or more iterations of a loop. This; /// function assumes the nth iteration is peeled first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:95,Performance,latency,latency,95,"/// Return true if it's profitable to predicate; /// instructions with accumulated instruction latency of ""NumCycles""; /// of the specified basic block, where the probability of the instructions; /// being executed is given by Probability, and Confidence is a measure; /// of our confidence that it will be properly predicted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:316,Safety,predict,predicted,316,"/// Return true if it's profitable to predicate; /// instructions with accumulated instruction latency of ""NumCycles""; /// of the specified basic block, where the probability of the instructions; /// being executed is given by Probability, and Confidence is a measure; /// of our confidence that it will be properly predicted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:369,Safety,predict,predicted,369,"/// Second variant of isProfitableToIfCvt. This one; /// checks for the case where two basic blocks from true and false path; /// of a if-then-else (diamond) are predicated on mutually exclusive; /// predicates, where the probability of the true path being taken is given; /// by Probability, and Confidence is a measure of our confidence that it; /// will be properly predicted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:343,Safety,predict,predicted,343,"/// Return true if it's profitable for if-converter to duplicate instructions; /// of specified accumulated instruction latencies in the specified MBB to; /// enable if-conversion.; /// The probability of the instructions being executed is given by; /// Probability, and Confidence is a measure of our confidence that it; /// will be properly predicted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:197,Performance,latency,latency,197,"/// Return true if it is possible to insert a select; /// instruction that chooses between TrueReg and FalseReg based on the; /// condition code in Cond.; ///; /// When successful, also return the latency in cycles from TrueReg,; /// FalseReg, and Cond to the destination register. In most cases, a select; /// instruction will be 1 cycle, so CondCycles = TrueCycles = FalseCycles = 1; ///; /// Some x86 implementations have 2-cycle cmov instructions.; ///; /// @param MBB Block where select instruction would be inserted.; /// @param Cond Condition returned by analyzeBranch.; /// @param DstReg Virtual dest register that the result should write to.; /// @param TrueReg Virtual register to select when Cond is true.; /// @param FalseReg Virtual register to select when Cond is false.; /// @param CondCycles Latency from Cond+Branch to select output.; /// @param TrueCycles Latency from TrueReg to select output.; /// @param FalseCycles Latency from FalseReg to select output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:808,Performance,Latency,Latency,808,"/// Return true if it is possible to insert a select; /// instruction that chooses between TrueReg and FalseReg based on the; /// condition code in Cond.; ///; /// When successful, also return the latency in cycles from TrueReg,; /// FalseReg, and Cond to the destination register. In most cases, a select; /// instruction will be 1 cycle, so CondCycles = TrueCycles = FalseCycles = 1; ///; /// Some x86 implementations have 2-cycle cmov instructions.; ///; /// @param MBB Block where select instruction would be inserted.; /// @param Cond Condition returned by analyzeBranch.; /// @param DstReg Virtual dest register that the result should write to.; /// @param TrueReg Virtual register to select when Cond is true.; /// @param FalseReg Virtual register to select when Cond is false.; /// @param CondCycles Latency from Cond+Branch to select output.; /// @param TrueCycles Latency from TrueReg to select output.; /// @param FalseCycles Latency from FalseReg to select output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:874,Performance,Latency,Latency,874,"/// Return true if it is possible to insert a select; /// instruction that chooses between TrueReg and FalseReg based on the; /// condition code in Cond.; ///; /// When successful, also return the latency in cycles from TrueReg,; /// FalseReg, and Cond to the destination register. In most cases, a select; /// instruction will be 1 cycle, so CondCycles = TrueCycles = FalseCycles = 1; ///; /// Some x86 implementations have 2-cycle cmov instructions.; ///; /// @param MBB Block where select instruction would be inserted.; /// @param Cond Condition returned by analyzeBranch.; /// @param DstReg Virtual dest register that the result should write to.; /// @param TrueReg Virtual register to select when Cond is true.; /// @param FalseReg Virtual register to select when Cond is false.; /// @param CondCycles Latency from Cond+Branch to select output.; /// @param TrueCycles Latency from TrueReg to select output.; /// @param FalseCycles Latency from FalseReg to select output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:937,Performance,Latency,Latency,937,"/// Return true if it is possible to insert a select; /// instruction that chooses between TrueReg and FalseReg based on the; /// condition code in Cond.; ///; /// When successful, also return the latency in cycles from TrueReg,; /// FalseReg, and Cond to the destination register. In most cases, a select; /// instruction will be 1 cycle, so CondCycles = TrueCycles = FalseCycles = 1; ///; /// Some x86 implementations have 2-cycle cmov instructions.; ///; /// @param MBB Block where select instruction would be inserted.; /// @param Cond Condition returned by analyzeBranch.; /// @param DstReg Virtual dest register that the result should write to.; /// @param TrueReg Virtual register to select when Cond is true.; /// @param FalseReg Virtual register to select when Cond is false.; /// @param CondCycles Latency from Cond+Branch to select output.; /// @param TrueCycles Latency from TrueReg to select output.; /// @param FalseCycles Latency from FalseReg to select output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:366,Availability,avail,available,366,"/// Insert a select instruction into MBB before I that will copy TrueReg to; /// DstReg when Cond is true, and FalseReg to DstReg when Cond is false.; ///; /// This function can only be called after canInsertSelect() returned true.; /// The condition in Cond comes from analyzeBranch, and it can be assumed; /// that the same flags or registers required by Cond are available at the; /// insertion point.; ///; /// @param MBB Block where select instruction should be inserted.; /// @param I Insertion point.; /// @param DL Source location for debugging.; /// @param DstReg Virtual register to be defined by select instruction.; /// @param Cond Condition as computed by analyzeBranch.; /// @param TrueReg Virtual register to copy when Cond is true.; /// @param FalseReg Virtual register to copy when Cons is false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:339,Performance,optimiz,optimize,339,"/// Analyze the given select instruction, returning true if; /// it cannot be understood. It is assumed that MI->isSelect() is true.; ///; /// When successful, return the controlling condition and the operands that; /// determine the true and false result values.; ///; /// Result = SELECT Cond, TrueOp, FalseOp; ///; /// Some targets can optimize select instructions, for example by predicating; /// the instruction defining one of the operands. Such targets should set; /// Optimizable.; ///; /// @param MI Select instruction to analyze.; /// @param Cond Condition controlling the select.; /// @param TrueOp Operand number of the value selected when Cond is true.; /// @param FalseOp Operand number of the value selected when Cond is false.; /// @param Optimizable Returned as true if MI is optimizable.; /// @returns False on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:476,Performance,Optimiz,Optimizable,476,"/// Analyze the given select instruction, returning true if; /// it cannot be understood. It is assumed that MI->isSelect() is true.; ///; /// When successful, return the controlling condition and the operands that; /// determine the true and false result values.; ///; /// Result = SELECT Cond, TrueOp, FalseOp; ///; /// Some targets can optimize select instructions, for example by predicating; /// the instruction defining one of the operands. Such targets should set; /// Optimizable.; ///; /// @param MI Select instruction to analyze.; /// @param Cond Condition controlling the select.; /// @param TrueOp Operand number of the value selected when Cond is true.; /// @param FalseOp Operand number of the value selected when Cond is false.; /// @param Optimizable Returned as true if MI is optimizable.; /// @returns False on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:755,Performance,Optimiz,Optimizable,755,"/// Analyze the given select instruction, returning true if; /// it cannot be understood. It is assumed that MI->isSelect() is true.; ///; /// When successful, return the controlling condition and the operands that; /// determine the true and false result values.; ///; /// Result = SELECT Cond, TrueOp, FalseOp; ///; /// Some targets can optimize select instructions, for example by predicating; /// the instruction defining one of the operands. Such targets should set; /// Optimizable.; ///; /// @param MI Select instruction to analyze.; /// @param Cond Condition controlling the select.; /// @param TrueOp Operand number of the value selected when Cond is true.; /// @param FalseOp Operand number of the value selected when Cond is false.; /// @param Optimizable Returned as true if MI is optimizable.; /// @returns False on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:793,Performance,optimiz,optimizable,793,"/// Analyze the given select instruction, returning true if; /// it cannot be understood. It is assumed that MI->isSelect() is true.; ///; /// When successful, return the controlling condition and the operands that; /// determine the true and false result values.; ///; /// Result = SELECT Cond, TrueOp, FalseOp; ///; /// Some targets can optimize select instructions, for example by predicating; /// the instruction defining one of the operands. Such targets should set; /// Optimizable.; ///; /// @param MI Select instruction to analyze.; /// @param Cond Condition controlling the select.; /// @param TrueOp Operand number of the value selected when Cond is true.; /// @param FalseOp Operand number of the value selected when Cond is false.; /// @param Optimizable Returned as true if MI is optimizable.; /// @returns False on success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:190,Availability,failure,failure,190,"/// Given a select instruction that was understood by; /// analyzeSelect and returned Optimizable = true, attempt to optimize MI by; /// merging it with one of its operands. Returns NULL on failure.; ///; /// When successful, returns the new select instruction. The client is; /// responsible for deleting MI.; ///; /// If both sides of the select can be optimized, PreferFalse is used to pick; /// a side.; ///; /// @param MI Optimizable select instruction.; /// @param NewMIs Set that record all MIs in the basic block up to \p; /// MI. Has to be updated with any newly created MI or deleted ones.; /// @param PreferFalse Try to optimize FalseOp instead of TrueOp.; /// @returns Optimized instruction or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:549,Deployability,update,updated,549,"/// Given a select instruction that was understood by; /// analyzeSelect and returned Optimizable = true, attempt to optimize MI by; /// merging it with one of its operands. Returns NULL on failure.; ///; /// When successful, returns the new select instruction. The client is; /// responsible for deleting MI.; ///; /// If both sides of the select can be optimized, PreferFalse is used to pick; /// a side.; ///; /// @param MI Optimizable select instruction.; /// @param NewMIs Set that record all MIs in the basic block up to \p; /// MI. Has to be updated with any newly created MI or deleted ones.; /// @param PreferFalse Try to optimize FalseOp instead of TrueOp.; /// @returns Optimized instruction or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:86,Performance,Optimiz,Optimizable,86,"/// Given a select instruction that was understood by; /// analyzeSelect and returned Optimizable = true, attempt to optimize MI by; /// merging it with one of its operands. Returns NULL on failure.; ///; /// When successful, returns the new select instruction. The client is; /// responsible for deleting MI.; ///; /// If both sides of the select can be optimized, PreferFalse is used to pick; /// a side.; ///; /// @param MI Optimizable select instruction.; /// @param NewMIs Set that record all MIs in the basic block up to \p; /// MI. Has to be updated with any newly created MI or deleted ones.; /// @param PreferFalse Try to optimize FalseOp instead of TrueOp.; /// @returns Optimized instruction or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:117,Performance,optimiz,optimize,117,"/// Given a select instruction that was understood by; /// analyzeSelect and returned Optimizable = true, attempt to optimize MI by; /// merging it with one of its operands. Returns NULL on failure.; ///; /// When successful, returns the new select instruction. The client is; /// responsible for deleting MI.; ///; /// If both sides of the select can be optimized, PreferFalse is used to pick; /// a side.; ///; /// @param MI Optimizable select instruction.; /// @param NewMIs Set that record all MIs in the basic block up to \p; /// MI. Has to be updated with any newly created MI or deleted ones.; /// @param PreferFalse Try to optimize FalseOp instead of TrueOp.; /// @returns Optimized instruction or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:355,Performance,optimiz,optimized,355,"/// Given a select instruction that was understood by; /// analyzeSelect and returned Optimizable = true, attempt to optimize MI by; /// merging it with one of its operands. Returns NULL on failure.; ///; /// When successful, returns the new select instruction. The client is; /// responsible for deleting MI.; ///; /// If both sides of the select can be optimized, PreferFalse is used to pick; /// a side.; ///; /// @param MI Optimizable select instruction.; /// @param NewMIs Set that record all MIs in the basic block up to \p; /// MI. Has to be updated with any newly created MI or deleted ones.; /// @param PreferFalse Try to optimize FalseOp instead of TrueOp.; /// @returns Optimized instruction or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:427,Performance,Optimiz,Optimizable,427,"/// Given a select instruction that was understood by; /// analyzeSelect and returned Optimizable = true, attempt to optimize MI by; /// merging it with one of its operands. Returns NULL on failure.; ///; /// When successful, returns the new select instruction. The client is; /// responsible for deleting MI.; ///; /// If both sides of the select can be optimized, PreferFalse is used to pick; /// a side.; ///; /// @param MI Optimizable select instruction.; /// @param NewMIs Set that record all MIs in the basic block up to \p; /// MI. Has to be updated with any newly created MI or deleted ones.; /// @param PreferFalse Try to optimize FalseOp instead of TrueOp.; /// @returns Optimized instruction or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:631,Performance,optimiz,optimize,631,"/// Given a select instruction that was understood by; /// analyzeSelect and returned Optimizable = true, attempt to optimize MI by; /// merging it with one of its operands. Returns NULL on failure.; ///; /// When successful, returns the new select instruction. The client is; /// responsible for deleting MI.; ///; /// If both sides of the select can be optimized, PreferFalse is used to pick; /// a side.; ///; /// @param MI Optimizable select instruction.; /// @param NewMIs Set that record all MIs in the basic block up to \p; /// MI. Has to be updated with any newly created MI or deleted ones.; /// @param PreferFalse Try to optimize FalseOp instead of TrueOp.; /// @returns Optimized instruction or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:681,Performance,Optimiz,Optimized,681,"/// Given a select instruction that was understood by; /// analyzeSelect and returned Optimizable = true, attempt to optimize MI by; /// merging it with one of its operands. Returns NULL on failure.; ///; /// When successful, returns the new select instruction. The client is; /// responsible for deleting MI.; ///; /// If both sides of the select can be optimized, PreferFalse is used to pick; /// a side.; ///; /// @param MI Optimizable select instruction.; /// @param NewMIs Set that record all MIs in the basic block up to \p; /// MI. Has to be updated with any newly created MI or deleted ones.; /// @param PreferFalse Try to optimize FalseOp instead of TrueOp.; /// @returns Optimized instruction or NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:40,Performance,Optimiz,Optimizable,40,// This function must be implemented if Optimizable is ever set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Integrability,depend,dependent,11,/// Target-dependent implementation for IsCopyInstr.; /// If the specific machine instruction is a instruction that moves/copies; /// value from one register to another register return destination and source; /// registers as machine operands.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:360,Integrability,depend,dependent,360,"/// If the specific machine instruction is a instruction that moves/copies; /// value from one register to another register return destination and source; /// registers as machine operands.; /// For COPY-instruction the method naturally returns destination and source; /// registers as machine operands, for all other instructions the method calls; /// target-dependent implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:4,Performance,Load,Load,4,"/// Load the specified register of the given register class from the specified; /// stack frame index. The load instruction is to be added to the given; /// machine basic block before the specified machine instruction. If \p; /// DestReg is being directly reloaded as part of assigning a virtual; /// register, \p VReg is the register being assigned. This additional register; /// argument is needed for certain targets when invoked from RegAllocFast to; /// map the loaded physical register to its virtual register. A null register; /// can be passed elsewhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:107,Performance,load,load,107,"/// Load the specified register of the given register class from the specified; /// stack frame index. The load instruction is to be added to the given; /// machine basic block before the specified machine instruction. If \p; /// DestReg is being directly reloaded as part of assigning a virtual; /// register, \p VReg is the register being assigned. This additional register; /// argument is needed for certain targets when invoked from RegAllocFast to; /// map the loaded physical register to its virtual register. A null register; /// can be passed elsewhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:467,Performance,load,loaded,467,"/// Load the specified register of the given register class from the specified; /// stack frame index. The load instruction is to be added to the given; /// machine basic block before the specified machine instruction. If \p; /// DestReg is being directly reloaded as part of assigning a virtual; /// register, \p VReg is the register being assigned. This additional register; /// argument is needed for certain targets when invoked from RegAllocFast to; /// map the loaded physical register to its virtual register. A null register; /// can be passed elsewhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:40,Performance,load,load,40,"/// Check whether the target can fold a load that feeds a subreg operand; /// (or a subreg operand that feeds a store).; /// For example, X86 may want to return true if it can fold; /// movl (%esp), %eax; /// subb, %al, ...; /// Into:; /// subb (%esp), ...; ///; /// Ideally, we'd like the target implementation of foldMemoryOperand() to; /// reject subregs - but since this behavior used to be enforced in the; /// target-independent code, moving this responsibility to the targets; /// has the potential of causing nasty silent breakage in out-of-tree targets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:10,Deployability,patch,patchpoint,10,"/// For a patchpoint, stackmap, or statepoint intrinsic, return the range of; /// operands which can't be folded into stack references. Operands outside; /// of the range are most likely foldable but it is not guaranteed.; /// These instructions are unique in that stack references for some operands; /// have the same execution cost (e.g. none) as the unfolded register forms.; /// The ranged return is guaranteed to include all operands which can't be; /// folded at zero cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:22,Performance,load,load,22,"/// Attempt to fold a load or store of the specified stack; /// slot into the specified machine instruction for the specified operand(s).; /// If this is possible, a new instruction is returned with the specified; /// operand folded, otherwise NULL is returned.; /// The new instruction is inserted before MI, and the client is responsible; /// for removing the old instruction.; /// If VRM is passed, the assigned physregs can be inspected by target to; /// decide on using an opcode (note that those assignments can still change).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:65,Performance,load,load,65,"/// Same as the previous version except it allows folding of any load and; /// store from / to any address, not just from a specific stack slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:30,Testability,log,logic,30,/// This function defines the logic to lower COPY instruction to; /// target specific instruction(s).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:98,Energy Efficiency,reduce,reduce,98,/// Return true if target supports reassociation of instructions in machine; /// combiner pass to reduce register pressure for a given BB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:49,Performance,throughput,throughput,49,/// Return true when a code sequence can improve throughput. It; /// should be called only for instructions in loops.; /// \param Pattern - combiner pattern,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:59,Integrability,depend,dependent,59,"/// Return true if the input \P Inst is part of a chain of dependent ops; /// that are suitable for reassociation, otherwise return false.; /// If the instruction's operands must be commuted to have a previous; /// instruction of the same type define the first source operand, \P Commuted; /// will be set to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:139,Testability,test,tested,139,"/// Return true when \P Inst is both associative and commutative. If \P Invert; /// is true, then the inverse of \P Inst operation must be tested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:23,Performance,latency,latency,23,"/// When calculate the latency of the root instruction, accumulate the; /// latency of the sequence to the root latency.; /// \param Root - Instruction that could be combined with one of its operands",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:76,Performance,latency,latency,76,"/// When calculate the latency of the root instruction, accumulate the; /// latency of the sequence to the root latency.; /// \param Root - Instruction that could be combined with one of its operands",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:112,Performance,latency,latency,112,"/// When calculate the latency of the root instruction, accumulate the; /// latency of the sequence to the root latency.; /// \param Root - Instruction that could be combined with one of its operands",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:79,Energy Efficiency,reduce,reduce,79,/// Attempt to reassociate \P Root and \P Prev according to \P Pattern to; /// reduce critical path length.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:57,Energy Efficiency,schedul,scheduling,57,/// Return true if the given SDNode can be copied during scheduling; /// even if it has glue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Integrability,depend,dependent,11,/// Target-dependent implementation for foldMemoryOperand.; /// Target-independent code in foldMemoryOperand will; /// take care of adding a MachineMemOperand to the newly created instruction.; /// The instruction and any auxiliary instructions necessary will be inserted; /// at InsertPt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Integrability,depend,dependent,11,/// Target-dependent implementation for foldMemoryOperand.; /// Target-independent code in foldMemoryOperand will; /// take care of adding a MachineMemOperand to the newly created instruction.; /// The instruction and any auxiliary instructions necessary will be inserted; /// at InsertPt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Integrability,depend,dependent,11,"/// Target-dependent implementation of getRegSequenceInputs.; ///; /// \returns true if it is possible to build the equivalent; /// REG_SEQUENCE inputs with the pair \p MI, \p DefIdx. False otherwise.; ///; /// \pre MI.isRegSequenceLike().; ///; /// \see TargetInstrInfo::getRegSequenceInputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Integrability,depend,dependent,11,"/// Target-dependent implementation of getExtractSubregInputs.; ///; /// \returns true if it is possible to build the equivalent; /// EXTRACT_SUBREG inputs with the pair \p MI, \p DefIdx. False otherwise.; ///; /// \pre MI.isExtractSubregLike().; ///; /// \see TargetInstrInfo::getExtractSubregInputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Integrability,depend,dependent,11,"/// Target-dependent implementation of getInsertSubregInputs.; ///; /// \returns true if it is possible to build the equivalent; /// INSERT_SUBREG inputs with the pair \p MI, \p DefIdx. False otherwise.; ///; /// \pre MI.isInsertSubregLike().; ///; /// \see TargetInstrInfo::getInsertSubregInputs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:71,Performance,load,load,71,"/// unfoldMemoryOperand - Separate a single instruction which folded a load or; /// a store or a load and a store into two or more instruction. If this is; /// possible, returns true as well as the new instructions by reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:97,Performance,load,load,97,"/// unfoldMemoryOperand - Separate a single instruction which folded a load or; /// a store or a load and a store into two or more instruction. If this is; /// possible, returns true as well as the new instructions by reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:66,Performance,load,load,66,"/// Returns the opcode of the would be new; /// instruction after load / store are unfolded from an instruction of the; /// specified opcode. It returns zero if the specified unfolding is not; /// possible. If LoadRegIndex is non-null, it is filled in with the operand; /// index of the operand which will hold the register holding the loaded; /// value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:210,Performance,Load,LoadRegIndex,210,"/// Returns the opcode of the would be new; /// instruction after load / store are unfolded from an instruction of the; /// specified opcode. It returns zero if the specified unfolding is not; /// possible. If LoadRegIndex is non-null, it is filled in with the operand; /// index of the operand which will hold the register holding the loaded; /// value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:336,Performance,load,loaded,336,"/// Returns the opcode of the would be new; /// instruction after load / store are unfolded from an instruction of the; /// specified opcode. It returns zero if the specified unfolding is not; /// possible. If LoadRegIndex is non-null, it is filled in with the operand; /// index of the operand which will hold the register holding the loaded; /// value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:37,Energy Efficiency,schedul,scheduler,37,/// This is used by the pre-regalloc scheduler to determine if two loads are; /// loading from the same base address. It should only return true if the base; /// pointers are the same and the only differences between the two addresses; /// are the offset. It also returns the offsets by reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:67,Performance,load,loads,67,/// This is used by the pre-regalloc scheduler to determine if two loads are; /// loading from the same base address. It should only return true if the base; /// pointers are the same and the only differences between the two addresses; /// are the offset. It also returns the offsets by reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:82,Performance,load,loading,82,/// This is used by the pre-regalloc scheduler to determine if two loads are; /// loading from the same base address. It should only return true if the base; /// pointers are the same and the only differences between the two addresses; /// are the offset. It also returns the offsets by reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:39,Energy Efficiency,schedul,scheduler,39,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:136,Energy Efficiency,schedul,scheduled,136,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:270,Energy Efficiency,schedul,scheduled,270,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:448,Energy Efficiency,schedul,schedule,448,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:543,Energy Efficiency,schedul,scheduled,543,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:120,Performance,load,loads,120,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:184,Performance,load,loads,184,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:194,Performance,load,loading,194,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:234,Performance,cache,cache,234,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:347,Performance,load,load,347,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:465,Performance,load,loads,465,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:509,Performance,load,loads,509,"/// This is a used by the pre-regalloc scheduler to determine (in conjunction; /// with areLoadsFromSameBasePtr) if two loads should be scheduled together.; /// On some targets if two loads are loading from; /// addresses in the same cache line, it's better if they are scheduled; /// together. This function takes two integers that represent the load offsets; /// from the common base address. It returns true if it decides it's desirable; /// to schedule the two loads together. ""NumLoads"" is the number of loads that; /// have already been scheduled after Load1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:170,Security,access,accesses,170,/// Get zero or more base operands and the byte offset of an instruction that; /// reads/writes memory. Note that there may be zero base operands if the; /// instruction accesses a constant address.; /// It returns false if MI does not read/write memory.; /// It returns false if base operands and offset could not be determined.; /// It is not guaranteed to always recognize base operands and offsets in all; /// cases.; /// FIXME: Move Offset and OffsetIsScalable to some ElementCount-style; /// abstraction that supports negative offsets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Integrability,depend,dependent,11,/// Target dependent implementation to get the values constituting the address; /// MachineInstr that is accessing memory. These values are returned as a; /// struct ExtAddrMode which contains all relevant information to make up the; /// address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:105,Security,access,accessing,105,/// Target dependent implementation to get the values constituting the address; /// MachineInstr that is accessing memory. These values are returned as a; /// struct ExtAddrMode which contains all relevant information to make up the; /// address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:122,Performance,load,load,122,"/// Check if it's possible and beneficial to fold the addressing computation; /// `AddrI` into the addressing mode of the load/store instruction `MemI`. The; /// memory instruction is a user of the virtual register `Reg`, which in turn; /// is the ultimate destination of zero or more COPY instructions from the; /// output register of `AddrI`.; /// Return the adddressing mode after folding in `AM`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Performance,load,load,11,"/// Emit a load/store instruction with the same value register as `MemI`, but; /// using the address from `AM`. The addressing mode must have been obtained; /// from `canFoldIntoAddr` for the same memory instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:62,Energy Efficiency,schedul,scheduled,62,"/// Returns true if the two given memory operations should be scheduled; /// adjacent. Note that you have to add:; /// DAG->addMutation(createLoadClusterDAGMutation(DAG->TII, DAG->TRI));; /// or; /// DAG->addMutation(createStoreClusterDAGMutation(DAG->TII, DAG->TRI));; /// to TargetPassConfig::createMachineScheduler() to have an effect.; ///; /// \p BaseOps1 and \p BaseOps2 are memory operands of two memory operations.; /// \p Offset1 and \p Offset2 are the byte offsets for the memory; /// operations.; /// \p OffsetIsScalable1 and \p OffsetIsScalable2 indicate if the offset is; /// scaled by a runtime quantity.; /// \p ClusterSize is the number of operations in the resulting load/store; /// cluster if this hook returns true.; /// \p NumBytes is the number of bytes that will be loaded from all the; /// clustered loads if this hook returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:684,Performance,load,load,684,"/// Returns true if the two given memory operations should be scheduled; /// adjacent. Note that you have to add:; /// DAG->addMutation(createLoadClusterDAGMutation(DAG->TII, DAG->TRI));; /// or; /// DAG->addMutation(createStoreClusterDAGMutation(DAG->TII, DAG->TRI));; /// to TargetPassConfig::createMachineScheduler() to have an effect.; ///; /// \p BaseOps1 and \p BaseOps2 are memory operands of two memory operations.; /// \p Offset1 and \p Offset2 are the byte offsets for the memory; /// operations.; /// \p OffsetIsScalable1 and \p OffsetIsScalable2 indicate if the offset is; /// scaled by a runtime quantity.; /// \p ClusterSize is the number of operations in the resulting load/store; /// cluster if this hook returns true.; /// \p NumBytes is the number of bytes that will be loaded from all the; /// clustered loads if this hook returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:788,Performance,load,loaded,788,"/// Returns true if the two given memory operations should be scheduled; /// adjacent. Note that you have to add:; /// DAG->addMutation(createLoadClusterDAGMutation(DAG->TII, DAG->TRI));; /// or; /// DAG->addMutation(createStoreClusterDAGMutation(DAG->TII, DAG->TRI));; /// to TargetPassConfig::createMachineScheduler() to have an effect.; ///; /// \p BaseOps1 and \p BaseOps2 are memory operands of two memory operations.; /// \p Offset1 and \p Offset2 are the byte offsets for the memory; /// operations.; /// \p OffsetIsScalable1 and \p OffsetIsScalable2 indicate if the offset is; /// scaled by a runtime quantity.; /// \p ClusterSize is the number of operations in the resulting load/store; /// cluster if this hook returns true.; /// \p NumBytes is the number of bytes that will be loaded from all the; /// clustered loads if this hook returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:823,Performance,load,loads,823,"/// Returns true if the two given memory operations should be scheduled; /// adjacent. Note that you have to add:; /// DAG->addMutation(createLoadClusterDAGMutation(DAG->TII, DAG->TRI));; /// or; /// DAG->addMutation(createStoreClusterDAGMutation(DAG->TII, DAG->TRI));; /// to TargetPassConfig::createMachineScheduler() to have an effect.; ///; /// \p BaseOps1 and \p BaseOps2 are memory operands of two memory operations.; /// \p Offset1 and \p Offset2 are the byte offsets for the memory; /// operations.; /// \p OffsetIsScalable1 and \p OffsetIsScalable2 indicate if the offset is; /// scaled by a runtime quantity.; /// \p ClusterSize is the number of operations in the resulting load/store; /// cluster if this hook returns true.; /// \p NumBytes is the number of bytes that will be loaded from all the; /// clustered loads if this hook returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:24,Safety,safe,safe,24,/// Return true if it's safe to move a machine; /// instruction that defines the specified register class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:57,Energy Efficiency,schedul,scheduling,57,/// Test if the given instruction should be considered a scheduling boundary.; /// This primarily includes labels and terminators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:4,Testability,Test,Test,4,/// Test if the given instruction should be considered a scheduling boundary.; /// This primarily includes labels and terminators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions before register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:77,Energy Efficiency,schedul,scheduling,77,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions before register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:26,Safety,hazard,hazard,26,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions before register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions before register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:77,Energy Efficiency,schedul,scheduling,77,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions before register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:26,Safety,hazard,hazard,26,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions before register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions after register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:77,Energy Efficiency,schedul,scheduling,77,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions after register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:26,Safety,hazard,hazard,26,/// Allocate and return a hazard recognizer to use for this target when; /// scheduling the machine instructions after register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate and return a hazard recognizer to use for by non-scheduling; /// passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:62,Energy Efficiency,schedul,scheduling,62,/// Allocate and return a hazard recognizer to use for by non-scheduling; /// passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:26,Safety,hazard,hazard,26,/// Allocate and return a hazard recognizer to use for by non-scheduling; /// passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:50,Safety,hazard,hazard,50,/// Provide a global flag for disabling the PreRA hazard recognizer that; /// targets may choose to honor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:80,Energy Efficiency,efficient,efficient,80,"/// See if the comparison instruction can be converted; /// into something more efficient. E.g., on ARM most instructions can set the; /// flags register, obviating the need for a separate CMP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:22,Performance,load,load,22,"/// Try to remove the load by folding it to a register operand at the use.; /// We fold the load instructions if and only if the; /// def and use are in the same BB. We only look at one load and see; /// whether it can be folded into MI. FoldAsLoadDefReg is the virtual register; /// defined by the load we are trying to fold. DefMI returns the machine; /// instruction that defines FoldAsLoadDefReg, and the function returns; /// the machine instruction generated due to folding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:92,Performance,load,load,92,"/// Try to remove the load by folding it to a register operand at the use.; /// We fold the load instructions if and only if the; /// def and use are in the same BB. We only look at one load and see; /// whether it can be folded into MI. FoldAsLoadDefReg is the virtual register; /// defined by the load we are trying to fold. DefMI returns the machine; /// instruction that defines FoldAsLoadDefReg, and the function returns; /// the machine instruction generated due to folding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:186,Performance,load,load,186,"/// Try to remove the load by folding it to a register operand at the use.; /// We fold the load instructions if and only if the; /// def and use are in the same BB. We only look at one load and see; /// whether it can be folded into MI. FoldAsLoadDefReg is the virtual register; /// defined by the load we are trying to fold. DefMI returns the machine; /// instruction that defines FoldAsLoadDefReg, and the function returns; /// the machine instruction generated due to folding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:299,Performance,load,load,299,"/// Try to remove the load by folding it to a register operand at the use.; /// We fold the load instructions if and only if the; /// def and use are in the same BB. We only look at one load and see; /// whether it can be folded into MI. FoldAsLoadDefReg is the virtual register; /// defined by the load we are trying to fold. DefMI returns the machine; /// instruction that defines FoldAsLoadDefReg, and the function returns; /// the machine instruction generated due to folding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:146,Energy Efficiency,schedul,scheduler,146,"/// Return true for pseudo instructions that don't consume any; /// machine resources in their current form. These are common cases that the; /// scheduler should consider free, rather than conservatively handling them; /// as instructions with no itinerary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:110,Energy Efficiency,schedul,scheduling,110,"/// Compute and return the use operand latency of a given pair of def and use.; /// In most cases, the static scheduling itinerary was enough to determine the; /// operand latency. But it may not be possible for instructions with variable; /// number of defs / uses.; ///; /// This is a raw interface to the itinerary that may be directly overridden; /// by a target. Use computeOperandLatency to get the best estimate of; /// latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:291,Integrability,interface,interface,291,"/// Compute and return the use operand latency of a given pair of def and use.; /// In most cases, the static scheduling itinerary was enough to determine the; /// operand latency. But it may not be possible for instructions with variable; /// number of defs / uses.; ///; /// This is a raw interface to the itinerary that may be directly overridden; /// by a target. Use computeOperandLatency to get the best estimate of; /// latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:230,Modifiability,variab,variable,230,"/// Compute and return the use operand latency of a given pair of def and use.; /// In most cases, the static scheduling itinerary was enough to determine the; /// operand latency. But it may not be possible for instructions with variable; /// number of defs / uses.; ///; /// This is a raw interface to the itinerary that may be directly overridden; /// by a target. Use computeOperandLatency to get the best estimate of; /// latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:39,Performance,latency,latency,39,"/// Compute and return the use operand latency of a given pair of def and use.; /// In most cases, the static scheduling itinerary was enough to determine the; /// operand latency. But it may not be possible for instructions with variable; /// number of defs / uses.; ///; /// This is a raw interface to the itinerary that may be directly overridden; /// by a target. Use computeOperandLatency to get the best estimate of; /// latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:172,Performance,latency,latency,172,"/// Compute and return the use operand latency of a given pair of def and use.; /// In most cases, the static scheduling itinerary was enough to determine the; /// operand latency. But it may not be possible for instructions with variable; /// number of defs / uses.; ///; /// This is a raw interface to the itinerary that may be directly overridden; /// by a target. Use computeOperandLatency to get the best estimate of; /// latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:427,Performance,latency,latency,427,"/// Compute and return the use operand latency of a given pair of def and use.; /// In most cases, the static scheduling itinerary was enough to determine the; /// operand latency. But it may not be possible for instructions with variable; /// number of defs / uses.; ///; /// This is a raw interface to the itinerary that may be directly overridden; /// by a target. Use computeOperandLatency to get the best estimate of; /// latency.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:28,Performance,latency,latency,28,"/// Compute the instruction latency of a given instruction.; /// If the instruction has higher cost when predicated, it's returned via; /// PredCost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:32,Performance,latency,latency,32,/// Return the default expected latency for a def based on its opcode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:40,Performance,latency,latency,40,/// Return true if this opcode has high latency to its result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:20,Performance,latency,latency,20,/// Compute operand latency between a def of 'Reg'; /// and a use in the current loop. Return true if the target considered; /// it 'high'. This is used by optimization passes such as machine LICM to; /// determine whether it makes sense to hoist an instruction out even in a; /// high register pressure situation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:156,Performance,optimiz,optimization,156,/// Compute operand latency between a def of 'Reg'; /// and a use in the current loop. Return true if the target considered; /// it 'high'. This is used by optimization passes such as machine LICM to; /// determine whether it makes sense to hoist an instruction out even in a; /// high register pressure situation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:20,Performance,latency,latency,20,/// Compute operand latency of a def of 'Reg'. Return true; /// if the target considered it 'low'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:4,Performance,Perform,Perform,4,/// Perform target-specific instruction verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:48,Availability,mask,mask,48,"/// Return the current execution domain and bit mask of; /// possible domains for instruction.; ///; /// Some micro-architectures have multiple execution domains, and multiple; /// opcodes that perform the same operation in different domains. For; /// example, the x86 architecture provides the por, orps, and orpd; /// instructions that all do the same thing. There is a latency penalty if a; /// register is written in one domain and read in another.; ///; /// This function returns a pair (domain, mask) containing the execution; /// domain of MI, and a bit mask of possible domains. The setExecutionDomain; /// function can be used to change the opcode to one of the domains in the; /// bit mask. Instructions whose execution domain can't be changed should; /// return a 0 mask.; ///; /// The execution domain numbers don't have any special meaning except domain; /// 0 is used for instructions that are not associated with any interesting; /// execution domain.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:501,Availability,mask,mask,501,"/// Return the current execution domain and bit mask of; /// possible domains for instruction.; ///; /// Some micro-architectures have multiple execution domains, and multiple; /// opcodes that perform the same operation in different domains. For; /// example, the x86 architecture provides the por, orps, and orpd; /// instructions that all do the same thing. There is a latency penalty if a; /// register is written in one domain and read in another.; ///; /// This function returns a pair (domain, mask) containing the execution; /// domain of MI, and a bit mask of possible domains. The setExecutionDomain; /// function can be used to change the opcode to one of the domains in the; /// bit mask. Instructions whose execution domain can't be changed should; /// return a 0 mask.; ///; /// The execution domain numbers don't have any special meaning except domain; /// 0 is used for instructions that are not associated with any interesting; /// execution domain.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:561,Availability,mask,mask,561,"/// Return the current execution domain and bit mask of; /// possible domains for instruction.; ///; /// Some micro-architectures have multiple execution domains, and multiple; /// opcodes that perform the same operation in different domains. For; /// example, the x86 architecture provides the por, orps, and orpd; /// instructions that all do the same thing. There is a latency penalty if a; /// register is written in one domain and read in another.; ///; /// This function returns a pair (domain, mask) containing the execution; /// domain of MI, and a bit mask of possible domains. The setExecutionDomain; /// function can be used to change the opcode to one of the domains in the; /// bit mask. Instructions whose execution domain can't be changed should; /// return a 0 mask.; ///; /// The execution domain numbers don't have any special meaning except domain; /// 0 is used for instructions that are not associated with any interesting; /// execution domain.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:695,Availability,mask,mask,695,"/// Return the current execution domain and bit mask of; /// possible domains for instruction.; ///; /// Some micro-architectures have multiple execution domains, and multiple; /// opcodes that perform the same operation in different domains. For; /// example, the x86 architecture provides the por, orps, and orpd; /// instructions that all do the same thing. There is a latency penalty if a; /// register is written in one domain and read in another.; ///; /// This function returns a pair (domain, mask) containing the execution; /// domain of MI, and a bit mask of possible domains. The setExecutionDomain; /// function can be used to change the opcode to one of the domains in the; /// bit mask. Instructions whose execution domain can't be changed should; /// return a 0 mask.; ///; /// The execution domain numbers don't have any special meaning except domain; /// 0 is used for instructions that are not associated with any interesting; /// execution domain.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:777,Availability,mask,mask,777,"/// Return the current execution domain and bit mask of; /// possible domains for instruction.; ///; /// Some micro-architectures have multiple execution domains, and multiple; /// opcodes that perform the same operation in different domains. For; /// example, the x86 architecture provides the por, orps, and orpd; /// instructions that all do the same thing. There is a latency penalty if a; /// register is written in one domain and read in another.; ///; /// This function returns a pair (domain, mask) containing the execution; /// domain of MI, and a bit mask of possible domains. The setExecutionDomain; /// function can be used to change the opcode to one of the domains in the; /// bit mask. Instructions whose execution domain can't be changed should; /// return a 0 mask.; ///; /// The execution domain numbers don't have any special meaning except domain; /// 0 is used for instructions that are not associated with any interesting; /// execution domain.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:194,Performance,perform,perform,194,"/// Return the current execution domain and bit mask of; /// possible domains for instruction.; ///; /// Some micro-architectures have multiple execution domains, and multiple; /// opcodes that perform the same operation in different domains. For; /// example, the x86 architecture provides the por, orps, and orpd; /// instructions that all do the same thing. There is a latency penalty if a; /// register is written in one domain and read in another.; ///; /// This function returns a pair (domain, mask) containing the execution; /// domain of MI, and a bit mask of possible domains. The setExecutionDomain; /// function can be used to change the opcode to one of the domains in the; /// bit mask. Instructions whose execution domain can't be changed should; /// return a 0 mask.; ///; /// The execution domain numbers don't have any special meaning except domain; /// 0 is used for instructions that are not associated with any interesting; /// execution domain.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:372,Performance,latency,latency,372,"/// Return the current execution domain and bit mask of; /// possible domains for instruction.; ///; /// Some micro-architectures have multiple execution domains, and multiple; /// opcodes that perform the same operation in different domains. For; /// example, the x86 architecture provides the por, orps, and orpd; /// instructions that all do the same thing. There is a latency penalty if a; /// register is written in one domain and read in another.; ///; /// This function returns a pair (domain, mask) containing the execution; /// domain of MI, and a bit mask of possible domains. The setExecutionDomain; /// function can be used to change the opcode to one of the domains in the; /// bit mask. Instructions whose execution domain can't be changed should; /// return a 0 mask.; ///; /// The execution domain numbers don't have any special meaning except domain; /// 0 is used for instructions that are not associated with any interesting; /// execution domain.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:101,Availability,mask,mask,101,/// Change the opcode of MI to execute in Domain.; ///; /// The bit (1 << Domain) must be set in the mask returned from; /// getExecutionDomain(MI).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:614,Availability,avail,available,614,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:105,Deployability,update,update,105,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1129,Integrability,depend,dependencies,1129,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1253,Integrability,depend,dependency,1253,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1319,Integrability,depend,dependency,1319,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1443,Integrability,depend,dependency,1443,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1478,Integrability,depend,dependency,1478,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1705,Integrability,depend,dependency,1705,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:1021,Safety,avoid,avoided,1021,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:34,Usability,clear,clearance,34,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:932,Usability,clear,clearance,932,"/// Returns the preferred minimum clearance; /// before an instruction with an unwanted partial register update.; ///; /// Some instructions only write part of a register, and implicitly need to; /// read the other parts of the register. This may cause unwanted stalls; /// preventing otherwise unrelated instructions from executing in parallel in; /// an out-of-order CPU.; ///; /// For example, the x86 instruction cvtsi2ss writes its result to bits; /// [31:0] of the destination xmm register. Bits [127:32] are unaffected, so; /// the instruction needs to wait for the old value of the register to become; /// available:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// cvtsi2ss %rbx, %xmm0; ///; /// In the code above, the cvtsi2ss instruction needs to wait for the addps; /// instruction before it can issue, even though the high bits of %xmm0; /// probably aren't needed.; ///; /// This hook returns the preferred clearance before MI, measured in; /// instructions. Other defs of MI's operand OpNum are avoided in the last N; /// instructions before MI. It should only return a positive value for; /// unwanted dependencies. If the old bits of the defined register have; /// useful values, or if MI is determined to otherwise read the dependency,; /// the hook should return 0.; ///; /// The unwanted dependency may be handled by:; ///; /// 1. Allocating the same register for an MI def and use. That makes the; /// unwanted dependency identical to a required dependency.; ///; /// 2. Allocating a register for the def that has no defs in the previous N; /// instructions.; ///; /// 3. Calling breakPartialRegDependency() with the same arguments. This; /// allows the target to insert a dependency breaking instruction.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:64,Integrability,depend,dependency,64,// The default implementation returns 0 for no partial register dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:369,Integrability,depend,dependence,369,"/// Return the minimum clearance before an instruction that reads an; /// unused register.; ///; /// For example, AVX instructions may copy part of a register operand into; /// the unused high bits of the destination register.; ///; /// vcvtsi2sdq %rax, undef %xmm0, %xmm14; ///; /// In the code above, vcvtsi2sdq copies %xmm0[127:64] into %xmm14 creating a; /// false dependence on any previous write to %xmm0.; ///; /// This hook works similarly to getPartialRegUpdateClearance, except that it; /// does not take an operand index. Instead sets \p OpNum to the index of the; /// unused register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:23,Usability,clear,clearance,23,"/// Return the minimum clearance before an instruction that reads an; /// unused register.; ///; /// For example, AVX instructions may copy part of a register operand into; /// the unused high bits of the destination register.; ///; /// vcvtsi2sdq %rax, undef %xmm0, %xmm14; ///; /// In the code above, vcvtsi2sdq copies %xmm0[127:64] into %xmm14 creating a; /// false dependence on any previous write to %xmm0.; ///; /// This hook works similarly to getPartialRegUpdateClearance, except that it; /// does not take an operand index. Instead sets \p OpNum to the index of the; /// unused register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:62,Integrability,depend,dependency,62,// The default implementation returns 0 for no undef register dependency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:618,Energy Efficiency,schedul,scheduler,618,"/// Insert a dependency-breaking instruction; /// before MI to eliminate an unwanted dependency on OpNum.; ///; /// If it wasn't possible to avoid a def in the last N instructions before MI; /// (see getPartialRegUpdateClearance), this hook will be called to break the; /// unwanted dependency.; ///; /// On x86, an xorps instruction can be used as a dependency breaker:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// xorps %xmm0, %xmm0; /// cvtsi2ss %rbx, %xmm0; ///; /// An <imp-kill> operand should be added to MI if an instruction was; /// inserted. This ties the instructions together in the post-ra scheduler.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:13,Integrability,depend,dependency-breaking,13,"/// Insert a dependency-breaking instruction; /// before MI to eliminate an unwanted dependency on OpNum.; ///; /// If it wasn't possible to avoid a def in the last N instructions before MI; /// (see getPartialRegUpdateClearance), this hook will be called to break the; /// unwanted dependency.; ///; /// On x86, an xorps instruction can be used as a dependency breaker:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// xorps %xmm0, %xmm0; /// cvtsi2ss %rbx, %xmm0; ///; /// An <imp-kill> operand should be added to MI if an instruction was; /// inserted. This ties the instructions together in the post-ra scheduler.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:85,Integrability,depend,dependency,85,"/// Insert a dependency-breaking instruction; /// before MI to eliminate an unwanted dependency on OpNum.; ///; /// If it wasn't possible to avoid a def in the last N instructions before MI; /// (see getPartialRegUpdateClearance), this hook will be called to break the; /// unwanted dependency.; ///; /// On x86, an xorps instruction can be used as a dependency breaker:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// xorps %xmm0, %xmm0; /// cvtsi2ss %rbx, %xmm0; ///; /// An <imp-kill> operand should be added to MI if an instruction was; /// inserted. This ties the instructions together in the post-ra scheduler.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:283,Integrability,depend,dependency,283,"/// Insert a dependency-breaking instruction; /// before MI to eliminate an unwanted dependency on OpNum.; ///; /// If it wasn't possible to avoid a def in the last N instructions before MI; /// (see getPartialRegUpdateClearance), this hook will be called to break the; /// unwanted dependency.; ///; /// On x86, an xorps instruction can be used as a dependency breaker:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// xorps %xmm0, %xmm0; /// cvtsi2ss %rbx, %xmm0; ///; /// An <imp-kill> operand should be added to MI if an instruction was; /// inserted. This ties the instructions together in the post-ra scheduler.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:351,Integrability,depend,dependency,351,"/// Insert a dependency-breaking instruction; /// before MI to eliminate an unwanted dependency on OpNum.; ///; /// If it wasn't possible to avoid a def in the last N instructions before MI; /// (see getPartialRegUpdateClearance), this hook will be called to break the; /// unwanted dependency.; ///; /// On x86, an xorps instruction can be used as a dependency breaker:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// xorps %xmm0, %xmm0; /// cvtsi2ss %rbx, %xmm0; ///; /// An <imp-kill> operand should be added to MI if an instruction was; /// inserted. This ties the instructions together in the post-ra scheduler.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:141,Safety,avoid,avoid,141,"/// Insert a dependency-breaking instruction; /// before MI to eliminate an unwanted dependency on OpNum.; ///; /// If it wasn't possible to avoid a def in the last N instructions before MI; /// (see getPartialRegUpdateClearance), this hook will be called to break the; /// unwanted dependency.; ///; /// On x86, an xorps instruction can be used as a dependency breaker:; ///; /// addps %xmm1, %xmm0; /// movaps %xmm0, (%rax); /// xorps %xmm0, %xmm0; /// cvtsi2ss %rbx, %xmm0; ///; /// An <imp-kill> operand should be added to MI if an instruction was; /// inserted. This ties the instructions together in the post-ra scheduler.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:38,Energy Efficiency,schedul,scheduling,38,/// Create machine specific model for scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:413,Energy Efficiency,schedul,scheduling,413,"/// Sometimes, it is possible for the target; /// to tell, even without aliasing information, that two MIs access different; /// memory addresses. This function returns true if two MIs access different; /// memory addresses and false otherwise.; ///; /// Assumes any physical registers used to compute addresses have the same; /// value for both instructions. (This is the most useful assumption for; /// post-RA scheduling.); ///; /// See also MachineInstr::mayAlias, which is implemented on top of this; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:107,Security,access,access,107,"/// Sometimes, it is possible for the target; /// to tell, even without aliasing information, that two MIs access different; /// memory addresses. This function returns true if two MIs access different; /// memory addresses and false otherwise.; ///; /// Assumes any physical registers used to compute addresses have the same; /// value for both instructions. (This is the most useful assumption for; /// post-RA scheduling.); ///; /// See also MachineInstr::mayAlias, which is implemented on top of this; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:185,Security,access,access,185,"/// Sometimes, it is possible for the target; /// to tell, even without aliasing information, that two MIs access different; /// memory addresses. This function returns true if two MIs access different; /// memory addresses and false otherwise.; ///; /// Assumes any physical registers used to compute addresses have the same; /// value for both instructions. (This is the most useful assumption for; /// post-RA scheduling.); ///; /// See also MachineInstr::mayAlias, which is implemented on top of this; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:231,Performance,perform,performance,231,"/// Return the maximal number of alias checks on memory operands. For; /// instructions with more than one memory operands, the alias check on a; /// single MachineInstr pair has quadratic overhead and results in; /// unacceptable performance in the worst case. The limit here is to clamp; /// that maximal checks performed. Usually, that's the product of memory; /// operand numbers from that pair of MachineInstr to be checked. For; /// instance, with two MachineInstrs with 4 and 5 memory operands; /// correspondingly, a total of 20 checks are required. With this limit set to; /// 16, their alias check is skipped. We choose to limit the product instead; /// of the individual instruction as targets may have special MachineInstrs; /// with a considerably high number of memory operands, such as `ldm` in ARM.; /// Setting this limit per MachineInstr would result in either too high; /// overhead or too rigid restriction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:314,Performance,perform,performed,314,"/// Return the maximal number of alias checks on memory operands. For; /// instructions with more than one memory operands, the alias check on a; /// single MachineInstr pair has quadratic overhead and results in; /// unacceptable performance in the worst case. The limit here is to clamp; /// that maximal checks performed. Usually, that's the product of memory; /// operand numbers from that pair of MachineInstr to be checked. For; /// instance, with two MachineInstrs with 4 and 5 memory operands; /// correspondingly, a total of 20 checks are required. With this limit set to; /// 16, their alias check is skipped. We choose to limit the product instead; /// of the individual instruction as targets may have special MachineInstrs; /// with a considerably high number of memory operands, such as `ldm` in ARM.; /// Setting this limit per MachineInstr would result in either too high; /// overhead or too rigid restriction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:11,Integrability,depend,dependent,11,/// Target-dependent implementation for getOutliningTypeImpl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:56,Safety,safe,safe,56,"/// Optional target hook that returns true if \p MBB is safe to outline from,; /// and returns any target-specific information in \p Flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:218,Availability,down,down,218,"/// Optional target hook which partitions \p MBB into outlinable ranges for; /// instruction mapping purposes. Each range is defined by two iterators:; /// [start, end).; ///; /// Ranges are expected to be ordered top-down. That is, ranges closer to the; /// top of the block should come before ranges closer to the end of the block.; ///; /// Ranges cannot overlap.; ///; /// If an entire block is mappable, then its range is [MBB.begin(), MBB.end()); ///; /// All instructions not present in an outlinable range are considered; /// illegal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:89,Safety,avoid,avoid,89,"/// Insert an architecture-specific instruction to clear a register. If you; /// need to avoid sideeffects (e.g. avoid XOR on x86, which sets EFLAGS), set; /// \p AllowSideEffects to \p false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:113,Safety,avoid,avoid,113,"/// Insert an architecture-specific instruction to clear a register. If you; /// need to avoid sideeffects (e.g. avoid XOR on x86, which sets EFLAGS), set; /// \p AllowSideEffects to \p false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:51,Usability,clear,clear,51,"/// Insert an architecture-specific instruction to clear a register. If you; /// need to avoid sideeffects (e.g. avoid XOR on x86, which sets EFLAGS), set; /// \p AllowSideEffects to \p false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:36,Safety,safe,safely,36,/// Return true if the function can safely be outlined from.; /// A function \p MF is considered safe for outlining if an outlined function; /// produced from instructions in F will produce a program which produces the; /// same output for any set of given inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:97,Safety,safe,safe,97,/// Return true if the function can safely be outlined from.; /// A function \p MF is considered safe for outlining if an outlined function; /// produced from instructions in F will produce a program which produces the; /// same output for any set of given inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:45,Safety,safe,safely,45,"/// Return true if the MachineBasicBlock can safely be split to the cold; /// section. On AArch64, certain instructions may cause a block to be unsafe; /// to split to the cold section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:144,Safety,unsafe,unsafe,144,"/// Return true if the MachineBasicBlock can safely be split to the cold; /// section. On AArch64, certain instructions may cause a block to be unsafe; /// to split to the cold section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h:48,Performance,load,loading,48,/// Produce the expression describing the \p MI loading a value into; /// the physical register \p Reg. This hook should only be used with; /// \p MIs belonging to VReg-less functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetInstrInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:3,Energy Efficiency,Schedul,Scheduling,3,// Scheduling for lowest register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:3,Energy Efficiency,Schedul,Scheduling,3,// Scheduling for both latency and register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:23,Performance,latency,latency,23,// Scheduling for both latency and register pressure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:3,Energy Efficiency,Schedul,Scheduling,3,// Scheduling for ILP in low register pressure mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:3,Energy Efficiency,Schedul,Scheduling,3,// Scheduling for VLIW targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:24,Energy Efficiency,schedul,scheduling,24,// Fast suboptimal list scheduling,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:21,Energy Efficiency,schedul,scheduling,21,"// Linearize DAG, no scheduling",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:10,Usability,clear,clears,10,// If set clears out memory with zeros.; // memcpy only,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:96,Performance,load,loaded,96,// Indicates whether the memcpy source is an in-register; // constant so it does not need to be loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:98,Performance,load,load,98,// Inferred alignment of the source or default value if the; // memory operation does not need to load the value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:118,Performance,scalab,scalable,118,"// This action is explicitly left unimplemented.; // While it is theoretically possible to; // legalize operations on scalable types with a; // loop that handles the vscale * #lanes of the; // vector, this is non-trivial at SelectionDAG; // level and these types are better to be; // widened or promoted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:56,Availability,mask,mask,56,// The target supports vector selects with a vector; // mask (ex: x86 blends).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:39,Performance,load,load,39,"/// Enum that specifies what an atomic load/AtomicRMWInst is expanded; /// to, if at all. Exists because different targets have different levels of; /// support for these atomic instructions, and also have different options; /// w.r.t. what they should expand to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:31,Performance,load,loadlinked,31,// Expand the instruction into loadlinked/storeconditional; used; // by ARM/AArch64.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:15,Performance,load,load,15,"// Expand the (load) instruction into just a load-linked, which has; // greater atomic guarantees than a normal load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Performance,load,load-linked,45,"// Expand the (load) instruction into just a load-linked, which has; // greater atomic guarantees than a normal load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:112,Performance,load,load,112,"// Expand the (load) instruction into just a load-linked, which has; // greater atomic guarantees than a normal load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:62,Modifiability,Rewrite,Rewrite,62,// Generic expansion in terms of other atomic operations.; // Rewrite to a non-atomic form for use in a known non-preemptible; // environment.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:3,Modifiability,Extend,Extend,3,// Extend by adding rubbish bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:3,Modifiability,Extend,Extend,3,// Extend by adding zero bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:3,Modifiability,Extend,Extend,3,// Extend by copying the sign bit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:178,Deployability,update,updated,178,"/// Return the pointer type for the given address space, defaults to; /// the pointer type from the data layout.; /// FIXME: The default needs to be removed once all the code is updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:188,Deployability,update,updated,188,"/// Return the in-memory pointer type for the given address space, defaults to; /// the pointer type from the data layout.; /// FIXME: The default needs to be removed once all the code is updated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:125,Integrability,depend,depends,125,"/// Returns the type for the shift amount of a shift opcode. For vectors,; /// returns the input type. For scalars, behavior depends on \p LegalTypes. If; /// \p LegalTypes is true, calls getScalarShiftAmountTy, otherwise uses; /// pointer type. If getScalarShiftAmountTy or pointer type cannot represent; /// all possible shift amounts, returns MVT::i32. In general, \p LegalTypes; /// should be set to true for calls during type legalization and after type; /// legalization has been completed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:215,Modifiability,extend,extended,215,"/// Returns the type to be used for the EVL/AVL operand of VP nodes:; /// ISD::VP_ADD, ISD::VP_SUB, etc. It must be a legal scalar integer type,; /// and must be at least as large as i32. The EVL is implicitly zero-extended; /// to any larger type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:37,Performance,load,load,37,/// This callback is used to inspect load/store instructions and add; /// target-specific MachineMemOperand flags to them. The default; /// implementation does nothing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:37,Performance,load,load,37,/// This callback is used to inspect load/store SDNode.; /// The default implementation does nothing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Availability,mask,mask,45,/// Return true if the @llvm.get.active.lane.mask intrinsic should be expanded; /// using generic code in SelectionDAGBuilder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:117,Integrability,depend,depends,117,/// Return true if it is profitable to convert a select of FP constants into; /// a constant pool load whose address depends on the select condition. The; /// parameter may be used to differentiate a select with FP compare from; /// integer compare.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:98,Performance,load,load,98,/// Return true if it is profitable to convert a select of FP constants into; /// a constant pool load whose address depends on the select condition. The; /// parameter may be used to differentiate a select with FP compare from; /// integer compare.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:52,Availability,avail,available,52,/// Return true if multiple condition registers are available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:180,Performance,load,loads,180,"// Return true if the half type should be passed around as i16, but promoted; // to float around arithmetic. The default behavior is to pass around as; // float and convert around loads/stores/bitcasts and other places where; // the size matters.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:207,Performance,load,load,207,"// There are two general methods for expanding a BUILD_VECTOR node:; // 1. Use SCALAR_TO_VECTOR on the defined scalar values and then shuffle; // them together.; // 2. Build the vector on the stack and then load it.; // If this function returns true, then method (1) will be used, subject to; // the constraint that all of the necessary shuffles are legal (as determined; // by isShuffleMaskLegal). If this function returns false, then method (2) is; // always used. The vector type, and the number of defined values, are; // provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:168,Integrability,depend,depend,168,"/// Return true if integer divide is usually cheaper than a sequence of; /// several shifts, adds, and multiplies for this target.; /// The definition of ""cheaper"" may depend on whether we're optimizing; /// for speed or for size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:192,Performance,optimiz,optimizing,192,"/// Return true if integer divide is usually cheaper than a sequence of; /// several shifts, adds, and multiplies for this target.; /// The definition of ""cheaper"" may depend on whether we're optimizing; /// for speed or for size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:41,Energy Efficiency,power,power,41,/// Return true only if vscale must be a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:78,Safety,avoid,avoided,78,/// Return true if Flow Control is an expensive operation that should be; /// avoided.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:95,Safety,predict,predicted,95,/// Return true if selects are only cheaper than branches if the branch is; /// unlikely to be predicted right.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:176,Energy Efficiency,efficient,efficiently,176,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:267,Energy Efficiency,efficient,efficient,267,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:75,Performance,load,load,75,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:88,Performance,load,load,88,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:165,Performance,load,loads,165,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:201,Performance,load,load,201,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:251,Performance,load,loading,251,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:309,Performance,optimiz,optimizations,309,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:299,Usability,undo,undone,299,"/// Return true if the following transform is beneficial:; /// fold (conv (load x)) -> (load (conv*)x); /// On architectures that don't natively support some vector loads; /// efficiently, casting the load to a smaller vector of larger types and; /// loading is more efficient, however, this can be undone by optimizations in; /// dag combiner.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:32,Performance,load,loads,32,// Default to the same logic as loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:23,Testability,log,logic,23,// Default to the same logic as loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:104,Availability,mask,mask,104,"/// Return if the target supports combining a; /// chain like:; /// \code; /// %andResult = and %val1, #mask; /// %icmpResult = icmp %andResult, 0; /// \endcode; /// into a single machine instruction of a form like:; /// \code; /// cc = test %register, #mask; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:254,Availability,mask,mask,254,"/// Return if the target supports combining a; /// chain like:; /// \code; /// %andResult = and %val1, #mask; /// %icmpResult = icmp %andResult, 0; /// \endcode; /// into a single machine instruction of a form like:; /// \code; /// cc = test %register, #mask; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:237,Testability,test,test,237,"/// Return if the target supports combining a; /// chain like:; /// \code; /// %andResult = and %val1, #mask; /// %icmpResult = icmp %andResult, 0; /// \endcode; /// into a single machine instruction of a form like:; /// \code; /// cc = test %register, #mask; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:53,Energy Efficiency,efficient,efficient,53,"/// Use bitwise logic to make pairs of compares more efficient. For example:; /// and (seteq A, B), (seteq C, D) --> seteq (or (xor A, B), (xor C, D)), 0; /// This should be true when it takes more than one instruction to lower; /// setcc (cmp+set on x86 scalar), when bitwise ops are faster than logic on; /// condition bits (crand on PowerPC), and/or when reducing cmp+br is a win.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:336,Energy Efficiency,Power,PowerPC,336,"/// Use bitwise logic to make pairs of compares more efficient. For example:; /// and (seteq A, B), (seteq C, D) --> seteq (or (xor A, B), (xor C, D)), 0; /// This should be true when it takes more than one instruction to lower; /// setcc (cmp+set on x86 scalar), when bitwise ops are faster than logic on; /// condition bits (crand on PowerPC), and/or when reducing cmp+br is a win.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:16,Testability,log,logic,16,"/// Use bitwise logic to make pairs of compares more efficient. For example:; /// and (seteq A, B), (seteq C, D) --> seteq (or (xor A, B), (xor C, D)), 0; /// This should be true when it takes more than one instruction to lower; /// setcc (cmp+set on x86 scalar), when bitwise ops are faster than logic on; /// condition bits (crand on PowerPC), and/or when reducing cmp+br is a win.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:297,Testability,log,logic,297,"/// Use bitwise logic to make pairs of compares more efficient. For example:; /// and (seteq A, B), (seteq C, D) --> seteq (or (xor A, B), (xor C, D)), 0; /// This should be true when it takes more than one instruction to lower; /// setcc (cmp+set on x86 scalar), when bitwise ops are faster than logic on; /// condition bits (crand on PowerPC), and/or when reducing cmp+br is a win.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:174,Energy Efficiency,efficient,efficiently,174,/// Return the preferred operand type if the target has a quick way to compare; /// integer values of the given size. Assume that any legal integer type can; /// be compared efficiently. Targets may override this to allow illegal wide; /// types to return a vector type if there is support to compare that type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:428,Availability,mask,mask,428,"/// Return true if the target should transform:; /// (X & Y) == Y ---> (~X & Y) == 0; /// (X & Y) != Y ---> (~X & Y) != 0; ///; /// This may be profitable if the target has a bitwise and-not operation that; /// sets comparison flags. A target may want to limit the transformation based; /// on the type of Y or if Y is a constant.; ///; /// Note that the transform will not occur if Y is known to be a power-of-2; /// because a mask and compare of a single bit can be handled by inverting the; /// predicate, for example:; /// (X & 8) == 8 ---> (X & 8) != 0",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:402,Energy Efficiency,power,power-of-,402,"/// Return true if the target should transform:; /// (X & Y) == Y ---> (~X & Y) == 0; /// (X & Y) != Y ---> (~X & Y) != 0; ///; /// This may be profitable if the target has a bitwise and-not operation that; /// sets comparison flags. A target may want to limit the transformation based; /// on the type of Y or if Y is a constant.; ///; /// Note that the transform will not occur if Y is known to be a power-of-2; /// because a mask and compare of a single bit can be handled by inverting the; /// predicate, for example:; /// (X & 8) == 8 ---> (X & 8) != 0",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:104,Usability,simpl,simplify,104,/// Return true if the target has a bitwise and-not operation:; /// X = ~A & B; /// This can be used to simplify select or other instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,Testability,test,test,40,"/// Return true if the target has a bit-test instruction:; /// (X & (1 << Y)) ==/!= 0; /// This knowledge can be used to prevent breaking the pattern,; /// or creating it if it could be recognized.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:72,Availability,Mask,Mask,72,/// There are two ways to clear extreme bits (either low or high):; /// Mask: x & (-1 << y) (the instcombine canonical form); /// Shifts: x >> y << y; /// Return true if the variant with 2 variable shifts is preferred.; /// Return false if there is no preference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:189,Modifiability,variab,variable,189,/// There are two ways to clear extreme bits (either low or high):; /// Mask: x & (-1 << y) (the instcombine canonical form); /// Shifts: x >> y << y; /// Return true if the variant with 2 variable shifts is preferred.; /// Return false if there is no preference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Usability,clear,clear,26,/// There are two ways to clear extreme bits (either low or high):; /// Mask: x & (-1 << y) (the instcombine canonical form); /// Shifts: x >> y << y; /// Return true if the variant with 2 variable shifts is preferred.; /// Return false if there is no preference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:68,Availability,mask,mask,68,"/// Return true if it is profitable to fold a pair of shifts into a mask.; /// This is usually true on most targets. But some targets, like Thumb1,; /// have immediate shift instructions, but no immediate ""and"" instruction;; /// this makes the fold unprofitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:78,Availability,down,down,78,"/// Should we tranform the IR-optimal check for whether given truncation; /// down into KeptBits would be truncating or not:; /// (add %x, (1 << (KeptBits-1))) srccond (1 << KeptBits); /// Into it's more traditional form:; /// ((%x << C) a>> C) dstcond %x; /// Return true if we should transform.; /// Return false if there is no preference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:217,Safety,avoid,avoid,217,"/// Given the pattern; /// (X & (C l>>/<< Y)) ==/!= 0; /// return true if it should be transformed into:; /// ((X <</l>> Y) & C) ==/!= 0; /// WARNING: if 'X' is a constant, the fold may deadlock!; /// FIXME: we could avoid passing XC, but we can't use isConstOrConstSplat(); /// here because it can end up being not linked in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:58,Testability,test,test,58,// One interesting pattern that we'd want to form is 'bit test':; // ((1 << Y) & C) ==/!= 0; // But we also need to be careful not to try to reverse that fold.; // Is this '1 << Y' ?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:17,Testability,test,test,17,// Keep the 'bit test' pattern.; // Will it be '1 << Y' after the transform ?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,Testability,test,test,20,// Do form the 'bit test' pattern.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:79,Usability,undo,undo,79,"// If 'X' is a constant, and we transform, then we will immediately; // try to undo the fold, thus causing endless combine loop.; // So by default, let's assume everyone prefers the fold; // iff 'X' is not a constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:512,Energy Efficiency,power,power,512,"// Return true if its desirable to perform the following transform:; // (fmul C, (uitofp Pow2)); // -> (bitcast_to_FP (add (bitcast_to_INT C), Log2(Pow2) << mantissa)); // (fdiv C, (uitofp Pow2)); // -> (bitcast_to_FP (sub (bitcast_to_INT C), Log2(Pow2) << mantissa)); //; // This is only queried after we have verified the transform will be bitwise; // equals.; //; // SDNode *N : The FDiv/FMul node we want to transform.; // SDValue FPConst: The Float constant operand in `N`.; // SDValue IntPow2: The Integer power of 2 operand in `N`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:35,Performance,perform,perform,35,"// Return true if its desirable to perform the following transform:; // (fmul C, (uitofp Pow2)); // -> (bitcast_to_FP (add (bitcast_to_INT C), Log2(Pow2) << mantissa)); // (fdiv C, (uitofp Pow2)); // -> (bitcast_to_FP (sub (bitcast_to_INT C), Log2(Pow2) << mantissa)); //; // This is only queried after we have verified the transform will be bitwise; // equals.; //; // SDNode *N : The FDiv/FMul node we want to transform.; // SDValue FPConst: The Float constant operand in `N`.; // SDValue IntPow2: The Integer power of 2 operand in `N`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:14,Safety,avoid,avoiding,14,// Default to avoiding fdiv which is often very expensive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:114,Availability,mask,mask,114,"// Given:; // (icmp eq/ne (and X, C0), (shift X, C1)); // or; // (icmp eq/ne X, (rotate X, CPow2)); // If C0 is a mask or shifted mask and the shift amt (C1) isolates the; // remaining bits (i.e something like `(x64 & UINT32_MAX) == (x64 >> 32)`); // Do we prefer the shift to be shift-right, shift-left, or rotate.; // Note: Its only valid to convert the rotate version to the shift version iff; // the shift-amt (`C1`) is a power of 2 (including 0).; // If ShiftOpc (current Opcode) is returned, do nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:130,Availability,mask,mask,130,"// Given:; // (icmp eq/ne (and X, C0), (shift X, C1)); // or; // (icmp eq/ne X, (rotate X, CPow2)); // If C0 is a mask or shifted mask and the shift amt (C1) isolates the; // remaining bits (i.e something like `(x64 & UINT32_MAX) == (x64 >> 32)`); // Do we prefer the shift to be shift-right, shift-left, or rotate.; // Note: Its only valid to convert the rotate version to the shift version iff; // the shift-amt (`C1`) is a power of 2 (including 0).; // If ShiftOpc (current Opcode) is returned, do nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:426,Energy Efficiency,power,power,426,"// Given:; // (icmp eq/ne (and X, C0), (shift X, C1)); // or; // (icmp eq/ne X, (rotate X, CPow2)); // If C0 is a mask or shifted mask and the shift amt (C1) isolates the; // remaining bits (i.e something like `(x64 & UINT32_MAX) == (x64 >> 32)`); // Do we prefer the shift to be shift-right, shift-left, or rotate.; // Note: Its only valid to convert the rotate version to the shift version iff; // the shift-amt (`C1`) is a power of 2 (including 0).; // If ShiftOpc (current Opcode) is returned, do nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:94,Safety,avoid,avoid,94,"// By default prefer folding (abs (sub nsw x, y)) -> abds(x, y). Some targets; // may want to avoid this to prevent loss of sub_nsw pattern.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:47,Performance,optimiz,optimization,47,/// Return true if the target wants to use the optimization that; /// turns ext(promotableInst1(...(promotableInstN(load)))) into; /// promotedInst1(...(promotedInstN(ext(load)))).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:116,Performance,load,load,116,/// Return true if the target wants to use the optimization that; /// turns ext(promotableInst1(...(promotableInstN(load)))) into; /// promotedInst1(...(promotedInstN(ext(load)))).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:171,Performance,load,load,171,/// Return true if the target wants to use the optimization that; /// turns ext(promotableInst1(...(promotableInstN(load)))) into; /// promotedInst1(...(promotedInstN(ext(load)))).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:36,Performance,perform,perform,36,/// Return true if the target shall perform extract vector element and store; /// given that the vector is known to be splat of constant.; /// \p Index[out] gives the index of the vector element to be extracted when; /// this is true.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:94,Energy Efficiency,efficient,efficiently,94,/// Return true if inserting a scalar into a variable element of an undef; /// vector is more efficiently handled by splatting the scalar instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Modifiability,variab,variable,45,/// Return true if inserting a scalar into a variable element of an undef; /// vector is more efficiently handled by splatting the scalar instead.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:526,Modifiability,extend,extended,526,"/// For targets without i1 registers, this gives the nature of the high-bits; /// of boolean values held in types wider than i1.; ///; /// ""Boolean values"" are special true/false values produced by nodes like; /// SETCC and consumed (as the condition) by nodes like SELECT and BRCOND.; /// Not to be confused with general values promoted from i1. Some cpus; /// distinguish between vectors of boolean and scalars; the isVec parameter; /// selects between the two kinds. For example on X86 a scalar boolean should; /// be zero extended from i1, while the elements of a vector of booleans; /// should be sign extended from i1.; ///; /// Some cpus also treat floating point types the same way as they treat; /// vectors instead of the way they treat scalars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:607,Modifiability,extend,extended,607,"/// For targets without i1 registers, this gives the nature of the high-bits; /// of boolean values held in types wider than i1.; ///; /// ""Boolean values"" are special true/false values produced by nodes like; /// SETCC and consumed (as the condition) by nodes like SELECT and BRCOND.; /// Not to be confused with general values promoted from i1. Some cpus; /// distinguish between vectors of boolean and scalars; the isVec parameter; /// selects between the two kinds. For example on X86 a scalar boolean should; /// be zero extended from i1, while the elements of a vector of booleans; /// should be sign extended from i1.; ///; /// Some cpus also treat floating point types the same way as they treat; /// vectors instead of the way they treat scalars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:18,Energy Efficiency,schedul,scheduling,18,/// Return target scheduling preference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:9,Energy Efficiency,schedul,scheduler,9,"/// Some scheduler, e.g. hybrid, can switch to different scheduling heuristics; /// for different nodes. This function returns the preference (or none) for; /// the given node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:57,Energy Efficiency,schedul,scheduling,57,"/// Some scheduler, e.g. hybrid, can switch to different scheduling heuristics; /// for different nodes. This function returns the preference (or none) for; /// the given node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:28,Availability,down,down,28,"/// Vector types are broken down into some number of legal first class types.; /// For example, EVT::v8f32 maps to 2 EVT::v4f32 with Altivec or SSE1, or 8; /// promoted EVT::f64 values with the X86 FP stack. Similarly, EVT::v2i64; /// turns into 4 EVT::i32 values with both PPC and X86.; ///; /// This method returns the number of registers needed, and the VT for each; /// register. It also returns the VT and quantity of the intermediate values; /// before they are promoted/expanded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:96,Availability,down,down,96,/// Certain targets such as MIPS require that some types such as vectors are; /// always broken down into scalars in some contexts. This occurs even if the; /// vector type is legal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:164,Performance,load,load,164,"/// Returns true if the target can instruction select the specified FP; /// immediate natively. If false, the legalizer will materialize the FP; /// immediate as a load from a constant pool.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:119,Availability,mask,masks,119,"/// Targets can use this to indicate that they only support *some*; /// VECTOR_SHUFFLE operations, those with specific masks. By default, if a; /// target supports the VECTOR_SHUFFLE node, all mask values are assumed to be; /// legal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:193,Availability,mask,mask,193,"/// Targets can use this to indicate that they only support *some*; /// VECTOR_SHUFFLE operations, those with specific masks. By default, if a; /// target supports the VECTOR_SHUFFLE node, all mask values are assumed to be; /// legal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:2,Availability,Mask,Mask,2,/*Mask*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:2,Availability,Mask,Mask,2,/*Mask*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:220,Integrability,depend,depend,220,/// Some fixed point operations may be natively supported by the target but; /// only for specific scales. This method allows for checking; /// if the width is supported by the target for a given operation that may; /// depend on scale.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:136,Usability,guid,guide,136,/// Return true if the specified operation is legal on this target or can be; /// made legal with custom lowering. This is used to help guide high-level; /// lowering decisions. LegalOnly is an optional convenience for code paths; /// traversed pre and post legalisation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:131,Usability,guid,guide,131,/// Return true if the specified operation is legal on this target or can be; /// made legal using promotion. This is used to help guide high-level lowering; /// decisions. LegalOnly is an optional convenience for code paths traversed; /// pre and post legalisation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:160,Usability,guid,guide,160,/// Return true if the specified operation is legal on this target or can be; /// made legal with custom lowering or using promotion. This is used to help; /// guide high-level lowering decisions. LegalOnly is an optional convenience; /// for code paths traversed pre and post legalisation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:37,Testability,test,test,37,"/// Return true if lowering to a bit test is suitable for a set of case; /// clusters which contains \p NumDests unique destinations, \p Low and; /// \p High as its lowest and highest case values, and expects \p NumCmps; /// case value comparisons. Check if the number of destinations, comparison; /// metric, and range are all suitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:245,Testability,test,tests,245,"// FIXME: I don't think NumCmps is the correct metric: a single case and a; // range of cases both require only one branch to lower. Just looking at the; // number of clusters and destinations should be enough to decide whether to; // build bit tests.; // To lower a range with bit tests, the range must fit the bitwidth of a; // machine word.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:282,Testability,test,tests,282,"// FIXME: I don't think NumCmps is the correct metric: a single case and a; // range of cases both require only one branch to lower. Just looking at the; // number of clusters and destinations should be enough to decide whether to; // build bit tests.; // To lower a range with bit tests, the range must fit the bitwidth of a; // machine word.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:63,Testability,test,tests,63,"// Decide whether it's profitable to lower this range with bit tests. Each; // destination requires a bit test and branch, and there is an overall range; // check branch. For a small number of clusters, separate comparisons might; // be cheaper, and for many destinations, splitting the range might be; // better.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:106,Testability,test,test,106,"// Decide whether it's profitable to lower this range with bit tests. Each; // destination requires a bit test and branch, and there is an overall range; // check branch. For a small number of clusters, separate comparisons might; // be cheaper, and for many destinations, splitting the range might be; // better.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:146,Usability,guid,guide,146,/// Return true if the specified operation is illegal on this target or; /// unlikely to be made legal with custom lowering. This is used to help guide; /// high-level lowering decisions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,Performance,load,load,20,"/// Return how this load with extension should be treated: either it is legal,; /// needs to be promoted to a larger size, needs to be expanded to some other; /// code sequence, or the target has a custom expander for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:33,Performance,load,load,33,/// Return true if the specified load with extension is legal on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:33,Performance,load,load,33,/// Return true if the specified load with extension is legal or custom; /// on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:27,Performance,load,load,27,"/// Return how the indexed load should be treated: either it is legal, needs; /// to be promoted to a larger size, needs to be expanded to some other code; /// sequence, or the target has a custom expander for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:41,Performance,load,load,41,/// Return true if the specified indexed load is legal on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:41,Performance,load,load,41,/// Return true if the specified indexed load is legal on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:27,Performance,load,load,27,"/// Return how the indexed load should be treated: either it is legal, needs; /// to be promoted to a larger size, needs to be expanded to some other code; /// sequence, or the target has a custom expander for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:41,Performance,load,load,41,/// Return true if the specified indexed load is legal on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:41,Performance,load,load,41,/// Return true if the specified indexed load is legal on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:41,Availability,mask,masked,41,/// Returns true if the index type for a masked gather/scatter requires; /// extending,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:77,Modifiability,extend,extending,77,/// Returns true if the index type for a masked gather/scatter requires; /// extending,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:60,Availability,mask,masked,60,// Returns true if Extend can be folded into the index of a masked gathers/scatters; // on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:19,Modifiability,Extend,Extend,19,// Returns true if Extend can be folded into the index of a masked gathers/scatters; // on this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:254,Testability,assert,assert,254,"/// Return the EVT corresponding to this LLVM type. This is fixed by the LLVM; /// operations except for the pointer size. If AllowUnknown is true, this; /// will return MVT::Other for types with no EVT counterpart (e.g. structs),; /// otherwise it will assert.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:162,Testability,log,logarithm,162,"/// Return the desired alignment for ByVal or InAlloca aggregate function; /// arguments in the caller parameter area. This is the actual alignment, not; /// its logarithm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:160,Energy Efficiency,reduce,reduce,160,"/// If true, then instruction selection should seek to shrink the FP constant; /// of the specified type to a smaller type in order to save space and / or; /// reduce runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:39,Energy Efficiency,reduce,reduce,39,/// Return true if it is profitable to reduce a load to a smaller type.; /// Example: (i16 (trunc (i32 (load x))) -> i16 load x,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,Performance,load,load,48,/// Return true if it is profitable to reduce a load to a smaller type.; /// Example: (i16 (trunc (i32 (load x))) -> i16 load x,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:104,Performance,load,load,104,/// Return true if it is profitable to reduce a load to a smaller type.; /// Example: (i16 (trunc (i32 (load x))) -> i16 load x,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:121,Performance,load,load,121,/// Return true if it is profitable to reduce a load to a smaller type.; /// Example: (i16 (trunc (i32 (load x))) -> i16 load x,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:87,Performance,load,load,87,"// By default, assume that it is cheaper to extract a subvector from a wide; // vector load rather than creating multiple narrow vector loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:136,Performance,load,loads,136,"// By default, assume that it is cheaper to extract a subvector from a wide; // vector load rather than creating multiple narrow vector loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:99,Availability,redundant,redundant,99,"/// Return true (the default) if it is profitable to remove a sext_inreg(x); /// where the sext is redundant, and use x directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:99,Safety,redund,redundant,99,"/// Return true (the default) if it is profitable to remove a sext_inreg(x); /// where the sext is redundant, and use x directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:80,Performance,perform,perform,80,"/// If true, the target has custom DAG combine transformations that it can; /// perform for the specified node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:227,Performance,perform,performance,227,"/// Get maximum # of store operations permitted for llvm.memset; ///; /// This function returns the maximum number of store operations permitted; /// to replace a call to llvm.memset. The value is set by the target at the; /// performance threshold for such a replacement. If OptSize is true,; /// return the limit for functions that have OptSize attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:227,Performance,perform,performance,227,"/// Get maximum # of store operations permitted for llvm.memcpy; ///; /// This function returns the maximum number of store operations permitted; /// to replace a call to llvm.memcpy. The value is set by the target at the; /// performance threshold for such a replacement. If OptSize is true,; /// return the limit for functions that have OptSize attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:243,Performance,perform,performance,243,/// \brief Get maximum # of store operations to be glued together; ///; /// This function returns the maximum number of store operations permitted; /// to glue together during lowering of llvm.memcpy. The value is set by; // the target at the performance threshold for such a replacement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:21,Performance,load,load,21,"/// Get maximum # of load operations permitted for memcmp; ///; /// This function returns the maximum number of load operations permitted; /// to replace a call to memcmp. The value is set by the target at the; /// performance threshold for such a replacement. If OptSize is true,; /// return the limit for functions that have OptSize attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:112,Performance,load,load,112,"/// Get maximum # of load operations permitted for memcmp; ///; /// This function returns the maximum number of load operations permitted; /// to replace a call to memcmp. The value is set by the target at the; /// performance threshold for such a replacement. If OptSize is true,; /// return the limit for functions that have OptSize attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:215,Performance,perform,performance,215,"/// Get maximum # of load operations permitted for memcmp; ///; /// This function returns the maximum number of load operations permitted; /// to replace a call to memcmp. The value is set by the target at the; /// performance threshold for such a replacement. If OptSize is true,; /// return the limit for functions that have OptSize attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:229,Performance,perform,performance,229,"/// Get maximum # of store operations permitted for llvm.memmove; ///; /// This function returns the maximum number of store operations permitted; /// to replace a call to llvm.memmove. The value is set by the target at the; /// performance threshold for such a replacement. If OptSize is true,; /// return the limit for functions that have OptSize attribute.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:657,Availability,error,error,657,"/// Determine if the target supports unaligned memory accesses.; ///; /// This function returns true if the target allows unaligned memory accesses; /// of the specified type in the given address space. If true, it also returns; /// a relative speed of the unaligned memory access in the last argument by; /// reference. The higher the speed number the faster the operation comparing; /// to a number returned by another such call. This is used, for example, in; /// situations where an array copy/move/set is converted to a sequence of; /// store operations. Its use helps to ensure that such replacements don't; /// generate code that causes an alignment error (trap) on the target machine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:54,Security,access,accesses,54,"/// Determine if the target supports unaligned memory accesses.; ///; /// This function returns true if the target allows unaligned memory accesses; /// of the specified type in the given address space. If true, it also returns; /// a relative speed of the unaligned memory access in the last argument by; /// reference. The higher the speed number the faster the operation comparing; /// to a number returned by another such call. This is used, for example, in; /// situations where an array copy/move/set is converted to a sequence of; /// store operations. Its use helps to ensure that such replacements don't; /// generate code that causes an alignment error (trap) on the target machine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:139,Security,access,accesses,139,"/// Determine if the target supports unaligned memory accesses.; ///; /// This function returns true if the target allows unaligned memory accesses; /// of the specified type in the given address space. If true, it also returns; /// a relative speed of the unaligned memory access in the last argument by; /// reference. The higher the speed number the faster the operation comparing; /// to a number returned by another such call. This is used, for example, in; /// situations where an array copy/move/set is converted to a sequence of; /// store operations. Its use helps to ensure that such replacements don't; /// generate code that causes an alignment error (trap) on the target machine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:274,Security,access,access,274,"/// Determine if the target supports unaligned memory accesses.; ///; /// This function returns true if the target allows unaligned memory accesses; /// of the specified type in the given address space. If true, it also returns; /// a relative speed of the unaligned memory access in the last argument by; /// reference. The higher the speed number the faster the operation comparing; /// to a number returned by another such call. This is used, for example, in; /// situations where an array copy/move/set is converted to a sequence of; /// store operations. Its use helps to ensure that such replacements don't; /// generate code that causes an alignment error (trap) on the target machine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Security,access,access,45,"/// This function returns true if the memory access is aligned or if the; /// target allows this specific unaligned memory access. If the access is; /// allowed, the optional final parameter returns a relative speed of the; /// access (as defined by the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:123,Security,access,access,123,"/// This function returns true if the memory access is aligned or if the; /// target allows this specific unaligned memory access. If the access is; /// allowed, the optional final parameter returns a relative speed of the; /// access (as defined by the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:138,Security,access,access,138,"/// This function returns true if the memory access is aligned or if the; /// target allows this specific unaligned memory access. If the access is; /// allowed, the optional final parameter returns a relative speed of the; /// access (as defined by the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:228,Security,access,access,228,"/// This function returns true if the memory access is aligned or if the; /// target allows this specific unaligned memory access. If the access is; /// allowed, the optional final parameter returns a relative speed of the; /// access (as defined by the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:30,Security,access,access,30,"/// Return true if the memory access of this type is aligned or if the target; /// allows this specific unaligned access for the given MachineMemOperand.; /// If the access is allowed, the optional final parameter returns a relative; /// speed of the access (as defined by the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:114,Security,access,access,114,"/// Return true if the memory access of this type is aligned or if the target; /// allows this specific unaligned access for the given MachineMemOperand.; /// If the access is allowed, the optional final parameter returns a relative; /// speed of the access (as defined by the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:166,Security,access,access,166,"/// Return true if the memory access of this type is aligned or if the target; /// allows this specific unaligned access for the given MachineMemOperand.; /// If the access is allowed, the optional final parameter returns a relative; /// speed of the access (as defined by the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:251,Security,access,access,251,"/// Return true if the memory access of this type is aligned or if the target; /// allows this specific unaligned access for the given MachineMemOperand.; /// If the access is allowed, the optional final parameter returns a relative; /// speed of the access (as defined by the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,Security,access,access,48,"/// Return true if the target supports a memory access of this type for the; /// given address space and alignment. If the access is allowed, the optional; /// final parameter returns the relative speed of the access (as defined by; /// the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:123,Security,access,access,123,"/// Return true if the target supports a memory access of this type for the; /// given address space and alignment. If the access is allowed, the optional; /// final parameter returns the relative speed of the access (as defined by; /// the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:210,Security,access,access,210,"/// Return true if the target supports a memory access of this type for the; /// given address space and alignment. If the access is allowed, the optional; /// final parameter returns the relative speed of the access (as defined by; /// the target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,Security,access,access,48,"/// Return true if the target supports a memory access of this type for the; /// given MachineMemOperand. If the access is allowed, the optional; /// final parameter returns the relative access speed (as defined by the; /// target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:113,Security,access,access,113,"/// Return true if the target supports a memory access of this type for the; /// given MachineMemOperand. If the access is allowed, the optional; /// final parameter returns the relative access speed (as defined by the; /// target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:187,Security,access,access,187,"/// Return true if the target supports a memory access of this type for the; /// given MachineMemOperand. If the access is allowed, the optional; /// final parameter returns the relative access speed (as defined by the; /// target).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:49,Performance,load,load,49,"/// Returns the target specific optimal type for load and store operations as; /// a result of memset, memcpy, and memmove lowering.; /// It returns EVT::Other if the type should be determined using generic; /// target-independent logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:231,Testability,log,logic,231,"/// Returns the target specific optimal type for load and store operations as; /// a result of memset, memcpy, and memmove lowering.; /// It returns EVT::Other if the type should be determined using generic; /// target-independent logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:37,Performance,load,load,37,"/// Returns true if it's safe to use load / store of the specified type to; /// expand memcpy / memset inline.; ///; /// This is mostly true for all types except for some special cases. For; /// example, on X86 targets without SSE2 f64 load / store are done with fldl /; /// fstpl which also does type conversion. Note the specified type doesn't; /// have to be legal as the hook is used before type legalization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:236,Performance,load,load,236,"/// Returns true if it's safe to use load / store of the specified type to; /// expand memcpy / memset inline.; ///; /// This is mostly true for all types except for some special cases. For; /// example, on X86 targets without SSE2 f64 load / store are done with fldl /; /// fstpl which also does type conversion. Note the specified type doesn't; /// have to be legal as the hook is used before type legalization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:25,Safety,safe,safe,25,"/// Returns true if it's safe to use load / store of the specified type to; /// expand memcpy / memset inline.; ///; /// This is mostly true for all types except for some special cases. For; /// example, on X86 targets without SSE2 f64 load / store are done with fldl /; /// fstpl which also does type conversion. Note the specified type doesn't; /// have to be legal as the hook is used before type legalization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:15,Modifiability,variab,variable,15,"/// Return the variable that's previously inserted by insertSSPDeclarations,; /// if any, otherwise return nullptr. Should be used only when; /// getIRStackGuard returns nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:99,Availability,error,error,99,"/// If the target has a standard stack protection check function that; /// performs validation and error handling, returns the function. Otherwise,; /// returns nullptr. Must be previously inserted by insertSSPDeclarations.; /// Should be used only when getIRStackGuard returns nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:75,Performance,perform,performs,75,"/// If the target has a standard stack protection check function that; /// performs validation and error handling, returns the function. Otherwise,; /// returns nullptr. Must be previously inserted by insertSSPDeclarations.; /// Should be used only when getIRStackGuard returns nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:84,Security,validat,validation,84,"/// If the target has a standard stack protection check function that; /// performs validation and error handling, returns the function. Otherwise,; /// returns nullptr. Must be previously inserted by insertSSPDeclarations.; /// Should be used only when getIRStackGuard returns nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:47,Safety,unsafe,unsafe,47,/// Returns the target-specific address of the unsafe stack pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:68,Energy Efficiency,reduce,reduce,68,/// Whether AtomicExpandPass should automatically insert fences and reduce; /// ordering for this atomic. This should be true for most architectures with; /// weak memory ordering. Defaults to false.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:4,Performance,Perform,Perform,4,"/// Perform a load-linked operation on Addr, returning a ""Value *"" with the; /// corresponding pointee type. This may entail some non-trivial operations to; /// truncate or reconstruct types that will be illegal in the backend. See; /// ARMISelLowering for an example implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:14,Performance,load,load-linked,14,"/// Perform a load-linked operation on Addr, returning a ""Value *"" with the; /// corresponding pointee type. This may entail some non-trivial operations to; /// truncate or reconstruct types that will be illegal in the backend. See; /// ARMISelLowering for an example implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:4,Performance,Perform,Perform,4,"/// Perform a store-conditional operation to Addr. Return the status of the; /// store. This should be 0 if the store succeeded, non-zero otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:14,Availability,mask,masked,14,/// Perform a masked atomicrmw using a target-specific intrinsic. This; /// represents the core LL/SC loop which will be lowered at a late stage by; /// the backend. The target-specific intrinsic returns the loaded value and; /// is not responsible for masking and shifting the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:253,Availability,mask,masking,253,/// Perform a masked atomicrmw using a target-specific intrinsic. This; /// represents the core LL/SC loop which will be lowered at a late stage by; /// the backend. The target-specific intrinsic returns the loaded value and; /// is not responsible for masking and shifting the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:4,Performance,Perform,Perform,4,/// Perform a masked atomicrmw using a target-specific intrinsic. This; /// represents the core LL/SC loop which will be lowered at a late stage by; /// the backend. The target-specific intrinsic returns the loaded value and; /// is not responsible for masking and shifting the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:208,Performance,load,loaded,208,/// Perform a masked atomicrmw using a target-specific intrinsic. This; /// represents the core LL/SC loop which will be lowered at a late stage by; /// the backend. The target-specific intrinsic returns the loaded value and; /// is not responsible for masking and shifting the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:103,Availability,mask,masked,103,"/// Perform a atomicrmw expansion using a target-specific way. This is; /// expected to be called when masked atomicrmw and bit test atomicrmw don't; /// work, and the target supports another way to lower atomicrmw.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:4,Performance,Perform,Perform,4,"/// Perform a atomicrmw expansion using a target-specific way. This is; /// expected to be called when masked atomicrmw and bit test atomicrmw don't; /// work, and the target supports another way to lower atomicrmw.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:128,Testability,test,test,128,"/// Perform a atomicrmw expansion using a target-specific way. This is; /// expected to be called when masked atomicrmw and bit test atomicrmw don't; /// work, and the target supports another way to lower atomicrmw.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:4,Performance,Perform,Perform,4,/// Perform a bit test atomicrmw using a target-specific intrinsic. This; /// represents the combined bit test intrinsic which will be lowered at a late; /// stage by the backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:18,Testability,test,test,18,/// Perform a bit test atomicrmw using a target-specific intrinsic. This; /// represents the combined bit test intrinsic which will be lowered at a late; /// stage by the backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:106,Testability,test,test,106,/// Perform a bit test atomicrmw using a target-specific intrinsic. This; /// represents the combined bit test intrinsic which will be lowered at a late; /// stage by the backend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:4,Performance,Perform,Perform,4,"/// Perform a atomicrmw which the result is only used by comparison, using a; /// target-specific intrinsic. This represents the combined atomic and compare; /// intrinsic which will be lowered at a late stage by the backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:14,Availability,mask,masked,14,/// Perform a masked cmpxchg using a target-specific intrinsic. This; /// represents the core LL/SC loop which will be lowered at a late stage by; /// the backend. The target-specific intrinsic returns the loaded value and; /// is not responsible for masking and shifting the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:251,Availability,mask,masking,251,/// Perform a masked cmpxchg using a target-specific intrinsic. This; /// represents the core LL/SC loop which will be lowered at a late stage by; /// the backend. The target-specific intrinsic returns the loaded value and; /// is not responsible for masking and shifting the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:4,Performance,Perform,Perform,4,/// Perform a masked cmpxchg using a target-specific intrinsic. This; /// represents the core LL/SC loop which will be lowered at a late stage by; /// the backend. The target-specific intrinsic returns the loaded value and; /// is not responsible for masking and shifting the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:206,Performance,load,loaded,206,/// Perform a masked cmpxchg using a target-specific intrinsic. This; /// represents the core LL/SC loop which will be lowered at a late stage by; /// the backend. The target-specific intrinsic returns the loaded value and; /// is not responsible for masking and shifting the result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:632,Deployability,release,release,632,"/// @}; /// Inserts in the IR a target-specific intrinsic specifying a fence.; /// It is called by AtomicExpandPass before expanding an; /// AtomicRMW/AtomicCmpXchg/AtomicStore/AtomicLoad; /// if shouldInsertFencesForAtomic returns true.; ///; /// Inst is the original atomic instruction, prior to other expansions that; /// may be performed.; ///; /// This function should either return a nullptr, or a pointer to an IR-level; /// Instruction*. Even complex fence sequences can be represented by a; /// single Instruction* through an intrinsic to be lowered later.; ///; /// The default implementation emits an IR fence before any release (or; /// stronger) operation that stores, and after any acquire (or stronger); /// operation. This is generally a correct implementation, but backends may; /// override if they wish to use alternative schemes (e.g. the PowerPC; /// standard ABI uses a fence before a seq_cst load instead of after a; /// seq_cst store).; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:859,Energy Efficiency,Power,PowerPC,859,"/// @}; /// Inserts in the IR a target-specific intrinsic specifying a fence.; /// It is called by AtomicExpandPass before expanding an; /// AtomicRMW/AtomicCmpXchg/AtomicStore/AtomicLoad; /// if shouldInsertFencesForAtomic returns true.; ///; /// Inst is the original atomic instruction, prior to other expansions that; /// may be performed.; ///; /// This function should either return a nullptr, or a pointer to an IR-level; /// Instruction*. Even complex fence sequences can be represented by a; /// single Instruction* through an intrinsic to be lowered later.; ///; /// The default implementation emits an IR fence before any release (or; /// stronger) operation that stores, and after any acquire (or stronger); /// operation. This is generally a correct implementation, but backends may; /// override if they wish to use alternative schemes (e.g. the PowerPC; /// standard ABI uses a fence before a seq_cst load instead of after a; /// seq_cst store).; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:332,Performance,perform,performed,332,"/// @}; /// Inserts in the IR a target-specific intrinsic specifying a fence.; /// It is called by AtomicExpandPass before expanding an; /// AtomicRMW/AtomicCmpXchg/AtomicStore/AtomicLoad; /// if shouldInsertFencesForAtomic returns true.; ///; /// Inst is the original atomic instruction, prior to other expansions that; /// may be performed.; ///; /// This function should either return a nullptr, or a pointer to an IR-level; /// Instruction*. Even complex fence sequences can be represented by a; /// single Instruction* through an intrinsic to be lowered later.; ///; /// The default implementation emits an IR fence before any release (or; /// stronger) operation that stores, and after any acquire (or stronger); /// operation. This is generally a correct implementation, but backends may; /// override if they wish to use alternative schemes (e.g. the PowerPC; /// standard ABI uses a fence before a seq_cst load instead of after a; /// seq_cst store).; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:915,Performance,load,load,915,"/// @}; /// Inserts in the IR a target-specific intrinsic specifying a fence.; /// It is called by AtomicExpandPass before expanding an; /// AtomicRMW/AtomicCmpXchg/AtomicStore/AtomicLoad; /// if shouldInsertFencesForAtomic returns true.; ///; /// Inst is the original atomic instruction, prior to other expansions that; /// may be performed.; ///; /// This function should either return a nullptr, or a pointer to an IR-level; /// Instruction*. Even complex fence sequences can be represented by a; /// single Instruction* through an intrinsic to be lowered later.; ///; /// The default implementation emits an IR fence before any release (or; /// stronger) operation that stores, and after any acquire (or stronger); /// operation. This is generally a correct implementation, but backends may; /// override if they wish to use alternative schemes (e.g. the PowerPC; /// standard ABI uses a fence before a seq_cst load instead of after a; /// seq_cst store).; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:338,Energy Efficiency,monitor,monitor,338,"/// @}; // Emits code that executes when the comparison result in the ll/sc; // expansion of a cmpxchg instruction is such that the store-conditional will; // not execute. This makes it possible to balance out the load-linked with; // a dedicated instruction, if desired.; // E.g., on ARM, if ldrex isn't followed by strex, the exclusive monitor would; // be unnecessarily held, except if clrex, inserted by this hook, is executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:214,Performance,load,load-linked,214,"/// @}; // Emits code that executes when the comparison result in the ll/sc; // expansion of a cmpxchg instruction is such that the store-conditional will; // not execute. This makes it possible to balance out the load-linked with; // a dedicated instruction, if desired.; // E.g., on ARM, if ldrex isn't followed by strex, the exclusive monitor would; // be unnecessarily held, except if clrex, inserted by this hook, is executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Modifiability,extend,extended,45,/// Returns true if arguments should be sign-extended in lib calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,Modifiability,extend,extended,40,/// Returns true if arguments should be extended in lib calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:35,Performance,load,load,35,/// Returns how the given (atomic) load should be expanded by the; /// IR-level AtomicExpand pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:35,Performance,load,load,35,/// Returns how the given (atomic) load should be cast by the IR-level; /// AtomicExpand pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:159,Performance,load,load,159,"/// On some platforms, an AtomicRMW that never actually modifies the value; /// (such as fetch_add of 0) can be turned into a fence followed by an; /// atomic load. This may sound useless, but it makes it possible for the; /// processor to keep the cacheline shared, dramatically improving; /// performance. And such idempotent RMWs are useful for implementing some; /// kinds of locks, see for example (justification + benchmarks):; /// http://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf; /// This method tries doing that transformation, returning the atomic load if; /// it succeeds, and nullptr otherwise.; /// If shouldExpandAtomicLoadInIR returns true on that load, it will undergo; /// another round of expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:249,Performance,cache,cacheline,249,"/// On some platforms, an AtomicRMW that never actually modifies the value; /// (such as fetch_add of 0) can be turned into a fence followed by an; /// atomic load. This may sound useless, but it makes it possible for the; /// processor to keep the cacheline shared, dramatically improving; /// performance. And such idempotent RMWs are useful for implementing some; /// kinds of locks, see for example (justification + benchmarks):; /// http://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf; /// This method tries doing that transformation, returning the atomic load if; /// it succeeds, and nullptr otherwise.; /// If shouldExpandAtomicLoadInIR returns true on that load, it will undergo; /// another round of expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:295,Performance,perform,performance,295,"/// On some platforms, an AtomicRMW that never actually modifies the value; /// (such as fetch_add of 0) can be turned into a fence followed by an; /// atomic load. This may sound useless, but it makes it possible for the; /// processor to keep the cacheline shared, dramatically improving; /// performance. And such idempotent RMWs are useful for implementing some; /// kinds of locks, see for example (justification + benchmarks):; /// http://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf; /// This method tries doing that transformation, returning the atomic load if; /// it succeeds, and nullptr otherwise.; /// If shouldExpandAtomicLoadInIR returns true on that load, it will undergo; /// another round of expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:564,Performance,load,load,564,"/// On some platforms, an AtomicRMW that never actually modifies the value; /// (such as fetch_add of 0) can be turned into a fence followed by an; /// atomic load. This may sound useless, but it makes it possible for the; /// processor to keep the cacheline shared, dramatically improving; /// performance. And such idempotent RMWs are useful for implementing some; /// kinds of locks, see for example (justification + benchmarks):; /// http://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf; /// This method tries doing that transformation, returning the atomic load if; /// it succeeds, and nullptr otherwise.; /// If shouldExpandAtomicLoadInIR returns true on that load, it will undergo; /// another round of expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:669,Performance,load,load,669,"/// On some platforms, an AtomicRMW that never actually modifies the value; /// (such as fetch_add of 0) can be turned into a fence followed by an; /// atomic load. This may sound useless, but it makes it possible for the; /// processor to keep the cacheline shared, dramatically improving; /// performance. And such idempotent RMWs are useful for implementing some; /// kinds of locks, see for example (justification + benchmarks):; /// http://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf; /// This method tries doing that transformation, returning the atomic load if; /// it succeeds, and nullptr otherwise.; /// If shouldExpandAtomicLoadInIR returns true on that load, it will undergo; /// another round of expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:420,Testability,benchmark,benchmarks,420,"/// On some platforms, an AtomicRMW that never actually modifies the value; /// (such as fetch_add of 0) can be turned into a fence followed by an; /// atomic load. This may sound useless, but it makes it possible for the; /// processor to keep the cacheline shared, dramatically improving; /// performance. And such idempotent RMWs are useful for implementing some; /// kinds of locks, see for example (justification + benchmarks):; /// http://www.hpl.hp.com/techreports/2012/HPL-2012-68.pdf; /// This method tries doing that transformation, returning the atomic load if; /// it succeeds, and nullptr otherwise.; /// If shouldExpandAtomicLoadInIR returns true on that load, it will undergo; /// another round of expansion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:53,Modifiability,extend,extended,53,"/// Returns how the platform's atomic operations are extended (ZERO_EXTEND,; /// SIGN_EXTEND, or ANY_EXTEND).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:95,Modifiability,extend,extended,95,"/// Returns how the platform's atomic compare and swap expects its comparison; /// value to be extended (ZERO_EXTEND, SIGN_EXTEND, or ANY_EXTEND). This is; /// separate from getExtendForAtomicOps, which is concerned with the; /// sign-extension of the instruction's output, whereas here we are concerned; /// with the sign-extension of the input. For targets with compare-and-swap; /// instructions (or sub-word comparisons in their LL/SC loop expansions),; /// the input can be ANY_EXTEND, but the output will still have a specific; /// extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:293,Performance,perform,perform,293,"/// @}; /// Returns true if we should normalize; /// select(N0&N1, X, Y) => select(N0, select(N1, X, Y), Y) and; /// select(N0|N1, X, Y) => select(N0, select(N1, X, Y, Y)) if it is likely; /// that it saves us from materializing N0 and N1 in an integer register.; /// Targets that are able to perform and/or on flags should return false here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:68,Testability,log,logical,68,"// If a target has multiple condition registers, then it likely has logical; // operations on those registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:95,Usability,simpl,simple,95,"/// Return true if a select of constants (select Cond, C1, C2) should be; /// transformed into simple math ops with the condition value. For example:; /// select Cond, C1, C1-1 --> add (zext Cond), C1-1",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:97,Usability,simpl,simpler,97,/// Return true if it is profitable to transform an integer; /// multiplication-by-constant into simpler operations like shifts and adds.; /// This may be true if the target does not directly support the; /// multiplication operation for the specified type or the sequence of simpler; /// ops is faster than the multiply.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:276,Usability,simpl,simpler,276,/// Return true if it is profitable to transform an integer; /// multiplication-by-constant into simpler operations like shifts and adds.; /// This may be true if the target does not directly support the; /// multiplication operation for the specified type or the sequence of simpler; /// ops is faster than the multiply.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:85,Performance,optimiz,optimizing,85,"/// Return true if it is beneficial to expand an @llvm.powi.* intrinsic.; /// If not optimizing for size, expanding @llvm.powi.* intrinsics is always; /// considered beneficial.; /// If optimizing for size, expansion is only considered beneficial for upto; /// 5 multiplies and a divide (if the exponent is negative).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:186,Performance,optimiz,optimizing,186,"/// Return true if it is beneficial to expand an @llvm.powi.* intrinsic.; /// If not optimizing for size, expanding @llvm.powi.* intrinsics is always; /// considered beneficial.; /// If optimizing for size, expansion is only considered beneficial for upto; /// 5 multiplies and a divide (if the exponent is negative).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:98,Deployability,Configurat,Configuration,98,//===--------------------------------------------------------------------===//; // TargetLowering Configuration Methods - These methods should be invoked by; // the derived class constructor to configure this object for the target.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:98,Modifiability,Config,Configuration,98,//===--------------------------------------------------------------------===//; // TargetLowering Configuration Methods - These methods should be invoked by; // the derived class constructor to configure this object for the target.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:194,Modifiability,config,configure,194,//===--------------------------------------------------------------------===//; // TargetLowering Configuration Methods - These methods should be invoked by; // the derived class constructor to configure this object for the target.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:27,Modifiability,extend,extends,27,/// Specify how the target extends the result of integer and floating point; /// boolean values from i1 to a wider type. See getBooleanContents.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:27,Modifiability,extend,extends,27,/// Specify how the target extends the result of integer and floating point; /// boolean values from i1 to a wider type. See getBooleanContents.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:27,Modifiability,extend,extends,27,/// Specify how the target extends the result of a vector boolean value from a; /// vector of i1 to a wider type. See getBooleanContents.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:23,Energy Efficiency,schedul,scheduling,23,/// Specify the target scheduling preference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:43,Testability,log,logic,43,/// Tells the code generator not to expand logic operations on comparison; /// predicates into separate sequences that increase the amount of flow; /// control.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:43,Availability,avail,available,43,/// Add the specified register class as an available regclass for the; /// specified value type. This indicates the selector can handle values of; /// that class natively.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:101,Security,expose,expose,101,"/// Once all of the register classes are added, this allows us to compute; /// derived properties we expose.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:32,Performance,load,load,32,/// Indicate that the specified load with extension does not work with the; /// specified type and indicate what to do about it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,Performance,load,load,40,/// Indicate that the specified indexed load does or does not work with the; /// specified type and indicate what to do abort it.; ///; /// NOTE: All indexed mode loads are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:163,Performance,load,loads,163,/// Indicate that the specified indexed load does or does not work with the; /// specified type and indicate what to do abort it.; ///; /// NOTE: All indexed mode loads are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:120,Safety,abort,abort,120,/// Indicate that the specified indexed load does or does not work with the; /// specified type and indicate what to do abort it.; ///; /// NOTE: All indexed mode loads are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,Availability,mask,masked,40,/// Indicate that the specified indexed masked load does or does not work with; /// the specified type and indicate what to do about it.; ///; /// NOTE: All indexed mode masked loads are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:170,Availability,mask,masked,170,/// Indicate that the specified indexed masked load does or does not work with; /// the specified type and indicate what to do about it.; ///; /// NOTE: All indexed mode masked loads are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:47,Performance,load,load,47,/// Indicate that the specified indexed masked load does or does not work with; /// the specified type and indicate what to do about it.; ///; /// NOTE: All indexed mode masked loads are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:177,Performance,load,loads,177,/// Indicate that the specified indexed masked load does or does not work with; /// the specified type and indicate what to do about it.; ///; /// NOTE: All indexed mode masked loads are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,Availability,mask,masked,40,/// Indicate that the specified indexed masked store does or does not work; /// with the specified type and indicate what to do about it.; ///; /// NOTE: All indexed mode masked stores are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:171,Availability,mask,masked,171,/// Indicate that the specified indexed masked store does or does not work; /// with the specified type and indicate what to do about it.; ///; /// NOTE: All indexed mode masked stores are initialized to Expand in; /// TargetLowering.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:28,Usability,Simpl,SimpleTy,28,/// The lower 3 bits of the SimpleTy index into Nth 4bit set from the; /// 32-bit value and the upper 29 bits index into the second dimension of; /// the array to select what 32-bit value to use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:153,Performance,Perform,PerformDAGCombine,153,/// Targets should invoke this method for each target independent node that; /// they want to provide a custom DAG combiner for by implementing the; /// PerformDAGCombine virtual method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:89,Performance,perform,performance,89,/// Set the target's preferred function alignment. This should be set if; /// there is a performance benefit to higher-than-minimum alignment,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:207,Performance,Load,Load,207,//===--------------------------------------------------------------------===//; // Addressing mode description hooks (used by LSR etc).; //; /// CodeGenPrepare sinks address calculations into the same BB as Load/Store; /// instructions reading the address. This allows as much computation as; /// possible to be done in the address mode for that operand. This hook lets; /// targets also pass back when this should be done on intrinsics which; /// load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:448,Performance,load,load,448,//===--------------------------------------------------------------------===//; // Addressing mode description hooks (used by LSR etc).; //; /// CodeGenPrepare sinks address calculations into the same BB as Load/Store; /// instructions reading the address. This allows as much computation as; /// possible to be done in the address mode for that operand. This hook lets; /// targets also pass back when this should be done on intrinsics which; /// load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:2,Security,Access,AccessTy,2,/*AccessTy*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:94,Performance,load,load,94,"/// Return true if the addressing mode represented by AM is legal for this; /// target, for a load/store of the specified type.; ///; /// The type may be VoidTy, in which case only return true if the addressing; /// mode is legal for a load/store of any legal type. TODO: Handle; /// pre/postinc as well.; ///; /// If the address space cannot be determined, it will be -1.; ///; /// TODO: Remove default argument",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:236,Performance,load,load,236,"/// Return true if the addressing mode represented by AM is legal for this; /// target, for a load/store of the specified type.; ///; /// The type may be VoidTy, in which case only return true if the addressing; /// mode is legal for a load/store of any legal type. TODO: Handle; /// pre/postinc as well.; ///; /// If the address space cannot be determined, it will be -1.; ///; /// TODO: Remove default argument",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:242,Usability,simpl,simple,242,"/// Return true if it's significantly cheaper to shift a vector by a uniform; /// scalar than by an amount which will vary across each lane. On x86 before; /// AVX2 for example, there is a ""psllw"" instruction for the former case, but; /// no simple instruction for a general ""a << b"" operation on vectors.; /// This should also apply to lowering for vector funnel shifts (rotates).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:63,Performance,load,loaded,63,"/// Given a set in interconnected phis of type 'From' that are loaded/stored; /// or bitcast to type 'To', return true if the set should be converted to; /// 'To'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:38,Testability,log,logic,38,/// Return true if the node is a math/logic binary operator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:252,Performance,perform,performs,252,"/// Return true if a truncation from FromTy to ToTy is permitted when deciding; /// whether a call is in tail position. Typically this means that both results; /// would be assigned to the same register or stack slot, but it could mean; /// the target performs adequate checks of its own before proceeding with the; /// tail call. Targets must return false when FromTy <= ToTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:243,Modifiability,extend,extends,243,"/// Return true if the extension represented by \p I is free.; /// Unlikely the is[Z|FP]ExtFree family which is based on types,; /// this method can use the context provided by \p I to decide; /// whether or not \p I is free.; /// This method extends the behavior of the is[Z|FP]ExtFree family.; /// In other words, if is[Z|FP]Free returns true, then this method; /// returns true as well. The converse is not true.; /// The target can perform the adequate checks by overriding isExtFreeImpl.; /// \pre \p I must be a sign, zero, or fp extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:436,Performance,perform,perform,436,"/// Return true if the extension represented by \p I is free.; /// Unlikely the is[Z|FP]ExtFree family which is based on types,; /// this method can use the context provided by \p I to decide; /// whether or not \p I is free.; /// This method extends the behavior of the is[Z|FP]ExtFree family.; /// In other words, if is[Z|FP]Free returns true, then this method; /// returns true as well. The converse is not true.; /// The target can perform the adequate checks by overriding isExtFreeImpl.; /// \pre \p I must be a sign, zero, or fp extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:22,Performance,Load,Load,22,"/// Return true if \p Load and \p Ext can form an ExtLoad.; /// For example, in AArch64; /// %L = load i8, i8* %ptr; /// %E = zext i8 %L to i32; /// can be lowered into one load instruction; /// ldrb w0, [x0]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:98,Performance,load,load,98,"/// Return true if \p Load and \p Ext can form an ExtLoad.; /// For example, in AArch64; /// %L = load i8, i8* %ptr; /// %E = zext i8 %L to i32; /// can be lowered into one load instruction; /// ldrb w0, [x0]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:173,Performance,load,load,173,"/// Return true if \p Load and \p Ext can form an ExtLoad.; /// For example, in AArch64; /// %L = load i8, i8* %ptr; /// %E = zext i8 %L to i32; /// can be lowered into one load instruction; /// ldrb w0, [x0]",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:10,Performance,load,load,10,"// If the load has other users and the truncate is not free, the ext; // probably isn't free.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:55,Performance,load,loads,55,// Check whether the target supports casts folded into loads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:99,Modifiability,extend,extends,99,"/// Return true if any actual instruction that defines a value of type FromTy; /// implicitly zero-extends the value to ToTy in the result register.; ///; /// The function should return true when it is likely that the truncate can; /// be freely folded with an instruction defining a value of FromTy. If; /// the defining instruction is unknown (because you're looking at a; /// function argument, PHI, etc.) then the target may require an; /// explicit truncate, which is not necessarily free, but this function; /// does not deal with those cases.; /// Targets must return false when FromTy >= ToTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:24,Modifiability,extend,extending,24,/// Return true if zero-extending the specific node Val to type VT2 is free; /// (either because it's implicitly zero-extended such as ARM ldrb / ldrh or; /// because it's folded such as X86 zero-extending loads).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:118,Modifiability,extend,extended,118,/// Return true if zero-extending the specific node Val to type VT2 is free; /// (either because it's implicitly zero-extended such as ARM ldrb / ldrh or; /// because it's folded such as X86 zero-extending loads).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:196,Modifiability,extend,extending,196,/// Return true if zero-extending the specific node Val to type VT2 is free; /// (either because it's implicitly zero-extended such as ARM ldrb / ldrh or; /// because it's folded such as X86 zero-extending loads).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:206,Performance,load,loads,206,/// Return true if zero-extending the specific node Val to type VT2 is free; /// (either because it's implicitly zero-extended such as ARM ldrb / ldrh or; /// because it's folded such as X86 zero-extending loads).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,Modifiability,extend,extended,48,/// Return true if this constant should be sign extended when promoting to; /// a larger type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,Modifiability,extend,extending,20,"/// Try to optimize extending or truncating conversion instructions (like; /// zext, trunc, fptoui, uitofp) for the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Performance,optimiz,optimize,11,"/// Try to optimize extending or truncating conversion instructions (like; /// zext, trunc, fptoui, uitofp) for the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:64,Performance,load,load,64,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:78,Performance,load,loaded,78,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:100,Performance,Load,LoadedType,100,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:259,Performance,load,load,259,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:332,Performance,load,loads,332,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:385,Performance,load,loads,385,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:436,Performance,load,load,436,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:491,Performance,load,load,491,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:599,Performance,optimiz,optimized,599,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:624,Performance,load,load,624,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:649,Performance,load,load,649,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:751,Performance,perform,performs,751,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:772,Performance,load,load,772,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:868,Performance,load,loads,868,"/// Return true if the target supplies and combines to a paired load; /// two loaded values of type LoadedType next to each other in memory.; /// RequiredAlignment gives the minimal alignment constraints that must be met; /// to be able to select this paired load.; ///; /// This information is *not* used to generate actual paired loads, but it is; /// used to generate a sequence of loads that is easier to combine into a; /// paired load.; /// For instance, something like this:; /// a = load i64* addr; /// b = trunc i64 a to i32; /// c = lshr i64 a, 32; /// d = trunc i64 c to i32; /// will be optimized into:; /// b = load i32* addr1; /// d = load i32* addr2; /// Where addr1 = addr2 +/- sizeof(i32).; ///; /// In other words, unless the target performs a post-isel load combining,; /// this information should not be provided because it will generate more; /// loads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:2,Performance,Load,LoadedType,2,/*LoadedType*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:60,Security,access,accesses,60,/// Get the maximum supported factor for interleaved memory accesses.; /// Default to be the minimum interleave factor: 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:25,Performance,load,load,25,/// Lower an interleaved load to target specific intrinsics. Return; /// true on success.; ///; /// \p LI is the vector load instruction.; /// \p Shuffles is the shufflevector list to DE-interleave the loaded vector.; /// \p Indices is the corresponding indices for each shufflevector.; /// \p Factor is the interleave factor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:120,Performance,load,load,120,/// Lower an interleaved load to target specific intrinsics. Return; /// true on success.; ///; /// \p LI is the vector load instruction.; /// \p Shuffles is the shufflevector list to DE-interleave the loaded vector.; /// \p Indices is the corresponding indices for each shufflevector.; /// \p Factor is the interleave factor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:202,Performance,load,loaded,202,/// Lower an interleaved load to target specific intrinsics. Return; /// true on success.; ///; /// \p LI is the vector load instruction.; /// \p Shuffles is the shufflevector list to DE-interleave the loaded vector.; /// \p Indices is the corresponding indices for each shufflevector.; /// \p Factor is the interleave factor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:56,Performance,load,load,56,/// Lower a deinterleave intrinsic to a target specific load intrinsic.; /// Return true on success. Currently only supports; /// llvm.experimental.vector.deinterleave2; ///; /// \p DI is the deinterleave intrinsic.; /// \p LI is the accompanying load instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:247,Performance,load,load,247,/// Lower a deinterleave intrinsic to a target specific load intrinsic.; /// Return true on success. Currently only supports; /// llvm.experimental.vector.deinterleave2; ///; /// \p DI is the deinterleave intrinsic.; /// \p LI is the accompanying load instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:129,Modifiability,extend,extended,129,"/// Return true if an fpext operation is free (for instance, because; /// single-precision floating-point numbers are implicitly extended to; /// double-precision).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:164,Modifiability,extend,extended,164,"/// Return true if an fpext operation input to an \p Opcode operation is free; /// (for instance, because half-precision floating-point numbers are; /// implicitly extended to float-precision) for an FMA instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:164,Modifiability,extend,extended,164,"/// Return true if an fpext operation input to an \p Opcode operation is free; /// (for instance, because half-precision floating-point numbers are; /// implicitly extended to float-precision) for an FMA instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:80,Modifiability,extend,extend,80,"/// Return true if folding a vector load into ExtVal (a sign, zero, or any; /// extend node) is profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:36,Performance,load,load,36,"/// Return true if folding a vector load into ExtVal (a sign, zero, or any; /// extend node) is profitable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:140,Energy Efficiency,efficient,efficient,140,/// Return true if it is beneficial to convert a load of a constant to; /// just the constant itself.; /// On some targets it might be more efficient to use a combination of; /// arithmetic instructions to materialize the constant instead of loading it; /// from a constant pool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:49,Performance,load,load,49,/// Return true if it is beneficial to convert a load of a constant to; /// just the constant itself.; /// On some targets it might be more efficient to use a combination of; /// arithmetic instructions to materialize the constant instead of loading it; /// from a constant pool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:242,Performance,load,loading,242,/// Return true if it is beneficial to convert a load of a constant to; /// just the constant itself.; /// On some targets it might be more efficient to use a combination of; /// arithmetic instructions to materialize the constant instead of loading it; /// from a constant pool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:201,Integrability,depend,depends,201,"/// Return true if EXTRACT_SUBVECTOR is cheap for extracting this result type; /// from this source type with this index. This is needed because; /// EXTRACT_SUBVECTOR usually has custom lowering that depends on the index of; /// the first element, and only the target knows which lowering is cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:30,Modifiability,inherit,inherited,30,// TODO: The default logic is inherited from code in CodeGenPrepare.; // The opcode should not make a difference by default?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:21,Testability,log,logic,21,// TODO: The default logic is inherited from code in CodeGenPrepare.; // The opcode should not make a difference by default?,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:33,Usability,clear,clearing,33,/// Does this target require the clearing of high-order bits in a register; /// passed to the fp16 to fp conversion library function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:141,Integrability,rout,routine,141,//===--------------------------------------------------------------------===//; // Runtime Library hooks; //; /// Rename the default libcall routine name for the specified libcall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,Integrability,rout,routine,20,/// Get the libcall routine name for the specified libcall.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,Testability,test,test,48,/// Override the default CondCode to be used to test the result of the; /// comparison libcall against zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:42,Testability,test,test,42,/// Get the CondCode that's to be used to test the result of the comparison; /// libcall against zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:15,Energy Efficiency,schedul,scheduling,15,/// The target scheduling preference: shortest possible total cycles or lowest; /// register usage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:46,Performance,optimiz,optimizing,46,"/// The minimum function alignment (used when optimizing for size, and to; /// prevent explicitly provided alignment from leading to incorrect code).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:79,Performance,optimiz,optimizing,79,/// The preferred function alignment (used when alignment unspecified and; /// optimizing for speed).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:72,Security,Access,Accesses,72,/// Size in bits of the maximum atomics size the backend supports.; /// Accesses larger than this will be expanded by AtomicExpandPass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:153,Energy Efficiency,schedul,scheduler,153,"/// This indicates the ""representative"" register class to use for each; /// ValueType the target supports natively. This information is used by the; /// scheduler to track register pressure. By default, the representative; /// register class is the largest legal super-reg register class of the; /// register class of the specified type. e.g. On x86, i8, i16, and i32's; /// representative class would be GR32.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:118,Energy Efficiency,schedul,scheduler,118,"/// This indicates the ""cost"" of the ""representative"" register class for each; /// ValueType. The cost is used by the scheduler to approximate register; /// pressure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:13,Performance,load,load,13,"/// For each load extension type and each value type, keep a LegalizeAction; /// that indicates how instruction selection should deal with a load of a; /// specific value type and extension type. Uses 4-bits to store the action; /// for each of the 4 load ext types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:141,Performance,load,load,141,"/// For each load extension type and each value type, keep a LegalizeAction; /// that indicates how instruction selection should deal with a load of a; /// specific value type and extension type. Uses 4-bits to store the action; /// for each of the 4 load ext types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:251,Performance,load,load,251,"/// For each load extension type and each value type, keep a LegalizeAction; /// that indicates how instruction selection should deal with a load of a; /// specific value type and extension type. Uses 4-bits to store the action; /// for each of the 4 load ext types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:164,Availability,mask,maskedload,164,"/// For each indexed mode and each value type, keep a quad of LegalizeAction; /// that indicates how instruction selection should deal with the load /; /// store / maskedload / maskedstore.; ///; /// The first dimension is the value_type for the reference. The second; /// dimension represents the various modes for load store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:177,Availability,mask,maskedstore,177,"/// For each indexed mode and each value type, keep a quad of LegalizeAction; /// that indicates how instruction selection should deal with the load /; /// store / maskedload / maskedstore.; ///; /// The first dimension is the value_type for the reference. The second; /// dimension represents the various modes for load store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:144,Performance,load,load,144,"/// For each indexed mode and each value type, keep a quad of LegalizeAction; /// that indicates how instruction selection should deal with the load /; /// store / maskedload / maskedstore.; ///; /// The first dimension is the value_type for the reference. The second; /// dimension represents the various modes for load store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:316,Performance,load,load,316,"/// For each indexed mode and each value type, keep a quad of LegalizeAction; /// that indicates how instruction selection should deal with the load /; /// store / maskedload / maskedstore.; ///; /// The first dimension is the value_type for the reference. The second; /// dimension represents the various modes for load store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:55,Performance,Perform,PerformDAGCombine,55,"/// Targets can specify ISD nodes that they would like PerformDAGCombine; /// callbacks for by calling setTargetDAGCombine(), which sets a bit in this; /// array.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:239,Security,access,access,239,"/// For operations that must be promoted to a specific type, this holds the; /// destination type. This map should be sparse, so don't hold it as an; /// array.; ///; /// Targets add entries to this map with AddPromotedToType(..), clients access; /// this with getTypeToPromoteTo(..).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Testability,test,test,45,/// The ISD::CondCode that should be used to test the result of each of the; /// comparison libcall against zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:71,Integrability,depend,dependencies,71,"/// Depth that GatherAllAliases should continue looking for chain; /// dependencies when trying to find a more preferable chain. As an; /// approximation, this should be more than the number of consecutive stores; /// expected to be merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:37,Performance,load,load,37,"/// \brief Specify maximum number of load instructions per memcmp call.; ///; /// When lowering \@llvm.memcmp this field specifies the maximum number of; /// pairs of load operations that may be substituted for a call to memcmp.; /// Targets must set this value based on the cost threshold for that target.; /// Targets should assume that the memcmp will be done using as many of the; /// largest load operations first, followed by smaller ones, if necessary, per; /// alignment restrictions. For example, loading 7 bytes on a 32-bit machine; /// with 32-bit alignment would result in one 4-byte load, a one 2-byte load; /// and one 1-byte load. This only applies to copying a constant array of; /// constant size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:167,Performance,load,load,167,"/// \brief Specify maximum number of load instructions per memcmp call.; ///; /// When lowering \@llvm.memcmp this field specifies the maximum number of; /// pairs of load operations that may be substituted for a call to memcmp.; /// Targets must set this value based on the cost threshold for that target.; /// Targets should assume that the memcmp will be done using as many of the; /// largest load operations first, followed by smaller ones, if necessary, per; /// alignment restrictions. For example, loading 7 bytes on a 32-bit machine; /// with 32-bit alignment would result in one 4-byte load, a one 2-byte load; /// and one 1-byte load. This only applies to copying a constant array of; /// constant size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:397,Performance,load,load,397,"/// \brief Specify maximum number of load instructions per memcmp call.; ///; /// When lowering \@llvm.memcmp this field specifies the maximum number of; /// pairs of load operations that may be substituted for a call to memcmp.; /// Targets must set this value based on the cost threshold for that target.; /// Targets should assume that the memcmp will be done using as many of the; /// largest load operations first, followed by smaller ones, if necessary, per; /// alignment restrictions. For example, loading 7 bytes on a 32-bit machine; /// with 32-bit alignment would result in one 4-byte load, a one 2-byte load; /// and one 1-byte load. This only applies to copying a constant array of; /// constant size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:506,Performance,load,loading,506,"/// \brief Specify maximum number of load instructions per memcmp call.; ///; /// When lowering \@llvm.memcmp this field specifies the maximum number of; /// pairs of load operations that may be substituted for a call to memcmp.; /// Targets must set this value based on the cost threshold for that target.; /// Targets should assume that the memcmp will be done using as many of the; /// largest load operations first, followed by smaller ones, if necessary, per; /// alignment restrictions. For example, loading 7 bytes on a 32-bit machine; /// with 32-bit alignment would result in one 4-byte load, a one 2-byte load; /// and one 1-byte load. This only applies to copying a constant array of; /// constant size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:596,Performance,load,load,596,"/// \brief Specify maximum number of load instructions per memcmp call.; ///; /// When lowering \@llvm.memcmp this field specifies the maximum number of; /// pairs of load operations that may be substituted for a call to memcmp.; /// Targets must set this value based on the cost threshold for that target.; /// Targets should assume that the memcmp will be done using as many of the; /// largest load operations first, followed by smaller ones, if necessary, per; /// alignment restrictions. For example, loading 7 bytes on a 32-bit machine; /// with 32-bit alignment would result in one 4-byte load, a one 2-byte load; /// and one 1-byte load. This only applies to copying a constant array of; /// constant size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:615,Performance,load,load,615,"/// \brief Specify maximum number of load instructions per memcmp call.; ///; /// When lowering \@llvm.memcmp this field specifies the maximum number of; /// pairs of load operations that may be substituted for a call to memcmp.; /// Targets must set this value based on the cost threshold for that target.; /// Targets should assume that the memcmp will be done using as many of the; /// largest load operations first, followed by smaller ones, if necessary, per; /// alignment restrictions. For example, loading 7 bytes on a 32-bit machine; /// with 32-bit alignment would result in one 4-byte load, a one 2-byte load; /// and one 1-byte load. This only applies to copying a constant array of; /// constant size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:640,Performance,load,load,640,"/// \brief Specify maximum number of load instructions per memcmp call.; ///; /// When lowering \@llvm.memcmp this field specifies the maximum number of; /// pairs of load operations that may be substituted for a call to memcmp.; /// Targets must set this value based on the cost threshold for that target.; /// Targets should assume that the memcmp will be done using as many of the; /// largest load operations first, followed by smaller ones, if necessary, per; /// alignment restrictions. For example, loading 7 bytes on a 32-bit machine; /// with 32-bit alignment would result in one 4-byte load, a one 2-byte load; /// and one 1-byte load. This only applies to copying a constant array of; /// constant size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:103,Safety,predict,predicted,103,/// Tells the code generator that select is more expensive than a branch if; /// the branch is usually predicted right.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:63,Integrability,depend,dependent,63,/// Replace/modify any TargetFrameIndex operands with a targte-dependent; /// sequence of memory operands that is recognized by PrologEpilogInserter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:166,Performance,load,load,166,"/// Returns true by value, base pointer and offset pointer and addressing mode; /// by reference if the node's address can be legally represented as; /// pre-indexed load / store address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:133,Performance,load,load,133,"/// Returns true by value, base pointer and offset pointer and addressing mode; /// by reference if this node can be combined with a load / store to form a; /// post-indexed load / store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:174,Performance,load,load,174,"/// Returns true by value, base pointer and offset pointer and addressing mode; /// by reference if this node can be combined with a load / store to form a; /// post-indexed load / store.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:116,Performance,load,load,116,/// Returns true if the specified base+offset is a legal indexed addressing; /// mode for this target. \p MI is the load or store instruction that is being; /// considered for transformation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:59,Availability,error,error,59,"/// Returns a pair of (return value, chain).; /// It is an error to pass RTLIB::UNKNOWN_LIBCALL as \p LC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:98,Performance,Optimiz,Optimization,98,"//===--------------------------------------------------------------------===//; // TargetLowering Optimization Methods; //; /// A convenience struct that encapsulates a DAG, and two SDValues for; /// returning information from TargetLowering to its clients that want to; /// combine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:273,Performance,perform,perform,273,/// Determines the optimal series of memory ops to replace the memset / memcpy.; /// Return true if the number of memory ops is below the threshold (Limit).; /// Note that this is always the case when Limit is ~0.; /// It returns the types of the sequence of memory ops to perform; /// memset / memcpy by reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Integrability,wrap,wrapper,11,"/// Helper wrapper around ShrinkDemandedConstant, demanding all elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:43,Performance,optimiz,optimization,43,"// Target hook to do target-specific const optimization, which is called by; // ShrinkDemandedConstant. This function should return true if the target; // doesn't want ShrinkDemandedConstant to further optimize the constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:202,Performance,optimiz,optimize,202,"// Target hook to do target-specific const optimization, which is called by; // ShrinkDemandedConstant. This function should return true if the target; // doesn't want ShrinkDemandedConstant to further optimize the constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:110,Availability,down,downstream,110,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:334,Availability,mask,mask,334,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:505,Availability,mask,masks,505,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:161,Usability,simpl,simplify,161,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:187,Usability,simpl,simplified,187,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:403,Usability,simpl,simplify,403,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:600,Usability,simpl,simplify,600,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:760,Usability,simpl,simply,760,"/// Look at Op. At this point, we know that only the DemandedBits bits of the; /// result of Op are ever used downstream. If we can use this information to; /// simplify Op, create a new simplified DAG node and return true, returning; /// the original and new nodes in Old and New. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Integrability,wrap,wrapper,11,"/// Helper wrapper around SimplifyDemandedBits, demanding all elements.; /// Adds Op back to the worklist upon success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Usability,Simpl,SimplifyDemandedBits,26,"/// Helper wrapper around SimplifyDemandedBits, demanding all elements.; /// Adds Op back to the worklist upon success.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Integrability,wrap,wrapper,11,/// Helper wrapper around SimplifyDemandedBits.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Usability,Simpl,SimplifyDemandedBits,26,/// Helper wrapper around SimplifyDemandedBits.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Integrability,wrap,wrapper,11,/// Helper wrapper around SimplifyDemandedBits.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Usability,Simpl,SimplifyDemandedBits,26,/// Helper wrapper around SimplifyDemandedBits.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:28,Usability,Simpl,SimplifyDemandedBits,28,"/// More limited version of SimplifyDemandedBits that can be used to ""look; /// through"" ops that don't contribute to the DemandedBits/DemandedElts -; /// bitwise ops etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Integrability,wrap,wrapper,11,"/// Helper wrapper around SimplifyMultipleUseDemandedBits, demanding all; /// elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Usability,Simpl,SimplifyMultipleUseDemandedBits,26,"/// Helper wrapper around SimplifyMultipleUseDemandedBits, demanding all; /// elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Integrability,wrap,wrapper,11,"/// Helper wrapper around SimplifyMultipleUseDemandedBits, demanding all; /// bits from only some vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Usability,Simpl,SimplifyMultipleUseDemandedBits,26,"/// Helper wrapper around SimplifyMultipleUseDemandedBits, demanding all; /// bits from only some vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:121,Availability,down,downstream,121,"/// Look at Vector Op. At this point, we know that only the DemandedElts; /// elements of the result of Op are ever used downstream. If we can use; /// this information to simplify Op, create a new simplified DAG node and; /// return true, storing the original and new nodes in TLO.; /// Otherwise, analyze the expression and return a mask of KnownUndef and; /// KnownZero elements for the expression (used to simplify the caller).; /// The KnownUndef/Zero elements may only be accurate for those bits; /// in the DemandedMask.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:335,Availability,mask,mask,335,"/// Look at Vector Op. At this point, we know that only the DemandedElts; /// elements of the result of Op are ever used downstream. If we can use; /// this information to simplify Op, create a new simplified DAG node and; /// return true, storing the original and new nodes in TLO.; /// Otherwise, analyze the expression and return a mask of KnownUndef and; /// KnownZero elements for the expression (used to simplify the caller).; /// The KnownUndef/Zero elements may only be accurate for those bits; /// in the DemandedMask.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:172,Usability,simpl,simplify,172,"/// Look at Vector Op. At this point, we know that only the DemandedElts; /// elements of the result of Op are ever used downstream. If we can use; /// this information to simplify Op, create a new simplified DAG node and; /// return true, storing the original and new nodes in TLO.; /// Otherwise, analyze the expression and return a mask of KnownUndef and; /// KnownZero elements for the expression (used to simplify the caller).; /// The KnownUndef/Zero elements may only be accurate for those bits; /// in the DemandedMask.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:198,Usability,simpl,simplified,198,"/// Look at Vector Op. At this point, we know that only the DemandedElts; /// elements of the result of Op are ever used downstream. If we can use; /// this information to simplify Op, create a new simplified DAG node and; /// return true, storing the original and new nodes in TLO.; /// Otherwise, analyze the expression and return a mask of KnownUndef and; /// KnownZero elements for the expression (used to simplify the caller).; /// The KnownUndef/Zero elements may only be accurate for those bits; /// in the DemandedMask.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:410,Usability,simpl,simplify,410,"/// Look at Vector Op. At this point, we know that only the DemandedElts; /// elements of the result of Op are ever used downstream. If we can use; /// this information to simplify Op, create a new simplified DAG node and; /// return true, storing the original and new nodes in TLO.; /// Otherwise, analyze the expression and return a mask of KnownUndef and; /// KnownZero elements for the expression (used to simplify the caller).; /// The KnownUndef/Zero elements may only be accurate for those bits; /// in the DemandedMask.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:616,Usability,simpl,simplify,616,"/// Look at Vector Op. At this point, we know that only the DemandedElts; /// elements of the result of Op are ever used downstream. If we can use; /// this information to simplify Op, create a new simplified DAG node and; /// return true, storing the original and new nodes in TLO.; /// Otherwise, analyze the expression and return a mask of KnownUndef and; /// KnownZero elements for the expression (used to simplify the caller).; /// The KnownUndef/Zero elements may only be accurate for those bits; /// in the DemandedMask.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:776,Usability,simpl,simply,776,"/// Look at Vector Op. At this point, we know that only the DemandedElts; /// elements of the result of Op are ever used downstream. If we can use; /// this information to simplify Op, create a new simplified DAG node and; /// return true, storing the original and new nodes in TLO.; /// Otherwise, analyze the expression and return a mask of KnownUndef and; /// KnownZero elements for the expression (used to simplify the caller).; /// The KnownUndef/Zero elements may only be accurate for those bits; /// in the DemandedMask.; /// \p AssumeSingleUse When this parameter is true, this function will; /// attempt to simplify \p Op even if there are multiple uses.; /// Callers are responsible for correctly updating the DAG based on the; /// results of this function, because simply replacing TLO.Old; /// with TLO.New will be incorrect when this parameter is true and TLO.Old; /// has multiple uses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Integrability,wrap,wrapper,11,/// Helper wrapper around SimplifyDemandedVectorElts.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:26,Usability,Simpl,SimplifyDemandedVectorElts,26,/// Helper wrapper around SimplifyDemandedVectorElts.; /// Adds Op back to the worklist upon success.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:39,Usability,simpl,simplifying,39,/// Return true if the target supports simplifying demanded vector elements by; /// converting them to undefs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Availability,Mask,Mask,45,/// Determine which of the bits specified in Mask are known to be either zero; /// or one and return them in the KnownZero/KnownOne bitsets. The DemandedElts; /// argument allows us to only collect the known bits that are shared by the; /// requested vector elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Availability,Mask,Mask,45,/// Determine which of the bits specified in Mask are known to be either zero; /// or one and return them in the KnownZero/KnownOne bitsets. The DemandedElts; /// argument allows us to only collect the known bits that are shared by the; /// requested vector elements. This is for GISel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:59,Security,expose,expose,59,/// This method can be implemented by targets that want to expose additional; /// information about sign bits to the DAG Combiner. The DemandedElts; /// argument allows us to only collect the minimum sign bits that are shared; /// by the requested vector elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:59,Security,expose,expose,59,/// This method can be implemented by targets that want to expose additional; /// information about sign bits to GlobalISel combiners. The DemandedElts; /// argument allows us to only collect the minimum sign bits that are shared; /// by the requested vector elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:164,Availability,mask,mask,164,"/// Attempt to simplify any target nodes based on the demanded vector; /// elements, returning true on success. Otherwise, analyze the expression and; /// return a mask of KnownUndef and KnownZero elements for the expression; /// (used to simplify the caller). The KnownUndef/Zero elements may only be; /// accurate for those bits in the DemandedMask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:15,Usability,simpl,simplify,15,"/// Attempt to simplify any target nodes based on the demanded vector; /// elements, returning true on success. Otherwise, analyze the expression and; /// return a mask of KnownUndef and KnownZero elements for the expression; /// (used to simplify the caller). The KnownUndef/Zero elements may only be; /// accurate for those bits in the DemandedMask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:239,Usability,simpl,simplify,239,"/// Attempt to simplify any target nodes based on the demanded vector; /// elements, returning true on success. Otherwise, analyze the expression and; /// return a mask of KnownUndef and KnownZero elements for the expression; /// (used to simplify the caller). The KnownUndef/Zero elements may only be; /// accurate for those bits in the DemandedMask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:158,Availability,mask,mask,158,"/// Attempt to simplify any target nodes based on the demanded bits/elts,; /// returning true on success. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:329,Availability,mask,masks,329,"/// Attempt to simplify any target nodes based on the demanded bits/elts,; /// returning true on success. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:15,Usability,simpl,simplify,15,"/// Attempt to simplify any target nodes based on the demanded bits/elts,; /// returning true on success. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:227,Usability,simpl,simplify,227,"/// Attempt to simplify any target nodes based on the demanded bits/elts,; /// returning true on success. Otherwise, analyze the; /// expression and return a mask of KnownOne and KnownZero bits for the; /// expression (used to simplify the caller). The KnownZero/One bits may only; /// be accurate for those bits in the Demanded masks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:28,Usability,Simpl,SimplifyDemandedBits,28,"/// More limited version of SimplifyDemandedBits that can be used to ""look; /// through"" ops that don't contribute to the DemandedBits/DemandedElts -; /// bitwise ops etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:107,Availability,Mask,Mask,107,/// Tries to build a legal vector shuffle using the provided parameters; /// or equivalent variations. The Mask argument maybe be modified as the; /// function tries different variations.; /// Returns an empty SDValue if the operation fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:61,Performance,load,loaded,61,/// This method returns the constant pool value that will be loaded by LD.; /// NOTE: You must check for implicit extensions of the constant by LD.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:40,Modifiability,extend,extended,40,/// Return if \p N is a True value when extended to \p VT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:11,Usability,simpl,simplify,11,"/// Try to simplify a setcc built with the specified operands and cc. If it is; /// unable to simplify it, return a null SDValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:94,Usability,simpl,simplify,94,"/// Try to simplify a setcc built with the specified operands and cc. If it is; /// unable to simplify it, return a null SDValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:21,Integrability,wrap,wrap,21,"// For targets which wrap address, unwrap for analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:463,Performance,perform,perform,463,"/// This method will be invoked for all target nodes and for any; /// target-independent nodes that the target has registered with invoke it; /// for.; ///; /// The semantics are as follows:; /// Return Value:; /// SDValue.Val == 0 - No change was made; /// SDValue.Val == N - N was replaced, is dead, and is already handled.; /// otherwise - N should be replaced by the returned Operand.; ///; /// In addition, methods provided by DAGCombinerInfo may be used to perform; /// more complex transformations.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:51,Performance,perform,perform,51,"/// GlobalISel - return true if it's profitable to perform the combine:; /// shl ([sza]ext x), y => zext (shl x, y)",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:186,Energy Efficiency,power,power,186,"// Return AndOrSETCCFoldKind::{AddAnd, ABS} if its desirable to try and; // optimize LogicOp(SETCC0, SETCC1). An example (what is implemented as of; // writing this) is:; // With C as a power of 2 and C != 0 and C != INT_MIN:; // AddAnd:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq and(add(A, C), ~(C + C)), 0); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne and(add(A, C), ~(C + C)), 0); // ABS:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq Abs(A), C); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne Abs(A), C); //; // @param LogicOp the logic op; // @param SETCC0 the first of the SETCC nodes; // @param SETCC0 the second of the SETCC nodes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:76,Performance,optimiz,optimize,76,"// Return AndOrSETCCFoldKind::{AddAnd, ABS} if its desirable to try and; // optimize LogicOp(SETCC0, SETCC1). An example (what is implemented as of; // writing this) is:; // With C as a power of 2 and C != 0 and C != INT_MIN:; // AddAnd:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq and(add(A, C), ~(C + C)), 0); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne and(add(A, C), ~(C + C)), 0); // ABS:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq Abs(A), C); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne Abs(A), C); //; // @param LogicOp the logic op; // @param SETCC0 the first of the SETCC nodes; // @param SETCC0 the second of the SETCC nodes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:85,Testability,Log,LogicOp,85,"// Return AndOrSETCCFoldKind::{AddAnd, ABS} if its desirable to try and; // optimize LogicOp(SETCC0, SETCC1). An example (what is implemented as of; // writing this) is:; // With C as a power of 2 and C != 0 and C != INT_MIN:; // AddAnd:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq and(add(A, C), ~(C + C)), 0); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne and(add(A, C), ~(C + C)), 0); // ABS:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq Abs(A), C); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne Abs(A), C); //; // @param LogicOp the logic op; // @param SETCC0 the first of the SETCC nodes; // @param SETCC0 the second of the SETCC nodes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:556,Testability,Log,LogicOp,556,"// Return AndOrSETCCFoldKind::{AddAnd, ABS} if its desirable to try and; // optimize LogicOp(SETCC0, SETCC1). An example (what is implemented as of; // writing this) is:; // With C as a power of 2 and C != 0 and C != INT_MIN:; // AddAnd:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq and(add(A, C), ~(C + C)), 0); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne and(add(A, C), ~(C + C)), 0); // ABS:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq Abs(A), C); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne Abs(A), C); //; // @param LogicOp the logic op; // @param SETCC0 the first of the SETCC nodes; // @param SETCC0 the second of the SETCC nodes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:568,Testability,log,logic,568,"// Return AndOrSETCCFoldKind::{AddAnd, ABS} if its desirable to try and; // optimize LogicOp(SETCC0, SETCC1). An example (what is implemented as of; // writing this) is:; // With C as a power of 2 and C != 0 and C != INT_MIN:; // AddAnd:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq and(add(A, C), ~(C + C)), 0); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne and(add(A, C), ~(C + C)), 0); // ABS:; // (icmp eq A, C) | (icmp eq A, -C); // -> (icmp eq Abs(A), C); // (icmp ne A, C) & (icmp ne A, -C)w; // -> (icmp ne Abs(A), C); //; // @param LogicOp the logic op; // @param SETCC0 the first of the SETCC nodes; // @param SETCC0 the second of the SETCC nodes",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:59,Testability,log,logical,59,"/// Return true if it is profitable to combine an XOR of a logical shift; /// to create a logical shift of NOT. This transformation may not be desirable; /// if it disrupts a particularly auspicious target-specific tree (e.g.; /// BIC on ARM/AArch64). By default, it returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:90,Testability,log,logical,90,"/// Return true if it is profitable to combine an XOR of a logical shift; /// to create a logical shift of NOT. This transformation may not be desirable; /// if it disrupts a particularly auspicious target-specific tree (e.g.; /// BIC on ARM/AArch64). By default, it returns true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:164,Performance,load,load,164,/// Return true if it is profitable for dag combiner to transform a floating; /// point op of specified opcode to a equivalent op of an integer; /// type. e.g. f32 load -> i32 load can be profitable on ARM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:176,Performance,load,load,176,/// Return true if it is profitable for dag combiner to transform a floating; /// point op of specified opcode to a equivalent op of an integer; /// type. e.g. f32 load -> i32 load can be profitable on ARM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:64,Performance,optimiz,optimizes,64,/// Return true if the target supports swifterror attribute. It optimizes; /// loads and stores to reading and writing a specific register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:79,Performance,load,loads,79,/// Return true if the target supports swifterror attribute. It optimizes; /// loads and stores to reading and writing a specific register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:4,Performance,Perform,Perform,4,/// Perform necessary initialization to handle a subset of CSRs explicitly; /// via copies. This function is called at the beginning of instruction; /// selection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:34,Safety,avoid,avoid,34,// Remove the new created node to avoid the side effect to the DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:102,Energy Efficiency,Schedul,ScheduleDAGSDNodes,102,"/// Allows the target to handle physreg-carried dependency; /// in target-specific way. Used from the ScheduleDAGSDNodes to decide whether; /// to add the edge to the dependency graph.; /// Def - input: Selection DAG node defininfg physical register; /// User - input: Selection DAG node using physical register; /// Op - input: Number of User operand; /// PhysReg - inout: set to the physical register if the edge is; /// necessary, unchanged otherwise; /// Cost - inout: physical register copy cost.; /// Returns 'true' is the edge is necessary, 'false' otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:48,Integrability,depend,dependency,48,"/// Allows the target to handle physreg-carried dependency; /// in target-specific way. Used from the ScheduleDAGSDNodes to decide whether; /// to add the edge to the dependency graph.; /// Def - input: Selection DAG node defininfg physical register; /// User - input: Selection DAG node using physical register; /// Op - input: Number of User operand; /// PhysReg - inout: set to the physical register if the edge is; /// necessary, unchanged otherwise; /// Cost - inout: physical register copy cost.; /// Returns 'true' is the edge is necessary, 'false' otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:167,Integrability,depend,dependency,167,"/// Allows the target to handle physreg-carried dependency; /// in target-specific way. Used from the ScheduleDAGSDNodes to decide whether; /// to add the edge to the dependency graph.; /// Def - input: Selection DAG node defininfg physical register; /// User - input: Selection DAG node using physical register; /// Op - input: Number of User operand; /// PhysReg - inout: set to the physical register if the edge is; /// necessary, unchanged otherwise; /// Cost - inout: physical register copy cost.; /// Returns 'true' is the edge is necessary, 'false' otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:90,Performance,perform,perform,90,// IsTailCall should be modified by implementations of; // TargetLowering::LowerCall that perform tail call conversions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:186,Performance,perform,performed,186,"/// This hook should be implemented to check whether the return values; /// described by the Outs array can fit into the return registers. If false; /// is returned, an sret-demotion is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:105,Performance,optimiz,optimization,105,/// Return true if the target may be able emit the call instruction as a tail; /// call. This is used by optimization passes to determine if it's profitable; /// to duplicate return instructions to enable tailcall optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:214,Performance,optimiz,optimization,214,/// Return true if the target may be able emit the call instruction as a tail; /// call. This is used by optimization passes to determine if it's profitable; /// to duplicate return instructions to enable tailcall optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:106,Performance,cache,cache,106,/// Return the builtin name for the __builtin___clear_cache intrinsic; /// Default is to invoke the clear cache library call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:100,Usability,clear,clear,100,/// Return the builtin name for the __builtin___clear_cache intrinsic; /// Default is to invoke the clear cache library call,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:85,Modifiability,variab,variables,85,/// Return the register ID of the name passed in. Used by named register; /// global variables extension. There is no target-independent behaviour; /// so the default action is to bail.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:56,Modifiability,extend,extend,56,"/// Return the type that should be used to zero or sign extend a; /// zeroext/signext integer return value. FIXME: Some C calling conventions; /// require the return type to be promoted, but this is not true all the time,; /// e.g. i1/i8/i16 on x86/x86_64. It is also not necessary for non-C calling; /// conventions. The frontend should handle this and include all of the; /// necessary information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:2,Modifiability,Extend,ExtendKind,2,/*ExtendKind*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:57,Availability,down,down,57,"/// For some targets, an LLVM struct type must be broken down into multiple; /// simple types, but the calling convention specifies that the entire struct; /// must be passed in a block of consecutive registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:81,Usability,simpl,simple,81,"/// For some targets, an LLVM struct type must be broken down into multiple; /// simple types, but the calling convention specifies that the entire struct; /// must be passed in a block of consecutive registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:50,Availability,down,down,50,"/// For most targets, an LLVM type must be broken down into multiple; /// smaller types. Usually the halves are ordered according to the endianness; /// but for some platform that would break. So this method will default to; /// matching the endianness but can be overridden.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:58,Safety,safe,safely,58,/// Returns a 0 terminated array of registers that can be safely used as; /// scratch registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:62,Performance,load,load,62,"/// This callback is used to prepare for a volatile or atomic load.; /// It takes a chain node as input and returns the chain for the load itself.; ///; /// Having a callback like this is necessary for targets like SystemZ,; /// which allows a CPU to reuse the result of a previous load indefinitely,; /// even if a cache-coherent store is performed by another CPU. The default; /// implementation does nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:134,Performance,load,load,134,"/// This callback is used to prepare for a volatile or atomic load.; /// It takes a chain node as input and returns the chain for the load itself.; ///; /// Having a callback like this is necessary for targets like SystemZ,; /// which allows a CPU to reuse the result of a previous load indefinitely,; /// even if a cache-coherent store is performed by another CPU. The default; /// implementation does nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:282,Performance,load,load,282,"/// This callback is used to prepare for a volatile or atomic load.; /// It takes a chain node as input and returns the chain for the load itself.; ///; /// Having a callback like this is necessary for targets like SystemZ,; /// which allows a CPU to reuse the result of a previous load indefinitely,; /// even if a cache-coherent store is performed by another CPU. The default; /// implementation does nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:316,Performance,cache,cache-coherent,316,"/// This callback is used to prepare for a volatile or atomic load.; /// It takes a chain node as input and returns the chain for the load itself.; ///; /// Having a callback like this is necessary for targets like SystemZ,; /// which allows a CPU to reuse the result of a previous load indefinitely,; /// even if a cache-coherent store is performed by another CPU. The default; /// implementation does nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:340,Performance,perform,performed,340,"/// This callback is used to prepare for a volatile or atomic load.; /// It takes a chain node as input and returns the chain for the load itself.; ///; /// Having a callback like this is necessary for targets like SystemZ,; /// which allows a CPU to reuse the result of a previous load indefinitely,; /// even if a cache-coherent store is performed by another CPU. The default; /// implementation does nothing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:312,Safety,abort,aborts,312,"/// This callback is invoked for operations that are unsupported by the; /// target, which are registered to use 'custom' lowering, and whose defined; /// values are all legal. If the target has no operations that require custom; /// lowering, it need not implement this. The default implementation of this; /// aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:564,Safety,abort,aborts,564,"/// This callback is invoked when a node result type is illegal for the; /// target, and the operation was registered to use 'custom' lowering for that; /// result type. The target places new result values for the node in Results; /// (their number and types must exactly match those of the original return; /// values of the node), or leaves Results empty, which indicates that the; /// node is not to be custom lowered after all.; ///; /// If the target has no operations that require custom lowering, it need not; /// implement this. The default implementation aborts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:247,Usability,simpl,simple,247,"//===--------------------------------------------------------------------===//; // Inline Asm Support hooks; //; /// This hook allows the target to expand an inline asm call to be explicit; /// llvm code if it wants to. This is useful for turning simple inline asms; /// into LLVM intrinsics, which gives the compiler more information about the; /// behavior of the code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:273,Availability,error,error,273,"/// Split up the constraint string from the inline assembly value into the; /// specific constraints and their prefixes, and also tie in the associated; /// operand values. If this returns an empty vector, and if the constraint; /// string itself isn't empty, there was an error parsing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:203,Availability,avail,available,203,"/// Determines the constraint code and constraint type to use for the specific; /// AsmOperandInfo, setting OpInfo.ConstraintCode and OpInfo.ConstraintType.; /// If the actual operand being passed in is available, it can be passed in as; /// Op, otherwise an empty SDValue can be passed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:370,Availability,error,error,370,"/// Given a physical register constraint (e.g. {edx}), return the register; /// number and the register class for the register.; ///; /// Given a register class constraint, like 'r', if this corresponds directly; /// to an LLVM register class, return a register of 0 and the register class; /// pointer.; ///; /// This should only be used for C_Register constraints. On error, this; /// returns a register number of 0 and a null register class pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:17,Energy Efficiency,power,power-of-,17,// Build sdiv by power-of-2 with conditional move instructions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:80,Energy Efficiency,power,power-of-,80,"/// Targets may override this function to provide custom SDIV lowering for; /// power-of-2 denominators. If the target returns an empty SDValue, LLVM; /// assumes SDIV is expensive and replaces it with a series of other integer; /// operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:80,Energy Efficiency,power,power-of-,80,"/// Targets may override this function to provide custom SREM lowering for; /// power-of-2 denominators. If the target returns an empty SDValue, LLVM; /// assumes SREM is expensive and replaces it with a series of other integer; /// operations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:996,Safety,avoid,avoid,996,"/// Hooks for building estimates in place of slower divisions and square; /// roots.; /// Return either a square root or its reciprocal estimate value for the input; /// operand.; /// \p Enabled is a ReciprocalEstimate enum with value either 'Unspecified' or; /// 'Enabled' as set by a potential default override attribute.; /// If \p RefinementSteps is 'Unspecified', the number of Newton-Raphson; /// refinement iterations required to generate a sufficient (though not; /// necessarily IEEE-754 compliant) estimate is returned in that parameter.; /// The boolean UseOneConstNR output is used to select a Newton-Raphson; /// algorithm implementation that uses either one or two constants.; /// The boolean Reciprocal is used to select whether the estimate is for the; /// square root of the input operand or the reciprocal of its square root.; /// A target may choose to implement its own refinement within this function.; /// If that's true, then return '0' as the number of RefinementSteps to avoid; /// any further refinement of the estimate.; /// An empty SDValue return means no estimate sequence can be created.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:322,Integrability,depend,dependency,322,"/// Try to convert the fminnum/fmaxnum to a compare/select sequence. This is; /// required for correctness since InstCombine might have canonicalized a; /// fcmp+select sequence to a FMINNUM/FMAXNUM intrinsic. If we were to fall; /// through to the default expansion/soften to libcall, we might introduce a; /// link-time dependency on libm into a file that originally did not have one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:583,Safety,avoid,avoid,583,"/// Return a reciprocal estimate value for the input operand.; /// \p Enabled is a ReciprocalEstimate enum with value either 'Unspecified' or; /// 'Enabled' as set by a potential default override attribute.; /// If \p RefinementSteps is 'Unspecified', the number of Newton-Raphson; /// refinement iterations required to generate a sufficient (though not; /// necessarily IEEE-754 compliant) estimate is returned in that parameter.; /// A target may choose to implement its own refinement within this function.; /// If that's true, then return '0' as the number of RefinementSteps to avoid; /// any further refinement of the estimate.; /// An empty SDValue return means no estimate sequence can be created.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,Integrability,depend,dependent,20,"/// Return a target-dependent comparison result if the input operand is; /// suitable for use with a square root estimate calculation. For example, the; /// comparison may check if the operand is NAN, INF, zero, normal, etc. The; /// result should be used as the condition operand for a select or branch.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:20,Integrability,depend,dependent,20,/// Return a target-dependent result if the input operand is not suitable for; /// use with a square root estimate calculation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:120,Performance,perform,performed,120,"/// Expand rotations.; /// \param N Node to expand; /// \param AllowVectorOps expand vector rotate, this should only be performed; /// if the legalization is happening outside of LegalizeVectorOps; /// \returns The expansion if successful, SDValue() otherwise",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:161,Performance,perform,perform,161,/// Expand check for floating point class.; /// \param ResultVT The type of intrinsic call result.; /// \param Op The tested value.; /// \param Test The test to perform.; /// \param Flags The optimization flags.; /// \returns The expansion result or SDValue() if it fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:192,Performance,optimiz,optimization,192,/// Expand check for floating point class.; /// \param ResultVT The type of intrinsic call result.; /// \param Op The tested value.; /// \param Test The test to perform.; /// \param Flags The optimization flags.; /// \returns The expansion result or SDValue() if it fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:118,Testability,test,tested,118,/// Expand check for floating point class.; /// \param ResultVT The type of intrinsic call result.; /// \param Op The tested value.; /// \param Test The test to perform.; /// \param Flags The optimization flags.; /// \returns The expansion result or SDValue() if it fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:144,Testability,Test,Test,144,/// Expand check for floating point class.; /// \param ResultVT The type of intrinsic call result.; /// \param Op The tested value.; /// \param Test The test to perform.; /// \param Flags The optimization flags.; /// \returns The expansion result or SDValue() if it fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:153,Testability,test,test,153,/// Expand check for floating point class.; /// \param ResultVT The type of intrinsic call result.; /// \param Op The tested value.; /// \param Test The test to perform.; /// \param Flags The optimization flags.; /// \returns The expansion result or SDValue() if it fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:9,Performance,load,load,9,/// Turn load of vector type into a load of the individual elements.; /// \param LD load to expand; /// \returns BUILD_VECTOR and TokenFactor nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:36,Performance,load,load,36,/// Turn load of vector type into a load of the individual elements.; /// \param LD load to expand; /// \returns BUILD_VECTOR and TokenFactor nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:84,Performance,load,load,84,/// Turn load of vector type into a load of the individual elements.; /// \param LD load to expand; /// \returns BUILD_VECTOR and TokenFactor nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:25,Performance,load,load,25,"/// Expands an unaligned load to 2 half-size loads for an integer, and; /// possibly more for vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:45,Performance,load,loads,45,"/// Expands an unaligned load to 2 half-size loads for an integer, and; /// possibly more for vectors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:315,Availability,Mask,Mask,315,"/// Increments memory address \p Addr according to the type of the value; /// \p DataVT that should be stored. If the data is stored in compressed; /// form, the memory address should be incremented according to the number of; /// the stored elements. This number is equal to the number of '1's bits; /// in the \p Mask.; /// \p DataVT is a vector type. \p Mask is a vector value.; /// \p DataVT and \p Mask have the same number of vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:357,Availability,Mask,Mask,357,"/// Increments memory address \p Addr according to the type of the value; /// \p DataVT that should be stored. If the data is stored in compressed; /// form, the memory address should be incremented according to the number of; /// the stored elements. This number is equal to the number of '1's bits; /// in the \p Mask.; /// \p DataVT is a vector type. \p Mask is a vector value.; /// \p DataVT and \p Mask have the same number of vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:403,Availability,Mask,Mask,403,"/// Increments memory address \p Addr according to the type of the value; /// \p DataVT that should be stored. If the data is stored in compressed; /// form, the memory address should be incremented according to the number of; /// the stored elements. This number is equal to the number of '1's bits; /// in the \p Mask.; /// \p DataVT is a vector type. \p Mask is a vector value.; /// \p DataVT and \p Mask have the same number of vector elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:180,Performance,perform,performed,180,/// Method for building the DAG expansion of ISD::[US]DIVFIX[SAT]. This; /// method accepts integers as its arguments.; /// Note: This method may fail if the division could not be performed; /// within the type. Clients must retry with a wider type if this happens.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:146,Availability,Mask,Mask,146,"/// Legalize a SETCC or VP_SETCC with given LHS and RHS and condition code CC; /// on the current target. A VP_SETCC will additionally be given a Mask; /// and/or EVL not equal to SDValue().; ///; /// If the SETCC has been legalized using AND / OR, then the legalized node; /// will be stored in LHS. RHS and CC will be set to SDValue(). NeedInvert; /// will be set to false. This will also hold if the VP_SETCC has been; /// legalized using VP_AND / VP_OR.; ///; /// If the SETCC / VP_SETCC has been legalized by using; /// getSetCCSwappedOperands(), then the values of LHS and RHS will be; /// swapped, CC will be set to the new condition, and NeedInvert will be set; /// to false.; ///; /// If the SETCC / VP_SETCC has been legalized using the inverse condcode,; /// then LHS and RHS will be unchanged, CC will set to the inverted condcode,; /// and NeedInvert will be set to true. The caller must invert the result of; /// the SETCC with SelectionDAG::getLogicalNOT() or take equivalent action to; /// swap the effect of a true/false result.; ///; /// \returns true if the SETCC / VP_SETCC has been legalized, false if it; /// hasn't.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h:128,Security,expose,expose,128,"// seteq(x, 0) -> truncate(srl(ctlz(zext(x)), log2(#bits))); // If we're comparing for equality to zero and isCtlzFast is true, expose the; // fact that this can be implemented as a ctlz/srl pair, so that the dag; // combiner can fold the new nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h:83,Modifiability,variab,variable,83,/// Return an MCExpr to use for a reference to the specified type info global; /// variable from exception handling information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h:62,Testability,stub,stub,62,/// The mach-o version of this method defaults to returning a stub reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetLoweringObjectFileImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetOpcodes.h:37,Performance,optimiz,optimization,37,/// \returns true if \p Opcode is an optimization hint opcode which is not; /// supposed to appear after ISel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetOpcodes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetOpcodes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:430,Deployability,Configurat,Configuration,430,"//===- TargetPassConfig.h - Code Generation pass options --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Target-Independent Code Generator Pass Configuration Options pass.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:430,Modifiability,Config,Configuration,430,"//===- TargetPassConfig.h - Code Generation pass options --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Target-Independent Code Generator Pass Configuration Options pass.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:373,Availability,redundant,redundant,373,"/// Discriminated union of Pass ID types.; ///; /// The PassConfig API prefers dealing with IDs because they are safer and more; /// efficient. IDs decouple configuration from instantiation. This way, when a; /// pass is overriden, it isn't unnecessarily instantiated. It is also unsafe to; /// refer to a Pass pointer after adding it to a pass manager, which deletes; /// redundant pass instances.; ///; /// However, it is convient to directly instantiate target passes with; /// non-default ctors. These often don't have a registered PassInfo. Rather than; /// force all target passes to implement the pass registry boilerplate, allow; /// the PassConfig API to handle either type.; ///; /// AnalysisID is sadly char*, so PointerIntPair won't work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:157,Deployability,configurat,configuration,157,"/// Discriminated union of Pass ID types.; ///; /// The PassConfig API prefers dealing with IDs because they are safer and more; /// efficient. IDs decouple configuration from instantiation. This way, when a; /// pass is overriden, it isn't unnecessarily instantiated. It is also unsafe to; /// refer to a Pass pointer after adding it to a pass manager, which deletes; /// redundant pass instances.; ///; /// However, it is convient to directly instantiate target passes with; /// non-default ctors. These often don't have a registered PassInfo. Rather than; /// force all target passes to implement the pass registry boilerplate, allow; /// the PassConfig API to handle either type.; ///; /// AnalysisID is sadly char*, so PointerIntPair won't work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:133,Energy Efficiency,efficient,efficient,133,"/// Discriminated union of Pass ID types.; ///; /// The PassConfig API prefers dealing with IDs because they are safer and more; /// efficient. IDs decouple configuration from instantiation. This way, when a; /// pass is overriden, it isn't unnecessarily instantiated. It is also unsafe to; /// refer to a Pass pointer after adding it to a pass manager, which deletes; /// redundant pass instances.; ///; /// However, it is convient to directly instantiate target passes with; /// non-default ctors. These often don't have a registered PassInfo. Rather than; /// force all target passes to implement the pass registry boilerplate, allow; /// the PassConfig API to handle either type.; ///; /// AnalysisID is sadly char*, so PointerIntPair won't work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:157,Modifiability,config,configuration,157,"/// Discriminated union of Pass ID types.; ///; /// The PassConfig API prefers dealing with IDs because they are safer and more; /// efficient. IDs decouple configuration from instantiation. This way, when a; /// pass is overriden, it isn't unnecessarily instantiated. It is also unsafe to; /// refer to a Pass pointer after adding it to a pass manager, which deletes; /// redundant pass instances.; ///; /// However, it is convient to directly instantiate target passes with; /// non-default ctors. These often don't have a registered PassInfo. Rather than; /// force all target passes to implement the pass registry boilerplate, allow; /// the PassConfig API to handle either type.; ///; /// AnalysisID is sadly char*, so PointerIntPair won't work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:113,Safety,safe,safer,113,"/// Discriminated union of Pass ID types.; ///; /// The PassConfig API prefers dealing with IDs because they are safer and more; /// efficient. IDs decouple configuration from instantiation. This way, when a; /// pass is overriden, it isn't unnecessarily instantiated. It is also unsafe to; /// refer to a Pass pointer after adding it to a pass manager, which deletes; /// redundant pass instances.; ///; /// However, it is convient to directly instantiate target passes with; /// non-default ctors. These often don't have a registered PassInfo. Rather than; /// force all target passes to implement the pass registry boilerplate, allow; /// the PassConfig API to handle either type.; ///; /// AnalysisID is sadly char*, so PointerIntPair won't work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:280,Safety,unsafe,unsafe,280,"/// Discriminated union of Pass ID types.; ///; /// The PassConfig API prefers dealing with IDs because they are safer and more; /// efficient. IDs decouple configuration from instantiation. This way, when a; /// pass is overriden, it isn't unnecessarily instantiated. It is also unsafe to; /// refer to a Pass pointer after adding it to a pass manager, which deletes; /// redundant pass instances.; ///; /// However, it is convient to directly instantiate target passes with; /// non-default ctors. These often don't have a registered PassInfo. Rather than; /// force all target passes to implement the pass registry boilerplate, allow; /// the PassConfig API to handle either type.; ///; /// AnalysisID is sadly char*, so PointerIntPair won't work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:373,Safety,redund,redundant,373,"/// Discriminated union of Pass ID types.; ///; /// The PassConfig API prefers dealing with IDs because they are safer and more; /// efficient. IDs decouple configuration from instantiation. This way, when a; /// pass is overriden, it isn't unnecessarily instantiated. It is also unsafe to; /// refer to a Pass pointer after adding it to a pass manager, which deletes; /// redundant pass instances.; ///; /// However, it is convient to directly instantiate target passes with; /// non-default ctors. These often don't have a registered PassInfo. Rather than; /// force all target passes to implement the pass registry boilerplate, allow; /// the PassConfig API to handle either type.; ///; /// AnalysisID is sadly char*, so PointerIntPair won't work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:43,Deployability,Configurat,Configuration,43,/// Target-Independent Code Generator Pass Configuration Options.; ///; /// This is an ImmutablePass solely for the purpose of exposing CodeGen options; /// to the internals of other CodeGen passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:43,Modifiability,Config,Configuration,43,/// Target-Independent Code Generator Pass Configuration Options.; ///; /// This is an ImmutablePass solely for the purpose of exposing CodeGen options; /// to the internals of other CodeGen passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:258,Usability,clear,clear,258,"/// Set the StartAfter, StartBefore and StopAfter passes to allow running only; /// a portion of the normal code-gen pass sequence.; ///; /// If the StartAfter and StartBefore pass ID is zero, then compilation will; /// begin at the normal point; otherwise, clear the Started flag to indicate; /// that passes should not be added until the starting pass is seen. If the; /// Stop pass ID is zero, then compilation will continue to the end.; ///; /// This function expects that at least one of the StartAfter or the; /// StartBefore pass IDs is null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:32,Modifiability,config,configured,32,"// Flagged after all passes are configured.; // Target Pass Options; // Targets provide a default setting, user flags override.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:126,Performance,load,load,126,/// Enable sinking of instructions in MachineSink where a computation can be; /// folded into the addressing mode of a memory load/store instruction or; /// replace a copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:127,Deployability,pipeline,pipeline,127,"/// If hasLimitedCodeGenPipeline is true, this method returns; /// a string with the name of the options that caused this; /// pipeline to be limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:82,Deployability,pipeline,pipeline,82,"/// Allow the target to override a specific pass without overriding the pass; /// pipeline. When passes are added to the standard pipeline at the; /// point where StandardID is expected, add TargetID in its place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:130,Deployability,pipeline,pipeline,130,"/// Allow the target to override a specific pass without overriding the pass; /// pipeline. When passes are added to the standard pipeline at the; /// point where StandardID is expected, add TargetID in its place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:42,Deployability,pipeline,pipeline,42,/// Return true if the optimized regalloc pipeline is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:23,Performance,optimiz,optimized,23,/// Return true if the optimized regalloc pipeline is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:269,Availability,error,error,269,"/// High level function that adds all passes necessary to go from llvm IR; /// representation to the MI representation.; /// Adds IR based lowering and target specific optimization passes and finally; /// the core instruction selection passes.; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:168,Performance,optimiz,optimization,168,"/// High level function that adds all passes necessary to go from llvm IR; /// representation to the MI representation.; /// Adds IR based lowering and target specific optimization passes and finally; /// the core instruction selection passes.; /// \returns true if an error occurred, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:22,Modifiability,config,configurable,22,/// Add common target configurable passes that perform LLVM IR to IR; /// transforms following machine independent optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:47,Performance,perform,perform,47,/// Add common target configurable passes that perform LLVM IR to IR; /// transforms following machine independent optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:115,Performance,optimiz,optimization,115,/// Add common target configurable passes that perform LLVM IR to IR; /// transforms following machine independent optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:27,Performance,perform,perform,27,/// Add common passes that perform LLVM IR to IR transforms in preparation for; /// instruction selection.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:41,Deployability,install,install,41,"/// addInstSelector - This method should install an instruction selector pass,; /// which converts from LLVM code to machine instructions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:23,Deployability,install,install,23,"/// This method should install an IR translator pass, which converts from; /// LLVM code to machine instructions with possibly generic opcodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:23,Deployability,install,install,23,"/// This method should install a legalize pass, which converts the instruction; /// sequence into one that can be selected by the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:23,Deployability,install,install,23,"/// This method should install a register bank selector pass, which; /// assigns register banks to virtual registers without a register; /// class or register banks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:23,Deployability,install,install,23,"/// This method should install a (global) instruction selector pass, which; /// converts possibly generic instructions to fully target-specific; /// instructions, thereby constraining all generic virtual registers to; /// register classes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:26,Energy Efficiency,Schedul,ScheduleDAGInstrs,26,"/// Create an instance of ScheduleDAGInstrs to be run within the standard; /// MachineScheduler pass for this function and target at the current; /// optimization level.; ///; /// This can also be used to plug a new MachineSchedStrategy into an instance; /// of the standard ScheduleDAGMI:; /// return new ScheduleDAGMI(C, std::make_unique<MyStrategy>(C), /*RemoveKillFlags=*/false); ///; /// Return NULL to select the default (generic) machine scheduler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:275,Energy Efficiency,Schedul,ScheduleDAGMI,275,"/// Create an instance of ScheduleDAGInstrs to be run within the standard; /// MachineScheduler pass for this function and target at the current; /// optimization level.; ///; /// This can also be used to plug a new MachineSchedStrategy into an instance; /// of the standard ScheduleDAGMI:; /// return new ScheduleDAGMI(C, std::make_unique<MyStrategy>(C), /*RemoveKillFlags=*/false); ///; /// Return NULL to select the default (generic) machine scheduler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:306,Energy Efficiency,Schedul,ScheduleDAGMI,306,"/// Create an instance of ScheduleDAGInstrs to be run within the standard; /// MachineScheduler pass for this function and target at the current; /// optimization level.; ///; /// This can also be used to plug a new MachineSchedStrategy into an instance; /// of the standard ScheduleDAGMI:; /// return new ScheduleDAGMI(C, std::make_unique<MyStrategy>(C), /*RemoveKillFlags=*/false); ///; /// Return NULL to select the default (generic) machine scheduler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:445,Energy Efficiency,schedul,scheduler,445,"/// Create an instance of ScheduleDAGInstrs to be run within the standard; /// MachineScheduler pass for this function and target at the current; /// optimization level.; ///; /// This can also be used to plug a new MachineSchedStrategy into an instance; /// of the standard ScheduleDAGMI:; /// return new ScheduleDAGMI(C, std::make_unique<MyStrategy>(C), /*RemoveKillFlags=*/false); ///; /// Return NULL to select the default (generic) machine scheduler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:150,Performance,optimiz,optimization,150,"/// Create an instance of ScheduleDAGInstrs to be run within the standard; /// MachineScheduler pass for this function and target at the current; /// optimization level.; ///; /// This can also be used to plug a new MachineSchedStrategy into an instance; /// of the standard ScheduleDAGMI:; /// return new ScheduleDAGMI(C, std::make_unique<MyStrategy>(C), /*RemoveKillFlags=*/false); ///; /// Return NULL to select the default (generic) machine scheduler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:67,Energy Efficiency,schedul,scheduling,67,/// Similar to createMachineScheduler but used when postRA machine scheduling; /// is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:18,Performance,perform,perform,18,/// Add a pass to perform basic verification of the machine function if; /// verification is enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:52,Availability,error,error,52,"/// Check whether or not GlobalISel should abort on error.; /// When this is disabled, GlobalISel will fall back on SDISel instead of; /// erroring out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:139,Availability,error,erroring,139,"/// Check whether or not GlobalISel should abort on error.; /// When this is disabled, GlobalISel will fall back on SDISel instead of; /// erroring out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:43,Safety,abort,abort,43,"/// Check whether or not GlobalISel should abort on error.; /// When this is disabled, GlobalISel will fall back on SDISel instead of; /// erroring out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:18,Deployability,continuous,continuous,18,"/// Check whether continuous CSE should be enabled in GISel passes.; /// By default, it's enabled for non O0 levels.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:56,Performance,optimiz,optimization,56,/// Returns the CSEConfig object to use for the current optimization level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:94,Deployability,pipeline,pipeline,94,"/// Methods with trivial inline returns are convenient points in the common; /// codegen pass pipeline where targets may insert passes. Methods with; /// out-of-line standard implementations are major CodeGen stages called by; /// addMachinePasses. Some targets may override major stages when inserting; /// passes is insufficient, but maintaining overriden stages is more work.; ///; /// addPreISelPasses - This method should add any ""last minute"" LLVM->LLVM; /// passes (which are run just before instruction selector).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:57,Performance,optimiz,optimize,57,/// addMachineSSAOptimization - Add standard passes that optimize machine; /// instructions in SSA form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:20,Performance,optimiz,optimize,20,"/// Add passes that optimize instruction level parallelism for out-of-order; /// targets. These passes are run while the machine code is still in SSA; /// form, so they can use MachineTraceMetrics to control their heuristics.; ///; /// All passes added here should preserve the MachineDominatorTree,; /// MachineLoopInfo, and MachineTraceMetrics analyses.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:107,Performance,optimiz,optimization,107,/// createTargetRegisterAllocator - Create the register allocator pass for; /// this target at the current optimization level.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:68,Deployability,pipeline,pipeline,68,"/// addPreRewrite - Add passes to the optimized register allocation pipeline; /// after register allocation is complete, but before virtual registers are; /// rewritten to physical registers.; ///; /// These passes must preserve VirtRegMap and LiveIntervals, and when running; /// after RABasic or RAGreedy, they should take advantage of LiveRegMatrix.; /// When these passes run, VirtRegMap contains legal physreg assignments for; /// all virtual registers.; ///; /// Note if the target overloads addRegAssignAndRewriteOptimized, this may not; /// be honored. This is also not generally used for the fast variant,; /// where the allocation and rewriting are done in one pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:38,Performance,optimiz,optimized,38,"/// addPreRewrite - Add passes to the optimized register allocation pipeline; /// after register allocation is complete, but before virtual registers are; /// rewritten to physical registers.; ///; /// These passes must preserve VirtRegMap and LiveIntervals, and when running; /// after RABasic or RAGreedy, they should take advantage of LiveRegMatrix.; /// When these passes run, VirtRegMap contains legal physreg assignments for; /// all virtual registers.; ///; /// Note if the target overloads addRegAssignAndRewriteOptimized, this may not; /// be honored. This is also not generally used for the fast variant,; /// where the allocation and rewriting are done in one pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:86,Deployability,pipeline,pipeline,86,/// addPostFastRegAllocRewrite - Add passes to the optimized register; /// allocation pipeline after fast register allocation is complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:51,Performance,optimiz,optimized,51,/// addPostFastRegAllocRewrite - Add passes to the optimized register; /// allocation pipeline after fast register allocation is complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:106,Deployability,pipeline,pipeline,106,/// This method may be implemented by targets that want to run passes after; /// register allocation pass pipeline but before prolog-epilog insertion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:20,Performance,optimiz,optimize,20,/// Add passes that optimize machine instructions after register allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:139,Energy Efficiency,schedul,scheduling,139,/// This method may be implemented by targets that want to run passes after; /// prolog-epilog insertion and before the second instruction scheduling pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h:111,Deployability,pipeline,pipeline,111,"/// Utilities for targets to add passes to the pass manager.; ///; /// Add a CodeGen pass at this point in the pipeline after checking overrides.; /// Return the pass that was added, or zero if no pass was added.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetPassConfig.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:415,Integrability,interface,interface,415,"//==- CodeGen/TargetRegisterInfo.h - Target Register Information -*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file describes an abstract interface used to get information about a; // target machines register file. This information is used for a variety of; // purposed, especially register allocation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:12,Modifiability,variab,variables,12,"// Instance variables filled by tablegen, do not use!",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:4,Modifiability,Config,Configurable,4,/// Configurable target specific flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:257,Energy Efficiency,allocate,allocate,257,"/// Returns the preferred order for allocating registers from this register; /// class in MF. The raw order comes directly from the .td file and may; /// include reserved registers that are not allocatable.; /// Register allocators should also make sure to allocate; /// callee-saved registers only after all the volatiles are used. The; /// RegisterClassInfo class provides filtered allocation orders with; /// callee-saved registers moved to the end.; ///; /// The MachineFunction argument can be used to tune the allocatable; /// registers based on the characteristics of the function, subtarget, or; /// other criteria.; ///; /// By default, this method returns all registers in the class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:507,Performance,tune,tune,507,"/// Returns the preferred order for allocating registers from this register; /// class in MF. The raw order comes directly from the .td file and may; /// include reserved registers that are not allocatable.; /// Register allocators should also make sure to allocate; /// callee-saved registers only after all the volatiles are used. The; /// RegisterClassInfo class provides filtered allocation orders with; /// callee-saved registers moved to the end.; ///; /// The MachineFunction argument can be used to tune the allocatable; /// registers based on the characteristics of the function, subtarget, or; /// other criteria.; ///; /// By default, this method returns all registers in the class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:40,Availability,mask,masks,40,/// Returns the combination of all lane masks of register in this class.; /// The lane masks of the registers are the combination of all lane masks; /// of their subregisters. Returns 1 if there are no subregisters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:87,Availability,mask,masks,87,/// Returns the combination of all lane masks of register in this class.; /// The lane masks of the registers are the combination of all lane masks; /// of their subregisters. Returns 1 if there are no subregisters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:142,Availability,mask,masks,142,/// Returns the combination of all lane masks of register in this class.; /// The lane masks of the registers are the combination of all lane masks; /// of their subregisters. Returns 1 if there are no subregisters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:202,Usability,simpl,simply,202,"/// TargetRegisterInfo base class - We assume that the target defines a static; /// array of TargetRegisterDesc objects that represent all of the machine; /// registers that the target has. As such, we simply have to track a pointer; /// to this array so that we can turn register number into a register; /// descriptor.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:57,Availability,mask,masks,57,"// Names of subreg indexes.; // Pointer to array of lane masks, one per sub-reg index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:406,Energy Efficiency,allocate,allocated,406,"// Register numbers can represent physical registers, virtual registers, and; // sometimes stack slots. The unsigned values are divided into these ranges:; //; // 0 Not a register, can be used as a sentinel.; // [1;2^30) Physical registers assigned by TableGen.; // [2^30;2^31) Stack slots. (Rarely used.); // [2^31;2^32) Virtual registers assigned by MachineRegisterInfo.; //; // Further sentinels can be allocated from the small negative integers.; // DenseMapInfo<unsigned> uses -1u and -2u.; /// Return the size in bits of a register from class RC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:47,Energy Efficiency,allocate,allocated,47,/// Return the size in bytes of the stack slot allocated to hold a spilled; /// copy of a register from class RC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:158,Availability,mask,mask,158,"/// Return a bitmask representing the parts of a register that are covered by; /// SubIdx \see LaneBitmask.; ///; /// SubIdx == 0 is allowed, it has the lane mask ~0u.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:13,Availability,mask,masks,13,"/// The lane masks returned by getSubRegIndexLaneMask() above can only be; /// used to determine if sub-registers overlap - they can't be used to; /// determine if a set of sub-registers completely cover another; /// sub-register.; ///; /// The X86 general purpose registers have two lanes corresponding to the; /// sub_8bit and sub_8bit_hi sub-registers. Both sub_32bit and sub_16bit have; /// lane masks '3', but the sub_16bit sub-register doesn't fully cover the; /// sub_32bit sub-register.; ///; /// On the other hand, the ARM NEON lanes fully cover their registers: The; /// dsub_0 sub-register is completely covered by the ssub_0 and ssub_1 lanes.; /// This is related to the CoveredBySubRegs property on register definitions.; ///; /// This function returns a bit mask of lanes that completely cover their; /// sub-registers. More precisely, given:; ///; /// Covering = getCoveringLanes();; /// MaskA = getSubRegIndexLaneMask(SubA);; /// MaskB = getSubRegIndexLaneMask(SubB);; ///; /// If (MaskA & ~(MaskB & Covering)) == 0, then SubA is completely covered by; /// SubB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:400,Availability,mask,masks,400,"/// The lane masks returned by getSubRegIndexLaneMask() above can only be; /// used to determine if sub-registers overlap - they can't be used to; /// determine if a set of sub-registers completely cover another; /// sub-register.; ///; /// The X86 general purpose registers have two lanes corresponding to the; /// sub_8bit and sub_8bit_hi sub-registers. Both sub_32bit and sub_16bit have; /// lane masks '3', but the sub_16bit sub-register doesn't fully cover the; /// sub_32bit sub-register.; ///; /// On the other hand, the ARM NEON lanes fully cover their registers: The; /// dsub_0 sub-register is completely covered by the ssub_0 and ssub_1 lanes.; /// This is related to the CoveredBySubRegs property on register definitions.; ///; /// This function returns a bit mask of lanes that completely cover their; /// sub-registers. More precisely, given:; ///; /// Covering = getCoveringLanes();; /// MaskA = getSubRegIndexLaneMask(SubA);; /// MaskB = getSubRegIndexLaneMask(SubB);; ///; /// If (MaskA & ~(MaskB & Covering)) == 0, then SubA is completely covered by; /// SubB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:772,Availability,mask,mask,772,"/// The lane masks returned by getSubRegIndexLaneMask() above can only be; /// used to determine if sub-registers overlap - they can't be used to; /// determine if a set of sub-registers completely cover another; /// sub-register.; ///; /// The X86 general purpose registers have two lanes corresponding to the; /// sub_8bit and sub_8bit_hi sub-registers. Both sub_32bit and sub_16bit have; /// lane masks '3', but the sub_16bit sub-register doesn't fully cover the; /// sub_32bit sub-register.; ///; /// On the other hand, the ARM NEON lanes fully cover their registers: The; /// dsub_0 sub-register is completely covered by the ssub_0 and ssub_1 lanes.; /// This is related to the CoveredBySubRegs property on register definitions.; ///; /// This function returns a bit mask of lanes that completely cover their; /// sub-registers. More precisely, given:; ///; /// Covering = getCoveringLanes();; /// MaskA = getSubRegIndexLaneMask(SubA);; /// MaskB = getSubRegIndexLaneMask(SubB);; ///; /// If (MaskA & ~(MaskB & Covering)) == 0, then SubA is completely covered by; /// SubB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:903,Availability,Mask,MaskA,903,"/// The lane masks returned by getSubRegIndexLaneMask() above can only be; /// used to determine if sub-registers overlap - they can't be used to; /// determine if a set of sub-registers completely cover another; /// sub-register.; ///; /// The X86 general purpose registers have two lanes corresponding to the; /// sub_8bit and sub_8bit_hi sub-registers. Both sub_32bit and sub_16bit have; /// lane masks '3', but the sub_16bit sub-register doesn't fully cover the; /// sub_32bit sub-register.; ///; /// On the other hand, the ARM NEON lanes fully cover their registers: The; /// dsub_0 sub-register is completely covered by the ssub_0 and ssub_1 lanes.; /// This is related to the CoveredBySubRegs property on register definitions.; ///; /// This function returns a bit mask of lanes that completely cover their; /// sub-registers. More precisely, given:; ///; /// Covering = getCoveringLanes();; /// MaskA = getSubRegIndexLaneMask(SubA);; /// MaskB = getSubRegIndexLaneMask(SubB);; ///; /// If (MaskA & ~(MaskB & Covering)) == 0, then SubA is completely covered by; /// SubB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:946,Availability,Mask,MaskB,946,"/// The lane masks returned by getSubRegIndexLaneMask() above can only be; /// used to determine if sub-registers overlap - they can't be used to; /// determine if a set of sub-registers completely cover another; /// sub-register.; ///; /// The X86 general purpose registers have two lanes corresponding to the; /// sub_8bit and sub_8bit_hi sub-registers. Both sub_32bit and sub_16bit have; /// lane masks '3', but the sub_16bit sub-register doesn't fully cover the; /// sub_32bit sub-register.; ///; /// On the other hand, the ARM NEON lanes fully cover their registers: The; /// dsub_0 sub-register is completely covered by the ssub_0 and ssub_1 lanes.; /// This is related to the CoveredBySubRegs property on register definitions.; ///; /// This function returns a bit mask of lanes that completely cover their; /// sub-registers. More precisely, given:; ///; /// Covering = getCoveringLanes();; /// MaskA = getSubRegIndexLaneMask(SubA);; /// MaskB = getSubRegIndexLaneMask(SubB);; ///; /// If (MaskA & ~(MaskB & Covering)) == 0, then SubA is completely covered by; /// SubB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:998,Availability,Mask,MaskA,998,"/// The lane masks returned by getSubRegIndexLaneMask() above can only be; /// used to determine if sub-registers overlap - they can't be used to; /// determine if a set of sub-registers completely cover another; /// sub-register.; ///; /// The X86 general purpose registers have two lanes corresponding to the; /// sub_8bit and sub_8bit_hi sub-registers. Both sub_32bit and sub_16bit have; /// lane masks '3', but the sub_16bit sub-register doesn't fully cover the; /// sub_32bit sub-register.; ///; /// On the other hand, the ARM NEON lanes fully cover their registers: The; /// dsub_0 sub-register is completely covered by the ssub_0 and ssub_1 lanes.; /// This is related to the CoveredBySubRegs property on register definitions.; ///; /// This function returns a bit mask of lanes that completely cover their; /// sub-registers. More precisely, given:; ///; /// Covering = getCoveringLanes();; /// MaskA = getSubRegIndexLaneMask(SubA);; /// MaskB = getSubRegIndexLaneMask(SubB);; ///; /// If (MaskA & ~(MaskB & Covering)) == 0, then SubA is completely covered by; /// SubB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:1008,Availability,Mask,MaskB,1008,"/// The lane masks returned by getSubRegIndexLaneMask() above can only be; /// used to determine if sub-registers overlap - they can't be used to; /// determine if a set of sub-registers completely cover another; /// sub-register.; ///; /// The X86 general purpose registers have two lanes corresponding to the; /// sub_8bit and sub_8bit_hi sub-registers. Both sub_32bit and sub_16bit have; /// lane masks '3', but the sub_16bit sub-register doesn't fully cover the; /// sub_32bit sub-register.; ///; /// On the other hand, the ARM NEON lanes fully cover their registers: The; /// dsub_0 sub-register is completely covered by the ssub_0 and ssub_1 lanes.; /// This is related to the CoveredBySubRegs property on register definitions.; ///; /// This function returns a bit mask of lanes that completely cover their; /// sub-registers. More precisely, given:; ///; /// Covering = getCoveringLanes();; /// MaskA = getSubRegIndexLaneMask(SubA);; /// MaskB = getSubRegIndexLaneMask(SubB);; ///; /// If (MaskA & ~(MaskB & Covering)) == 0, then SubA is completely covered by; /// SubB.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:256,Availability,down,down,256,"/// Return a null-terminated list of all of the callee-saved registers on; /// this target. The register should be in the order of desired callee-save; /// stack frame offset. The first register is closest to the incoming stack; /// pointer if stack grows down, and vice versa.; /// Notice: This function does not take into account disabled CSRs.; /// In most cases you will want to use instead the function; /// getCalleeSavedRegs that is implemented in MachineRegisterInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:13,Availability,mask,mask,13,"/// Return a mask of call-preserved registers for the given calling convention; /// on the current function. The mask should include all call-preserved; /// aliases. This is used by the register allocator to determine which; /// registers can be live across a call.; ///; /// The mask is an array containing (TRI::getNumRegs()+31)/32 entries.; /// A set bit indicates that all bits of the corresponding register are; /// preserved across the function call. The bit mask is expected to be; /// sub-register complete, i.e. if A is preserved, so are all its; /// sub-registers.; ///; /// Bits are numbered from the LSB, so the bit for physical register Reg can; /// be found as (Mask[Reg / 32] >> Reg % 32) & 1.; ///; /// A NULL pointer means that no register mask will be used, and call; /// instructions should use implicit-def operands to indicate call clobbered; /// registers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:113,Availability,mask,mask,113,"/// Return a mask of call-preserved registers for the given calling convention; /// on the current function. The mask should include all call-preserved; /// aliases. This is used by the register allocator to determine which; /// registers can be live across a call.; ///; /// The mask is an array containing (TRI::getNumRegs()+31)/32 entries.; /// A set bit indicates that all bits of the corresponding register are; /// preserved across the function call. The bit mask is expected to be; /// sub-register complete, i.e. if A is preserved, so are all its; /// sub-registers.; ///; /// Bits are numbered from the LSB, so the bit for physical register Reg can; /// be found as (Mask[Reg / 32] >> Reg % 32) & 1.; ///; /// A NULL pointer means that no register mask will be used, and call; /// instructions should use implicit-def operands to indicate call clobbered; /// registers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:280,Availability,mask,mask,280,"/// Return a mask of call-preserved registers for the given calling convention; /// on the current function. The mask should include all call-preserved; /// aliases. This is used by the register allocator to determine which; /// registers can be live across a call.; ///; /// The mask is an array containing (TRI::getNumRegs()+31)/32 entries.; /// A set bit indicates that all bits of the corresponding register are; /// preserved across the function call. The bit mask is expected to be; /// sub-register complete, i.e. if A is preserved, so are all its; /// sub-registers.; ///; /// Bits are numbered from the LSB, so the bit for physical register Reg can; /// be found as (Mask[Reg / 32] >> Reg % 32) & 1.; ///; /// A NULL pointer means that no register mask will be used, and call; /// instructions should use implicit-def operands to indicate call clobbered; /// registers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:465,Availability,mask,mask,465,"/// Return a mask of call-preserved registers for the given calling convention; /// on the current function. The mask should include all call-preserved; /// aliases. This is used by the register allocator to determine which; /// registers can be live across a call.; ///; /// The mask is an array containing (TRI::getNumRegs()+31)/32 entries.; /// A set bit indicates that all bits of the corresponding register are; /// preserved across the function call. The bit mask is expected to be; /// sub-register complete, i.e. if A is preserved, so are all its; /// sub-registers.; ///; /// Bits are numbered from the LSB, so the bit for physical register Reg can; /// be found as (Mask[Reg / 32] >> Reg % 32) & 1.; ///; /// A NULL pointer means that no register mask will be used, and call; /// instructions should use implicit-def operands to indicate call clobbered; /// registers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:676,Availability,Mask,Mask,676,"/// Return a mask of call-preserved registers for the given calling convention; /// on the current function. The mask should include all call-preserved; /// aliases. This is used by the register allocator to determine which; /// registers can be live across a call.; ///; /// The mask is an array containing (TRI::getNumRegs()+31)/32 entries.; /// A set bit indicates that all bits of the corresponding register are; /// preserved across the function call. The bit mask is expected to be; /// sub-register complete, i.e. if A is preserved, so are all its; /// sub-registers.; ///; /// Bits are numbered from the LSB, so the bit for physical register Reg can; /// be found as (Mask[Reg / 32] >> Reg % 32) & 1.; ///; /// A NULL pointer means that no register mask will be used, and call; /// instructions should use implicit-def operands to indicate call clobbered; /// registers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:757,Availability,mask,mask,757,"/// Return a mask of call-preserved registers for the given calling convention; /// on the current function. The mask should include all call-preserved; /// aliases. This is used by the register allocator to determine which; /// registers can be live across a call.; ///; /// The mask is an array containing (TRI::getNumRegs()+31)/32 entries.; /// A set bit indicates that all bits of the corresponding register are; /// preserved across the function call. The bit mask is expected to be; /// sub-register complete, i.e. if A is preserved, so are all its; /// sub-registers.; ///; /// Bits are numbered from the LSB, so the bit for physical register Reg can; /// be found as (Mask[Reg / 32] >> Reg % 32) & 1.; ///; /// A NULL pointer means that no register mask will be used, and call; /// instructions should use implicit-def operands to indicate call clobbered; /// registers.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:15,Availability,mask,mask,15,// The default mask clobbers everything. All targets should override.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:22,Availability,mask,mask,22,"/// Return a register mask for the registers preserved by the unwinder,; /// or nullptr if no custom mask is needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:101,Availability,mask,mask,101,"/// Return a register mask for the registers preserved by the unwinder,; /// or nullptr if no custom mask is needed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:22,Availability,mask,mask,22,/// Return a register mask that clobbers everything.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:44,Availability,mask,mask,44,/// Return true if all bits that are set in mask \p mask0 are also set in; /// \p mask1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:43,Availability,mask,masks,43,/// Return all the call-preserved register masks defined for this target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:467,Energy Efficiency,allocate,allocated,467,"/// Returns a bitset indexed by physical register number indicating if a; /// register is a special register that has particular uses and should be; /// considered unavailable at all times, e.g. stack pointer, return address.; /// A reserved register:; /// - is not allocatable; /// - is considered always live; /// - is ignored by liveness tracking; /// It is often necessary to reserve the super registers of a reserved; /// register as well, to avoid them getting allocated indirectly. You may use; /// markSuperRegs() and checkAllSuperRegsMarked() in this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:448,Safety,avoid,avoid,448,"/// Returns a bitset indexed by physical register number indicating if a; /// register is a special register that has particular uses and should be; /// considered unavailable at all times, e.g. stack pointer, return address.; /// A reserved register:; /// - is not allocatable; /// - is considered always live; /// - is ignored by liveness tracking; /// It is often necessary to reserve the super registers of a reserved; /// register as well, to avoid them getting allocated indirectly. You may use; /// markSuperRegs() and checkAllSuperRegsMarked() in this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:203,Deployability,update,updated,203,/// Physical registers that may be modified within a function but are; /// guaranteed to be restored before any uses. This is useful for targets that; /// have call sequences where a GOT register may be updated by the caller; /// prior to a call and is guaranteed to be restored (also by the caller); /// after the call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:14,Integrability,wrap,wrapper,14,/// This is a wrapper around getCallPreservedMask().; /// Return true if the register is preserved after the call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:33,Availability,mask,mask,33,"/// Prior to adding the live-out mask to a stackmap or patchpoint; /// instruction, provide the target the opportunity to adjust it (mainly to; /// remove pseudo-registers that should be ignored).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:55,Deployability,patch,patchpoint,55,"/// Prior to adding the live-out mask to a stackmap or patchpoint; /// instruction, provide the target the opportunity to adjust it (mainly to; /// remove pseudo-registers that should be ignored).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:201,Availability,Mask,Mask,201,"/// Transform a lanemask given for a virtual register to the corresponding; /// lanemask before using subregister with index \p IdxA.; /// This is the reverse of composeSubRegIndexLaneMask(), assuming Mask is a; /// valie lane mask (no invalid bits set) the following holds:; /// X0 = composeSubRegIndexLaneMask(Idx, Mask); /// X1 = reverseComposeSubRegIndexLaneMask(Idx, X0); /// => X1 == Mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:227,Availability,mask,mask,227,"/// Transform a lanemask given for a virtual register to the corresponding; /// lanemask before using subregister with index \p IdxA.; /// This is the reverse of composeSubRegIndexLaneMask(), assuming Mask is a; /// valie lane mask (no invalid bits set) the following holds:; /// X0 = composeSubRegIndexLaneMask(Idx, Mask); /// X1 = reverseComposeSubRegIndexLaneMask(Idx, X0); /// => X1 == Mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:317,Availability,Mask,Mask,317,"/// Transform a lanemask given for a virtual register to the corresponding; /// lanemask before using subregister with index \p IdxA.; /// This is the reverse of composeSubRegIndexLaneMask(), assuming Mask is a; /// valie lane mask (no invalid bits set) the following holds:; /// X0 = composeSubRegIndexLaneMask(Idx, Mask); /// X1 = reverseComposeSubRegIndexLaneMask(Idx, X0); /// => X1 == Mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:390,Availability,Mask,Mask,390,"/// Transform a lanemask given for a virtual register to the corresponding; /// lanemask before using subregister with index \p IdxA.; /// This is the reverse of composeSubRegIndexLaneMask(), assuming Mask is a; /// valie lane mask (no invalid bits set) the following holds:; /// X0 = composeSubRegIndexLaneMask(Idx, Mask); /// X1 = reverseComposeSubRegIndexLaneMask(Idx, X0); /// => X1 == Mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:93,Energy Efficiency,schedul,scheduler,93,"/// Return the register pressure ""high water mark"" for the specific register; /// class. The scheduler is in high register pressure mode (for the specific; /// register class) if it goes over the limit.; ///; /// Note: this is the old register pressure model that relies on a manually; /// specified representative register class per value type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:39,Energy Efficiency,schedul,scheduler,39,/// Return a heuristic for the machine scheduler to compare the profitability; /// of increasing one register pressure set versus another. The scheduler; /// will prefer increasing the register pressure of the set which returns; /// the largest value for this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:143,Energy Efficiency,schedul,scheduler,143,/// Return a heuristic for the machine scheduler to compare the profitability; /// of increasing one register pressure set versus another. The scheduler; /// will prefer increasing the register pressure of the set which returns; /// the largest value for this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:43,Deployability,update,update,43,"/// A callback to allow target a chance to update register allocation hints; /// when a register is ""changed"" (e.g. coalesced) to another register.; /// e.g. On ARM, some virtual registers should target register pairs,; /// if one of pair is coalesced to another register, the allocation hint of; /// the other half of the pair should be changed to point to the new register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:298,Availability,down,down,298,"/// Allow the target to reverse allocation order of local live ranges. This; /// will generally allocate shorter local live ranges first. For targets with; /// many registers, this could reduce regalloc compile time by a large; /// factor. It is disabled by default for three reasons:; /// (1) Top-down allocation is simpler and easier to debug for targets that; /// don't benefit from reversing the order.; /// (2) Bottom-up allocation could result in poor evicition decisions on some; /// targets affecting the performance of compiled code.; /// (3) Bottom-up allocation is no longer guaranteed to optimally color.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:96,Energy Efficiency,allocate,allocate,96,"/// Allow the target to reverse allocation order of local live ranges. This; /// will generally allocate shorter local live ranges first. For targets with; /// many registers, this could reduce regalloc compile time by a large; /// factor. It is disabled by default for three reasons:; /// (1) Top-down allocation is simpler and easier to debug for targets that; /// don't benefit from reversing the order.; /// (2) Bottom-up allocation could result in poor evicition decisions on some; /// targets affecting the performance of compiled code.; /// (3) Bottom-up allocation is no longer guaranteed to optimally color.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:187,Energy Efficiency,reduce,reduce,187,"/// Allow the target to reverse allocation order of local live ranges. This; /// will generally allocate shorter local live ranges first. For targets with; /// many registers, this could reduce regalloc compile time by a large; /// factor. It is disabled by default for three reasons:; /// (1) Top-down allocation is simpler and easier to debug for targets that; /// don't benefit from reversing the order.; /// (2) Bottom-up allocation could result in poor evicition decisions on some; /// targets affecting the performance of compiled code.; /// (3) Bottom-up allocation is no longer guaranteed to optimally color.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:513,Performance,perform,performance,513,"/// Allow the target to reverse allocation order of local live ranges. This; /// will generally allocate shorter local live ranges first. For targets with; /// many registers, this could reduce regalloc compile time by a large; /// factor. It is disabled by default for three reasons:; /// (1) Top-down allocation is simpler and easier to debug for targets that; /// don't benefit from reversing the order.; /// (2) Bottom-up allocation could result in poor evicition decisions on some; /// targets affecting the performance of compiled code.; /// (3) Bottom-up allocation is no longer guaranteed to optimally color.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:317,Usability,simpl,simpler,317,"/// Allow the target to reverse allocation order of local live ranges. This; /// will generally allocate shorter local live ranges first. For targets with; /// many registers, this could reduce regalloc compile time by a large; /// factor. It is disabled by default for three reasons:; /// (1) Top-down allocation is simpler and easier to debug for targets that; /// don't benefit from reversing the order.; /// (2) Bottom-up allocation could result in poor evicition decisions on some; /// targets affecting the performance of compiled code.; /// (3) Bottom-up allocation is no longer guaranteed to optimally color.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:175,Availability,avail,available,175,/// Allow the target to override the cost of using a callee-saved register for; /// the first time. Default value of 0 means we will use a callee-saved; /// register if it is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:64,Security,access,accesses,64,/// Returns true if the target wants to use frame pointer based accesses to; /// spill to the scavenger emergency spill slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:123,Energy Efficiency,efficient,efficient,123,/// Returns true if the target wants the LocalStackAllocation pass to be run; /// and virtual base registers used for more efficient stack access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:139,Security,access,access,139,/// Returns true if the target wants the LocalStackAllocation pass to be run; /// and virtual base registers used for more efficient stack access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:417,Availability,error,error,417,"/// Last chance recoloring has a high compile time cost especially for; /// targets with a lot of registers.; /// This method is used to decide whether or not \p VirtReg should; /// go through this expensive heuristic.; /// When this target hook is hit, by returning false, there is a high; /// chance that the register allocation will fail altogether (usually with; /// ""ran out of registers"").; /// That said, this error usually points to another problem in the; /// optimization pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:482,Deployability,pipeline,pipeline,482,"/// Last chance recoloring has a high compile time cost especially for; /// targets with a lot of registers.; /// This method is used to decide whether or not \p VirtReg should; /// go through this expensive heuristic.; /// When this target hook is hit, by returning false, there is a high; /// chance that the register allocation will fail altogether (usually with; /// ""ran out of registers"").; /// That said, this error usually points to another problem in the; /// optimization pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:469,Performance,optimiz,optimization,469,"/// Last chance recoloring has a high compile time cost especially for; /// targets with a lot of registers.; /// This method is used to decide whether or not \p VirtReg should; /// go through this expensive heuristic.; /// When this target hook is hit, by returning false, there is a high; /// chance that the register allocation will fail altogether (usually with; /// ""ran out of registers"").; /// That said, this error usually points to another problem in the; /// optimization pipeline.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:205,Energy Efficiency,allocate,allocated,205,//===--------------------------------------------------------------------===//; /// Debug information queries.; /// getFrameRegister - This method should return the register used as a base; /// for values allocated in the current stack frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:317,Availability,Mask,Mask,317,"//===----------------------------------------------------------------------===//; // SuperRegClassIterator; //===----------------------------------------------------------------------===//; //; // Iterate over the possible super-registers for a given register class. The; // iterator will visit a list of pairs (Idx, Mask) corresponding to the; // possible classes of super-registers.; //; // Each bit mask will have at least one set bit, and each set bit in Mask; // corresponds to a SuperRC such that:; //; // For all Reg in SuperRC: Reg:Idx is in RC.; //; // The iterator can include (O, RC->getSubClassMask()) as the first entry which; // also satisfies the above requirement, assuming Reg:0 == Reg.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:402,Availability,mask,mask,402,"//===----------------------------------------------------------------------===//; // SuperRegClassIterator; //===----------------------------------------------------------------------===//; //; // Iterate over the possible super-registers for a given register class. The; // iterator will visit a list of pairs (Idx, Mask) corresponding to the; // possible classes of super-registers.; //; // Each bit mask will have at least one set bit, and each set bit in Mask; // corresponds to a SuperRC such that:; //; // For all Reg in SuperRC: Reg:Idx is in RC.; //; // The iterator can include (O, RC->getSubClassMask()) as the first entry which; // also satisfies the above requirement, assuming Reg:0 == Reg.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:459,Availability,Mask,Mask,459,"//===----------------------------------------------------------------------===//; // SuperRegClassIterator; //===----------------------------------------------------------------------===//; //; // Iterate over the possible super-registers for a given register class. The; // iterator will visit a list of pairs (Idx, Mask) corresponding to the; // possible classes of super-registers.; //; // Each bit mask will have at least one set bit, and each set bit in Mask; // corresponds to a SuperRC such that:; //; // For all Reg in SuperRC: Reg:Idx is in RC.; //; // The iterator can include (O, RC->getSubClassMask()) as the first entry which; // also satisfies the above requirement, assuming Reg:0 == Reg.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:20,Availability,mask,mask,20,/// Returns the bit mask of register classes that getSubReg() projects into; /// RC.; /// See TargetRegisterClass::getSubClassMask() for how to use it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:221,Testability,log,logic,221,"//===----------------------------------------------------------------------===//; // BitMaskClassIterator; //===----------------------------------------------------------------------===//; /// This class encapuslates the logic to iterate over bitmask returned by; /// the various RegClass related APIs.; /// E.g., this class can be used to iterate over the subclasses provided by; /// TargetRegisterClass::getSubClassMask or SuperRegClassIterator::getMask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:4,Availability,Mask,Mask,4,/// Mask we are iterating over.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:25,Availability,Mask,Mask,25,/// Current chunk of the Mask we are traversing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:94,Availability,Mask,Mask,94,/// Create a BitMaskClassIterator that visits all the register classes; /// represented by \p Mask.; ///; /// \pre \p Mask != nullptr,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h:118,Availability,Mask,Mask,118,/// Create a BitMaskClassIterator that visits all the register classes; /// represented by \p Mask.; ///; /// \pre \p Mask != nullptr,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetRegisterInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:504,Availability,avail,available,504,"//===- llvm/CodeGen/TargetSchedule.h - Sched Machine Model ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper around MCSchedModel that allows the interface to; // benefit from information currently only available in TargetInstrInfo.; // Ideally, the scheduling interface would be fully defined in the MC layer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:551,Energy Efficiency,schedul,scheduling,551,"//===- llvm/CodeGen/TargetSchedule.h - Sched Machine Model ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper around MCSchedModel that allows the interface to; // benefit from information currently only available in TargetInstrInfo.; // Ideally, the scheduling interface would be fully defined in the MC layer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:403,Integrability,wrap,wrapper,403,"//===- llvm/CodeGen/TargetSchedule.h - Sched Machine Model ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper around MCSchedModel that allows the interface to; // benefit from information currently only available in TargetInstrInfo.; // Ideally, the scheduling interface would be fully defined in the MC layer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:447,Integrability,interface,interface,447,"//===- llvm/CodeGen/TargetSchedule.h - Sched Machine Model ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper around MCSchedModel that allows the interface to; // benefit from information currently only available in TargetInstrInfo.; // Ideally, the scheduling interface would be fully defined in the MC layer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:562,Integrability,interface,interface,562,"//===- llvm/CodeGen/TargetSchedule.h - Sched Machine Model ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines a wrapper around MCSchedModel that allows the interface to; // benefit from information currently only available in TargetInstrInfo.; // Ideally, the scheduling interface would be fully defined in the MC layer.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:27,Energy Efficiency,schedul,scheduling,27,/// Provide an instruction scheduling machine model to CodeGen passes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:29,Performance,Latency,Latency,29,// Resource units per cycle. Latency normalization factor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:49,Energy Efficiency,schedul,scheduling,49,/// Initialize the machine model for instruction scheduling.; ///; /// The machine model API keeps a copy of the top-level MCSchedModel table; /// indices and may query TargetSubtargetInfo and TargetInstrInfo to resolve; /// dynamic properties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:73,Energy Efficiency,schedul,scheduling,73,"/// Return true if this machine model includes an instruction-level; /// scheduling model.; ///; /// This is more detailed than the course grain IssueWidth and default; /// latency properties, but separate from the per-cycle itinerary data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:173,Performance,latency,latency,173,"/// Return true if this machine model includes an instruction-level; /// scheduling model.; ///; /// This is more detailed than the course grain IssueWidth and default; /// latency properties, but separate from the per-cycle itinerary data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:147,Deployability,pipeline,pipeline,147,/// Return true if this machine model includes cycle-to-cycle itinerary; /// data.; ///; /// This models scheduling at each stage in the processor pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:105,Energy Efficiency,schedul,scheduling,105,/// Return true if this machine model includes cycle-to-cycle itinerary; /// data.; ///; /// This models scheduling at each stage in the processor pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:73,Energy Efficiency,schedul,scheduling,73,/// Return true if this machine model includes an instruction-level; /// scheduling model or cycle-to-cycle itinerary data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:44,Energy Efficiency,schedul,scheduled,44,/// Maximum number of micro-ops that may be scheduled per cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:69,Energy Efficiency,schedul,scheduling,69,// Get an iterator into the processor resources consumed by this; // scheduling class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:41,Availability,avail,available,41,/// Compute operand latency based on the available machine model.; ///; /// Compute and return the latency of the given data dependent def and use; /// when the operand indices are already known. UseMI may be NULL for an; /// unknown user.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:125,Integrability,depend,dependent,125,/// Compute operand latency based on the available machine model.; ///; /// Compute and return the latency of the given data dependent def and use; /// when the operand indices are already known. UseMI may be NULL for an; /// unknown user.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:20,Performance,latency,latency,20,/// Compute operand latency based on the available machine model.; ///; /// Compute and return the latency of the given data dependent def and use; /// when the operand indices are already known. UseMI may be NULL for an; /// unknown user.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:99,Performance,latency,latency,99,/// Compute operand latency based on the available machine model.; ///; /// Compute and return the latency of the given data dependent def and use; /// when the operand indices are already known. UseMI may be NULL for an; /// unknown user.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:49,Availability,avail,available,49,"/// Compute the instruction latency based on the available machine; /// model.; ///; /// Compute and return the expected latency of this instruction independent of; /// a particular use. computeOperandLatency is the preferred API, but this is; /// occasionally useful to help estimate instruction cost.; ///; /// If UseDefaultDefLatency is false and no new machine sched model is; /// present this method falls back to TII->getInstrLatency with an empty; /// instruction itinerary (this is so we preserve the previous behavior of the; /// if converter after moving it to TargetSchedModel).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:28,Performance,latency,latency,28,"/// Compute the instruction latency based on the available machine; /// model.; ///; /// Compute and return the expected latency of this instruction independent of; /// a particular use. computeOperandLatency is the preferred API, but this is; /// occasionally useful to help estimate instruction cost.; ///; /// If UseDefaultDefLatency is false and no new machine sched model is; /// present this method falls back to TII->getInstrLatency with an empty; /// instruction itinerary (this is so we preserve the previous behavior of the; /// if converter after moving it to TargetSchedModel).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:121,Performance,latency,latency,121,"/// Compute the instruction latency based on the available machine; /// model.; ///; /// Compute and return the expected latency of this instruction independent of; /// a particular use. computeOperandLatency is the preferred API, but this is; /// occasionally useful to help estimate instruction cost.; ///; /// If UseDefaultDefLatency is false and no new machine sched model is; /// present this method falls back to TII->getInstrLatency with an empty; /// instruction itinerary (this is so we preserve the previous behavior of the; /// if converter after moving it to TargetSchedModel).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:11,Integrability,depend,dependency,11,/// Output dependency latency of a pair of defs of the same register.; ///; /// This is typically one cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:22,Performance,latency,latency,22,/// Output dependency latency of a pair of defs of the same register.; ///; /// This is typically one cycle.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h:27,Performance,throughput,throughput,27,/// Compute the reciprocal throughput of the given instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSchedule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:249,Security,expose,exposed,249,//===----------------------------------------------------------------------===//; ///; /// TargetSubtargetInfo - Generic base class for all target subtargets. All; /// Target-specific options that control code generation and printing should; /// be exposed through a TargetSubtargetInfo-derived class.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:99,Energy Efficiency,schedul,scheduling,99,// AntiDepBreakMode - Type of anti-dependence breaking that should; // be performed before post-RA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:35,Integrability,depend,dependence,35,// AntiDepBreakMode - Type of anti-dependence breaking that should; // be performed before post-RA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:74,Performance,perform,performed,74,// AntiDepBreakMode - Type of anti-dependence breaking that should; // be performed before post-RA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:127,Deployability,Pipeline,Pipelines,127,// Interfaces to the major aspects of target machine information:; //; // -- Instruction opcode and operand information; // -- Pipelines and scheduling information; // -- Stack frame information; // -- Selection DAG lowering information; // -- Call lowering information; //; // N.B. These objects may change during compilation. It's not safe to cache; // them between functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:141,Energy Efficiency,schedul,scheduling,141,// Interfaces to the major aspects of target machine information:; //; // -- Instruction opcode and operand information; // -- Pipelines and scheduling information; // -- Stack frame information; // -- Selection DAG lowering information; // -- Call lowering information; //; // N.B. These objects may change during compilation. It's not safe to cache; // them between functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:3,Integrability,Interface,Interfaces,3,// Interfaces to the major aspects of target machine information:; //; // -- Instruction opcode and operand information; // -- Pipelines and scheduling information; // -- Stack frame information; // -- Selection DAG lowering information; // -- Call lowering information; //; // N.B. These objects may change during compilation. It's not safe to cache; // them between functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:345,Performance,cache,cache,345,// Interfaces to the major aspects of target machine information:; //; // -- Instruction opcode and operand information; // -- Pipelines and scheduling information; // -- Stack frame information; // -- Selection DAG lowering information; // -- Call lowering information; //; // N.B. These objects may change during compilation. It's not safe to cache; // them between functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:337,Safety,safe,safe,337,// Interfaces to the major aspects of target machine information:; //; // -- Instruction opcode and operand information; // -- Pipelines and scheduling information; // -- Stack frame information; // -- Selection DAG lowering information; // -- Call lowering information; //; // N.B. These objects may change during compilation. It's not safe to cache; // them between functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:60,Energy Efficiency,schedul,scheduler,60,/// Target can subclass this hook to select a different DAG scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:49,Availability,avail,available,49,"/// getRegisterInfo - If register information is available, return it. If; /// not, return null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:49,Availability,avail,available,49,"/// If the information for the register banks is available, return it.; /// Otherwise return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:137,Availability,Mask,Mask,137,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:352,Availability,Mask,Mask,352,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:375,Availability,mask,mask,375,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:28,Integrability,depend,dependency,28,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:196,Integrability,depend,dependency,196,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:420,Integrability,depend,dependencies,420,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:399,Usability,clear,cleared,399,"/// Returns true if MI is a dependency breaking zero-idiom instruction for the; /// subtarget.; ///; /// This function also sets bits in Mask related to input operands that; /// are not in a data dependency relationship. There is one bit for each; /// machine operand; implicit operands follow explicit operands in the bit; /// representation used for Mask. An empty (i.e. a mask with all bits; /// cleared) means: data dependencies are ""broken"" for all the explicit input; /// machine operands of MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:287,Availability,mask,mask,287,"/// Returns true if MI is a dependency breaking instruction for the subtarget.; ///; /// Similar in behavior to `isZeroIdiom`. However, it knows how to identify; /// all dependency breaking instructions (i.e. not just zero-idioms).; /// ; /// As for `isZeroIdiom`, this method returns a mask of ""broken"" dependencies.; /// (See method `isZeroIdiom` for a detailed description of Mask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:379,Availability,Mask,Mask,379,"/// Returns true if MI is a dependency breaking instruction for the subtarget.; ///; /// Similar in behavior to `isZeroIdiom`. However, it knows how to identify; /// all dependency breaking instructions (i.e. not just zero-idioms).; /// ; /// As for `isZeroIdiom`, this method returns a mask of ""broken"" dependencies.; /// (See method `isZeroIdiom` for a detailed description of Mask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:28,Integrability,depend,dependency,28,"/// Returns true if MI is a dependency breaking instruction for the subtarget.; ///; /// Similar in behavior to `isZeroIdiom`. However, it knows how to identify; /// all dependency breaking instructions (i.e. not just zero-idioms).; /// ; /// As for `isZeroIdiom`, this method returns a mask of ""broken"" dependencies.; /// (See method `isZeroIdiom` for a detailed description of Mask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:170,Integrability,depend,dependency,170,"/// Returns true if MI is a dependency breaking instruction for the subtarget.; ///; /// Similar in behavior to `isZeroIdiom`. However, it knows how to identify; /// all dependency breaking instructions (i.e. not just zero-idioms).; /// ; /// As for `isZeroIdiom`, this method returns a mask of ""broken"" dependencies.; /// (See method `isZeroIdiom` for a detailed description of Mask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:304,Integrability,depend,dependencies,304,"/// Returns true if MI is a dependency breaking instruction for the subtarget.; ///; /// Similar in behavior to `isZeroIdiom`. However, it knows how to identify; /// all dependency breaking instructions (i.e. not just zero-idioms).; /// ; /// As for `isZeroIdiom`, this method returns a mask of ""broken"" dependencies.; /// (See method `isZeroIdiom` for a detailed description of Mask).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:110,Performance,optimiz,optimized,110,"/// Returns true if MI is a candidate for move elimination.; ///; /// A candidate for move elimination may be optimized out at register renaming; /// stage. Subtargets can specify the set of optimizable moves by; /// instantiating tablegen class `IsOptimizableRegisterMove` (see; /// llvm/Target/TargetInstrPredicate.td).; ///; /// SubtargetEmitter is responsible for processing all the definitions of class; /// IsOptimizableRegisterMove, and auto-generate an override for this method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:191,Performance,optimiz,optimizable,191,"/// Returns true if MI is a candidate for move elimination.; ///; /// A candidate for move elimination may be optimized out at register renaming; /// stage. Subtargets can specify the set of optimizable moves by; /// instantiating tablegen class `IsOptimizableRegisterMove` (see; /// llvm/Target/TargetInstrPredicate.td).; ///; /// SubtargetEmitter is responsible for processing all the definitions of class; /// IsOptimizableRegisterMove, and auto-generate an override for this method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:139,Energy Efficiency,schedul,scheduler,139,"/// True if the subtarget should run MachineScheduler after aggressive; /// coalescing.; ///; /// This currently replaces the SelectionDAG scheduler with the ""source"" order; /// scheduler (though see below for an option to turn this off and use the; /// TargetLowering preference). It does not yet disable the postRA scheduler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:178,Energy Efficiency,schedul,scheduler,178,"/// True if the subtarget should run MachineScheduler after aggressive; /// coalescing.; ///; /// This currently replaces the SelectionDAG scheduler with the ""source"" order; /// scheduler (though see below for an option to turn this off and use the; /// TargetLowering preference). It does not yet disable the postRA scheduler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:317,Energy Efficiency,schedul,scheduler,317,"/// True if the subtarget should run MachineScheduler after aggressive; /// coalescing.; ///; /// This currently replaces the SelectionDAG scheduler with the ""source"" order; /// scheduler (though see below for an option to turn this off and use the; /// TargetLowering preference). It does not yet disable the postRA scheduler.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:24,Energy Efficiency,schedul,scheduler,24,/// True if the machine scheduler should disable the TLI preference; /// for preRA scheduling with the source level scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:83,Energy Efficiency,schedul,scheduling,83,/// True if the machine scheduler should disable the TLI preference; /// for preRA scheduling with the source level scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:116,Energy Efficiency,schedul,scheduler,116,/// True if the machine scheduler should disable the TLI preference; /// for preRA scheduling with the source level scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:115,Energy Efficiency,schedul,scheduler,115,"/// True if the subtarget should enable joining global copies.; ///; /// By default this is enabled if the machine scheduler is enabled, but; /// can be overridden.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:39,Energy Efficiency,schedul,scheduler,39,/// True if the subtarget should run a scheduler after register allocation.; ///; /// By default this queries the PostRAScheduling bit in the scheduling model; /// which is the preferred way to influence this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:142,Energy Efficiency,schedul,scheduling,142,/// True if the subtarget should run a scheduler after register allocation.; ///; /// By default this queries the PostRAScheduling bit in the scheduling model; /// which is the preferred way to influence this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:47,Energy Efficiency,schedul,scheduler,47,/// True if the subtarget should run a machine scheduler after register; /// allocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:21,Energy Efficiency,schedul,scheduling,21,/// Override generic scheduling policy within a region.; ///; /// This is a convenient way for targets that don't provide any custom; /// scheduling heuristics (no custom MachineSchedStrategy) to make; /// changes to the generic scheduling policy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:138,Energy Efficiency,schedul,scheduling,138,/// Override generic scheduling policy within a region.; ///; /// This is a convenient way for targets that don't provide any custom; /// scheduling heuristics (no custom MachineSchedStrategy) to make; /// changes to the generic scheduling policy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:229,Energy Efficiency,schedul,scheduling,229,/// Override generic scheduling policy within a region.; ///; /// This is a convenient way for targets that don't provide any custom; /// scheduling heuristics (no custom MachineSchedStrategy) to make; /// changes to the generic scheduling policy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:59,Energy Efficiency,schedul,schedule,59,"// Perform target-specific adjustments to the latency of a schedule; // dependency.; // If a pair of operands is associated with the schedule dependency, DefOpIdx; // and UseOpIdx are the indices of the operands in Def and Use, respectively.; // Otherwise, either may be -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:133,Energy Efficiency,schedul,schedule,133,"// Perform target-specific adjustments to the latency of a schedule; // dependency.; // If a pair of operands is associated with the schedule dependency, DefOpIdx; // and UseOpIdx are the indices of the operands in Def and Use, respectively.; // Otherwise, either may be -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:72,Integrability,depend,dependency,72,"// Perform target-specific adjustments to the latency of a schedule; // dependency.; // If a pair of operands is associated with the schedule dependency, DefOpIdx; // and UseOpIdx are the indices of the operands in Def and Use, respectively.; // Otherwise, either may be -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:142,Integrability,depend,dependency,142,"// Perform target-specific adjustments to the latency of a schedule; // dependency.; // If a pair of operands is associated with the schedule dependency, DefOpIdx; // and UseOpIdx are the indices of the operands in Def and Use, respectively.; // Otherwise, either may be -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:3,Performance,Perform,Perform,3,"// Perform target-specific adjustments to the latency of a schedule; // dependency.; // If a pair of operands is associated with the schedule dependency, DefOpIdx; // and UseOpIdx are the indices of the operands in Def and Use, respectively.; // Otherwise, either may be -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:46,Performance,latency,latency,46,"// Perform target-specific adjustments to the latency of a schedule; // dependency.; // If a pair of operands is associated with the schedule dependency, DefOpIdx; // and UseOpIdx are the indices of the operands in Def and Use, respectively.; // Otherwise, either may be -1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:111,Energy Efficiency,schedul,scheduling,111,// For use with PostRAScheduling: get the anti-dependence breaking that should; // be performed before post-RA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:47,Integrability,depend,dependence,47,// For use with PostRAScheduling: get the anti-dependence breaking that should; // be performed before post-RA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:86,Performance,perform,performed,86,// For use with PostRAScheduling: get the anti-dependence breaking that should; // be performed before post-RA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:126,Integrability,depend,dependence,126,"// For use with PostRAScheduling: in CriticalPathRCs, return any register; // classes that should only be considered for anti-dependence breaking if they; // are on the critical path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:30,Energy Efficiency,schedul,schedule,30,// Provide an ordered list of schedule DAG mutations for the post-RA; // scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:73,Energy Efficiency,schedul,scheduler,73,// Provide an ordered list of schedule DAG mutations for the post-RA; // scheduler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:73,Deployability,pipeline,pipeliner,73,// Provide an ordered list of schedule DAG mutations for the machine; // pipeliner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:30,Energy Efficiency,schedul,schedule,30,// Provide an ordered list of schedule DAG mutations for the machine; // pipeliner.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:98,Energy Efficiency,schedul,scheduling,98,// For use with PostRAScheduling: get the minimum optimization level needed; // to enable post-RA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:50,Performance,optimiz,optimization,50,// For use with PostRAScheduling: get the minimum optimization level needed; // to enable post-RA scheduling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:196,Performance,tune,tune,196,"/// True if the subtarget should run the local reassignment; /// heuristic of the register allocator.; /// This heuristic may be compile time intensive, \p OptLevel provides; /// a finer grain to tune the register allocator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:72,Energy Efficiency,schedul,scheduling,72,"/// Enable use of alias analysis during code generation (during MI; /// scheduling, DAGCombine, etc.).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:41,Performance,load,loaded,41,/// This is called after a .mir file was loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:141,Energy Efficiency,allocate,allocate,141,"/// True if the register allocator should use the allocation orders exactly as; /// written in the tablegen descriptions, false if it should allocate; /// the specified physical register later if is it callee-saved.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:94,Availability,redundant,redundant,94,/// Enable spillage copy elimination in MachineCopyPropagation pass. This; /// helps removing redundant copies generated by register allocator when; /// handling complex eviction chains.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h:94,Safety,redund,redundant,94,/// Enable spillage copy elimination in MachineCopyPropagation pass. This; /// helps removing redundant copies generated by register allocator when; /// handling complex eviction chains.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TargetSubtargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h:555,Integrability,interface,interface,555,"//===- llvm/CodeGen/TileShapeInfo.h - ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Shape utility for AMX.; /// AMX hardware requires to config the shape of tile data register before use.; /// The 2D shape includes row and column. In AMX intrinsics interface the shape; /// is passed as 1st and 2nd parameter and they are lowered as the 1st and 2nd; /// machine operand of AMX pseudo instructions. ShapeT class is to facilitate; /// tile config and register allocator. The row and column are machine operand; /// of AMX pseudo instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h:443,Modifiability,config,config,443,"//===- llvm/CodeGen/TileShapeInfo.h - ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Shape utility for AMX.; /// AMX hardware requires to config the shape of tile data register before use.; /// The 2D shape includes row and column. In AMX intrinsics interface the shape; /// is passed as 1st and 2nd parameter and they are lowered as the 1st and 2nd; /// machine operand of AMX pseudo instructions. ShapeT class is to facilitate; /// tile config and register allocator. The row and column are machine operand; /// of AMX pseudo instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h:744,Modifiability,config,config,744,"//===- llvm/CodeGen/TileShapeInfo.h - ---------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file Shape utility for AMX.; /// AMX hardware requires to config the shape of tile data register before use.; /// The 2D shape includes row and column. In AMX intrinsics interface the shape; /// is passed as 1st and 2nd parameter and they are lowered as the 1st and 2nd; /// machine operand of AMX pseudo instructions. ShapeT class is to facilitate; /// tile config and register allocator. The row and column are machine operand; /// of AMX pseudo instructions.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/TileShapeInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h:558,Performance,perform,performs,558,"//===-- UnreachableBlockElim.h - Remove unreachable blocks for codegen --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is an extremely simple version of the SimplifyCFG pass. Its sole; // job is to delete LLVM basic blocks that are not reachable from the entry; // node. To do this, it performs a simple depth first traversal of the CFG,; // then deletes any unvisited nodes.; //; // Note that this pass is really a hack. In particular, the instruction; // selectors for various targets should just not generate code for unreachable; // blocks. Until LLVM has a more systematic way of defining instruction; // selectors, however, we cannot really expect them to handle additional; // complexity.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h:407,Usability,simpl,simple,407,"//===-- UnreachableBlockElim.h - Remove unreachable blocks for codegen --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is an extremely simple version of the SimplifyCFG pass. Its sole; // job is to delete LLVM basic blocks that are not reachable from the entry; // node. To do this, it performs a simple depth first traversal of the CFG,; // then deletes any unvisited nodes.; //; // Note that this pass is really a hack. In particular, the instruction; // selectors for various targets should just not generate code for unreachable; // blocks. Until LLVM has a more systematic way of defining instruction; // selectors, however, we cannot really expect them to handle additional; // complexity.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h:429,Usability,Simpl,SimplifyCFG,429,"//===-- UnreachableBlockElim.h - Remove unreachable blocks for codegen --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is an extremely simple version of the SimplifyCFG pass. Its sole; // job is to delete LLVM basic blocks that are not reachable from the entry; // node. To do this, it performs a simple depth first traversal of the CFG,; // then deletes any unvisited nodes.; //; // Note that this pass is really a hack. In particular, the instruction; // selectors for various targets should just not generate code for unreachable; // blocks. Until LLVM has a more systematic way of defining instruction; // selectors, however, we cannot really expect them to handle additional; // complexity.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h:569,Usability,simpl,simple,569,"//===-- UnreachableBlockElim.h - Remove unreachable blocks for codegen --===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This pass is an extremely simple version of the SimplifyCFG pass. Its sole; // job is to delete LLVM basic blocks that are not reachable from the entry; // node. To do this, it performs a simple depth first traversal of the CFG,; // then deletes any unvisited nodes.; //; // Note that this pass is really a hack. In particular, the instruction; // selectors for various targets should just not generate code for unreachable; // blocks. Until LLVM has a more systematic way of defining instruction; // selectors, however, we cannot really expect them to handle additional; // complexity.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/UnreachableBlockElim.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:4,Modifiability,Extend,Extended,4,"/// Extended Value Type. Capable of holding value types which are not native; /// for any processor (such as the i12345 type), as well as the types an MVT; /// can represent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:76,Performance,scalab,scalable,76,"/// Test if the given EVT has zero size, this will fail if called on a; /// scalable type",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:4,Testability,Test,Test,4,"/// Test if the given EVT has zero size, this will fail if called on a; /// scalable type",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:57,Modifiability,extend,extended,57,/// Test if the given EVT is simple (as opposed to being extended).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:4,Testability,Test,Test,4,/// Test if the given EVT is simple (as opposed to being extended).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:29,Usability,simpl,simple,29,/// Test if the given EVT is simple (as opposed to being extended).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:29,Modifiability,extend,extended,29,/// Test if the given EVT is extended (as opposed to being simple).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:4,Testability,Test,Test,4,/// Test if the given EVT is extended (as opposed to being simple).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:59,Usability,simpl,simple,59,/// Test if the given EVT is extended (as opposed to being simple).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:82,Integrability,depend,dependent,82,/// Return true if this is a vector type where the runtime; /// length is machine dependent,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:82,Integrability,depend,dependent,82,/// Return true if this is a vector type where the runtime; /// length is machine dependent,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:33,Performance,scalab,scalable,33,/// Return true if the type is a scalable type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:33,Energy Efficiency,power,power-of-two,33,/// Return true if the size is a power-of-two number of bytes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:15,Usability,Simpl,SimpleValueType,15,/// Return the SimpleValueType held in the specified simple EVT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:53,Usability,simpl,simple,53,/// Return the SimpleValueType held in the specified simple EVT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:21,Performance,scalab,scalable,21,"// Given a (possibly scalable) vector type, return the ElementCount",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:90,Performance,scalab,scalable,90,"/// Return the size of the specified value type in bits.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:116,Performance,scalab,scalable,116,"/// Return the size of the specified value type in bits.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:114,Performance,scalab,scalable,114,/// Return the size of the specified fixed width value type in bits. The; /// function will assert if the type is scalable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:92,Testability,assert,assert,92,/// Return the size of the specified fixed width value type in bits. The; /// function will assert if the type is scalable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:121,Performance,scalab,scalable,121,"/// Return the number of bytes overwritten by a store of the specified value; /// type.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:147,Performance,scalab,scalable,147,"/// Return the number of bytes overwritten by a store of the specified value; /// type.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:120,Performance,scalab,scalable,120,"/// Return the number of bits overwritten by a store of the specified value; /// type.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:146,Performance,scalab,scalable,146,"/// Return the number of bits overwritten by a store of the specified value; /// type.; ///; /// If the value type is a scalable vector type, the scalable property will; /// be set and the runtime size will be a positive integer multiple of the; /// base size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:68,Energy Efficiency,power,power,68,"/// Rounds the bit-width of the given integer EVT up to the nearest power of; /// two (and at least to eight), and returns the integer EVT with that; /// number of bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:153,Modifiability,extend,extended,153,"/// Finds the smallest simple value type that is greater than or equal to; /// half the width of this EVT. If no simple value type can be found, an; /// extended integer value type of half the size (rounded up) is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:23,Usability,simpl,simple,23,"/// Finds the smallest simple value type that is greater than or equal to; /// half the width of this EVT. If no simple value type can be found, an; /// extended integer value type of half the size (rounded up) is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:113,Usability,simpl,simple,113,"/// Finds the smallest simple value type that is greater than or equal to; /// half the width of this EVT. If no simple value type can be found, an; /// extended integer value type of half the size (rounded up) is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:116,Modifiability,extend,extended,116,/// Return a VT for an integer vector type with the size of the; /// elements doubled. The typed returned may be an extended type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:129,Modifiability,extend,extended,129,// Return a VT for a vector type with the same element type but; // half the number of elements. The type returned may be an; // extended type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:131,Modifiability,extend,extended,131,// Return a VT for a vector type with the same element type but; // double the number of elements. The type returned may be an; // extended type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:42,Energy Efficiency,power,power,42,/// Returns true if the given vector is a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:64,Energy Efficiency,power,power,64,/// Widens the length of the given vector EVT up to the nearest power of 2; /// and returns that type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:153,Safety,abort,abort,153,"/// This method returns an LLVM type corresponding to the specified EVT.; /// For integer types, this returns an unsigned type. Note that this will; /// abort for types that cannot be represented.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:152,Integrability,depend,dependency,152,// Methods for handling the Extended-type case in functions above.; // These are all out-of-line to prevent users of this header file; // from having a dependency on Type.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h:28,Modifiability,Extend,Extended-type,28,// Methods for handling the Extended-type case in functions above.; // These are all out-of-line to prevent users of this header file; // from having a dependency on Type.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/ValueTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:542,Deployability,update,updated,542,"//===- llvm/CodeGen/VirtRegMap.h - Virtual Register Map ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a virtual register map. This maps virtual registers to; // physical registers and virtual registers to stack slots. It is created and; // updated by a register allocator and then used by a machine code rewriter that; // adds spill code and rewrites virtual into physical register references.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:606,Modifiability,rewrite,rewriter,606,"//===- llvm/CodeGen/VirtRegMap.h - Virtual Register Map ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a virtual register map. This maps virtual registers to; // physical registers and virtual registers to stack slots. It is created and; // updated by a register allocator and then used by a machine code rewriter that; // adds spill code and rewrites virtual into physical register references.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:644,Modifiability,rewrite,rewrites,644,"//===- llvm/CodeGen/VirtRegMap.h - Virtual Register Map ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements a virtual register map. This maps virtual registers to; // physical registers and virtual registers to stack slots. It is created and; // updated by a register allocator and then used by a machine code rewriter that; // adds spill code and rewrites virtual into physical register references.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:239,Performance,load,load,239,/// Virt2PhysMap - This is a virtual to physical register; /// mapping. Each virtual register is required to have an entry in; /// it; even spilled virtual registers (the register mapped to a; /// spilled register is the temporary used to load it from the; /// stack).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:22,Energy Efficiency,Allocate,Allocate,22,/// createSpillSlot - Allocate a spill slot for RC from MFI.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:4,Usability,clear,clears,4,"/// clears the specified virtual register's, physical; /// register mapping",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:4,Usability,clear,clears,4,/// clears all virtual to physical register mappings,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h:72,Availability,avail,available,72,/// create a mapping for the specifed virtual register to; /// the next available stack slot,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VirtRegMap.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:45,Energy Efficiency,Schedul,Scheduling,45,"//===- VLIWMachineScheduler.h - VLIW-Focused Scheduling Pass ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:62,Energy Efficiency,schedul,scheduler,62,/// Local packet/bundle model. Purely; /// internal to the MI scheduler at the time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:24,Energy Efficiency,Schedul,ScheduleDAGMILive,24,/// Extend the standard ScheduleDAGMILive to provide more context and override; /// the top-level schedule() driver.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:98,Energy Efficiency,schedul,schedule,98,/// Extend the standard ScheduleDAGMILive to provide more context and override; /// the top-level schedule() driver.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:4,Modifiability,Extend,Extend,4,/// Extend the standard ScheduleDAGMILive to provide more context and override; /// the top-level schedule() driver.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:4,Energy Efficiency,Schedul,Schedule,4,/// Schedule - This is called back from ScheduleDAGInstrs::Run() when it's; /// time to do some work.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:40,Energy Efficiency,Schedul,ScheduleDAGInstrs,40,/// Schedule - This is called back from ScheduleDAGInstrs::Run() when it's; /// time to do some work.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:8,Energy Efficiency,schedul,scheduling,8,// Best scheduling cost.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:63,Performance,queue,queue,63,/// Represent the type of SchedCandidate found within a single queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:9,Energy Efficiency,Schedul,Scheduling,9,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in whichever direction at has moved, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:54,Performance,queue,queues,54,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in whichever direction at has moved, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:165,Safety,hazard,hazards,165,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in whichever direction at has moved, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:184,Safety,interlock,interlocks,184,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in whichever direction at has moved, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:184,Security,interlock,interlocks,184,"/// Each Scheduling boundary is associated with ready queues. It tracks the; /// current cycle in whichever direction at has moved, and maintains the state; /// of ""hazards"" and other interlocks at the current cycle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:41,Availability,avail,available,41,/// MinReadyCycle - Cycle of the soonest available instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:37,Performance,latency,latency,37,// Remember the greatest min operand latency.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:19,Modifiability,extend,extend,19,/// Pending queues extend the ready queues with the same ID and the; /// PendingFlag set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:12,Performance,queue,queues,12,/// Pending queues extend the ready queues with the same ID and the; /// PendingFlag set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:36,Performance,queue,queues,36,/// Pending queues extend the ready queues with the same ID and the; /// PendingFlag set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:64,Energy Efficiency,schedul,scheduling,64,"// Initialize the critical path length limit, which used by the scheduling; // cost model to determine the value for scheduling an instruction. We use; // a slightly different heuristic for small and large functions. For small; // functions, it's important to use the height/depth of the instruction.; // For large functions, prioritizing by height or depth increases spills.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:117,Energy Efficiency,schedul,scheduling,117,"// Initialize the critical path length limit, which used by the scheduling; // cost model to determine the value for scheduling an instruction. We use; // a slightly different heuristic for small and large functions. For small; // functions, it's important to use the height/depth of the instruction.; // For large functions, prioritizing by height or depth increases spills.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:55,Energy Efficiency,reduce,reduce,55,"// We divide by two as a cheap and simple heuristic to reduce the; // critcal path length, which increases the priority of using the graph; // height/depth in the scheduler's cost computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:163,Energy Efficiency,schedul,scheduler,163,"// We divide by two as a cheap and simple heuristic to reduce the; // critcal path length, which increases the priority of using the graph; // height/depth in the scheduler's cost computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:35,Usability,simpl,simple,35,"// We divide by two as a cheap and simple heuristic to reduce the; // critcal path length, which increases the priority of using the graph; // height/depth in the scheduler's cost computation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h:31,Energy Efficiency,schedul,scheduled,31,// State of the top and bottom scheduled instruction boundaries.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/VLIWMachineScheduler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:56,Availability,avail,available,56,"/// Original IR callsite corresponding to this call, if available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:39,Performance,optimiz,optimized,39,/// True if the call must be tail call optimized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:77,Performance,optimiz,optimization,77,/// True if the call passes all target-independent checks for tail call; /// optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:397,Integrability,depend,depend,397,"/// Argument handling is mostly uniform between the four places that; /// make these decisions: function formal arguments, call; /// instruction args, call instruction returns and function; /// returns. However, once a decision has been made on where an; /// argument should go, exactly what happens can vary slightly. This; /// class abstracts the differences.; ///; /// ValueAssigner should not depend on any specific function state, and; /// only determine the types and locations for arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:35,Integrability,depend,depending,35,// Some targets change the handler depending on whether the call is; // varargs or not. If,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:4,Integrability,Wrap,Wrap,4,/// Wrap call to (typically tablegenerated CCAssignFn). This may be; /// overridden to track additional state information as arguments are; /// assigned or apply target specific hacks around the legacy; /// infrastructure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:30,Energy Efficiency,allocate,allocated,30,/// The size of the currently allocated portion of the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:47,Integrability,depend,depending,47,/// Select the appropriate assignment function depending on whether this is; /// a variadic call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:157,Integrability,depend,depending,157,"/// Materialize a VReg containing the address of the specified; /// stack-based object. This is either based on a FrameIndex or; /// direct SP manipulation, depending on the context. \p MPO; /// should be initialized to an appropriate description of the; /// address created.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:100,Energy Efficiency,allocate,allocated,100,/// Return the in-memory size to write for the argument at \p VA. This may; /// be smaller than the allocated stack slot size.; ///; /// This is overridable primarily for targets to maintain compatibility with; /// hacks around the existing DAG call lowering infrastructure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:68,Performance,Load,Load,68,"/// The specified value has been assigned to a stack; /// location. Load or store it there, with appropriate extension; /// if necessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:4,Modifiability,Extend,Extend,4,"/// Extend a register to the location type given in VA, capped at extending; /// to at most MaxSize bits. If MaxSizeBits is 0 then no maximum is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:66,Modifiability,extend,extending,66,"/// Extend a register to the location type given in VA, capped at extending; /// to at most MaxSize bits. If MaxSizeBits is 0 then no maximum is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:160,Availability,down,down,160,"/// Break \p OrigArgInfo into one or more pieces the calling convention can; /// process, returned in \p SplitArgs. For example, this should break structs; /// down into individual fields.; ///; /// If \p Offsets is non-null, it points to a vector to be filled in; /// with the in-memory offsets of each of the individual values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:130,Modifiability,extend,extended,130,/// \return true if the target is capable of handling swifterror values that; /// have been promoted to a specified register. The extended versions of; /// lowerReturn and lowerCall should be implemented.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:4,Performance,Load,Load,4,/// Load the returned value from the stack into virtual registers in \p VRegs.; /// It uses the frame index \p FI and the start offset from \p DemoteReg.; /// The loaded data size will be determined from \p RetTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:163,Performance,load,loaded,163,/// Load the returned value from the stack into virtual registers in \p VRegs.; /// It uses the frame index \p FI and the start offset from \p DemoteReg.; /// The loaded data size will be determined from \p RetTy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:86,Performance,perform,performing,86,/// \return True if the return type described by \p Outs can be returned; /// without performing sret demotion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:163,Performance,perform,performing,163,/// Toplevel function to check the return type based on the target calling; /// convention. \return True if the return value of \p MF can be returned; /// without performing sret demotion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:177,Performance,perform,performed,177,"/// This hook must be implemented to check whether the return values; /// described by \p Outs can fit into the return registers. If false; /// is returned, an sret-demotion is performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h:29,Modifiability,extend,extended,29,"/// This hook behaves as the extended lowerReturn function, but for targets; /// that do not support swifterror value promotion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CallLowering.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h:501,Modifiability,inherit,inherits,501,"//== ----- llvm/CodeGen/GlobalISel/Combiner.h -------------------*- C++ -*-== //; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// This contains the base class for all Combiners generated by TableGen.; /// Backends need to create class that inherits from ""Combiner"" and put all of; /// the TableGen-erated code in there, as it implements the virtual functions.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h:131,Safety,Avoid,Avoid,131,"// We have a little hack here where keep the owned pointers private, and only; // expose a reference. This has two purposes:; // - Avoid derived classes messing with those pointers.; // - Keep the API consistent. CInfo, MF, MRI, etc. are all accessed as; // references. Accessing Observer/B as pointers unnecessarily leaks; // implementation details into derived classes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h:82,Security,expose,expose,82,"// We have a little hack here where keep the owned pointers private, and only; // expose a reference. This has two purposes:; // - Avoid derived classes messing with those pointers.; // - Keep the API consistent. CInfo, MF, MRI, etc. are all accessed as; // references. Accessing Observer/B as pointers unnecessarily leaks; // implementation details into derived classes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h:242,Security,access,accessed,242,"// We have a little hack here where keep the owned pointers private, and only; // expose a reference. This has two purposes:; // - Avoid derived classes messing with those pointers.; // - Keep the API consistent. CInfo, MF, MRI, etc. are all accessed as; // references. Accessing Observer/B as pointers unnecessarily leaks; // implementation details into derived classes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h:270,Security,Access,Accessing,270,"// We have a little hack here where keep the owned pointers private, and only; // expose a reference. This has two purposes:; // - Avoid derived classes messing with those pointers.; // - Keep the API consistent. CInfo, MF, MRI, etc. are all accessed as; // references. Accessing Observer/B as pointers unnecessarily leaks; // implementation details into derived classes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Combiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:26,Modifiability,extend,extend,26,// The result type of the extend.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:83,Performance,load,load,83,// True if Offset is a constant that needs to be; // rematerialized before the new load/store.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:16,Modifiability,extend,extend,16,"/// If \p MI is extend that consumes the result of a load, try to combine it.; /// Returns true if MI changed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:53,Performance,load,load,53,"/// If \p MI is extend that consumes the result of a load, try to combine it.; /// Returns true if MI changed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:25,Availability,mask,mask,25,"/// Match (and (load x), mask) -> zextload x",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:16,Performance,load,load,16,"/// Match (and (load x), mask) -> zextload x",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:40,Performance,load,load,40,/// Combine a G_EXTRACT_VECTOR_ELT of a load into a narrowed; /// load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:66,Performance,load,load,66,/// Combine a G_EXTRACT_VECTOR_ELT of a load into a narrowed; /// load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:21,Performance,load,load,21,"/// Match sext_inreg(load p), imm -> sextload p",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:4,Performance,Optimiz,Optimize,4,"/// Optimize memcpy intrinsics et al, e.g. constant len calls.; /// /p MaxLen if non-zero specifies the max length of a mem libcall to inline.; ///; /// For example (pre-indexed):; ///; /// $addr = G_PTR_ADD $base, $offset; /// [...]; /// $val = G_LOAD $addr; /// [...]; /// $whatever = COPY $addr; ///; /// -->; ///; /// $val, $addr = G_INDEXED_LOAD $base, $offset, 1 (IsPre); /// [...]; /// $whatever = COPY $addr; ///; /// or (post-indexed):; ///; /// G_STORE $val, $base; /// [...]; /// $addr = G_PTR_ADD $base, $offset; /// [...]; /// $whatever = COPY $addr; ///; /// -->; ///; /// $addr = G_INDEXED_STORE $val, $base, $offset; /// [...]; /// $whatever = COPY $addr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:48,Testability,log,logic,48,"/// If we have a shift-by-constant of a bitwise logic op that itself has a; /// shift-by-constant operand with identical opcode, we may be able to convert; /// that into 2 independent shifts followed by the logic op.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:207,Testability,log,logic,207,"/// If we have a shift-by-constant of a bitwise logic op that itself has a; /// shift-by-constant operand with identical opcode, we may be able to convert; /// that into 2 independent shifts followed by the logic op.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:30,Energy Efficiency,power,power-of-,30,/// Transform a multiply by a power-of-2 value to a left shift.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:29,Modifiability,extend,extended,29,// Transform a G_SHL with an extended source into a narrower shift if; // possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:4,Energy Efficiency,Reduce,Reduce,4,/// Reduce a shift by a constant to an unmerge and a shift on a half sized; /// type. This will not produce a shift smaller than \p TargetShiftSize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:69,Availability,mask,mask,69,/// Return true if a G_SHUFFLE_VECTOR instruction \p MI has an undef mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:4,Performance,Optimiz,Optimize,4,/// Optimize (cond ? x : x) -> x,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:4,Performance,Optimiz,Optimize,4,/// Optimize (x op x) -> x,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:47,Energy Efficiency,power,power,47,/// Check if operand \p OpIdx is known to be a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:46,Usability,simpl,simplified,46,/// Return true if MI is a G_ADD which can be simplified to a G_SUB.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:29,Energy Efficiency,power,power,29,"/// Combine G_UREM x, (known power of 2) to an add and bitmasking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:214,Performance,load,load,214,/// Match expression trees of the form; ///; /// \code; /// sN *a = ...; /// sM val = a[0] | (a[1] << N) | (a[2] << 2N) | (a[3] << 3N) ...; /// \endcode; ///; /// And check if the tree can be replaced with a M-bit load + possibly a; /// bswap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:56,Performance,perform,perform,56,"/// Use a function which takes in a MachineIRBuilder to perform a combine.; /// By default, it erases the instruction \p MI from the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:56,Performance,perform,perform,56,/// Use a function which takes in a MachineIRBuilder to perform a combine.; /// This variant does not erase \p MI after calling the build function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:30,Availability,mask,mask,30,"/// Match: and (lshr x, cst), mask -> ubfx x, cst, width",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:47,Security,expose,exposed,47,/// Do constant folding when opportunities are exposed after MIR building.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:47,Security,expose,exposed,47,/// Do constant folding when opportunities are exposed after MIR building.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:50,Security,expose,exposed,50,/// Do constant FP folding when opportunities are exposed after MIR building.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:175,Energy Efficiency,Power,PowerPC,175,"/// Given an G_UDIV \p MI expressing a divide by constant, return an; /// expression that implements it by multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:201,Usability,Guid,Guide,201,"/// Given an G_UDIV \p MI expressing a divide by constant, return an; /// expression that implements it by multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:182,Energy Efficiency,Power,PowerPC,182,"/// Given an G_SDIV \p MI expressing a signed divide by constant, return an; /// expression that implements it by multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:208,Usability,Guid,Guide,208,"/// Given an G_SDIV \p MI expressing a signed divide by constant, return an; /// expression that implements it by multiplying by a magic number.; /// Ref: ""Hacker's Delight"" or ""The PowerPC Compiler Writer's Guide"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:9,Performance,load,loads,9,"/// Emit loads and stores that perform the given memcpy.; /// Assumes \p MI is a G_MEMCPY_INLINE; /// TODO: implement dynamically sized inline memcpy,; /// and rename: s/bool tryEmit/void emit/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:31,Performance,perform,perform,31,"/// Emit loads and stores that perform the given memcpy.; /// Assumes \p MI is a G_MEMCPY_INLINE; /// TODO: implement dynamically sized inline memcpy,; /// and rename: s/bool tryEmit/void emit/",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:39,Usability,simpl,simplify,39,/// \returns true if it is possible to simplify a select instruction \p MI; /// to a min/max instruction of some sort.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:24,Performance,load,load,24,"/// Given a non-indexed load or store instruction \p MI, find an offset that; /// can be usefully and legally folded into it as a post-indexing operation.; ///; /// \returns true if a candidate is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:24,Performance,load,load,24,"/// Given a non-indexed load or store instruction \p MI, find an offset that; /// can be usefully and legally folded into it as a pre-indexing operation.; ///; /// \returns true if a candidate is found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:106,Performance,load,load,106,/// Helper function for matchLoadOrCombine. Searches for Registers; /// which may have been produced by a load instruction + some arithmetic.; ///; /// \param [in] Root - The search root.; ///; /// \returns The Registers found during the search.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:113,Performance,load,load,113,"/// Helper function for matchLoadOrCombine.; ///; /// Checks if every register in \p RegsToVisit is defined by a load; /// instruction + some arithmetic.; ///; /// \param [out] MemOffset2Idx - Maps the byte positions each load ends up; /// at to the index of the load.; /// \param [in] MemSizeInBits - The number of bits each load should produce.; ///; /// \returns On success, a 3-tuple containing lowest-index load found, the; /// lowest index, and the last load in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:222,Performance,load,load,222,"/// Helper function for matchLoadOrCombine.; ///; /// Checks if every register in \p RegsToVisit is defined by a load; /// instruction + some arithmetic.; ///; /// \param [out] MemOffset2Idx - Maps the byte positions each load ends up; /// at to the index of the load.; /// \param [in] MemSizeInBits - The number of bits each load should produce.; ///; /// \returns On success, a 3-tuple containing lowest-index load found, the; /// lowest index, and the last load in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:263,Performance,load,load,263,"/// Helper function for matchLoadOrCombine.; ///; /// Checks if every register in \p RegsToVisit is defined by a load; /// instruction + some arithmetic.; ///; /// \param [out] MemOffset2Idx - Maps the byte positions each load ends up; /// at to the index of the load.; /// \param [in] MemSizeInBits - The number of bits each load should produce.; ///; /// \returns On success, a 3-tuple containing lowest-index load found, the; /// lowest index, and the last load in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:326,Performance,load,load,326,"/// Helper function for matchLoadOrCombine.; ///; /// Checks if every register in \p RegsToVisit is defined by a load; /// instruction + some arithmetic.; ///; /// \param [out] MemOffset2Idx - Maps the byte positions each load ends up; /// at to the index of the load.; /// \param [in] MemSizeInBits - The number of bits each load should produce.; ///; /// \returns On success, a 3-tuple containing lowest-index load found, the; /// lowest index, and the last load in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:412,Performance,load,load,412,"/// Helper function for matchLoadOrCombine.; ///; /// Checks if every register in \p RegsToVisit is defined by a load; /// instruction + some arithmetic.; ///; /// \param [out] MemOffset2Idx - Maps the byte positions each load ends up; /// at to the index of the load.; /// \param [in] MemSizeInBits - The number of bits each load should produce.; ///; /// \returns On success, a 3-tuple containing lowest-index load found, the; /// lowest index, and the last load in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:460,Performance,load,load,460,"/// Helper function for matchLoadOrCombine.; ///; /// Checks if every register in \p RegsToVisit is defined by a load; /// instruction + some arithmetic.; ///; /// \param [out] MemOffset2Idx - Maps the byte positions each load ends up; /// at to the index of the load.; /// \param [in] MemSizeInBits - The number of bits each load should produce.; ///; /// \returns On success, a 3-tuple containing lowest-index load found, the; /// lowest index, and the last load in the sequence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:67,Performance,perform,performing,67,/// Examines the G_PTR_ADD instruction \p PtrAdd and determines if performing; /// a re-association of its operands would break an existing legal addressing; /// mode that the address computation currently represents.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h:27,Testability,log,logical,27,/// Try to fold selects to logical operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h:12,Performance,optimiz,optimizations,12,/// Whether optimizations should be enabled. This is to distinguish between; /// uses of the combiner unconditionally and only when optimizations are; /// specifically enabled/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h:132,Performance,optimiz,optimizations,132,/// Whether optimizations should be enabled. This is to distinguish between; /// uses of the combiner unconditionally and only when optimizations are; /// specifically enabled/,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h:18,Performance,optimiz,optimizing,18,/// Whether we're optimizing for size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h:18,Performance,optimiz,optimizing,18,/// Whether we're optimizing for minsize (-Oz).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CombinerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:407,Deployability,continuous,continuously,407,"//===- llvm/CodeGen/GlobalISel/CSEInfo.h ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Provides analysis for continuously CSEing during GISel passes.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:17,Integrability,wrap,wraps,17,/// A class that wraps MachineInstrs and derives from FoldingSetNode in order to; /// be uniqued in a CSEMap. The tradeoff here is extra memory allocations for; /// UniqueMachineInstr vs making MachineInstr bigger.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:9,Modifiability,config,config,9,// A CSE config for fully optimized builds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:26,Performance,optimiz,optimized,26,// A CSE config for fully optimized builds.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:24,Modifiability,config,config,24,// Commonly used for O0 config.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:270,Integrability,depend,depend,270,"// Returns the standard expected CSEConfig for the given optimization level.; // We have this logic here so targets can make use of it from their derived; // TargetPassConfig, but can't put this logic into TargetPassConfig directly; // because the CodeGen library can't depend on GlobalISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:57,Performance,optimiz,optimization,57,"// Returns the standard expected CSEConfig for the given optimization level.; // We have this logic here so targets can make use of it from their derived; // TargetPassConfig, but can't put this logic into TargetPassConfig directly; // because the CodeGen library can't depend on GlobalISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:94,Testability,log,logic,94,"// Returns the standard expected CSEConfig for the given optimization level.; // We have this logic here so targets can make use of it from their derived; // TargetPassConfig, but can't put this logic into TargetPassConfig directly; // because the CodeGen library can't depend on GlobalISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:195,Testability,log,logic,195,"// Returns the standard expected CSEConfig for the given optimization level.; // We have this logic here so targets can make use of it from their derived; // TargetPassConfig, but can't put this logic into TargetPassConfig directly; // because the CodeGen library can't depend on GlobalISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:39,Deployability,install,installs,39,"/// The CSE Analysis object.; /// This installs itself as a delegate to the MachineFunction to track; /// new instructions as well as deletions. It however will not be able to; /// track instruction mutations. In such cases, recordNewInstruction should be; /// called (for eg inside MachineIRBuilder::recordInsertion).; /// Also because of how just the instruction can be inserted without adding any; /// operands to the instruction, instructions are uniqued and inserted lazily.; /// CSEInfo should assert when trying to enter an incomplete instruction into; /// the CSEMap. There is Opcode level granularity on which instructions can be; /// CSE'd and for now, only Generic instructions are CSEable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:500,Testability,assert,assert,500,"/// The CSE Analysis object.; /// This installs itself as a delegate to the MachineFunction to track; /// new instructions as well as deletions. It however will not be able to; /// track instruction mutations. In such cases, recordNewInstruction should be; /// called (for eg inside MachineIRBuilder::recordInsertion).; /// Also because of how just the instruction can be inserted without adding any; /// operands to the instruction, instructions are uniqued and inserted lazily.; /// CSEInfo should assert when trying to enter an incomplete instruction into; /// the CSEMap. There is Opcode level granularity on which instructions can be; /// CSE'd and for now, only Generic instructions are CSEable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:11,Security,access,accessible,11,// Make it accessible only to CSEMIRBuilder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:11,Performance,cache,cache,11,"/// Keep a cache of UniqueInstrs for each MachineInstr. In GISel,; /// often instructions are mutated (while their ID has completely changed).; /// Whenever mutation happens, invalidate the UniqueMachineInstr for the; /// MachineInstr",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:160,Safety,avoid,avoid,160,"/// Store instructions that are not fully formed in TemporaryInsts.; /// Also because CSE insertion happens lazily, we can remove insts from this; /// list and avoid inserting and then removing from the CSEMap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:16,Testability,assert,asserts,16,// Only used in asserts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate and construct a new UniqueMachineInstr for MI and return.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:23,Energy Efficiency,allocate,allocate,23,/// Use this method to allocate a new UniqueMachineInstr for MI and insert it; /// into the CSEMap. MI should return true for shouldCSE(MI->getOpcode()),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:260,Security,hash,hashing,260,"/// Records a newly created inst in a list and lazily insert it to the CSEMap.; /// Sometimes, this method might be called with a partially constructed; /// MachineInstr,; // (right after BuildMI without adding any operands) - and in such cases,; // defer the hashing of the instruction to a later stage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:3,Usability,Simpl,Simple,3,// Simple builder class to easily profile properties about MIs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:136,Deployability,configurat,configuration,136,/// Simple wrapper that does the following.; /// 1) Lazily evaluate the MachineFunction to compute CSEable instructions.; /// 2) Allows configuration of which instructions are CSEd through CSEConfig; /// object. Provides a method called get which takes a CSEConfig object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:11,Integrability,wrap,wrapper,11,/// Simple wrapper that does the following.; /// 1) Lazily evaluate the MachineFunction to compute CSEable instructions.; /// 2) Allows configuration of which instructions are CSEd through CSEConfig; /// object. Provides a method called get which takes a CSEConfig object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:136,Modifiability,config,configuration,136,/// Simple wrapper that does the following.; /// 1) Lazily evaluate the MachineFunction to compute CSEable instructions.; /// 2) Allows configuration of which instructions are CSEd through CSEConfig; /// object. Provides a method called get which takes a CSEConfig object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:4,Usability,Simpl,Simple,4,/// Simple wrapper that does the following.; /// 1) Lazily evaluate the MachineFunction to compute CSEable instructions.; /// 2) Allows configuration of which instructions are CSEd through CSEConfig; /// object. Provides a method called get which takes a CSEConfig object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h:29,Integrability,wrap,wrapper,29,/// The actual analysis pass wrapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h:334,Testability,assert,assert,334,"/// Defines a builder that does CSE of MachineInstructions using GISelCSEInfo.; /// Eg usage.; ///; ///; /// GISelCSEInfo *Info =; /// &getAnalysis<GISelCSEAnalysisWrapperPass>().getCSEInfo(); CSEMIRBuilder; /// CB(Builder.getState()); CB.setCSEInfo(Info); auto A = CB.buildConstant(s32,; /// 42); auto B = CB.buildConstant(s32, 42); assert(A == B); unsigned CReg =; /// MRI.createGenericVirtualRegister(s32); auto C = CB.buildConstant(CReg, 42);; /// assert(C->getOpcode() == TargetOpcode::COPY);; /// Explicitly passing in a register would materialize a copy if possible.; /// CSEMIRBuilder also does trivial constant folding for binary ops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h:452,Testability,assert,assert,452,"/// Defines a builder that does CSE of MachineInstructions using GISelCSEInfo.; /// Eg usage.; ///; ///; /// GISelCSEInfo *Info =; /// &getAnalysis<GISelCSEAnalysisWrapperPass>().getCSEInfo(); CSEMIRBuilder; /// CB(Builder.getState()); CB.setCSEInfo(Info); auto A = CB.buildConstant(s32,; /// 42); auto B = CB.buildConstant(s32, 42); assert(A == B); unsigned CReg =; /// MRI.createGenericVirtualRegister(s32); auto C = CB.buildConstant(CReg, 42);; /// assert(C->getOpcode() == TargetOpcode::COPY);; /// Explicitly passing in a register would materialize a copy if possible.; /// CSEMIRBuilder also does trivial constant folding for binary ops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h:413,Availability,down,down,413,"/// Returns true if A dominates B (within the same basic block).; /// Both iterators must be in the same basic block.; //; // TODO: Another approach for checking dominance is having two iterators and; // making them go towards each other until they meet or reach begin/end. Which; // approach is better? Should this even change dynamically? For G_CONSTANTS; // most of which will be at the top of the BB, the top down approach would be; // a better choice. Does IRTranslator placing constants at the beginning still; // make sense? Should this change based on Opcode?",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h:79,Safety,safe,safe,79,/// Simple check if we can CSE (we have the CSEInfo) or if this Opcode is; /// safe to CSE.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h:4,Usability,Simpl,Simple,4,/// Simple check if we can CSE (we have the CSEInfo) or if this Opcode is; /// safe to CSE.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/CSEMIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:412,Integrability,wrap,wrapper,412,"//===- llvm/CodeGen/GlobalISel/GenericMachineInstrs.h -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Declares convenience wrapper classes for interpreting MachineInstr instances; /// as specific generic operations.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:4,Security,Access,Access,4,/// Access the Idx'th operand as a register and return it.; /// This assumes that the Idx'th operand is a Register type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:44,Security,access,access,44,/// Returns the size in bytes of the memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:43,Security,access,access,43,/// Returns the size in bits of the memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:35,Performance,load,load,35,"/// Represents any type of generic load or store.; /// G_LOAD, G_STORE, G_ZEXTLOAD, G_SEXTLOAD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:23,Performance,load,loads,23,/// Represents indexed loads. These are different enough from regular loads; /// that they get their own class. Including them in GAnyLoad would probably; /// make a footgun for someone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:70,Performance,load,loads,70,/// Represents indexed loads. These are different enough from regular loads; /// that they get their own class. Including them in GAnyLoad would probably; /// make a footgun for someone.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:39,Performance,load,loaded,39,/// Get the definition register of the loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:53,Modifiability,extend,extending,53,"/// Represents any generic load, including sign/zero extending variants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:27,Performance,load,load,27,"/// Represents any generic load, including sign/zero extending variants.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h:39,Performance,load,loaded,39,/// Get the definition register of the loaded value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GenericMachineInstrs.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:122,Modifiability,variab,variable-sized,122,"/// The MatchTable is encoded as an array of bytes.; /// Thus, opcodes are expected to be <255.; ///; /// Operands can be variable-sized, their size is always after their name; /// in the docs, e.g. ""Foo(4)"" means that ""Foo"" takes 4 entries in the table,; /// so 4 bytes. ""Foo()""; ///; /// As a general rule of thumb:; /// - Instruction & Operand IDs are ULEB128; /// - LLT IDs are 1 byte; /// - Predicates and target opcodes, register and register class IDs are 2; /// bytes.; /// - Indexes into the table are 4 bytes.; /// - Inline constants are 8 bytes; ///; /// Design notes:; /// - Inst/Op IDs have to be LEB128 because some targets generate; /// extremely long patterns which need more than 255 temporaries.; /// We could just use 2 bytes everytime, but then some targets like; /// X86/AMDGPU that have no need for it will pay the price all the time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:267,Availability,failure,failure,267,/// Begin a try-block to attempt a match and jump to OnFail if it is; /// unsuccessful.; /// - OnFail(4) - The MatchTable entry at which to resume if the match fails.; ///; /// FIXME: This ought to take an argument indicating the number of try-blocks; /// to exit on failure. It's usually one but the last match attempt of; /// a block will need more. The (implemented) alternative is to tack a; /// GIM_Reject on the end of each try-block which is simpler but; /// requires an extra opcode and iteration in the interpreter on each; /// failed match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:140,Usability,resume,resume,140,/// Begin a try-block to attempt a match and jump to OnFail if it is; /// unsuccessful.; /// - OnFail(4) - The MatchTable entry at which to resume if the match fails.; ///; /// FIXME: This ought to take an argument indicating the number of try-blocks; /// to exit on failure. It's usually one but the last match attempt of; /// a block will need more. The (implemented) alternative is to tack a; /// GIM_Reject on the end of each try-block which is simpler but; /// requires an extra opcode and iteration in the interpreter on each; /// failed match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:449,Usability,simpl,simpler,449,/// Begin a try-block to attempt a match and jump to OnFail if it is; /// unsuccessful.; /// - OnFail(4) - The MatchTable entry at which to resume if the match fails.; ///; /// FIXME: This ought to take an argument indicating the number of try-blocks; /// to exit on failure. It's usually one but the last match attempt of; /// a block will need more. The (implemented) alternative is to tack a; /// GIM_Reject on the end of each try-block which is simpler but; /// requires an extra opcode and iteration in the interpreter on each; /// failed match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:240,Availability,failure,failure,240,/// Switch over the opcode on the specified instruction; /// - InsnID(ULEB128) - Instruction ID; /// - LowerBound(2) - numerically minimum opcode supported; /// - UpperBound(2) - numerically maximum + 1 opcode supported; /// - Default(4) - failure jump target; /// - JumpTable(4)... - (UpperBound - LowerBound) (at least 2) jump targets,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:285,Availability,failure,failure,285,/// Switch over the LLT on the specified instruction operand; /// - InsnID(ULEB128) - Instruction ID; /// - OpIdx(ULEB128) - Operand index; /// - LowerBound(2) - numerically minimum Type ID supported; /// - UpperBound(2) - numerically maximum + 1 Type ID supported; /// - Default(4) - failure jump target; /// - JumpTable(4)... - (UpperBound - LowerBound) (at least 2) jump targets,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:136,Testability,test,test,136,/// Check an immediate predicate on the specified instruction; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:150,Testability,test,test,150,/// Check an immediate predicate on the specified instruction via an APInt.; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:151,Testability,test,test,151,/// Check a floating point immediate predicate on the specified instruction.; /// - InsnID(ULEB128) - Instruction ID; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:174,Testability,test,test,174,/// Check an immediate predicate on the specified instruction; /// - InsnID(ULEB128) - Instruction ID; /// - OpIdx(ULEB128) - Operand index; /// - Pred(2) - The predicate to test,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:33,Security,access,access,33,/// Check the size of the memory access for the given machine memory operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - Size(4) - The size in bytes of the memory access,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:202,Security,access,access,202,/// Check the size of the memory access for the given machine memory operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - Size(4) - The size in bytes of the memory access,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:42,Security,access,access,42,/// Check the address space of the memory access for the given machine memory; /// operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - NumAddrSpace(ULEB128) - Number of valid address spaces; /// - AddrSpaceN(ULEB128) - An allowed space of the memory access; /// - AddrSpaceN+1 ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:289,Security,access,access,289,/// Check the address space of the memory access for the given machine memory; /// operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - NumAddrSpace(ULEB128) - Number of valid address spaces; /// - AddrSpaceN(ULEB128) - An allowed space of the memory access; /// - AddrSpaceN+1 ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:46,Security,access,access,46,/// Check the minimum alignment of the memory access for the given machine; /// memory operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - MinAlign(ULEB128) - Minimum acceptable alignment,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:33,Security,access,access,33,/// Check the size of the memory access for the given machine memory operand; /// against the size of an operand.; /// - InsnID(ULEB128) - Instruction ID; /// - MMOIdx(ULEB128) - MMO index; /// - OpIdx(ULEB128) - The operand index to compare the MMO against,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:38,Safety,safe,safe,38,/// Check if the specified operand is safe to fold into the current; /// instruction.; /// - InsnID(ULEB128) - Instruction ID,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:222,Deployability,update,update,222,/// Calls a C++ function to perform an action when a match is complete.; /// The MatcherState is passed to the function to allow it to modify; /// instructions.; /// This is less constrained than a custom renderer and can update; /// instructions; /// in the state.; /// - FnID(2) - The function to call.; /// TODO: Remove this at some point when combiners aren't reliant on it. It's; /// a bit of a hack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:28,Performance,perform,perform,28,/// Calls a C++ function to perform an action when a match is complete.; /// The MatcherState is passed to the function to allow it to modify; /// instructions.; /// This is less constrained than a custom renderer and can update; /// instructions; /// in the state.; /// - FnID(2) - The function to call.; /// TODO: Remove this at some point when combiners aren't reliant on it. It's; /// a bit of a hack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:43,Modifiability,extend,extended,43,/// Render a G_CONSTANT operator as a sign-extended immediate.; /// - NewInsnID(ULEB128) - Instruction ID to modify; /// - OldInsnID(ULEB128) - Instruction ID to copy from; /// The operand index is implicitly 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:44,Modifiability,extend,extended,44,/// Render a G_FCONSTANT operator as a sign-extended immediate.; /// - NewInsnID(ULEB128) - Instruction ID to modify; /// - OldInsnID(ULEB128) - Instruction ID to copy from; /// The operand index is implicitly 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h:17,Testability,log,logic,17,"/// Provides the logic to execute GlobalISel match tables, which are used by the; /// instruction selector and instruction combiners as their engine to match and; /// apply MIR patterns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:55,Safety,avoid,avoids,55,// Convenience function to return a signed value. This avoids; // us forgetting to first cast to int8_t before casting to a; // wider signed int type.; // if we casted uint8 directly to a wider type we'd lose; // negative values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:38,Availability,avail,available,38,// FIXME: Use std::invoke() when it's available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:33,Modifiability,extend,extend,33,"// isOperandImmEqual() will sign-extend to 64-bits, so should we.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:104,Testability,assert,assert,104,"// If the type is > 64 bits, it can't be a constant int, so we bail; // early because SignExtend64 will assert otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h:17,Testability,test,test,17,// TODO: Needs a test case once we have a pattern that uses this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:11,Integrability,wrap,wrapper,11,"/// Simple wrapper observer that takes several observers, and calls; /// each one for each event. If there are multiple observers (say CSE,; /// Legalizer, Combiner), it's sufficient to register this to the machine; /// function as the delegate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:4,Usability,Simpl,Simple,4,"/// Simple wrapper observer that takes several observers, and calls; /// each one for each event. If there are multiple observers (say CSE,; /// Legalizer, Combiner), it's sufficient to register this to the machine; /// function as the delegate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:33,Deployability,install,installer,33,/// A simple RAII based Delegate installer.; /// Use this in a scope to install a delegate to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:72,Deployability,install,install,72,/// A simple RAII based Delegate installer.; /// Use this in a scope to install a delegate to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:6,Usability,simpl,simple,6,/// A simple RAII based Delegate installer.; /// Use this in a scope to install a delegate to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:33,Deployability,install,installer,33,/// A simple RAII based Observer installer.; /// Use this in a scope to install the Observer to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:72,Deployability,install,install,72,/// A simple RAII based Observer installer.; /// Use this in a scope to install the Observer to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:6,Usability,simpl,simple,6,/// A simple RAII based Observer installer.; /// Use this in a scope to install the Observer to the MachineFunction and reset; /// it at the end of the scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h:13,Deployability,install,install,13,/// Class to install both of the above.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelChangeObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:4,Performance,Cache,Cache,4,/// Cache maintained during a computeKnownBits request.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:25,Availability,Mask,Mask,25,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:118,Availability,down,downstream,118,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:135,Availability,Mask,Mask,135,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:98,Usability,simpl,simplify,98,/// \return true if 'V & Mask' is known to be zero in DemandedElts. We use; /// this predicate to simplify operations downstream.; /// Mask is known to be zero for bits that V cannot have.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:110,Availability,down,downstream,110,/// \return true if the sign bit of Op is known to be zero. We use this; /// predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:90,Usability,simpl,simplify,90,/// \return true if the sign bit of Op is known to be zero. We use this; /// predicate to simplify operations downstream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h:173,Integrability,Wrap,WrapperObserver,173,"/// To use KnownBitsInfo analysis in a pass,; /// KnownBitsInfo &Info = getAnalysis<GISelKnownBitsInfoAnalysis>().get(MF);; /// Add to observer if the Info is caching.; /// WrapperObserver.addObserver(Info);; /// Eventually add other features such as caching/ser/deserializing; /// to MIR etc. Those implementations can derive from GISelKnownBits; /// and override computeKnownBitsImpl.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelKnownBits.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:339,Testability,assert,assert,339,"// Since we don't know ahead of time how many instructions we're going to add; // to the worklist, and migrating densemap's elements is quite expensive; // everytime we resize, only insert to the smallvector (typically during the; // initial phase of populating lists). Before the worklist can be used,; // finalize should be called. Also assert with NDEBUG if list is ever used; // without finalizing. Note that unlike insert, we won't check for duplicates; // - so the ideal place to use this is during the initial prepopulating phase; // of most passes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:67,Testability,assert,asserts,67,"// This should only be called when using deferred_insert.; // This asserts that the WorklistMap is empty, and then; // inserts all the elements in the Worklist into the map.; // It also asserts if there are any duplicate elements found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:186,Testability,assert,asserts,186,"// This should only be called when using deferred_insert.; // This asserts that the WorklistMap is empty, and then; // inserts all the elements in the Worklist into the map.; // It also asserts if there are any duplicate elements found.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h:55,Availability,down,down,55,"// Not in worklist.; // Don't bother moving everything down, just null out the slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/GISelWorkList.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelect.h:410,Integrability,interface,interface,410,"//== llvm/CodeGen/GlobalISel/InstructionSelect.h -----------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file This file describes the interface of the MachineFunctionPass; /// responsible for selecting (possibly generic) machine instructions to; /// target-specific instructions.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/InstructionSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:4,Integrability,Interface,Interface,4,/// Interface used to lower the everything related to calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:11,Testability,stub,stubbed,11,"// List of stubbed PHI instructions, for values and basic blocks to be filled; // in once all MachineBasicBlocks have been created.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:40,Energy Efficiency,allocate,allocated,40,/// Record of what frame index has been allocated to specified allocas for; /// this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:423,Deployability,Update,Update,423,"/// \name Methods for translating form LLVM IR to MachineInstr.; /// \see ::translate for general information on the translate methods.; /// @{; /// Translate \p Inst into its corresponding MachineInstr instruction(s).; /// Insert the newly translated instruction(s) right where the CurBuilder; /// is set.; ///; /// The general algorithm is:; /// 1. Look for a virtual register for each operand or; /// create one.; /// 2 Update the VMap accordingly.; /// 2.alt. For constant arguments, if they are compile time constants,; /// produce an immediate in the right operand and do not touch; /// ValToReg. Actually we will go with a virtual register for each; /// constants because it may be expensive to actually materialize the; /// constant. Moreover, if the constant spans on several instructions,; /// CSE may not catch them.; /// => Update ValToVReg and remember that we saw a constant in Constants.; /// We will materialize all the constants in finalize.; /// Note: we would need to do something so that we can recognize such operand; /// as constants.; /// 3. Create the generic instruction.; ///; /// \return true if the translation succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:836,Deployability,Update,Update,836,"/// \name Methods for translating form LLVM IR to MachineInstr.; /// \see ::translate for general information on the translate methods.; /// @{; /// Translate \p Inst into its corresponding MachineInstr instruction(s).; /// Insert the newly translated instruction(s) right where the CurBuilder; /// is set.; ///; /// The general algorithm is:; /// 1. Look for a virtual register for each operand or; /// create one.; /// 2 Update the VMap accordingly.; /// 2.alt. For constant arguments, if they are compile time constants,; /// produce an immediate in the right operand and do not touch; /// ValToReg. Actually we will go with a virtual register for each; /// constants because it may be expensive to actually materialize the; /// constant. Moreover, if the constant spans on several instructions,; /// CSE may not catch them.; /// => Update ValToVReg and remember that we saw a constant in Constants.; /// We will materialize all the constants in finalize.; /// Note: we would need to do something so that we can recognize such operand; /// as constants.; /// 3. Create the generic instruction.; ///; /// \return true if the translation succeeded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:81,Performance,perform,performing,81,/// Materialize \p C into virtual-register \p Reg. The generic instructions; /// performing this materialization will be inserted into the entry block of; /// the function.; ///; /// \return true if the materialization succeeded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:22,Performance,load,load,22,/// Translate an LLVM load instruction into generic IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:129,Usability,simpl,simple,129,"/// Helper function for translateSimpleIntrinsic.; /// \return The generic opcode for \p IntrinsicID if \p IntrinsicID is a; /// simple intrinsic (ceil, fabs, etc.). Otherwise, returns; /// Intrinsic::not_intrinsic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:80,Performance,optimiz,optimized,80,/// Used during condbr translation to find trees of conditions that can be; /// optimized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:39,Testability,test,test,39,"/// Generate code to produces one ""bit test"" for a given BitTestCase \p B.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:3,Testability,Stub,Stubs,3,// Stubs to keep the compiler happy while we implement the rest of the; // translation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:64,Availability,error,errors,64,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:19,Deployability,configurat,configuration,19,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:19,Modifiability,config,configuration,19,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:56,Availability,failure,failures,56,/// Current optimization remark emitter. Used to report failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:12,Performance,optimiz,optimization,12,/// Current optimization remark emitter. Used to report failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:52,Performance,optimiz,optimizations,52,// True when either the Target Machine specifies no optimizations or the; // function has the optnone attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:24,Performance,optimiz,optimization,24,/// Switch analysis and optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:144,Integrability,depend,depending,144,"// * Insert all the code needed to materialize the constants; // at the proper place. E.g., Entry block or dominator block; // of each constant depending on how fancy we want to be.; // * Clear the different maps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:188,Usability,Clear,Clear,188,"// * Insert all the code needed to materialize the constants; // at the proper place. E.g., Entry block or dominator block; // of each constant depending on how fancy we want to be.; // * Clear the different maps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:108,Availability,error,errors,108,"// Processing steps done per block. E.g. emitting jump tables, stack; // protectors etc. Returns true if no errors, false if there was a problem; // that caused an abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:164,Safety,abort,abort,164,"// Processing steps done per block. E.g. emitting jump tables, stack; // protectors etc. Returns true if no errors, false if there was a problem; // that caused an abort.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:16,Availability,failure,failure,16,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.; ///; /// \return true if there were no problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:77,Availability,failure,failure,77,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.; ///; /// \return true if there were no problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:130,Usability,simpl,simply,130,/// Codegen the failure basic block for a stack protector check.; ///; /// A failure stack protector machine basic block consists simply of a call to; /// __stack_chk_fail().; ///; /// For a high level explanation of how this fits into the stack protector; /// generation see the comment on the declaration of class; /// StackProtectorDescriptor.; ///; /// \return true if there were no problems.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate some vregs and offsets in the VMap. Then populate just the; /// offsets while leaving the vregs empty.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:175,Security,access,accessed,175,/// Get the alignment of the given memory operation instruction. This will; /// either be the explicitly specified value or the ABI-required alignment for; /// the type being accessed (according to the Module's DataLayout).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h:253,Usability,simpl,simply,253,"/// Record \p NewPred as a Machine predecessor to `Edge.second`, corresponding; /// to `Edge.first` at the IR level. This is used when IRTranslation creates; /// multiple MachineBasicBlocks for a given IR block and the CFG is no longer; /// represented simply by the IR-level CFG.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/IRTranslator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:518,Energy Efficiency,efficient,efficiently,518,"//===- llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Interface for Targets to specify which operations they can successfully; /// select and how the others should be expanded most efficiently.; /// This implementation has been deprecated for a long time but it still in use; /// in a few places.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:391,Integrability,Interface,Interface,391,"//===- llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h ------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Interface for Targets to specify which operations they can successfully; /// select and how the others should be expanded most efficiently.; /// This implementation has been deprecated for a long time but it still in use; /// in a few places.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:182,Performance,perform,perform,182,"/// The (vector) operation should be implemented by widening the input; /// vector and ignoring the lanes added by doing so. For example <2 x i8> is; /// rarely legal, but you might perform an <8 x i8> and then only look at; /// the first two results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:4,Performance,Perform,Perform,4,"/// Perform the operation on a different, but equivalently sized type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:55,Usability,simpl,simpler,55,/// The operation itself must be expressed in terms of simpler actions on; /// this target. E.g. a SREM replaced by an SDIV and subtraction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:79,Availability,error,error,79,/// This operation is completely unsupported on the target. A programming; /// error has occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h:252,Performance,perform,performed,252,"/// Determine what action should be taken to legalize the given generic; /// instruction opcode, type-index and type. Requires computeTables to have; /// been called.; ///; /// \returns a pair consisting of the kind of legalization that should be; /// performed and the destination type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegacyLegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:479,Modifiability,EXTEND,EXTENDS,479,"//===-- llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h -----*- C++ -*-//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; // This file contains some helper functions which try to cleanup artifacts; // such as G_TRUNCs/G_[ZSA]EXTENDS that were created during legalization to make; // the types match. This file also contains some combines of merges that happens; // at the end of the legalization.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:46,Availability,mask,mask,46,"// zext(trunc x) - > and (aext/copy/trunc x), mask; // zext(sext x) -> and (sext x), mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:85,Availability,mask,mask,85,"// zext(trunc x) - > and (aext/copy/trunc x), mask; // zext(sext x) -> and (sext x), mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:19,Availability,mask,mask,19,"// Elide G_AND and mask constant if possible.; // The G_AND would also be removed by the post-legalize redundant_and; // combine, but in this very common case, eliding early and regardless of; // OptLevel results in significant compile-time and O0 code-size; // improvements. Inserting unnecessary instructions between boolean defs; // and uses hinders a lot of folding during ISel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:29,Usability,simpl,simply,29,// If the sizes match we can simply try to replace the register,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:71,Integrability,depend,depending,71,/// Try to replace DstReg with SrcReg or build a COPY instruction; /// depending on the register constraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:111,Integrability,rout,routines,111,/// This class provides utilities for finding source registers of specific; /// bit ranges in an artifact. The routines can look through the source; /// registers if they're other artifacts to try to find a non-artifact source; /// of a value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:45,Usability,simpl,simply,45,"// If the instruction has a single def, then simply delegate the search.; // For unmerge however with multiple defs, we need to compute the offset; // into the source of the unmerge.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:265,Performance,perform,performs,265,"// Recognize UnmergeSrc that can be unmerged to DstTy directly.; // Types have to be either both vector or both non-vector types.; // Merge-like opcodes are combined one at the time. First one creates new; // unmerge, following should use the same unmerge (builder performs CSE).; //; // %0:_(EltTy), %1, %2, %3 = G_UNMERGE_VALUES %UnmergeSrc:_(UnmergeSrcTy); // %Dst:_(DstTy) = G_merge_like_opcode %0:_(EltTy), %1; // %AnotherDst:_(DstTy) = G_merge_like_opcode %2:_(EltTy), %3; //; // %Dst:_(DstTy), %AnotherDst = G_UNMERGE_VALUES %UnmergeSrc",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:89,Safety,avoid,avoid,89,"// This might be a recursive call, and we might have DeadInsts already; // populated. To avoid bad things happening later with multiple vreg defs; // etc, process the dead instructions now if any.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:203,Availability,redundant,redundant,203,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:166,Modifiability,extend,extends,166,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:240,Modifiability,extend,extends,240,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h:203,Safety,redund,redundant,203,"/// Mark MI as dead. If a def of one of MI's operands, DefMI, would also be; /// dead due to MI being killed, then mark DefMI as dead too.; /// Some of the combines (extends(trunc)), try to walk through redundant; /// copies in between the extends and the truncs, and this attempts to collect; /// the in between copies if they're dead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizationArtifactCombiner.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Security,Expose,Expose,4,/// Expose MIRBuilder so clients can set their own RecordInsertInstruction; /// functions,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:17,Availability,error,error,17,/// Some kind of error has occurred and we could not legalize this; /// instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Security,Expose,Expose,4,/// Expose LegalizerInfo so the clients can re-use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:178,Performance,perform,performed,178,"/// Replace \p MI by a sequence of legal instructions that can implement the; /// same operation. Note that this means \p MI may be deleted, so any iterator; /// steps should be performed before calling this function. \p Helper should; /// be initialized to the MachineFunction containing \p MI.; ///; /// Considered as an opaque blob, the legal code will use and define the same; /// registers as \p MI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:31,Performance,perform,performing,31,"/// Legalize an instruction by performing the operation on a wider scalar type; /// (for example a 16-bit addition can be safely performed at 32-bits; /// precision, ignoring the unused bits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:129,Performance,perform,performed,129,"/// Legalize an instruction by performing the operation on a wider scalar type; /// (for example a 16-bit addition can be safely performed at 32-bits; /// precision, ignoring the unused bits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:122,Safety,safe,safely,122,"/// Legalize an instruction by performing the operation on a wider scalar type; /// (for example a 16-bit addition can be safely performed at 32-bits; /// precision, ignoring the unused bits).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:49,Usability,simpl,simpler,49,"/// Legalize an instruction by splitting it into simpler parts, hopefully; /// understood by the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:89,Modifiability,extend,extending,89,"/// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; /// Use by extending the operand's type to \p WideTy using the specified \p; /// ExtOpcode for the extension instruction, and replacing the vreg of the; /// operand in place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:89,Modifiability,extend,extending,89,"/// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; /// Def by extending the operand's type to \p WideTy and truncating it back; /// with the \p TruncOpcode, and replacing the vreg of the operand in place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:160,Modifiability,extend,extending,160,"// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; // Def by truncating the operand's type to \p NarrowTy, replacing in place and; // extending back with \p ExtOpcode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:89,Performance,perform,performing,89,"/// Legalize a single operand \p OpIdx of the machine instruction \p MI as a; /// Def by performing it with additional vector elements and extracting the; /// result elements, and replacing the vreg of the operand in place.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:63,Performance,Perform,Perform,63,"/// Produce a merge of values in \p VRegs to define \p DstReg. Perform a merge; /// from the least common multiple type, and convert as appropriate to \p; /// DstReg.; ///; /// \p VRegs should each have type \p GCDTy. This type should be greatest; /// common divisor type of \p DstReg, \p NarrowTy, and an undetermined source; /// type.; ///; /// \p NarrowTy is the desired result merge source type. If the source value; /// needs to be widened to evenly cover \p DstReg, inserts high bits; /// corresponding to the extension opcode \p PadStrategy.; ///; /// \p VRegs will be cleared, and the result \p NarrowTy register pieces; /// will replace it. Returns The complete LCMTy that \p VRegs will cover when; /// merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:576,Usability,clear,cleared,576,"/// Produce a merge of values in \p VRegs to define \p DstReg. Perform a merge; /// from the least common multiple type, and convert as appropriate to \p; /// DstReg.; ///; /// \p VRegs should each have type \p GCDTy. This type should be greatest; /// common divisor type of \p DstReg, \p NarrowTy, and an undetermined source; /// type.; ///; /// \p NarrowTy is the desired result merge source type. If the source value; /// needs to be widened to evenly cover \p DstReg, inserts high bits; /// corresponding to the extension opcode \p PadStrategy.; ///; /// \p VRegs will be cleared, and the result \p NarrowTy register pieces; /// will replace it. Returns The complete LCMTy that \p VRegs will cover when; /// merged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Performance,Perform,Perform,4,/// Perform generic multiplication of values held in multiple registers.; /// Generated instructions use only types NarrowTy and i1.; /// Destination can be same or two times size of the source.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:251,Safety,avoid,avoid,251,/// Handles most opcodes. Split \p MI into same instruction on sub-vectors or; /// scalars with \p NumElts elements (1 for scalar). Supports uneven splits:; /// there can be leftover sub-vector with fewer then \p NumElts or a leftover; /// scalar. To avoid this use moreElements first and set MI number of elements; /// to multiple of \p NumElts. Non-vector operands that should be used on all; /// sub-instructions without split are listed in \p NonVecOpIndices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Performance,Perform,Perform,4,/// Perform Bitcast legalize action on G_EXTRACT_VECTOR_ELT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h:4,Performance,Perform,Perform,4,/// Perform Bitcast legalize action on G_INSERT_VECTOR_ELT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerHelper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:518,Energy Efficiency,efficient,efficiently,518,"//===- llvm/CodeGen/GlobalISel/LegalizerInfo.h ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Interface for Targets to specify which operations they can successfully; /// select and how the others should be expanded most efficiently.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:391,Integrability,Interface,Interface,391,"//===- llvm/CodeGen/GlobalISel/LegalizerInfo.h ------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Interface for Targets to specify which operations they can successfully; /// select and how the others should be expanded most efficiently.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:400,Safety,avoid,avoided,400,/// The (vector) operation should be implemented by splitting it into; /// sub-vectors where the operation is legal. For example a <8 x s64> add; /// might be implemented as 4 separate <2 x s64> adds. There can be a leftover; /// if there are not enough elements for last sub-vector e.g. <7 x s64> add; /// will be implemented as 3 separate <2 x s64> adds and one s64 add. Leftover; /// types can be avoided by doing MoreElements first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:182,Performance,perform,perform,182,"/// The (vector) operation should be implemented by widening the input; /// vector and ignoring the lanes added by doing so. For example <2 x i8> is; /// rarely legal, but you might perform an <8 x i8> and then only look at; /// the first two results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:4,Performance,Perform,Perform,4,"/// Perform the operation on a different, but equivalently sized type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:55,Usability,simpl,simpler,55,/// The operation itself must be expressed in terms of simpler actions on; /// this target. E.g. a SREM replaced by an SDIV and subtraction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:79,Availability,error,error,79,/// This operation is completely unsupported on the target. A programming; /// error has occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:33,Security,access,access,33,/// \returns true if this memory access is legal with for the access described; /// by \p Other (The alignment is sufficient for the size and result type).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:62,Security,access,access,62,/// \returns true if this memory access is legal with for the access described; /// by \p Other (The alignment is sufficient for the size and result type).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:70,Energy Efficiency,power,power,70,/// True iff the specified type index is a scalar whose size is not a power of; /// 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:93,Energy Efficiency,power,power,93,/// True iff the specified type index is a scalar or vector whose element size; /// is not a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:86,Energy Efficiency,power,power,86,/// True iff the specified MMO index has a size (rounded to bytes) that is not a; /// power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:116,Energy Efficiency,power,power,116,"/// True iff the specified MMO index has a size that is not an even byte size,; /// or that even byte size is not a power of 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:84,Energy Efficiency,power,power,84,/// True iff the specified type index is a vector whose element count is not a; /// power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:91,Energy Efficiency,power,power,91,/// Widen the scalar type or vector element type for the given type index to the; /// next power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:71,Energy Efficiency,power,power,71,/// Add more elements to the type for the given type index to the next power of; /// 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:4,Testability,Test,Test,4,/// Test whether the LegalityQuery matches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:86,Performance,perform,perform,86,"/// If bit I is set, this rule set contains a rule that may handle (predicate; /// or perform an action upon (or both)) the type index I. The uncertainty; /// comes from free-form rules executing user-provided lambda functions. We; /// conservatively assume such rules do the right thing and cover all type; /// indices. The bitset is intentionally 1 bit wider than it absolutely needs; /// to be to distinguish such cases from the cases where all type indices are; /// individually handled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:81,Energy Efficiency,power,power,81,"/// Lower a memory operation if the memory size, rounded to bytes, is not a; /// power of 2. For example, this will not trigger for s1 or s7, but will for; /// s24.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:70,Energy Efficiency,power,power,70,"/// Lower a memory operation if the memory access size is not a round power of; /// 2 byte size. This is stricter than lowerIfMemSizeNotPow2, and more likely; /// what you want (e.g. this will lower s1, s7 and s24).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:43,Security,access,access,43,"/// Lower a memory operation if the memory access size is not a round power of; /// 2 byte size. This is stricter than lowerIfMemSizeNotPow2, and more likely; /// what you want (e.g. this will lower s1, s7 and s24).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:33,Energy Efficiency,power,power,33,/// Widen the scalar to the next power of two that is at least MinSize.; /// No effect if the type is not a scalar or is a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:123,Energy Efficiency,power,power,123,/// Widen the scalar to the next power of two that is at least MinSize.; /// No effect if the type is not a scalar or is a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:56,Energy Efficiency,power,power,56,/// Widen the scalar or vector element type to the next power of two that is; /// at least MinSize. No effect if the scalar size is a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:134,Energy Efficiency,power,power,134,/// Widen the scalar or vector element type to the next power of two that is; /// at least MinSize. No effect if the scalar size is a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:108,Integrability,depend,depends,108,"/// Conditionally limit the maximum size of the scalar.; /// For example, when the maximum size of one type depends on the size of; /// another such as extracting N bits from an M bit container.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:54,Energy Efficiency,power,power,54,/// Add more elements to the vector to reach the next power of two.; /// No effect if the type is not a vector or the element count is a power of; /// two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:137,Energy Efficiency,power,power,137,/// Add more elements to the vector to reach the next power of two.; /// No effect if the type is not a vector or the element count is a power of; /// two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:208,Performance,perform,perform,208,/// Express \p EltTy vectors strictly using vectors with \p NumElts elements; /// (or scalars when \p NumElts equals 1).; /// First pad with undef elements to nearest larger multiple of \p NumElts.; /// Then perform split with all sub-instructions having the same type.; /// Using clampMaxNumElements (non-strict) can result in leftover instruction; /// with different type (fewer elements then \p NumElts or scalar).; /// No effect if the type is not a vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:4,Performance,Perform,Perform,4,/// Perform simple self-diagnostic and assert if there is anything obviously; /// wrong with the actions set up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:39,Testability,assert,assert,39,/// Perform simple self-diagnostic and assert if there is anything obviously; /// wrong with the actions set up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:12,Usability,simpl,simple,12,/// Perform simple self-diagnostic and assert if there is anything obviously; /// wrong with the actions set up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:127,Availability,error,error,127,/// Get the action definition builder for the given opcode. Use this to define; /// the action definitions.; ///; /// It is an error to request an opcode that has already been requested by the; /// multiple-opcode variant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:666,Availability,error,error,666,"/// Get the action definition builder for the given set of opcodes. Use this; /// to define the action definitions for multiple opcodes at once. The first; /// opcode given will be considered the representative opcode and will hold; /// the definitions whereas the other opcodes will be configured to refer to; /// the representative opcode. This lowers memory requirements and very; /// slightly improves performance.; ///; /// It would be very easy to introduce unexpected side-effects as a result of; /// this aliasing if it were permitted to request different but intersecting; /// sets of opcodes but that is difficult to keep track of. It is therefore an; /// error to request the same opcode twice using this API, to request an; /// opcode that already has definitions, or to use the single-opcode API on an; /// opcode that has already been requested by this API.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:287,Modifiability,config,configured,287,"/// Get the action definition builder for the given set of opcodes. Use this; /// to define the action definitions for multiple opcodes at once. The first; /// opcode given will be considered the representative opcode and will hold; /// the definitions whereas the other opcodes will be configured to refer to; /// the representative opcode. This lowers memory requirements and very; /// slightly improves performance.; ///; /// It would be very easy to introduce unexpected side-effects as a result of; /// this aliasing if it were permitted to request different but intersecting; /// sets of opcodes but that is difficult to keep track of. It is therefore an; /// error to request the same opcode twice using this API, to request an; /// opcode that already has definitions, or to use the single-opcode API on an; /// opcode that has already been requested by this API.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:406,Performance,perform,performance,406,"/// Get the action definition builder for the given set of opcodes. Use this; /// to define the action definitions for multiple opcodes at once. The first; /// opcode given will be considered the representative opcode and will hold; /// the definitions whereas the other opcodes will be configured to refer to; /// the representative opcode. This lowers memory requirements and very; /// slightly improves performance.; ///; /// It would be very easy to introduce unexpected side-effects as a result of; /// this aliasing if it were permitted to request different but intersecting; /// sets of opcodes but that is difficult to keep track of. It is therefore an; /// error to request the same opcode twice using this API, to request an; /// opcode that already has definitions, or to use the single-opcode API on an; /// opcode that has already been requested by this API.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:196,Performance,perform,perform,196,/// Determine what action should be taken to legalize the described; /// instruction. Requires computeTables to have been called.; ///; /// \returns a description of the next legalization step to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:156,Performance,perform,perform,156,/// Determine what action should be taken to legalize the given generic; /// instruction.; ///; /// \returns a description of the next legalization step to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h:56,Performance,perform,performed,56,"/// Return the opcode (SEXT/ZEXT/ANYEXT) that should be performed while; /// widening a constant of type SmallTy which targets can override.; /// For eg, the DAG does (SmallTy.isByteSized() ? G_SEXT : G_ZEXT) which; /// will be the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LegalizerInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:29,Performance,Load,LoadStoreOpt,29,"//== llvm/CodeGen/GlobalISel/LoadStoreOpt.h - LoadStoreOpt -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// This is an optimization pass for GlobalISel generic memory operations.; /// Specifically, it focuses on merging stores and loads to consecutive; /// addresses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:46,Performance,Load,LoadStoreOpt,46,"//== llvm/CodeGen/GlobalISel/LoadStoreOpt.h - LoadStoreOpt -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// This is an optimization pass for GlobalISel generic memory operations.; /// Specifically, it focuses on merging stores and loads to consecutive; /// addresses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:395,Performance,optimiz,optimization,395,"//== llvm/CodeGen/GlobalISel/LoadStoreOpt.h - LoadStoreOpt -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// This is an optimization pass for GlobalISel generic memory operations.; /// Specifically, it focuses on merging stores and loads to consecutive; /// addresses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:507,Performance,load,loads,507,"//== llvm/CodeGen/GlobalISel/LoadStoreOpt.h - LoadStoreOpt -------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// This is an optimization pass for GlobalISel generic memory operations.; /// Specifically, it focuses on merging stores and loads to consecutive; /// addresses.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:36,Security,access,access,36,/// Compute whether or not a memory access at \p MI1 aliases with an access at; /// \p MI2 \returns true if either alias/no-alias is known. Sets \p IsAlias; /// accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:69,Security,access,access,69,/// Compute whether or not a memory access at \p MI1 aliases with an access at; /// \p MI2 \returns true if either alias/no-alias is known. Sets \p IsAlias; /// accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:195,Performance,load,load,195,"/// Returns true if the instruction \p MI may alias \p Other.; /// This function uses multiple strategies to detect aliasing, whereas; /// aliasIsKnownForLoadStore just looks at the addresses of load/stores and is; /// tries to reason about base/index/offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:109,Safety,detect,detect,109,"/// Returns true if the instruction \p MI may alias \p Other.; /// This function uses multiple strategies to detect aliasing, whereas; /// aliasIsKnownForLoadStore just looks at the addresses of load/stores and is; /// tries to reason about base/index/offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:25,Usability,simpl,simple,25,"// Our algorithm is very simple at the moment. We assume that in instruction; // order stores are writing to incremeneting consecutive addresses. So when; // we walk the block in reverse order, the next eligible store must write to; // an offset one store width lower than CurrentLowestOffset.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:134,Safety,safe,safe,134,"// A vector of MachineInstr/unsigned pairs to denote potential aliases that; // need to be checked before the candidate is considered safe to merge. The; // unsigned value is an index into the Stores vector. The indexed store is; // the highest-indexed store that has already been checked to not have an; // alias with the instruction. We record this so we don't have to repeat; // alias checks that have been already done, only those with stores added; // after the potential alias is recorded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:181,Safety,predict,predict,181,/// Merges the stores in the given vector into a wide store.; /// \p returns true if at least some of the stores were merged.; /// This may decide not to merge stores if heuristics predict it will not be; /// worth it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:4,Performance,Perform,Perform,4,/// Perform a merge of all the stores in \p Stores into a single store.; /// Erases the old stores from the block when finished.; /// \returns true if merging was done. It may fail to perform a merge if; /// there are issues with materializing legal wide values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:184,Performance,perform,perform,184,/// Perform a merge of all the stores in \p Stores into a single store.; /// Erases the old stores from the block when finished.; /// \returns true if merging was done. It may fail to perform a merge if; /// there are issues with materializing legal wide values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h:79,Performance,optimiz,optimization,79,/// Initialize some target-specific data structures for the store merging; /// optimization. \p AddrSpace indicates which address space to use when; /// probing the legalizer info for legal stores.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LoadStoreOpt.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h:414,Integrability,interface,interface,414,"//== llvm/CodeGen/GlobalISel/Localizer.h - Localizer -------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This file describes the interface of the Localizer pass.; /// This pass moves/duplicates constant-like instructions close to their uses.; /// Its primarily goal is to workaround the deficiencies of the fast register; /// allocator.; /// With GlobalISel constants are all materialized in the entry block of; /// a function. However, the fast allocator cannot rematerialize constants and; /// has a lot more live-ranges to deal with and will most likely end up; /// spilling a lot.; /// By pushing the constants close to their use, we only create small; /// live-ranges.; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h:86,Deployability,update,updates,86,/// MRI contains all the register class/bank information that this; /// pass uses and updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Localizer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:416,Availability,checkpoint,checkpoints,416,"//===----- llvm/CodeGen/GlobalISel/LostDebugLocObserver.h -------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; /// \file; /// Tracks DebugLocs between checkpoints and verifies that they are transferred.; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:359,Availability,checkpoint,checkpoint,359,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:444,Availability,checkpoint,checkpoint,444,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:520,Safety,detect,detection,520,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h:128,Testability,log,logical,128,"/// Call this to indicate that it's a good point to assess whether locations; /// have been lost. Typically this will be when a logical change has been; /// completed such as the caller has finished replacing some instructions with; /// alternatives. When CheckDebugLocs is true, the locations will be checked; /// to see if any have been lost since the last checkpoint. When; /// CheckDebugLocs is false, it will just reset ready for the next checkpoint; /// without checking anything. This can be helpful to limit the detection to; /// easy-to-fix portions of an algorithm before allowing more difficult ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/LostDebugLocObserver.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:24,Security,access,access,24,/// Information used to access the description of the opcodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:46,Modifiability,variab,variables,46,/// Use of registers held in unsigned integer variables (or more rarely signed; /// integers) is no longer permitted to avoid ambiguity with upcoming support; /// for immediates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:120,Safety,avoid,avoid,120,/// Use of registers held in unsigned integer variables (or more rarely signed; /// integers) is no longer permitted to avoid ambiguity with upcoming support; /// for immediates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Modifiability,Variab,Variable,93,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in \p Reg (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Modifiability,Variab,Variable,93,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in memory at \p Reg (suitably modified by \p; /// Expr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Modifiability,Variab,Variable,93,/// Build and insert a DBG_VALUE instruction expressing the fact that the; /// associated \p Variable lives in the stack slot specified by \p FI; /// (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:65,Modifiability,Variab,Variable,65,/// Build and insert a DBG_VALUE instructions specifying that \p Variable is; /// given by \p C (suitably modified by \p Expr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:159,Energy Efficiency,allocate,allocated,159,"/// Build and insert \p Res = G_DYN_STACKALLOC \p Size, \p Align; ///; /// G_DYN_STACKALLOC does a dynamic stack allocation and writes the address of; /// the allocated memory into \p Res.; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with pointer type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:532,Safety,detect,detect,532,"/// Materialize and insert \p Res = G_PTR_ADD \p Op0, (G_CONSTANT \p Value); ///; /// G_PTR_ADD adds \p Value bytes to the pointer specified by \p Op0,; /// storing the resulting pointer in \p Res. If \p Value is zero then no; /// G_PTR_ADD or G_CONSTANT will be created and \pre Op0 will be assigned to; /// \p Res.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Op0 must be a generic virtual register with pointer type.; /// \pre \p ValueTy must be a scalar type.; /// \pre \p Res must be 0. This is to detect confusion between; /// materializePtrAdd() and buildPtrAdd().; /// \post \p Res will either be a new generic virtual register of the same; /// type as \p Op0 or \p Op0 itself.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:230,Availability,down,down,230,"/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 << NumBits) - 1; ///; /// This clears the low bits of a pointer operand without destroying its; /// pointer properties. This has the effect of rounding the address *down* to; /// a specified alignment in bits.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res and \p Op0 must be generic virtual registers with pointer; /// type.; /// \pre \p NumBits must be an integer representing the number of low bits to; /// be cleared in \p Op0.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:96,Usability,clear,clears,96,"/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 << NumBits) - 1; ///; /// This clears the low bits of a pointer operand without destroying its; /// pointer properties. This has the effect of rounding the address *down* to; /// a specified alignment in bits.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res and \p Op0 must be generic virtual registers with pointer; /// type.; /// \pre \p NumBits must be an integer representing the number of low bits to; /// be cleared in \p Op0.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:509,Usability,clear,cleared,509,"/// Build and insert \p Res = G_PTRMASK \p Op0, \p G_CONSTANT (1 << NumBits) - 1; ///; /// This clears the low bits of a pointer operand without destroying its; /// pointer properties. This has the effect of rounding the address *down* to; /// a specified alignment in bits.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res and \p Op0 must be generic virtual registers with pointer; /// type.; /// \pre \p NumBits must be an integer representing the number of low bits to; /// be cleared in \p Op0.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:293,Modifiability,extend,extended,293,"/// Build and insert \p Res = G_ANYEXT \p Op0; ///; /// G_ANYEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are unspecified; /// (i.e. this is neither zero nor sign-extension). For a vector register,; /// each element is extended individually.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:247,Modifiability,extend,extended,247,"/// Build and insert \p Res = G_SEXT \p Op; ///; /// G_SEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are duplicated from the; /// high bit of \p Op (i.e. 2s-complement sign extended).; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:97,Integrability,depend,depending,97,"// Build and insert \p Res = G_ANYEXT \p Op, \p Res = G_SEXT \p Op, or \p Res; // = G_ZEXT \p Op depending on how the target wants to extend boolean values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:134,Modifiability,extend,extend,134,"// Build and insert \p Res = G_ANYEXT \p Op, \p Res = G_SEXT \p Op, or \p Res; // = G_ZEXT \p Op depending on how the target wants to extend boolean values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:91,Integrability,depend,depending,91,"// Build and insert \p Res = G_SEXT_INREG \p Op, 1 or \p Res = G_AND \p Op, 1,; // or COPY depending on how the target wants to extend boolean values, using; // the original register size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:128,Modifiability,extend,extend,128,"// Build and insert \p Res = G_SEXT_INREG \p Op, 1 or \p Res = G_AND \p Op, 1,; // or COPY depending on how the target wants to extend boolean values, using; // the original register size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:226,Modifiability,extend,extended,226,"/// Build and insert \p Res = G_ZEXT \p Op; ///; /// G_ZEXT produces a register of the specified width, with bits 0 to; /// sizeof(\p Ty) * 8 set to \p Op. The remaining bits are 0. For a vector; /// register, each element is extended individually.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be smaller than \p Res; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:96,Integrability,depend,depending,96,"/// Build and insert \p Res = G_SEXT \p Op, \p Res = G_TRUNC \p Op, or; /// \p Res = COPY \p Op depending on the differing sizes of \p Res and \p Op.; /// ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:96,Integrability,depend,depending,96,"/// Build and insert \p Res = G_ZEXT \p Op, \p Res = G_TRUNC \p Op, or; /// \p Res = COPY \p Op depending on the differing sizes of \p Res and \p Op.; /// ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:97,Integrability,depend,depending,97,"// Build and insert \p Res = G_ANYEXT \p Op, \p Res = G_TRUNC \p Op, or; /// \p Res = COPY \p Op depending on the differing sizes of \p Res and \p Op.; /// ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:93,Integrability,depend,depending,93,"/// Build and insert \p Res = \p ExtOpc, \p Res = G_TRUNC \p; /// Op, or \p Res = COPY \p Op depending on the differing sizes of \p Res and; /// \p Op.; /// ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or vector type.; /// \pre \p Op must be a generic virtual register with scalar or vector type.; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:432,Integrability,depend,depend,432,"/// Build and insert G_BRCOND \p Tst, \p Dest; ///; /// G_BRCOND is a conditional branch to \p Dest.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Tst must be a generic virtual register with scalar; /// type. At the beginning of legalization, this will be a single; /// bit (s1). Targets with interesting flags registers may change; /// this. For a wider type, whether the branch is taken must only; /// depend on bit 0 (for now).; ///; /// \return The newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:147,Modifiability,extend,extended,147,/// Build and insert \p Res = G_CONSTANT \p Val; ///; /// G_CONSTANT is an integer constant with the specified size and value. \p; /// Val will be extended or truncated to the size of \p Reg.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register with scalar or pointer; /// type.; ///; /// \return The newly created instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:57,Performance,Load,Loads,57,"/// Build and insert `Res = G_LOAD Addr, MMO`.; ///; /// Loads the value stored at \p Addr. Puts the result in \p Res.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register.; /// \pre \p Addr must be a generic virtual register with pointer type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:59,Performance,Load,Loads,59,"/// Build and insert `Res = <opcode> Addr, MMO`.; ///; /// Loads the value stored at \p Addr. Puts the result in \p Res.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p Res must be a generic virtual register.; /// \pre \p Addr must be a generic virtual register with pointer type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:23,Performance,load,load,23,/// Helper to create a load from a constant offset given a base address. Load; /// the type of \p Dst from \p Offset from the given base address and memory; /// operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:73,Performance,Load,Load,73,/// Helper to create a load from a constant offset given a base address. Load; /// the type of \p Dst from \p Offset from the given base address and memory; /// operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:774,Integrability,depend,depend,774,"/// Build and insert \p Res = G_MERGE_VALUES \p Op0, ...; /// or \p Res = G_BUILD_VECTOR \p Op0, ...; /// or \p Res = G_CONCAT_VECTORS \p Op0, ...; ///; /// G_MERGE_VALUES combines the input elements contiguously into a larger; /// register. It is used when the destination register is not a vector.; /// G_BUILD_VECTOR combines scalar inputs into a vector register.; /// G_CONCAT_VECTORS combines vector inputs into a vector register.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre The entire register \p Res (and no more) must be covered by the input; /// registers.; /// \pre The type of all \p Ops registers must be identical.; ///; /// \return a MachineInstrBuilder for the newly created instruction. The; /// opcode of the new instruction will depend on the types of both; /// the destination and the sources.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:68,Availability,Mask,Mask,68,"/// Build and insert \p Res = G_SHUFFLE_VECTOR \p Src1, \p Src2, \p Mask; ///; /// \pre setBasicBlock or setMI must have been called.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:56,Availability,Mask,Mask,56,"/// Build and insert a \p Res = G_IS_FPCLASS \p Src, \p Mask",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:595,Availability,failure,failure,595,"/// Build and insert `OldValRes<def>, SuccessRes<def> =; /// G_ATOMIC_CMPXCHG_WITH_SUCCESS Addr, CmpVal, NewVal, MMO`.; ///; /// Atomically replace the value at \p Addr with \p NewVal if it is currently; /// \p CmpVal otherwise leaves it unchanged. Puts the original value from \p; /// Addr in \p Res, along with an s1 indicating whether it was replaced.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p OldValRes must be a generic virtual register of scalar type.; /// \pre \p SuccessRes must be a generic virtual register of scalar type. It; /// will be assigned 0 on failure and 1 on success.; /// \pre \p Addr must be a generic virtual register with pointer type.; /// \pre \p OldValRes, \p CmpVal, and \p NewVal must be generic virtual; /// registers of the same type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:110,Deployability,update,update,110,"/// Build and insert `OldValRes<def> = G_ATOMICRMW_<Opcode> Addr, Val, MMO`.; ///; /// Atomically read-modify-update the value at \p Addr with \p Val. Puts the; /// original value from \p Addr in \p OldValRes. The modification is; /// determined by the opcode.; ///; /// \pre setBasicBlock or setMI must have been called.; /// \pre \p OldValRes must be a generic virtual register.; /// \pre \p Addr must be a generic virtual register with pointer type.; /// \pre \p OldValRes, and \p Val must be generic virtual registers of the; /// same type.; ///; /// \return a MachineInstrBuilder for the newly created instruction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h:64,Performance,Cache,CacheType,64,"/// Build and insert G_PREFETCH \p Addr, \p RW, \p Locality, \p CacheType",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MachineIRBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h:9,Modifiability,Extend,Extend,9,// TODO: Extend for N use.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/MIPatternMatch.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:419,Integrability,interface,interface,419,"//=- llvm/CodeGen/GlobalISel/RegBankSelect.h - Reg Bank Selector --*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file describes the interface of the MachineFunctionPass; /// responsible for assigning the generic virtual registers to register bank.; ///; /// By default, the reg bank selector relies on local decisions to; /// assign the register bank. In other words, it looks at one instruction; /// at a time to decide where the operand of that instruction should live.; ///; /// At higher optimization level, we could imagine that the reg bank selector; /// would use more global analysis and do crazier thing like duplicating; /// instructions and so on. This is future work.; ///; /// For now, the pass uses a greedy algorithm to decide where the operand; /// of an instruction should live. It asks the target which banks may be; /// used for each operand of the instruction and what is the cost. Then,; /// it chooses the solution which minimize the cost of the instruction plus; /// the cost of any move that may be needed to the values into the right; /// register bank.; /// In other words, the cost for an instruction on a register bank RegBank; /// is: Cost of I on RegBank plus the sum of the cost for bringing the; /// input operands from their current register bank to RegBank.; /// Thus, the following formula:; /// cost(I, RegBank) = cost(I.Opcode, RegBank) +; /// sum(for each arg in I.arguments: costCrossCopy(arg.RegBank, RegBank)); ///; /// E.g., Let say we are assigning the register bank for the instruction; /// defining v2.; /// v0(A_REGBANK) = ...; /// v1(A_REGBANK) = ...; /// v2 = G_ADD i32 v0, v1 <-- MI; ///; /// The target may say it can generate G_ADD i32 on register bank A and B; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:779,Performance,optimiz,optimization,779,"//=- llvm/CodeGen/GlobalISel/RegBankSelect.h - Reg Bank Selector --*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file; /// This file describes the interface of the MachineFunctionPass; /// responsible for assigning the generic virtual registers to register bank.; ///; /// By default, the reg bank selector relies on local decisions to; /// assign the register bank. In other words, it looks at one instruction; /// at a time to decide where the operand of that instruction should live.; ///; /// At higher optimization level, we could imagine that the reg bank selector; /// would use more global analysis and do crazier thing like duplicating; /// instructions and so on. This is future work.; ///; /// For now, the pass uses a greedy algorithm to decide where the operand; /// of an instruction should live. It asks the target which banks may be; /// used for each operand of the instruction and what is the cost. Then,; /// it chooses the solution which minimize the cost of the instruction plus; /// the cost of any move that may be needed to the values into the right; /// register bank.; /// In other words, the cost for an instruction on a register bank RegBank; /// is: Cost of I on RegBank plus the sum of the cost for bringing the; /// input operands from their current register bank to RegBank.; /// Thus, the following formula:; /// cost(I, RegBank) = cost(I.Opcode, RegBank) +; /// sum(for each arg in I.arguments: costCrossCopy(arg.RegBank, RegBank)); ///; /// E.g., Let say we are assigning the register bank for the instruction; /// defining v2.; /// v0(A_REGBANK) = ...; /// v1(A_REGBANK) = ...; /// v2 = G_ADD i32 v0, v1 <-- MI; ///; /// The target may say it can generate G_ADD i32 on register bank A and B; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:80,Deployability,pipeline,pipeline,80,"/// This pass implements the reg bank selector pass used in the GlobalISel; /// pipeline. At the end of this pass, all register operands have been assigned",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:238,Testability,log,logically,238,"/// Abstract class used to represent an insertion point in a CFG.; /// This class records an insertion point and materializes it on; /// demand.; /// It allows to reason about the frequency of this insertion point,; /// without having to logically materialize it (e.g., on an edge),; /// before we actually need to insert something.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:59,Security,access,access,59,"/// Frequency of the insertion point.; /// \p P is used to access the various analysis that will help to; /// get that information, like MachineBlockFrequencyInfo. If \p P; /// does not contain enough to return the actual frequency,; /// this returns 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:17,Deployability,update,update,17,/// P is used to update the analysis passes as applicable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:48,Availability,repair,repairing,48,/// Struct used to represent the placement of a repairing point for; /// a given operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:35,Availability,repair,repairing,35,/// Define the kind of action this repairing needs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:15,Availability,repair,repair,15,"/// Nothing to repair, just drop this action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:14,Availability,repair,repairing,14,/// Mark this repairing placement as impossible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:12,Availability,repair,repairing,12,/// Kind of repairing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:38,Availability,repair,repaired,38,/// Index of the operand that will be repaired.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:28,Availability,repair,repair,28,/// Insertion point for the repair code.; /// The repairing code needs to happen just before these points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:50,Availability,repair,repairing,50,/// Insertion point for the repair code.; /// The repairing code needs to happen just before these points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:38,Deployability,update,update,38,/// Some insertion points may need to update the liveness and such.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:13,Availability,repair,repairing,13,/// Create a repairing placement for the \p OpIdx-th operand of; /// \p MI. \p TRI is used to make some checks on the register aliases; /// if the machine operand is a physical register. \p P is used to; /// to update liveness information and such when materializing the; /// points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:211,Deployability,update,update,211,/// Create a repairing placement for the \p OpIdx-th operand of; /// \p MI. \p TRI is used to make some checks on the register aliases; /// if the machine operand is a physical register. \p P is used to; /// to update liveness information and such when materializing the; /// points.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:18,Security,Access,Accessors,18,/// @}; /// \name Accessors related to the insertion points.; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:36,Availability,repair,repairing,36,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:107,Availability,repair,repairing,107,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:139,Availability,Repair,RepairingKind,139,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:287,Availability,Repair,RepairingKind,287,"/// @}; /// Change the type of this repairing placement to \p NewKind.; /// It is not possible to switch a repairing placement to the; /// RepairingKind::Insert. There is no fundamental problem with; /// that, but no uses as well, so do not support it for now.; ///; /// \pre NewKind != RepairingKind::Insert; /// \post getKind() == NewKind",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:128,Availability,repair,repairing,128,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:168,Availability,repair,repairing,168,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:352,Availability,repair,repairing,352,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:493,Usability,simpl,simply,493,"/// Helper class used to represent the cost for mapping an instruction.; /// When mapping an instruction, we may introduce some repairing code.; /// In most cases, the repairing code is local to the instruction,; /// thus, we can omit the basic block frequency from the cost.; /// However, some alternatives may produce non-local cost, e.g., when; /// repairing a phi, and thus we then need to scale the local cost; /// to the non-local cost. This class does this for us.; /// \note: We could simply always scale the cost. The problem is that; /// there are higher chances that we saturate the cost easier and end; /// up having the same cost for actually different alternatives.; /// Another option would be to use APInt everywhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:4,Integrability,Interface,Interface,4,/// Interface to the target lowering info related; /// to register banks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:86,Deployability,update,updates,86,/// MRI contains all the register class/bank information that this; /// pass uses and updates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:56,Availability,failure,failures,56,/// Current optimization remark emitter. Used to report failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:12,Performance,optimiz,optimization,12,/// Current optimization remark emitter. Used to report failures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:4,Performance,Optimiz,Optimization,4,/// Optimization mode of the pass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:64,Availability,error,errors,64,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:19,Deployability,configurat,configuration,19,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:19,Modifiability,config,configuration,19,/// Current target configuration. Controls how the pass handles errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:178,Availability,repair,repairing,178,"/// Check if \p Reg is already assigned what is described by \p ValMapping.; /// \p OnlyAssign == true means that \p Reg just needs to be assigned a; /// register bank. I.e., no repairing is necessary to have the; /// assignment match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:11,Availability,repair,repairing,11,"/// Insert repairing code for \p Reg as specified by \p ValMapping.; /// The repairing placement is specified by \p RepairPt.; /// \p NewVRegs contains all the registers required to remap \p Reg.; /// In other words, the number of registers in NewVRegs must be equal; /// to ValMapping.BreakDown.size().; ///; /// The transformation could be sketched as:; /// \code; /// ... = op Reg; /// \endcode; /// Becomes; /// \code; /// <NewRegs> = COPY or extract Reg; /// ... = op Reg; /// \endcode; ///; /// and; /// \code; /// Reg = op ...; /// \endcode; /// Becomes; /// \code; /// Reg = op ...; /// Reg = COPY or build_sequence <NewRegs>; /// \endcode; ///; /// \pre NewVRegs.size() == ValMapping.BreakDown.size(); ///; /// \note The caller is supposed to do the rewriting of op if need be.; /// I.e., Reg = op ... => <NewRegs> = NewOp ...; ///; /// \return True if the repairing worked, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:77,Availability,repair,repairing,77,"/// Insert repairing code for \p Reg as specified by \p ValMapping.; /// The repairing placement is specified by \p RepairPt.; /// \p NewVRegs contains all the registers required to remap \p Reg.; /// In other words, the number of registers in NewVRegs must be equal; /// to ValMapping.BreakDown.size().; ///; /// The transformation could be sketched as:; /// \code; /// ... = op Reg; /// \endcode; /// Becomes; /// \code; /// <NewRegs> = COPY or extract Reg; /// ... = op Reg; /// \endcode; ///; /// and; /// \code; /// Reg = op ...; /// \endcode; /// Becomes; /// \code; /// Reg = op ...; /// Reg = COPY or build_sequence <NewRegs>; /// \endcode; ///; /// \pre NewVRegs.size() == ValMapping.BreakDown.size(); ///; /// \note The caller is supposed to do the rewriting of op if need be.; /// I.e., Reg = op ... => <NewRegs> = NewOp ...; ///; /// \return True if the repairing worked, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:116,Availability,Repair,RepairPt,116,"/// Insert repairing code for \p Reg as specified by \p ValMapping.; /// The repairing placement is specified by \p RepairPt.; /// \p NewVRegs contains all the registers required to remap \p Reg.; /// In other words, the number of registers in NewVRegs must be equal; /// to ValMapping.BreakDown.size().; ///; /// The transformation could be sketched as:; /// \code; /// ... = op Reg; /// \endcode; /// Becomes; /// \code; /// <NewRegs> = COPY or extract Reg; /// ... = op Reg; /// \endcode; ///; /// and; /// \code; /// Reg = op ...; /// \endcode; /// Becomes; /// \code; /// Reg = op ...; /// Reg = COPY or build_sequence <NewRegs>; /// \endcode; ///; /// \pre NewVRegs.size() == ValMapping.BreakDown.size(); ///; /// \note The caller is supposed to do the rewriting of op if need be.; /// I.e., Reg = op ... => <NewRegs> = NewOp ...; ///; /// \return True if the repairing worked, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:866,Availability,repair,repairing,866,"/// Insert repairing code for \p Reg as specified by \p ValMapping.; /// The repairing placement is specified by \p RepairPt.; /// \p NewVRegs contains all the registers required to remap \p Reg.; /// In other words, the number of registers in NewVRegs must be equal; /// to ValMapping.BreakDown.size().; ///; /// The transformation could be sketched as:; /// \code; /// ... = op Reg; /// \endcode; /// Becomes; /// \code; /// <NewRegs> = COPY or extract Reg; /// ... = op Reg; /// \endcode; ///; /// and; /// \code; /// Reg = op ...; /// \endcode; /// Becomes; /// \code; /// Reg = op ...; /// Reg = COPY or build_sequence <NewRegs>; /// \endcode; ///; /// \pre NewVRegs.size() == ValMapping.BreakDown.size(); ///; /// \note The caller is supposed to do the rewriting of op if need be.; /// I.e., Reg = op ... => <NewRegs> = NewOp ...; ///; /// \return True if the repairing worked, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:80,Availability,repair,repairing,80,"/// Compute the cost of mapping \p MI with \p InstrMapping and; /// compute the repairing placement for such mapping in \p; /// RepairPts.; /// \p BestCost is used to specify when the cost becomes too high; /// and thus it is not worth computing the RepairPts. Moreover if; /// \p BestCost == nullptr, the mapping cost is actually not; /// computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:128,Availability,Repair,RepairPts,128,"/// Compute the cost of mapping \p MI with \p InstrMapping and; /// compute the repairing placement for such mapping in \p; /// RepairPts.; /// \p BestCost is used to specify when the cost becomes too high; /// and thus it is not worth computing the RepairPts. Moreover if; /// \p BestCost == nullptr, the mapping cost is actually not; /// computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:250,Availability,Repair,RepairPts,250,"/// Compute the cost of mapping \p MI with \p InstrMapping and; /// compute the repairing placement for such mapping in \p; /// RepairPts.; /// \p BestCost is used to specify when the cost becomes too high; /// and thus it is not worth computing the RepairPts. Moreover if; /// \p BestCost == nullptr, the mapping cost is actually not; /// computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:12,Availability,Repair,RepairPt,12,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:43,Availability,repair,repair,43,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:115,Availability,repair,repair,115,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:194,Availability,Repair,RepairPt,194,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:263,Availability,Repair,RepairPt,263,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:372,Availability,Repair,RepairPt,372,"/// When \p RepairPt involves splitting to repair \p MO for the; /// given \p ValMapping, try to change the way we repair such that; /// the splitting is not required anymore.; ///; /// \pre \p RepairPt.hasSplit(); /// \pre \p MO == MO.getParent()->getOperand(\p RepairPt.getOpIdx()); /// \pre \p ValMapping is the mapping of \p MO for MO.getParent(); /// that implied \p RepairPt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:34,Availability,Repair,RepairPts,34,"/// Apply \p Mapping to \p MI. \p RepairPts represents the different; /// mapping action that need to happen for the mapping to be; /// applied.; /// \return True if the mapping was applied sucessfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h:244,Usability,Simpl,Simplified,244,"/// Walk through \p MF and assign a register bank to every virtual register; /// that are still mapped to nothing.; /// The target needs to provide a RegisterBankInfo and in particular; /// override RegisterBankInfo::getInstrMapping.; ///; /// Simplified algo:; /// \code; /// RBI = MF.subtarget.getRegBankInfo(); /// MIRBuilder.setMF(MF); /// for each bb in MF; /// for each inst in bb; /// MIRBuilder.setInstr(inst); /// MappingCosts = RBI.getMapping(inst);; /// Idx = findIdxOfMinCost(MappingCosts); /// CurRegBank = MappingCosts[Idx].RegBank; /// MRI.setRegBank(inst.getOperand(0).getReg(), CurRegBank); /// for each argument in inst; /// if (CurRegBank != argument.RegBank); /// ArgReg = argument.getReg(); /// Tmp = MRI.createNewVirtual(MRI.getSize(ArgReg), CurRegBank); /// MIRBuilder.buildInstr(COPY, Tmp, ArgReg); /// inst.getOperand(argument.getOperandNo()).setReg(Tmp); /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/RegBankSelect.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:473,Deployability,pipeline,pipeline,473,"//==-- llvm/CodeGen/GlobalISel/Utils.h ---------------------------*- C++ -*-==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; /// \file This file declares the API of helper functions used throughout the; /// GlobalISel pipeline.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:336,Deployability,update,updates,336,"/// Constrain the Register operand OpIdx, so that it is now constrained to the; /// TargetRegisterClass passed as an argument (RegClass).; /// If this fails, create a new virtual register in the correct class and insert; /// a COPY before \p InsertPt if it is a use or after if it is a definition.; /// In both cases, the function also updates the register of RegMo. The debug; /// location of \p InsertPt is used for the new copy.; ///; /// \return The virtual register constrained to the right register class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:297,Deployability,update,updates,297,"/// Try to constrain Reg so that it is usable by argument OpIdx of the provided; /// MCInstrDesc \p II. If this fails, create a new virtual register in the; /// correct class and insert a COPY before \p InsertPt if it is a use or after; /// if it is a definition. In both cases, the function also updates the register; /// of RegMo.; /// This is equivalent to constrainOperandRegClass(..., RegClass, ...); /// with RegClass obtained from the MCInstrDesc. The debug location of \p; /// InsertPt is used for the new copy.; ///; /// \return The virtual register constrained to the right register class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:39,Usability,usab,usable,39,"/// Try to constrain Reg so that it is usable by argument OpIdx of the provided; /// MCInstrDesc \p II. If this fails, create a new virtual register in the; /// correct class and insert a COPY before \p InsertPt if it is a use or after; /// if it is a definition. In both cases, the function also updates the register; /// of RegMo.; /// This is equivalent to constrainOperandRegClass(..., RegClass, ...); /// with RegClass obtained from the MCInstrDesc. The debug location of \p; /// InsertPt is used for the new copy.; ///; /// \return The virtual register constrained to the right register class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:467,Security,expose,expose,467,"/// Mutate the newly-selected instruction \p I to constrain its (possibly; /// generic) virtual register operands to the instruction's register class.; /// This could involve inserting COPYs before (for uses) or after (for defs).; /// This requires the number of operands to match the instruction description.; /// \returns whether operand regclass constraining succeeded.; ///; // FIXME: Not all instructions have the same number of operands. We should; // probably expose a constrain helper per operand and let the target selector; // constrain individual registers, like fast-isel.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:48,Integrability,depend,depending,48,/// Check if DstReg can be replaced with SrcReg depending on the register; /// constraints.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:19,Availability,error,error,19,/// Report an ISel error as a missed optimization remark to the LLVMContext's; /// diagnostic stream. Set the FailedISel MachineFunction property.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:37,Performance,optimiz,optimization,37,/// Report an ISel error as a missed optimization remark to the LLVMContext's; /// diagnostic stream. Set the FailedISel MachineFunction property.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:39,Performance,optimiz,optimization,39,/// Report an ISel warning as a missed optimization remark to the LLVMContext's; /// diagnostic stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Usability,Simpl,Simple,4,/// Simple struct used to hold a constant integer value and a virtual; /// register.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Usability,Simpl,Simple,4,/// Simple struct used to hold a Register value and the instruction which; /// defines it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:106,Availability,failure,failure,106,/// Tries to constant fold a vector binop with sources \p Op1 and \p Op2.; /// Returns an empty vector on failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:4,Testability,Test,Test,4,/// Test if the given value is known to have exactly one bit set. This differs; /// from computeKnownBits in that it doesn't necessarily determine which bit is; /// set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:29,Modifiability,extend,extended,29,/// \returns the scalar sign extended integral splat value of \p Reg if; /// possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:29,Modifiability,extend,extended,29,/// \returns the scalar sign extended integral splat value defined by \p MI if; /// possible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h:46,Performance,optimiz,optimized,46,/// Returns true if the given block should be optimized for size.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/GlobalISel/Utils.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:23,Availability,mask,mask,23,/// Maps from register mask names to register masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:46,Availability,mask,masks,46,/// Maps from register mask names to register masks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:58,Availability,mask,mask,58,/// Check if the given identifier is a name of a register mask.; ///; /// Return null if the identifier isn't a register mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:121,Availability,mask,mask,121,/// Check if the given identifier is a name of a register mask.; ///; /// Return null if the identifier isn't a register mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:539,Availability,error,error,539,"/// Parse the machine basic block definitions, and skip the machine; /// instructions.; ///; /// This function runs the first parsing pass on the machine function's body.; /// It parses only the machine basic block definitions and creates the machine; /// basic blocks in the given machine function.; ///; /// The machine instructions aren't parsed during the first pass because all; /// the machine basic blocks aren't defined yet - this makes it impossible to; /// resolve the machine basic block references.; ///; /// Return true if an error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h:416,Availability,error,error,416,/// Parse the machine instructions.; ///; /// This function runs the second parsing pass on the machine function's body.; /// It skips the machine basic block definitions and parses only the machine; /// instructions and basic block attributes like liveins and successors.; ///; /// The second parsing pass assumes that the first parsing pass already ran; /// on the given source string.; ///; /// Return true if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:67,Performance,load,loaded,67,/// This class initializes machine functions by applying the state loaded from; /// a MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:162,Availability,error,error,162,"/// Parses the optional LLVM IR module in the MIR file.; ///; /// A new, empty module is created if the LLVM IR isn't present.; /// \returns nullptr if a parsing error occurred.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:131,Availability,error,error,131,/// Parses MachineFunctions in the MIR file and add them to the given; /// MachineModuleInfo \p MMI.; ///; /// \returns true if an error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:340,Availability,Error,Error,340,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:348,Availability,Error,Error,348,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:30,Integrability,interface,interface,30,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:529,Performance,load,loaded,529,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:519,Testability,stub,stub,519,/// This function is the main interface to the MIR serialization format parser.; ///; /// It reads in a MIR file and returns a MIR parser that can parse the embedded; /// LLVM IR module and initialize the machine functions by parsing the machine; /// function's state.; ///; /// \param Filename - The name of the file to parse.; /// \param Error - Error result info.; /// \param Context - Context which will be used for the parsed LLVM IR module.; /// \param ProcessIRFunction - function to run on every IR function or stub; /// loaded from the MIR file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h:29,Integrability,interface,interface,29,/// This function is another interface to the MIR serialization format parser.; ///; /// It returns a MIR parser that works with the given memory buffer and that can; /// parse the embedded LLVM IR module and initialize the machine functions by; /// parsing the machine function's state.; ///; /// \param Contents - The MemoryBuffer containing the machine level IR.; /// \param Context - Context which will be used for the parsed LLVM IR module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/MIRParser/MIRParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:117,Availability,down,down,117,"// Swap-and-pop for fast removal.; // 1) Update the adj index of the edge currently at back().; // 2) Move last Edge down to Idx.; // 3) pop_back(); // If Idx == size() - 1 then the setAdjEdgeIdx and swap are; // redundant, but both operations are cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:213,Availability,redundant,redundant,213,"// Swap-and-pop for fast removal.; // 1) Update the adj index of the edge currently at back().; // 2) Move last Edge down to Idx.; // 3) pop_back(); // If Idx == size() - 1 then the setAdjEdgeIdx and swap are; // redundant, but both operations are cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:41,Deployability,Update,Update,41,"// Swap-and-pop for fast removal.; // 1) Update the adj index of the edge currently at back().; // 2) Move last Edge down to Idx.; // 3) pop_back(); // If Idx == size() - 1 then the setAdjEdgeIdx and swap are; // redundant, but both operations are cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:213,Safety,redund,redundant,213,"// Swap-and-pop for fast removal.; // 1) Update the adj index of the edge currently at back().; // 2) Move last Edge down to Idx.; // 3) pop_back(); // If Idx == size() - 1 then the setAdjEdgeIdx and swap are; // redundant, but both operations are cheap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:4,Deployability,Release,Release,4,/// Release from solver instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:479,Safety,avoid,avoid,479,"/// Add a node bypassing the cost allocator.; /// @param Costs Cost vector ptr for the new node (must be convertible to; /// VectorPtr).; /// @return Node iterator for the added node.; ///; /// This method allows for fast addition of a node whose costs don't need; /// to be passed through the cost allocator. The most common use case for; /// this is when duplicating costs from an existing node (when using a; /// pooling allocator). These have already been uniqued, so we can avoid; /// re-constructing and re-uniquing them by attaching them directly to the; /// new node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:492,Safety,avoid,avoid,492,"/// Add an edge bypassing the cost allocator.; /// @param N1Id First node.; /// @param N2Id Second node.; /// @param Costs Cost matrix for new edge.; /// @return Edge iterator for the added edge.; ///; /// This method allows for fast addition of an edge whose costs don't need; /// to be passed through the cost allocator. The most common use case for; /// this is when duplicating costs from an existing edge (when using a; /// pooling allocator). These have already been uniqued, so we can avoid; /// re-constructing and re-uniquing them by attaching them directly to the; /// new edge.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:54,Deployability,update,update,54,/// Set a node's cost vector.; /// @param NId Node to update.; /// @param Costs New costs to set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:4,Deployability,Update,Update,4,/// Update an edge's cost matrix.; /// @param EId Edge id.; /// @param Costs New cost matrix.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:435,Energy Efficiency,efficient,efficient,435,"/// Disconnect an edge from the given node.; ///; /// Removes the given edge from the adjacency list of the given node.; /// This operation leaves the edge in an 'asymmetric' state: It will no; /// longer appear in an iteration over the given node's (NId's) edges, but; /// will appear in an iteration over the 'other', unnamed node's edges.; ///; /// This does not correspond to any normal graph operation, but exists to; /// support efficient PBQP graph-reduction based solvers. It is used to; /// 'effectively' remove the unnamed node from the graph while the solver; /// is performing the reduction. The solver will later call reconnectNode; /// to restore the edge in the named node's adjacency list.; ///; /// Since the degree of a node is the number of connected edges,; /// disconnecting an edge from a node 'u' will cause the degree of 'u' to; /// drop by 1.; ///; /// A disconnected edge WILL still appear in an iteration over the graph; /// edges.; ///; /// A disconnected edge should not be removed from the graph, it should be; /// reconnected first.; ///; /// A disconnected edge can be reconnected by calling the reconnectEdge; /// method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h:578,Performance,perform,performing,578,"/// Disconnect an edge from the given node.; ///; /// Removes the given edge from the adjacency list of the given node.; /// This operation leaves the edge in an 'asymmetric' state: It will no; /// longer appear in an iteration over the given node's (NId's) edges, but; /// will appear in an iteration over the 'other', unnamed node's edges.; ///; /// This does not correspond to any normal graph operation, but exists to; /// support efficient PBQP graph-reduction based solvers. It is used to; /// 'effectively' remove the unnamed node from the graph while the solver; /// is performing the reduction. The solver will later call reconnectNode; /// to restore the edge in the named node's adjacency list.; ///; /// Since the degree of a node is the number of connected edges,; /// disconnecting an edge from a node 'u' will cause the degree of 'u' to; /// drop by 1.; ///; /// A disconnected edge WILL still appear in an iteration over the graph; /// edges.; ///; /// A disconnected edge should not be removed from the graph, it should be; /// reconnected first.; ///; /// A disconnected edge can be reconnected by calling the reconnectEdge; /// method.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Graph.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:12,Security,access,access,12,/// Element access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:18,Security,access,access,18,/// Const element access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:19,Security,access,access,19,/// Matrix element access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h:19,Security,access,access,19,/// Matrix element access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/Math.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:4,Energy Efficiency,Reduce,Reduce,4,"/// Reduce a node of degree one.; ///; /// Propagate costs from the given node, which must be of degree one, to its; /// neighbor. Notify the problem domain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:25,Safety,avoid,avoid,25,// Duplicate a little to avoid transposing matrices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:108,Availability,avail,available,108,"// If there are registers in the cost vector, but all of them have infinite; // costs, then ... there is no available register.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:30,Energy Efficiency,reduce,reduced,30,"// Find a solution to a fully reduced graph by backpropagation.; //; // Given a graph and a reduction order, pop each node from the reduction; // order and greedily compute a minimum solution based on the node costs, and; // the dependent costs due to previously solved nodes.; //; // Note - This does not return the graph to its original (pre-reduction); // state: the existing solvers destructively alter the node and edge; // costs. Given that, the backpropagate function doesn't attempt to; // replace the edges either, but leaves the graph in its reduced; // state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:552,Energy Efficiency,reduce,reduced,552,"// Find a solution to a fully reduced graph by backpropagation.; //; // Given a graph and a reduction order, pop each node from the reduction; // order and greedily compute a minimum solution based on the node costs, and; // the dependent costs due to previously solved nodes.; //; // Note - This does not return the graph to its original (pre-reduction); // state: the existing solvers destructively alter the node and edge; // costs. Given that, the backpropagate function doesn't attempt to; // replace the edges either, but leaves the graph in its reduced; // state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:229,Integrability,depend,dependent,229,"// Find a solution to a fully reduced graph by backpropagation.; //; // Given a graph and a reduction order, pop each node from the reduction; // order and greedily compute a minimum solution based on the node costs, and; // the dependent costs due to previously solved nodes.; //; // Note - This does not return the graph to its original (pre-reduction); // state: the existing solvers destructively alter the node and edge; // costs. Given that, the backpropagate function doesn't attempt to; // replace the edges either, but leaves the graph in its reduced; // state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:213,Availability,avail,available,213,"// Although a conservatively allocatable node can be allocated to a register,; // spilling it may provide a lower cost solution. Assert here that spilling; // is done by choice, not because there were no register available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:53,Energy Efficiency,allocate,allocated,53,"// Although a conservatively allocatable node can be allocated to a register,; // spilling it may provide a lower cost solution. Assert here that spilling; // is done by choice, not because there were no register available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h:129,Testability,Assert,Assert,129,"// Although a conservatively allocatable node can be allocated to a register,; // spilling it may provide a lower cost solution. Assert here that spilling; // is done by choice, not because there were no register available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/CodeGen/PBQP/ReductionRules.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:72,Availability,avail,available,72,// Source code for this particular line; // (in case if `Source` is not available),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:42,Modifiability,variab,variable,42,/// Container for description of a global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:35,Performance,load,load,35,/// An inferface for inquiring the load address of a loaded object file; /// to be used by the DIContext implementations when applying relocations; /// on the fly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:53,Performance,load,loaded,53,/// An inferface for inquiring the load address of a loaded object file; /// to be used by the DIContext implementations when applying relocations; /// on the fly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:15,Performance,Load,Load,15,"/// Obtain the Load Address of a section by SectionRef.; ///; /// Calculate the address of the given section.; /// The section need not be present in the local address space. The addresses; /// need to be consistent with the addresses used to query the DIContext and; /// the output of this function should be deterministic, i.e. repeated calls; /// with the same Sec should give the same address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:20,Availability,avail,available,20,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:102,Availability,avail,available,102,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:335,Availability,avail,available,335,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:159,Performance,load,loaded,159,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:313,Performance,load,loaded,313,"/// If conveniently available, return the content of the given Section.; ///; /// When the section is available in the local address space, in relocated; /// (loaded) form, e.g. because it was relocated by a JIT for execution, this; /// function should provide the contents of said section in `Data`. If the; /// loaded section is not available, or the cost of retrieving it would be; /// prohibitive, this function should return false. In that case, relocations; /// will be read from the local (unrelocated) object file and applied on the; /// fly. Note that this method is used purely for optimzation purposes in the; /// common case of JITting in the local address space, so returning false; /// should always be correct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:234,Performance,Load,LoadedObjectInfo,234,"// FIXME: This is untested and unused anywhere in the LLVM project, it's; // used/needed by Julia (an external project). It should have some coverage; // (at least tests, but ideally example functionality).; /// Obtain a copy of this LoadedObjectInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h:164,Testability,test,tests,164,"// FIXME: This is untested and unused anywhere in the LLVM project, it's; // used/needed by Julia (an external project). It should have some coverage; // (at least tests, but ideally example functionality).; /// Obtain a copy of this LoadedObjectInfo.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DIContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:662,Usability,simpl,simply,662,"//===-- BTF.h --------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; ///; /// \file; /// This file contains the layout of .BTF and .BTF.ext ELF sections.; ///; /// The binary layout for .BTF section:; /// struct Header; /// Type and Str subsections; /// The Type subsection is a collection of types with type id starting with 1.; /// The Str subsection is simply a collection of strings.; ///; /// The binary layout for .BTF.ext section:; /// struct ExtHeader; /// FuncInfo, LineInfo, FieldReloc and ExternReloc subsections; /// The FuncInfo subsection is defined as below:; /// BTFFuncInfo Size; /// struct SecFuncInfo for ELF section #1; /// A number of struct BPFFuncInfo for ELF section #1; /// struct SecFuncInfo for ELF section #2; /// A number of struct BPFFuncInfo for ELF section #2; /// ...; /// The LineInfo subsection is defined as below:; /// BPFLineInfo Size; /// struct SecLineInfo for ELF section #1; /// A number of struct BPFLineInfo for ELF section #1; /// struct SecLineInfo for ELF section #2; /// A number of struct BPFLineInfo for ELF section #2; /// ...; /// The FieldReloc subsection is defined as below:; /// BPFFieldReloc Size; /// struct SecFieldReloc for ELF section #1; /// A number of struct BPFFieldReloc for ELF section #1; /// struct SecFieldReloc for ELF section #2; /// A number of struct BPFFieldReloc for ELF section #2; /// ...; ///; /// The section formats are also defined at; /// https://github.com/torvalds/linux/blob/master/include/uapi/linux/btf.h; ///; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:4,Modifiability,Variab,Variable,4,/// Variable scoping information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:13,Deployability,patch,patch,13,///< What to patch the instruction,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h:68,Security,access,accessor,68,"// Define a number of sub-types for CommonType, each with:; // - An accessor for a relevant ""tail"" information (data fields that; // follow the CommonType record in binary format).; // - A classof() definition based on CommonType::getKind() value to; // allow use with dyn_cast<>() function.; // For CommonType sub-types that are followed by a single entry of; // some type in the binary format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTF.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFContext.h:394,Integrability,interface,interface,394,"//===- BTFContext.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // BTFContext interface is used by llvm-objdump tool to print source; // code alongside disassembly.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:562,Security,access,accessible,562,"//===- BTFParser.h ----------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // BTFParser reads .BTF and .BTF.ext ELF sections generated by LLVM; // BPF backend and provides introspection for the stored information.; // Currently the following information is accessible:; // - string table;; // - instruction offset to line information mapping;; // - types table;; // - CO-RE relocations table.; //; // See llvm/DebugInfo/BTF/BTF.h for some details about binary format; // and links to Linux Kernel documentation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:34,Deployability,continuous,continuous,34,// In BTF strings are stored as a continuous memory region with; // individual strings separated by 0 bytes. Strings are identified; // by an offset in such region.; // The `StringsTable` points to this region in the parsed ObjectFile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:202,Energy Efficiency,allocate,allocated,202,"// Vector of pointers to all known types, index in this vector; // equals to logical type BTF id.; // Pointers point to memory owned by `TypesBuffer`; // (except pointer at index 0, which is statically allocated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:77,Testability,log,logical,77,"// Vector of pointers to all known types, index in this vector; // equals to logical type BTF id.; // Pointers point to memory owned by `TypesBuffer`; // (except pointer at index 0, which is statically allocated).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:24,Performance,load,load,24,// Allow to selectively load BTF information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:224,Availability,error,error,224,"// Fills instance of BTFParser with information stored in .BTF and; // .BTF.ext sections of the `Obj`. If this instance was already; // filled, old data is discarded.; //; // If information cannot be parsed:; // - return an error describing the failure;; // - state of the BTFParser might be incomplete but is not invalid,; // queries might be run against it, but some (or all) information; // might be unavailable;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h:245,Availability,failure,failure,245,"// Fills instance of BTFParser with information stored in .BTF and; // .BTF.ext sections of the `Obj`. If this instance was already; // filled, old data is discarded.; //; // If information cannot be parsed:; // - return an error describing the failure;; // - state of the BTFParser might be incomplete but is not invalid,; // queries might be run against it, but some (or all) information; // might be unavailable;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/BTF/BTFParser.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/AppendingTypeTableBuilder.h:10,Integrability,interface,interface,10,// public interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/AppendingTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/AppendingTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:87,Integrability,Interface,Interface,87,/// These values correspond to the CV_CFL_LANG enumeration in the Microsoft; /// Debug Interface Access SDK,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:97,Security,Access,Access,97,/// These values correspond to the CV_CFL_LANG enumeration in the Microsoft; /// Debug Interface Access SDK,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:14,Integrability,rout,routines,14,// Marker for routines always inlined and thus lacking a convention,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:17,Security,access,access,17,/// Source-level access specifier. (CV_access_e),MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:23,Modifiability,inherit,inheritance,23,"// member data, single inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:25,Modifiability,inherit,inheritance,25,"// member data, multiple inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:24,Modifiability,inherit,inheritance,24,"// member data, virtual inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:27,Modifiability,inherit,inheritance,27,"// member function, single inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:29,Modifiability,inherit,inheritance,29,"// member function, multiple inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h:28,Modifiability,inherit,inheritance,28,"// member function, virtual inheritance",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeView.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h:25,Availability,Error,Error,25,"//===- CodeViewError.h - Error extensions for CodeView ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h:19,Availability,error,errors,19,/// Base class for errors originating when parsing raw PDB files,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h:3,Modifiability,inherit,inherit,3,// inherit constructors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewError.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewRecordIO.h:52,Integrability,interface,interface,52,// writes records to assembly file using MC library interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewRecordIO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CodeViewRecordIO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/ContinuationRecordBuilder.h:205,Integrability,interface,interface,205,"// This template is explicitly instantiated in the implementation file for all; // supported types. The method itself is ugly, so inlining it into the header; // file clutters an otherwise straightforward interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/ContinuationRecordBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/ContinuationRecordBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVRecord.h:193,Safety,safe,safety,193,/// CVRecord is a fat pointer (base + size pair) to a symbol or type record.; /// Carrying the size separately instead of trusting the size stored in the; /// record prefix provides some extra safety and flexibility.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h:148,Deployability,pipeline,pipeline,148,// The record bytes are passed into the visitation; // function. The algorithm should first deserialize them; // before passing them on through the pipeline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h:94,Integrability,interface,interface,94,"// The record bytes are not present, and it is the; // responsibility of the visitor callback interface to; // supply the bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/CVTypeVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h:15,Security,checksum,checksum,15,// The type of checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h:20,Security,checksum,checksum,20,// The bytes of the checksum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugChecksumsSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h:44,Security,checksum,checksums,44,// Offset of FileChecksum entry in File; // checksums buffer. The checksum entry then; // contains another offset into the string; // table of the actual name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h:66,Security,checksum,checksum,66,// Offset of FileChecksum entry in File; // checksums buffer. The checksum entry then; // contains another offset into the string; // table of the actual name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h:55,Modifiability,variab,variable,55,"// Code size of block, in bytes.; // The following two variable length arrays appear immediately after the; // header. The structure definitions follow.; // LineNumberEntry Lines[NumLines];; // ColumnNumberEntry Columns[NumLines];",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugLinesSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h:80,Usability,simpl,simple,80,"/// Represents a read-only view of a CodeView string table. This is a very; /// simple flat buffer consisting of null-terminated strings, where strings; /// are retrieved by their offset in the buffer. DebugStringTableSubsectionRef; /// does not own the underlying storage for the buffer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugStringTableSubsection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugSubsectionRecord.h:83,Energy Efficiency,Reduce,Reduce,83,/// The bytes of the subsection. Only non-empty if Subsection is null.; /// FIXME: Reduce the size of this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugSubsectionRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/DebugSubsectionRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:128,Integrability,interface,interface,128,/// A serializer that can write non-continuation leaf types. Only used as; /// a convenience function so that we can provide an interface method to; /// write an unserialized record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:4,Security,Hash,Hash,4,/// Hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:27,Security,hash,hash,27,/// Contains a list of all hash values indexed by TypeIndex.toArrayIndex().,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:10,Integrability,interface,interface,10,// public interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h:23,Deployability,update,update,23,"// On the second pass, update with index to remapped record. The; // (initially misbehaved) record will now come *after* other records; // resolved in the first pass, with proper *back* references in the; // stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GlobalTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h:7,Usability,GUID,GUID,7,"//===- GUID.h ---------------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h:25,Usability,GUID,GUID,25,/// This represents the 'GUID' type from windows.h.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/GUID.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:202,Modifiability,variab,variable-lengthed,202,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:35,Security,access,access,35,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:86,Security,access,access,86,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:268,Security,access,access,268,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:505,Security,access,access,505,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:945,Security,access,access,945,"/// Provides amortized O(1) random access to a CodeView type stream.; /// Normally to access a type from a type stream, you must know its byte; /// offset into the type stream, because type records are variable-lengthed.; /// However, this is not the way we prefer to access them. For example, given; /// a symbol record one of the fields may be the TypeIndex of the symbol's; /// type record. Or given a type record such as an array type, there might; /// be a TypeIndex for the element type. Sequential access is perfect when; /// we're just dumping every entry, but it's very poor for real world usage.; ///; /// Type streams in PDBs contain an additional field which is a list of pairs; /// containing indices and their corresponding offsets, roughly every ~8KB of; /// record data. This general idea need not be confined to PDBs though. By; /// supplying such an array, the producer of a type stream can allow the; /// consumer much better access time, because the consumer can find the nearest; /// index in this array, and do a linear scan forward only from there.; ///; /// LazyRandomTypeCollection implements this algorithm, but additionally goes; /// one step further by caching offsets of every record that has been visited at; /// least once. This way, even repeated visits of the same record will never; /// require more than one linear scan. For a type stream of N elements divided; /// into M chunks of roughly equal size, this yields a worst case lookup time; /// of O(N/M) and an amortized time of O(1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:35,Security,access,access,35,/// The type array to allow random access visitation of.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h:66,Testability,log,log,66,"/// An array of index offsets for the given type stream, allowing log(N); /// lookups of a type record by index. Similar to KnownOffsets but only; /// contains offsets for some type indices, some of which may not have; /// ever been visited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/LazyRandomTypeCollection.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h:128,Integrability,interface,interface,128,/// A serializer that can write non-continuation leaf types. Only used as; /// a convenience function so that we can provide an interface method to; /// write an unserialized record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h:4,Security,Hash,Hash,4,/// Hash table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h:10,Integrability,interface,interface,10,// public interface,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/MergingTypeTableBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h:7,Usability,Simpl,SimpleTypeSerializer,7,"//===- SimpleTypeSerializer.h -----------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h:205,Integrability,interface,interface,205,"// This template is explicitly instantiated in the implementation file for all; // supported types. The method itself is ugly, so inlining it into the header; // file clutters an otherwise straightforward interface.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h:62,Integrability,interface,interface,62,// Don't allow serialization of field list records using this interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SimpleTypeSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:57,Security,checksum,checksums,57,"// If only a string table subsection is given, we find a checksums subsection.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:346,Testability,test,testing,346,"// While in practice we should never encounter a string table even; // though the string table is already initialized, in theory it's; // possible. PDBs are supposed to have one global string table and; // then this subsection should not appear. Whereas object files are; // supposed to have this subsection appear exactly once. However,; // for testing purposes it's nice to be able to test this subsection; // independently of one format or the other, so for some tests we; // manually construct a PDB that contains this subsection in addition; // to a global string table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:387,Testability,test,test,387,"// While in practice we should never encounter a string table even; // though the string table is already initialized, in theory it's; // possible. PDBs are supposed to have one global string table and; // then this subsection should not appear. Whereas object files are; // supposed to have this subsection appear exactly once. However,; // for testing purposes it's nice to be able to test this subsection; // independently of one format or the other, so for some tests we; // manually construct a PDB that contains this subsection in addition; // to a global string table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h:466,Testability,test,tests,466,"// While in practice we should never encounter a string table even; // though the string table is already initialized, in theory it's; // possible. PDBs are supposed to have one global string table and; // then this subsection should not appear. Whereas object files are; // supposed to have this subsection appear exactly once. However,; // for testing purposes it's nice to be able to test this subsection; // independently of one format or the other, so for some tests we; // manually construct a PDB that contains this subsection in addition; // to a global string table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/StringsAndChecksums.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h:69,Availability,error,error,69,"/// Dumps one type record. Returns false if there was a type parsing error,; /// and true otherwise. This should be called in order, since the dumper; /// maintains state about previous records which are necessary for cross; /// type references.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h:88,Availability,error,error,88,"/// Dumps the type records in Data. Returns false if there was a type stream; /// parse error, and true otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolDumper.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h:59,Modifiability,variab,variables,59,/// Extract the register this frame uses to refer to local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h:50,Energy Efficiency,allocate,allocated,50,"// Since this is a fixed size buffer, use a stack allocated buffer. This; // yields measurable performance increase over the repeated heap allocations; // when serializing many independent records via writeOneSymbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h:95,Performance,perform,performance,95,"// Since this is a fixed size buffer, use a stack allocated buffer. This; // yields measurable performance increase over the repeated heap allocations; // when serializing many independent records via writeOneSymbol.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolSerializer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolVisitorCallbacks.h:187,Availability,error,error,187,"/// Paired begin/end actions for all symbols. Receives all record data,; /// including the fixed-length record prefix. visitSymbolBegin() should; /// return the type of the Symbol, or an error if it cannot be determined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/SymbolVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:14,Security,hash,hashed,14,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:55,Security,hash,hash,55,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:150,Security,hash,hashed,150,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:108,Usability,simpl,simply,108,"/// A locally hashed type represents a straightforward hash code of a serialized; /// record. The record is simply serialized, and then the bytes are hashed by; /// a standard algorithm. This is sufficient for the case of de-duplicating; /// records within a single sequence of types, because if two records both have; /// a back-reference to the same type in the same stream, they will both have; /// the same numeric value for the TypeIndex of the back reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:36,Security,hash,hash,36,"/// Given a type, compute its local hash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:56,Security,hash,hashes,56,"/// Given a sequence of types, compute all of the local hashes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:25,Security,hash,hash,25,// standard 20-byte SHA1 hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:33,Security,hash,hash,33,// last 8-bytes of standard SHA1 hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:378,Integrability,depend,depends,378,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:15,Security,hash,hashed,15,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:40,Security,hash,hash,40,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:296,Security,hash,hash,296,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:363,Security,hash,hash,363,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:405,Security,hash,hashes,405,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:453,Security,hash,hash,453,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:584,Security,hash,hash,584,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:662,Security,hash,hashed,662,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:687,Security,hash,hash,687,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:836,Security,hash,hash,836,"/// A globally hashed type represents a hash value that is sufficient to; /// uniquely identify a record across multiple type streams or type sequences.; /// This works by, for any given record A which references B, replacing the; /// TypeIndex that refers to B with a previously-computed global hash for B. As; /// this is a recursive algorithm (e.g. the global hash of B also depends on the; /// global hashes of the types that B refers to), a global hash can uniquely; /// identify that A occurs in another stream that has a completely; /// different graph structure. Although the hash itself is slower to compute,; /// probing is much faster with a globally hashed type, because the hash itself; /// is considered ""as good as"" the original type. Since type records can be; /// quite large, this makes the equality comparison of the hash much faster than; /// equality comparison of a full record.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:70,Security,hash,hash,70,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:125,Security,hash,hashes,125,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:150,Security,hash,hashes,150,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:70,Security,hash,hash,70,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:125,Security,hash,hashes,125,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:150,Security,hash,hashes,150,"/// Given a sequence of bytes representing a record, compute a global hash for; /// this record. Due to the nature of global hashes incorporating the hashes; /// of referenced records, this function requires a list of types and ids; /// that RecordData might reference, indexable by TypeIndex.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:69,Security,hash,hashes,69,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:136,Security,hash,hashed,136,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:129,Security,hash,hash,129,"// In some rare cases, there might be records with forward references in the; // stream. Several passes might be needed to fully hash each record in the; // Type stream. However this occurs on very small OBJs generated by MASM,; // with a dozen records at most. Therefore this codepath isn't; // time-critical, as it isn't taken in 99% of cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:69,Security,hash,hashes,69,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h:136,Security,hash,hashed,136,"/// Given a sequence of combined type and ID records, compute global hashes; /// for each of them, returning the results in a vector of hashed types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeHashing.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:141,Usability,simpl,simple,141,"/// A 32-bit type reference. Types are indexed by their order of appearance in; /// .debug$T plus 0x1000. Type indices less than 0x1000 are ""simple"" types,; /// composed of a SimpleTypeMode byte followed by a SimpleTypeKind byte.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:175,Usability,Simpl,SimpleTypeMode,175,"/// A 32-bit type reference. Types are indexed by their order of appearance in; /// .debug$T plus 0x1000. Type indices less than 0x1000 are ""simple"" types,; /// composed of a SimpleTypeMode byte followed by a SimpleTypeKind byte.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:209,Usability,Simpl,SimpleTypeKind,209,"/// A 32-bit type reference. Types are indexed by their order of appearance in; /// .debug$T plus 0x1000. Type indices less than 0x1000 are ""simple"" types,; /// composed of a SimpleTypeMode byte followed by a SimpleTypeKind byte.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:194,Security,access,access,194,// Used for pseudo-indexing an array of type records. An array of such records; // sorted by TypeIndex can allow log(N) lookups even though such a type record; // stream does not provide random access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h:113,Testability,log,log,113,// Used for pseudo-indexing an array of type records. An array of such records; // sorted by TypeIndex can allow log(N) lookups even though such a type record; // stream does not provide random access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h:12,Security,access,access,12,/// Get the access specifier. Valid for any kind of member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h:43,Security,access,access,43,/// Get the flags that are not included in access control or method; /// properties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeRecord.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:485,Availability,Error,Error,485,"/// Merge one set of type records into another. This method assumes; /// that all records are type records, and there are no Id records present.; ///; /// \param Dest The table to store the re-written type records into.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// type stream, that contains the index of the corresponding type record; /// in the destination stream.; ///; /// \param Types The collection of types to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:560,Availability,error,error,560,"/// Merge one set of type records into another. This method assumes; /// that all records are type records, and there are no Id records present.; ///; /// \param Dest The table to store the re-written type records into.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// type stream, that contains the index of the corresponding type record; /// in the destination stream.; ///; /// \param Types The collection of types to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:923,Availability,Error,Error,923,"/// Merge one set of id records into another. This method assumes; /// that all records are id records, and there are no Type records present.; /// However, since Id records can refer back to Type records, this method; /// assumes that the referenced type records have also been merged into; /// another type stream (for example using the above method), and accepts; /// the mapping from source to dest for that stream so that it can re-write; /// the type record mappings accordingly.; ///; /// \param Dest The table to store the re-written id records into.; ///; /// \param Types The mapping to use for the type records that these id; /// records refer to.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// id stream, that contains the index of the corresponding id record; /// in the destination stream.; ///; /// \param Ids The collection of id records to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:998,Availability,error,error,998,"/// Merge one set of id records into another. This method assumes; /// that all records are id records, and there are no Type records present.; /// However, since Id records can refer back to Type records, this method; /// assumes that the referenced type records have also been merged into; /// another type stream (for example using the above method), and accepts; /// the mapping from source to dest for that stream so that it can re-write; /// the type record mappings accordingly.; ///; /// \param Dest The table to store the re-written id records into.; ///; /// \param Types The mapping to use for the type records that these id; /// records refer to.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// id stream, that contains the index of the corresponding id record; /// in the destination stream.; ///; /// \param Ids The collection of id records to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:526,Availability,Error,Error,526,"/// Merge a unified set of type and id records, splitting them into; /// separate output streams.; ///; /// \param DestIds The table to store the re-written id records into.; ///; /// \param DestTypes the table to store the re-written type records into.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// id stream, that contains the index of the corresponding id record; /// in the destination stream.; ///; /// \param IdsAndTypes The collection of id records to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h:601,Availability,error,error,601,"/// Merge a unified set of type and id records, splitting them into; /// separate output streams.; ///; /// \param DestIds The table to store the re-written id records into.; ///; /// \param DestTypes the table to store the re-written type records into.; ///; /// \param SourceToDest A vector, indexed by the TypeIndex in the source; /// id stream, that contains the index of the corresponding id record; /// in the destination stream.; ///; /// \param IdsAndTypes The collection of id records to merge in.; ///; /// \returns Error::success() if the operation succeeded, otherwise an; /// appropriate error code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeStreamMerger.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:183,Availability,error,error,183,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:284,Integrability,depend,depending,284,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:461,Security,access,access,461,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h:423,Testability,assert,assert,423,"/// Paired begin/end actions for all types. Receives all record data,; /// including the fixed-length record prefix. visitTypeBegin() should return; /// the type of the Record, or an error if it cannot be determined. Exactly; /// one of the two visitTypeBegin methods will be called, depending on whether; /// records are being visited sequentially or randomly. An implementation; /// should be prepared to handle both (or assert if it can't handle random; /// access visitation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/CodeView/TypeVisitorCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h:202,Security,access,accessor,202,"/// Get the fixed byte size of this Form if possible. This function might; /// use the DWARFUnit to calculate the size of the Form, like for; /// DW_AT_address and DW_AT_ref_addr, so this isn't just an accessor for; /// the ByteSize member.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h:83,Modifiability,variab,variable,83,/// If this abbreviation has a fixed byte size then FixedAttributeSize member; /// variable below will have a value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAbbreviationDeclaration.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:49,Energy Efficiency,efficient,efficient,49,/// The accelerator tables are designed to allow efficient random access; /// (using a symbol name as a key) into debug info by providing an index of the; /// debug info DIEs. This class implements the common functionality of Apple and; /// DWARF 5 accelerator tables.; /// TODO: Generalize the rest of the AppleAcceleratorTable interface and move it; /// to this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:329,Integrability,interface,interface,329,/// The accelerator tables are designed to allow efficient random access; /// (using a symbol name as a key) into debug info by providing an index of the; /// debug info DIEs. This class implements the common functionality of Apple and; /// DWARF 5 accelerator tables.; /// TODO: Generalize the rest of the AppleAcceleratorTable interface and move it; /// to this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:66,Security,access,access,66,/// The accelerator tables are designed to allow efficient random access; /// (using a symbol name as a key) into debug info by providing an index of the; /// debug info DIEs. This class implements the common functionality of Apple and; /// DWARF 5 accelerator tables.; /// TODO: Generalize the rest of the AppleAcceleratorTable interface and move it; /// to this class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:142,Availability,error,error,142,/// Returns true if we should continue scanning for entries or false if we've; /// reached the last (sentinel) entry of encountered a parsing error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:49,Security,hash,hash,49,/// Return the offset into the section where the hash list begins.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:54,Security,hash,hash,54,/// Return the offset into the section where the I-th hash is.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:57,Security,Hash,Hash,57,/// Returns the index of the bucket where a hypothetical Hash would be.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:36,Security,Hash,Hash,36,/// Returns true iff a hypothetical Hash would be assigned to the BucketIdx-th; /// bucket.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:69,Security,hash,hash,69,"/// Reads the contents of the I-th bucket, that is, the index in the hash list; /// where the hashes corresponding to this bucket begin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:94,Security,hash,hashes,94,"/// Reads the contents of the I-th bucket, that is, the index in the hash list; /// where the hashes corresponding to this bucket begin.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:19,Security,hash,hash,19,/// Reads the I-th hash in the hash list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:31,Security,hash,hash,31,/// Reads the I-th hash in the hash list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:22,Security,Hash,Hashes,22,"/// Scans through all Hashes in the BucketIdx-th bucket, attempting to find; /// HashToFind. If it is found, its index in the list of hashes is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:81,Security,Hash,HashToFind,81,"/// Scans through all Hashes in the BucketIdx-th bucket, attempting to find; /// HashToFind. If it is found, its index in the list of hashes is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:134,Security,hash,hashes,134,"/// Scans through all Hashes in the BucketIdx-th bucket, attempting to find; /// HashToFind. If it is found, its index in the list of hashes is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:28,Security,Hash,HashData,28,/// Returns the size of one HashData entry.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:50,Availability,avail,available,50,/// Returns true iff `AtomTy` is one of the atoms available in Entries of this; /// table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:76,Performance,perform,performing,76,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:122,Security,Hash,HashDataOffset,122,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:156,Security,hash,hash,156,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:302,Security,hash,hash,302,"/// Return information related to the DWARF DIE we're looking for when; /// performing a lookup by name.; ///; /// \param HashDataOffset an offset into the hash data table; /// \returns <DieOffset, DieTag>; /// DieOffset is the offset into the .debug_info section for the DIE; /// related to the input hash data offset.; /// DieTag is the tag of the DIE",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:227,Security,hash,hash,227,"/// .debug_names section consists of one or more units. Each unit starts with a; /// header, which is followed by a list of compilation units, local and foreign; /// type units.; ///; /// These may be followed by an (optional) hash lookup table, which consists of; /// an array of buckets and hashes similar to the apple tables above. The only; /// difference is that the hashes array is 1-based, and consequently an empty; /// bucket is denoted by 0 and not UINT32_MAX.; ///; /// Next is the name table, which consists of an array of names and array of; /// entry offsets. This is different from the apple tables, which store names; /// next to the actual entries.; ///; /// The structure of the entries is described by an abbreviations table, which; /// comes after the name table. Unlike the apple tables, which have a uniform; /// entry structure described in the header, each .debug_names entry may have; /// different index attributes (DW_IDX_???) attached to it.; ///; /// The last segment consists of a list of entries, which is a 0-terminated list; /// referenced by the name table and interpreted with the help of the; /// abbreviation table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:293,Security,hash,hashes,293,"/// .debug_names section consists of one or more units. Each unit starts with a; /// header, which is followed by a list of compilation units, local and foreign; /// type units.; ///; /// These may be followed by an (optional) hash lookup table, which consists of; /// an array of buckets and hashes similar to the apple tables above. The only; /// difference is that the hashes array is 1-based, and consequently an empty; /// bucket is denoted by 0 and not UINT32_MAX.; ///; /// Next is the name table, which consists of an array of names and array of; /// entry offsets. This is different from the apple tables, which store names; /// next to the actual entries.; ///; /// The structure of the entries is described by an abbreviations table, which; /// comes after the name table. Unlike the apple tables, which have a uniform; /// entry structure described in the header, each .debug_names entry may have; /// different index attributes (DW_IDX_???) attached to it.; ///; /// The last segment consists of a list of entries, which is a 0-terminated list; /// referenced by the name table and interpreted with the help of the; /// abbreviation table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:372,Security,hash,hashes,372,"/// .debug_names section consists of one or more units. Each unit starts with a; /// header, which is followed by a list of compilation units, local and foreign; /// type units.; ///; /// These may be followed by an (optional) hash lookup table, which consists of; /// an array of buckets and hashes similar to the apple tables above. The only; /// difference is that the hashes array is 1-based, and consequently an empty; /// bucket is denoted by 0 and not UINT32_MAX.; ///; /// Next is the name table, which consists of an array of names and array of; /// entry offsets. This is different from the apple tables, which store names; /// next to the actual entries.; ///; /// The structure of the entries is described by an abbreviations table, which; /// comes after the name table. Unlike the apple tables, which have a uniform; /// entry structure described in the header, each .debug_names entry may have; /// different index attributes (DW_IDX_???) attached to it.; ///; /// The last segment consists of a list of entries, which is a 0-terminated list; /// referenced by the name table and interpreted with the help of the; /// abbreviation table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:4,Availability,Error,Error,4,/// Error returned by NameIndex::getEntry to report it has reached the end of; /// the entry list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:26,Security,Hash,Hash,26,/// Reads an entry in the Hash Array for the given Index. The input Index; /// is 1-based.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h:5,Security,Hash,Hash,5,"///< Hash of Key, if it has been computed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAcceleratorTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h:18,Testability,test,testing,18,/// Used for unit testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFAddressRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:62,Modifiability,variab,variables,62,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:123,Performance,multi-thread,multi-threaded,123,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:316,Performance,multi-thread,multi-threaded,316,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:385,Performance,perform,performance,385,"/// DWARFContextState; /// This structure contains all member variables for DWARFContext that need; /// to be protected in multi-threaded environments. Threading support can be; /// enabled by setting the ThreadSafe to true when constructing a; /// DWARFContext to allow DWARRContext to be able to be used in a; /// multi-threaded environment, or not enabled to allow for maximum; /// performance in single threaded environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:90,Availability,recover,recoverable,90,/// Get a pointer to a parsed line table corresponding to a compile unit.; /// Report any recoverable parsing problems using the handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:90,Safety,recover,recoverable,90,/// Get a pointer to a parsed line table corresponding to a compile unit.; /// Report any recoverable parsing problems using the handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:3,Usability,Clear,Clear,3,"// Clear the line table object corresponding to a compile unit for memory; // management purpose. When it's referred to again, it'll be re-populated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:4,Integrability,Wrap,Wraps,4,/// Wraps the returned DIEs for a given address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h:42,Modifiability,refactor,refactor,42,/// Get address size from CUs.; /// TODO: refactor compile_units() to make this const.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFContext.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDataExtractor.h:265,Availability,error,errors,265,"/// Extracts the DWARF ""initial length"" field, which can either be a 32-bit; /// value smaller than 0xfffffff0, or the value 0xffffffff followed by a; /// 64-bit length. Returns the actual length, and the DWARF format which is; /// encoded in the field. In case of errors, it returns {0, DWARF32} and; /// leaves the offset unchanged.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDataExtractor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDataExtractor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugAddr.h:130,Availability,reliab,reliably,130,"/// Return the full length of this table, including the length field.; /// Return std::nullopt if the length cannot be identified reliably.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugAddr.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugAddr.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:20,Availability,avail,available,20,/// Register is not available and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:43,Availability,recover,recovered,43,/// Register is not available and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:43,Safety,recover,recovered,43,/// Register is not available and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:59,Availability,avail,available,59,/// Create a location where the value is undefined and not available. This can; /// happen when a register is volatile and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:132,Availability,recover,recovered,132,/// Create a location where the value is undefined and not available. This can; /// happen when a register is volatile and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:132,Safety,recover,recovered,132,/// Create a location where the value is undefined and not available. This can; /// happen when a register is volatile and can't be recovered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:392,Modifiability,variab,variables,392,"/// Create a location where the saved value is in (Deref == false) or at; /// (Deref == true) a regiser plus an offset and, optionally, in the specified; /// address space (used mostly for the CFA).; ///; /// The CFA is usually defined using this rule by using the stack pointer or; /// frame pointer as the register, with an offset that accounts for all; /// spilled registers and all local variables in a function, and Deref ==; /// false.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:67,Deployability,update,update,67,/// Some opcodes modify a constant value and we need to be able to update; /// the constant value (DW_CFA_GNU_window_save which is also known as; // DW_CFA_AARCH64_negate_ra_state).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:186,Availability,avail,available,186,"/// Return the location for the register in \a RegNum if there is a location.; ///; /// \param RegNum the register number to find a location for.; ///; /// \returns A location if one is available for \a RegNum, or std::nullopt; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:793,Security,Access,Accessors,793,"/// A class that represents a single row in the unwind table that is decoded by; /// parsing the DWARF Call Frame Information opcodes.; ///; /// The row consists of an optional address, the rule to unwind the CFA and all; /// rules to unwind any registers. If the address doesn't have a value, this; /// row represents the initial instructions for a CIE. If the address has a; /// value the UnwindRow represents a row in the UnwindTable for a FDE. The; /// address is the first address for which the CFA location and register rules; /// are valid within a function.; ///; /// UnwindRow objects are created by parsing opcodes in the DWARF Call Frame; /// Information and UnwindRow objects are lazily populated and pushed onto a; /// stack in the UnwindTable when evaluating this state machine. Accessors are; /// needed for the address, CFA value, and register locations as the opcodes; /// encode a state machine that produces a sorted array of UnwindRow objects; /// \see UnwindTable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:261,Availability,error,error,261,"/// Create an UnwindTable from a Common Information Entry (CIE).; ///; /// \param Cie The Common Information Entry to extract the table from. The; /// CFIProgram is retrieved from the \a Cie object and used to create the; /// UnwindTable.; ///; /// \returns An error if the DWARF Call Frame Information opcodes have state; /// machine errors, or a valid UnwindTable otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:335,Availability,error,errors,335,"/// Create an UnwindTable from a Common Information Entry (CIE).; ///; /// \param Cie The Common Information Entry to extract the table from. The; /// CFIProgram is retrieved from the \a Cie object and used to create the; /// UnwindTable.; ///; /// \returns An error if the DWARF Call Frame Information opcodes have state; /// machine errors, or a valid UnwindTable otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:257,Availability,error,error,257,"/// Create an UnwindTable from a Frame Descriptor Entry (FDE).; ///; /// \param Fde The Frame Descriptor Entry to extract the table from. The; /// CFIProgram is retrieved from the \a Fde object and used to create the; /// UnwindTable.; ///; /// \returns An error if the DWARF Call Frame Information opcodes have state; /// machine errors, or a valid UnwindTable otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:331,Availability,error,errors,331,"/// Create an UnwindTable from a Frame Descriptor Entry (FDE).; ///; /// \param Fde The Frame Descriptor Entry to extract the table from. The; /// CFIProgram is retrieved from the \a Fde object and used to create the; /// UnwindTable.; ///; /// \returns An error if the DWARF Call Frame Information opcodes have state; /// machine errors, or a valid UnwindTable otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:48,Deployability,update,update,48,"/// Parse the information in the CFIProgram and update the CurrRow object; /// that the state machine describes.; ///; /// This is an internal implementation that emulates the state machine; /// described in the DWARF Call Frame Information opcodes and will push; /// CurrRow onto the Rows container when needed.; ///; /// \param CFIP the CFI program that contains the opcodes from a CIE or FDE.; ///; /// \param CurrRow the current row to modify while parsing the state machine.; ///; /// \param InitialLocs If non-NULL, we are parsing a FDE and this contains; /// the initial register locations from the CIE. If NULL, then a CIE's; /// opcodes are being parsed and this is not needed. This is used for the; /// DW_CFA_restore and DW_CFA_restore_extended opcodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:212,Safety,avoid,avoid,212,"/// Represent a sequence of Call Frame Information instructions that, when read; /// in order, construct a table mapping PC to frame state. This can also be; /// referred to as ""CFI rules"" in DWARF literature to avoid confusion with; /// computer programs in the broader sense, and in this context each instruction; /// would be a rule to establish the mapping. Refer to pg. 172 in the DWARF5; /// manual, ""6.4.1 Structure of Call Frame Information"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:239,Availability,error,error,239,"/// Parse and store a sequence of CFI instructions from Data,; /// starting at *Offset and ending at EndOffset. *Offset is updated; /// to EndOffset upon successful parsing, or indicates the offset; /// where a problem occurred in case an error is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:123,Deployability,update,updated,123,"/// Parse and store a sequence of CFI instructions from Data,; /// starting at *Offset and ending at EndOffset. *Offset is updated; /// to EndOffset upon successful parsing, or indicates the offset; /// where a problem occurred in case an error is returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:332,Usability,simpl,simplify,332,"/// Types of operands to CFI instructions; /// In DWARF, this type is implicitly tied to a CFI instruction opcode and; /// thus this type doesn't need to be explictly written to the file (this is; /// not a DWARF encoding). The relationship of instrs to operand types can; /// be obtained from getOperandTypes() and is only used to simplify; /// instruction printing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:23,Usability,simpl,simply,23,"// CIEs (and FDEs) are simply container classes, so the only sensible way to; // create them is by providing the full parsed contents in the constructor.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h:24,Security,access,accessors,24,/// DWARF Frame entries accessors,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugFrame.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugInfoEntry.h:186,Performance,perform,performance,186,"/// Extracts a debug info entry, which is a child of a given unit,; /// starting at a given offset. If DIE can't be extracted, returns false and; /// doesn't change OffsetPtr.; /// High performance extraction should use this call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugInfoEntry.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugInfoEntry.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:52,Security,checksum,checksum,52,"/// For v5, whether filename entries provide an MD5 checksum.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:4,Deployability,Update,Update,4,/// Update tracked content types with \p ContentType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:28,Security,access,access,28,/// Get DWARF-version aware access to the file name entry at the provided; /// index.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:104,Availability,Recover,RecoverableErrorHandler,104,"/// Get the next line table from the section. Report any issues via the; /// handlers.; ///; /// \param RecoverableErrorHandler - any issues that don't prevent further; /// parsing of the table will be reported through this handler.; /// \param UnrecoverableErrorHandler - any issues that prevent further; /// parsing of the table will be reported through this handler.; /// \param OS - if not null, the parser will print information about the; /// table as it parses it.; /// \param Verbose - if true, the parser will print verbose information when; /// printing to the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:104,Safety,Recover,RecoverableErrorHandler,104,"/// Get the next line table from the section. Report any issues via the; /// handlers.; ///; /// \param RecoverableErrorHandler - any issues that don't prevent further; /// parsing of the table will be reported through this handler.; /// \param UnrecoverableErrorHandler - any issues that prevent further; /// parsing of the table will be reported through this handler.; /// \param OS - if not null, the parser will print information about the; /// table as it parses it.; /// \param Verbose - if true, the parser will print verbose information when; /// printing to the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:115,Availability,Recover,RecoverableErrorHandler,115,/// Skip the current line table and go to the following line table (if; /// present) immediately.; ///; /// \param RecoverableErrorHandler - report any recoverable prologue; /// parsing issues via this handler.; /// \param UnrecoverableErrorHandler - report any unrecoverable prologue; /// parsing issues via this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:152,Availability,recover,recoverable,152,/// Skip the current line table and go to the following line table (if; /// present) immediately.; ///; /// \param RecoverableErrorHandler - report any recoverable prologue; /// parsing issues via this handler.; /// \param UnrecoverableErrorHandler - report any unrecoverable prologue; /// parsing issues via this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:115,Safety,Recover,RecoverableErrorHandler,115,/// Skip the current line table and go to the following line table (if; /// present) immediately.; ///; /// \param RecoverableErrorHandler - report any recoverable prologue; /// parsing issues via this handler.; /// \param UnrecoverableErrorHandler - report any unrecoverable prologue; /// parsing issues via this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h:152,Safety,recover,recoverable,152,/// Skip the current line table and go to the following line table (if; /// present) immediately.; ///; /// \param RecoverableErrorHandler - report any recoverable prologue; /// parsing issues via this handler.; /// \param UnrecoverableErrorHandler - report any unrecoverable prologue; /// parsing issues via this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:214,Availability,error,error,214,/// Call the user-provided callback for each entry (including the end-of-list; /// entry) in the location list starting at \p Offset. The callback can return; /// false to terminate the iteration early. Returns an error if it was unable; /// to parse the entire location list correctly. Upon successful termination; /// \p Offset will be updated point past the end of the list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:338,Deployability,update,updated,338,/// Call the user-provided callback for each entry (including the end-of-list; /// entry) in the location list starting at \p Offset. The callback can return; /// false to terminate the iteration early. Returns an error if it was unable; /// to parse the entire location list correctly. Upon successful termination; /// \p Offset will be updated point past the end of the list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:239,Deployability,update,updated,239,/// Dump the location list at the given \p Offset. The function returns true; /// iff it has successfully reched the end of the list. This means that one; /// can attempt to parse another list after the current one (\p Offset will be; /// updated to point past the end of the current list).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:41,Modifiability,variab,variable,41,/// A list of locations that contain one variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:35,Modifiability,variab,variable,35,/// All the locations in which the variable is stored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:22,Modifiability,variab,variables,22,"/// A list of all the variables in the debug_loc section, each one describing; /// the locations in which the variable is stored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h:110,Modifiability,variab,variable,110,"/// A list of all the variables in the debug_loc section, each one describing; /// the locations in which the variable is stored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugLoc.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h:48,Security,access,accessible,48,/// Parse the debug_macinfo/debug_macro section accessible via the 'MacroData'; /// parameter.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugMacro.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h:35,Modifiability,variab,variable,35,"/// Each table consists of sets of variable length entries. Each set describes; /// the names of global objects and functions, or global types, respectively,; /// whose definitions are represented by debugging information entries owned; /// by a single compilation unit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDebugPubTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:530,Availability,error,error,530,//===----------------------------------------------------------------------===//; /// Utility class that carries the DWARF compile/type unit and the debug info; /// entry in an object.; ///; /// When accessing information from a debug info entry we always need to DWARF; /// compile/type unit in order to extract the info correctly as some information; /// is relative to the compile/type unit. Prior to this class the DWARFUnit and; /// the DWARFDebugInfoEntry was passed around separately and there was the; /// possibility for error if the wrong DWARFUnit was used to extract a unit; /// relative offset. This class helps to ensure that this doesn't happen and; /// also simplifies the attribute extraction calls by not having to specify the; /// DWARFUnit for each call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:200,Security,access,accessing,200,//===----------------------------------------------------------------------===//; /// Utility class that carries the DWARF compile/type unit and the debug info; /// entry in an object.; ///; /// When accessing information from a debug info entry we always need to DWARF; /// compile/type unit in order to extract the info correctly as some information; /// is relative to the compile/type unit. Prior to this class the DWARFUnit and; /// the DWARFDebugInfoEntry was passed around separately and there was the; /// possibility for error if the wrong DWARFUnit was used to extract a unit; /// relative offset. This class helps to ensure that this doesn't happen and; /// also simplifies the attribute extraction calls by not having to specify the; /// DWARFUnit for each call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:674,Usability,simpl,simplifies,674,//===----------------------------------------------------------------------===//; /// Utility class that carries the DWARF compile/type unit and the debug info; /// entry in an object.; ///; /// When accessing information from a debug info entry we always need to DWARF; /// compile/type unit in order to extract the info correctly as some information; /// is relative to the compile/type unit. Prior to this class the DWARFUnit and; /// the DWARFDebugInfoEntry was passed around separately and there was the; /// possibility for error if the wrong DWARFUnit was used to extract a unit; /// relative offset. This class helps to ensure that this doesn't happen and; /// also simplifies the attribute extraction calls by not having to specify the; /// DWARFUnit for each call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:98,Availability,avail,available,98,/// Get the address ranges for this DIE.; ///; /// Get the hi/low PC range if both attributes are available or exrtracts the; /// non-contiguous address ranges from the DW_AT_ranges attribute.; ///; /// Extracts the range information from this DIE only. This call doesn't look; /// for the range in any DW_AT_specification or DW_AT_abstract_origin DIEs.; ///; /// \returns a address range vector that might be empty if no address range; /// information is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:456,Availability,avail,available,456,/// Get the address ranges for this DIE.; ///; /// Get the hi/low PC range if both attributes are available or exrtracts the; /// non-contiguous address ranges from the DW_AT_ranges attribute.; ///; /// Extracts the range information from this DIE only. This call doesn't look; /// for the range in any DW_AT_specification or DW_AT_abstract_origin DIEs.; ///; /// \returns a address range vector that might be empty if no address range; /// information is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:234,Availability,error,error,234,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:4,Deployability,Update,Update,4,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:114,Deployability,update,update,114,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:157,Modifiability,variab,variable,157,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h:270,Modifiability,variab,variable,270,"/// Update the attribute index and attempt to read the attribute value. If the; /// attribute is able to be read, update AttrValue and the Index member; /// variable. If the attribute value is not able to be read, an appropriate; /// error will be set if the Err member variable is non-NULL and the iterator; /// will be set to the end value so iteration stops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFDie.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFExpression.h:91,Availability,Error,Error,91,"/// This class represents an Operation in the Expression.; ///; /// An Operation can be in Error state (check with isError()). This; /// means that it couldn't be decoded successfully and if it is the; /// case, all others fields contain undefined values.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:141,Deployability,update,updates,141,"/// Skip a form's value in \p DebugInfoData at the offset specified by; /// \p OffsetPtr.; ///; /// Skips the bytes for the current form and updates the offset.; ///; /// \param DebugInfoData The data where we want to skip the value.; /// \param OffsetPtr A reference to the offset that will be updated.; /// \param Params DWARF parameters to help interpret forms.; /// \returns true on success, false if the form was not skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:295,Deployability,update,updated,295,"/// Skip a form's value in \p DebugInfoData at the offset specified by; /// \p OffsetPtr.; ///; /// Skips the bytes for the current form and updates the offset.; ///; /// \param DebugInfoData The data where we want to skip the value.; /// \param OffsetPtr A reference to the offset that will be updated.; /// \param Params DWARF parameters to help interpret forms.; /// \returns true on success, false if the form was not skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:143,Deployability,update,updates,143,"/// Skip a form's value in \p DebugInfoData at the offset specified by; /// \p OffsetPtr.; ///; /// Skips the bytes for the specified form and updates the offset.; ///; /// \param Form The DW_FORM enumeration that indicates the form to skip.; /// \param DebugInfoData The data where we want to skip the value.; /// \param OffsetPtr A reference to the offset that will be updated.; /// \param FormParams DWARF parameters to help interpret forms.; /// \returns true on success, false if the form was not skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:371,Deployability,update,updated,371,"/// Skip a form's value in \p DebugInfoData at the offset specified by; /// \p OffsetPtr.; ///; /// Skips the bytes for the specified form and updates the offset.; ///; /// \param Form The DW_FORM enumeration that indicates the form to skip.; /// \param DebugInfoData The data where we want to skip the value.; /// \param OffsetPtr A reference to the offset that will be updated.; /// \param FormParams DWARF parameters to help interpret forms.; /// \returns true on success, false if the form was not skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:216,Availability,failure,failure,216,/// Take an optional DWARFFormValue and extract a string value from it.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the string value or Default if the V doesn't have a value or the; /// form value's encoding wasn't a string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:213,Availability,failure,failure,213,/// Take an optional DWARFFormValue and extract a unsigned constant.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted unsigned value or Default if the V doesn't have a; /// value or the form value's encoding wasn't an unsigned constant form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:205,Availability,failure,failure,205,/// Take an optional DWARFFormValue and extract a reference.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted reference value or Default if the V doesn't have a; /// value or the form value's encoding wasn't a reference form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:210,Availability,failure,failure,210,/// Take an optional DWARFFormValue and extract a signed integer.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted signed integer value or Default if the V doesn't; /// have a value or the form value's encoding wasn't a signed integer form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:203,Availability,failure,failure,203,/// Take an optional DWARFFormValue and extract a address.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted address value or Default if the V doesn't have a; /// value or the form value's encoding wasn't an address form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h:210,Availability,failure,failure,210,/// Take an optional DWARFFormValue and extract a section offset.; ///; /// \param V and optional DWARFFormValue to attempt to extract the value from.; /// \param Default the default value to return in case of failure.; /// \returns the extracted section offset value or Default if the V doesn't; /// have a value or the form value's encoding wasn't a section offset form.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFFormValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h:105,Integrability,depend,dependent,105,"/// Return the size of the table header including the length but not including; /// the offsets. This is dependent on the table format, which is unambiguously; /// derived from parsing the table.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFListTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h:66,Integrability,depend,dependent,66,"/// Represents a single DWARF expression, whose value is location-dependent.; /// Typically used in DW_AT_location attributes to describe the location of; /// objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFLocationExpression.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFObject.h:37,Security,access,access,37,// This is responsible for low level access to the object file. It; // knows how to find the required sections and compute relocated; // values.; // The default implementations of the get<Section> methods return dummy values.; // This is to allow clients that only need some of those to implement just the; // ones they need. We can't use unreachable for as many cases because the parser; // implementation is eager and will call some of these methods even if the; // result is not used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:65,Deployability,update,update,65,"// For units in DWARF Package File, remember the index entry and update; // the abbreviation offset read by extract().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:239,Security,access,accessible,239,"/// Return the index of a \p Die entry inside the unit's DIE vector.; ///; /// It is illegal to call this method with a DIE that hasn't be; /// created by this unit. In other word, it's illegal to call this; /// method on a DIE that isn't accessible by following; /// children/sibling links starting from this unit's getUnitDIE().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:155,Availability,avail,available,155,"// Returns itself if not using Split DWARF, or if the unit is a skeleton unit; // - otherwise returns the split full unit's corresponding skeleton, if; // available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:16,Deployability,update,update,16,/// Recursively update address to Die map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:16,Deployability,update,update,16,/// Recursively update address to variable Die map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:34,Modifiability,variab,variable,34,/// Recursively update address to variable Die map.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:134,Availability,error,error,134,"/// Extract the range list referenced by this compile unit from the; /// .debug_ranges section. If the extraction is unsuccessful, an error; /// is returned. Successful extraction requires that the compile unit; /// has already been extracted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:101,Availability,alive,alive,101,/// Returns subprogram DIE with address range encompassing the provided; /// address. The pointer is alive as long as parsed compile unit DIEs are not; /// cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:156,Usability,clear,cleared,156,/// Returns subprogram DIE with address range encompassing the provided; /// address. The pointer is alive as long as parsed compile unit DIEs are not; /// cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:66,Availability,alive,alive,66,/// Returns variable DIE for the address provided. The pointer is alive as; /// long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:12,Modifiability,variab,variable,12,/// Returns variable DIE for the address provided. The pointer is alive as; /// long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:121,Usability,clear,cleared,121,/// Returns variable DIE for the address provided. The pointer is alive as; /// long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:214,Usability,clear,cleared,214,/// getInlinedChainForAddress - fetches inlined chain for a given address.; /// Returns empty chain if there is no subprogram containing address. The; /// chain is valid as long as parsed compile unit DIEs are not cleared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:230,Security,access,accessible,230,"/// Return the index of a DIE inside the unit's DIE vector.; ///; /// It is illegal to call this method with a DIE that hasn't be; /// created by this unit. In other word, it's illegal to call this; /// method on a DIE that isn't accessible by following; /// children/sibling links starting from this unit's getUnitDIE().",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:4,Usability,clear,clearDIEs,4,/// clearDIEs - Clear parsed DIEs to keep memory usage low.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h:16,Usability,Clear,Clear,16,/// clearDIEs - Clear parsed DIEs to keep memory usage low.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnit.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h:59,Integrability,interface,interfaces,59,"/// The enum of section identifiers to be used in internal interfaces.; ///; /// Pre-standard implementation of package files defined a number of section; /// identifiers with values that clash definitions in the DWARFv5 standard.; /// See https://gcc.gnu.org/wiki/DebugFissionDWP and Section 7.3.5.3 in DWARFv5.; ///; /// The following identifiers are the same in the proposal and in DWARFv5:; /// - DW_SECT_INFO = 1 (.debug_info.dwo); /// - DW_SECT_ABBREV = 3 (.debug_abbrev.dwo); /// - DW_SECT_LINE = 4 (.debug_line.dwo); /// - DW_SECT_STR_OFFSETS = 6 (.debug_str_offsets.dwo); ///; /// The following identifiers are defined only in DWARFv5:; /// - DW_SECT_LOCLISTS = 5 (.debug_loclists.dwo); /// - DW_SECT_RNGLISTS = 8 (.debug_rnglists.dwo); ///; /// The following identifiers are defined only in the GNU proposal:; /// - DW_SECT_TYPES = 2 (.debug_types.dwo); /// - DW_SECT_LOC = 5 (.debug_loc.dwo); /// - DW_SECT_MACINFO = 7 (.debug_macinfo.dwo); ///; /// DW_SECT_MACRO for the .debug_macro.dwo section is defined in both standards,; /// but with different values, 8 in GNU and 7 in DWARFv5.; ///; /// This enum defines constants to represent the identifiers of both sets.; /// For DWARFv5 ones, the values are the same as defined in the standard.; /// For pre-standard ones that correspond to sections being deprecated in; /// DWARFv5, the values are chosen arbitrary and a tag ""_EXT_"" is added to; /// the names.; ///; /// The enum is for internal use only. The user should not expect the values; /// to correspond to any input/output constants. Special conversion functions,; /// serializeSectionKind() and deserializeSectionKind(), should be used for; /// the translation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h:96,Integrability,depend,depends,96,/// Convert the internal value for a section kind to an on-disk value.; ///; /// The conversion depends on the version of the index section.; /// IndexVersion is expected to be either 2 for pre-standard GNU proposal; /// or 5 for DWARFv5 package file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h:104,Integrability,depend,depends,104,"/// Convert a value read from an index section to the internal representation.; ///; /// The conversion depends on the index section version, which is expected; /// to be either 2 for pre-standard GNU proposal or 5 for DWARFv5 package file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFUnitIndex.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:18,Testability,test,testing,18,/// Used for unit testing.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:56,Modifiability,portab,portably,56,// Used to relax some checks that do not currently work portably,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:361,Availability,error,errors,361,/// Verifies the abbreviations section.; ///; /// This function currently checks that:; /// --No abbreviation declaration has more than one attributes with the same; /// name.; ///; /// \param Abbrev Pointer to the abbreviations section we are verifying; /// Abbrev can be a pointer to either .debug_abbrev or debug_abbrev.dwo.; ///; /// \returns The number of errors that occurred during verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:599,Deployability,update,updated,599,"/// Verifies the header of a unit in a .debug_info or .debug_types section.; ///; /// This function currently checks for:; /// - Unit is in 32-bit DWARF format. The function can be modified to; /// support 64-bit format.; /// - The DWARF version is valid; /// - The unit type is valid (if unit is in version >=5); /// - The unit doesn't extend beyond the containing section; /// - The address size is valid; /// - The offset in the .debug_abbrev section is valid; ///; /// \param DebugInfoData The section data; /// \param Offset A reference to the offset start of the unit. The offset will; /// be updated to point to the next unit in the section; /// \param UnitIndex The index of the unit to be verified; /// \param UnitType A reference to the type of the unit; /// \param isUnitDWARF64 A reference to a flag that shows whether the unit is; /// in 64-bit format.; ///; /// \returns true if the header is verified successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:337,Modifiability,extend,extend,337,"/// Verifies the header of a unit in a .debug_info or .debug_types section.; ///; /// This function currently checks for:; /// - Unit is in 32-bit DWARF format. The function can be modified to; /// support 64-bit format.; /// - The DWARF version is valid; /// - The unit type is valid (if unit is in version >=5); /// - The unit doesn't extend beyond the containing section; /// - The address size is valid; /// - The offset in the .debug_abbrev section is valid; ///; /// \param DebugInfoData The section data; /// \param Offset A reference to the offset start of the unit. The offset will; /// be updated to point to the next unit in the section; /// \param UnitIndex The index of the unit to be verified; /// \param UnitType A reference to the type of the unit; /// \param isUnitDWARF64 A reference to a flag that shows whether the unit is; /// in 64-bit format.; ///; /// \returns true if the header is verified successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:538,Availability,error,errors,538,"/// Verifies the header of a unit in a .debug_info or .debug_types section.; ///; /// This function currently verifies:; /// - The debug info attributes.; /// - The debug info form=s.; /// - The presence of a root DIE.; /// - That the root DIE is a unit DIE.; /// - If a unit type is provided, that the unit DIE matches the unit type.; /// - The DIE ranges.; /// - That call site entries are only nested within subprograms with a; /// DW_AT_call attribute.; ///; /// \param Unit The DWARF Unit to verify.; ///; /// \returns The number of errors that occurred during verification.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:171,Availability,error,errors,171,/// Verifies the unit headers and contents in a .debug_info or .debug_types; /// section.; ///; /// \param S The DWARF Section to verify.; ///; /// \returns The number of errors that occurred during verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:129,Availability,error,errors,129,/// Verifies that a call site entry is nested within a subprogram with a; /// DW_AT_call attribute.; ///; /// \returns Number of errors that occurred during verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:155,Availability,error,errors,155,/// Verify that all Die ranges are valid.; ///; /// This function currently checks for:; /// - cases in which lowPC >= highPC; ///; /// \returns Number of errors that occurred during verification.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:383,Availability,error,errors,383,/// Verifies the attribute's DWARF attribute and its value.; ///; /// This function currently checks for:; /// - DW_AT_ranges values is a valid .debug_ranges offset; /// - DW_AT_stmt_list is a valid .debug_line offset; ///; /// \param Die The DWARF DIE that owns the attribute value; /// \param AttrValue The DWARF attribute value to check; ///; /// \returns NumErrors The number of errors occurred during verification of; /// attributes' values in a unit,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:448,Availability,error,errors,448,/// Verifies the attribute's DWARF form.; ///; /// This function currently checks for:; /// - All DW_FORM_ref values that are CU relative have valid CU offsets; /// - All DW_FORM_ref_addr values have valid section offsets; /// - All DW_FORM_strp values have valid .debug_str offsets; ///; /// \param Die The DWARF DIE that owns the attribute value; /// \param AttrValue The DWARF attribute value to check; ///; /// \returns NumErrors The number of errors occurred during verification of; /// attributes' forms in a unit,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:429,Availability,error,errors,429,"/// Verifies the all valid references that were found when iterating through; /// all of the DIE attributes.; ///; /// This function will verify that all references point to DIEs whose DIE; /// offset matches. This helps to ensure if a DWARF link phase moved things; /// around, that it doesn't create invalid references by failing to relocate; /// CU relative and absolute references.; ///; /// \returns NumErrors The number of errors occurred during verification of; /// references for the .debug_info and .debug_types sections",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:708,Availability,error,errors,708,"/// Verify that an Apple-style accelerator table is valid.; ///; /// This function currently checks that:; /// - The fixed part of the header fits in the section; /// - The size of the section is as large as what the header describes; /// - There is at least one atom; /// - The form for each atom is valid; /// - The tag for each DIE in the table is valid; /// - The buckets have a valid index, or they are empty; /// - Each hashdata offset is valid; /// - Each DIE is valid; ///; /// \param AccelSection pointer to the section containing the acceleration table; /// \param StrData pointer to the string section; /// \param SectionName the name of the table we're verifying; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:426,Security,hash,hashdata,426,"/// Verify that an Apple-style accelerator table is valid.; ///; /// This function currently checks that:; /// - The fixed part of the header fits in the section; /// - The size of the section is as large as what the header describes; /// - There is at least one atom; /// - The form for each atom is valid; /// - The tag for each DIE in the table is valid; /// - The buckets have a valid index, or they are empty; /// - Each hashdata offset is valid; /// - Each DIE is valid; ///; /// \param AccelSection pointer to the section containing the acceleration table; /// \param StrData pointer to the string section; /// \param SectionName the name of the table we're verifying; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:810,Availability,error,errors,810,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:444,Security,hash,hash,444,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:478,Security,hash,hash,478,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:497,Security,hash,hash,497,"/// Verify that the DWARF v5 accelerator table is valid.; ///; /// This function currently checks that:; /// - Headers individual Name Indices fit into the section and can be parsed.; /// - Abbreviation tables can be parsed and contain valid index attributes; /// with correct form encodings.; /// - The CU lists reference existing compile units.; /// - The buckets have a valid index, or they are empty.; /// - All names are reachable via the hash table (they have the correct hash,; /// and the hash is in the correct bucket).; /// - Information in the index entries is complete (all required entries are; /// present) and consistent with the debug_info section DIEs.; ///; /// \param AccelSection section containing the acceleration table; /// \param StrData string section; ///; /// \returns The number of errors occurred during verification",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:64,Availability,avail,available,64,"/// Verify the information in any of the following sections, if available:; /// .debug_abbrev, debug_abbrev.dwo; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if .debug_abbrev and .debug_abbrev.dwo verify successfully,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:126,Availability,error,errors,126,"/// Verify the information in any of the following sections, if available:; /// .debug_abbrev, debug_abbrev.dwo; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if .debug_abbrev and .debug_abbrev.dwo verify successfully,; /// false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:87,Availability,error,errors,87,"/// Verify the information in the .debug_info and .debug_types sections.; ///; /// Any errors are reported to the stream that this object was; /// constructed with.; ///; /// \returns true if all sections verify successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:73,Availability,error,errors,73,"/// Verify the information in the .debug_cu_index section.; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the .debug_cu_index verifies successfully, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:73,Availability,error,errors,73,"/// Verify the information in the .debug_tu_index section.; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the .debug_tu_index verifies successfully, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:69,Availability,error,errors,69,"/// Verify the information in the .debug_line section.; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the .debug_line verifies successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:79,Availability,error,errors,79,"/// Verify the information in accelerator tables, if they exist.; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the existing Apple-style accelerator tables verify; /// successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h:74,Availability,error,errors,74,"/// Verify the information in the .debug_str_offsets[.dwo].; ///; /// Any errors are reported to the stream that was this object was; /// constructed with.; ///; /// \returns true if the .debug_line verifies successfully, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/DWARF/DWARFVerifier.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:407,Testability,test,tested,407,/// A class that transforms the DWARF in a DWARFContext into GSYM information; /// by populating the GsymCreator object that it is constructed with. This; /// class supports converting all DW_TAG_subprogram DIEs into; /// gsym::FunctionInfo objects that includes line table information and inline; /// function information. Creating a separate class to transform this data; /// allows this class to be unit tested.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:154,Availability,error,error,154,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:410,Availability,error,error,410,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:488,Availability,Error,Error,488,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:321,Testability,log,log,321,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:383,Testability,log,log,383,"/// Extract the DWARF from the supplied object file and convert it into the; /// Gsym format in the GsymCreator object that is passed in. Returns an; /// error if something fatal is encountered.; ///; /// \param NumThreads The number of threads that the conversion process can; /// use.; ///; /// \param OS The stream to log warnings and non fatal issues to. If NULL; /// then don't log.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:396,Availability,error,errors,396,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:564,Modifiability,variab,variable,564,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:753,Performance,cache,cached,753,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:604,Safety,safe,safe,604,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:367,Testability,log,log,367,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:573,Testability,log,log,573,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:589,Testability,log,logging,589,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h:648,Testability,log,log,648,"/// Handle any DIE (debug info entry) from the DWARF.; ///; /// This function will find all DW_TAG_subprogram DIEs that convert them into; /// GSYM FuntionInfo objects and add them to the GsymCreator supplied during; /// construction. The DIE and all its children will be recursively parsed; /// with calls to this function.; ///; /// \param Strm The thread specific log stream for any non fatal errors and; /// warnings. Once a thread has finished parsing an entire compile unit, all; /// information in this temporary stream will be forwarded to the member; /// variable log. This keeps logging thread safe. If the value is NULL, then; /// don't log.; ///; /// \param CUI The compile unit specific information that contains the DWARF; /// line table, cached file list, and other compile unit specific; /// information.; ///; /// \param Die The DWARF debug info entry to parse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/DwarfTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ExtractRanges.h:317,Energy Efficiency,efficient,efficiently,317,"/// AddressRange objects are encoded and decoded to be relative to a base; /// address. This will be the FunctionInfo's start address if the AddressRange; /// is directly contained in a FunctionInfo, or a base address of the; /// containing parent AddressRange or AddressRanges. This allows address; /// ranges to be efficiently encoded using ULEB128 encodings as we encode the; /// offset and size of each range instead of full addresses. This also makes; /// encoded addresses easy to relocate as we just need to relocate one base; /// address.; /// @{",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ExtractRanges.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ExtractRanges.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h:6,Usability,simpl,simplified,6,"/// A simplified binary data writer class that doesn't require targets, target; /// definitions, architectures, or require any other optional compile time; /// libraries to be enabled via the build process. This class needs the ability; /// to seek to different spots in the binary stream that is produces to fixup; /// offsets and sizes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h:218,Energy Efficiency,power,power,218,/// Pad with zeroes at the current file position until the current file; /// position matches the specified alignment.; ///; /// \param Align An integer speciying the desired alignment. This does not; /// need to be a power of two.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FileWriter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:83,Performance,cache,cache,83,"/// If we encode a FunctionInfo during segmenting so we know its size, we can; /// cache that encoding here so we don't need to re-encode it when saving the; /// GSYM file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:464,Availability,error,error,464,/// Decode an object from a binary data stream.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The FunctionInfo's start address and will be used as the; /// base address when decoding any contained information like the line table; /// and the inline info.; ///; /// \returns An FunctionInfo or an error describing the issue that was; /// encountered during decoding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:162,Availability,error,error,162,/// Encode this object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \returns An error object that indicates failure or the offset of the; /// function info that was successfully written into the stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:190,Availability,failure,failure,190,/// Encode this object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \returns An error object that indicates failure or the offset of the; /// function info that was successfully written into the stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:53,Performance,cache,cache,53,"/// Encode this function info into the internal byte cache and return the size; /// in bytes.; ///; /// When segmenting GSYM files we need to know how big each FunctionInfo will; /// encode into so we can generate segments of the right size. We don't want; /// to have to encode a FunctionInfo twice, so we can cache the encoded bytes; /// and re-use then when calling FunctionInfo::encode(...).; ///; /// \returns The size in bytes of the FunctionInfo if it were to be encoded; /// into a byte stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:311,Performance,cache,cache,311,"/// Encode this function info into the internal byte cache and return the size; /// in bytes.; ///; /// When segmenting GSYM files we need to know how big each FunctionInfo will; /// encode into so we can generate segments of the right size. We don't want; /// to have to encode a FunctionInfo twice, so we can cache the encoded bytes; /// and re-use then when calling FunctionInfo::encode(...).; ///; /// \returns The size in bytes of the FunctionInfo if it were to be encoded; /// into a byte stream.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:822,Availability,error,error,822,"/// Lookup an address within a FunctionInfo object's data stream.; ///; /// Instead of decoding an entire FunctionInfo object when doing lookups,; /// we can decode only the information we need from the FunctionInfo's data; /// for the specific address. The lookup result information is returned as; /// a LookupResult.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in information in the returned result.; ///; /// \param FuncAddr The function start address decoded from the GsymReader.; ///; /// \param Addr The address to lookup.; ///; /// \returns An LookupResult or an error describing the issue that was; /// encountered during decoding. An error should only be returned if the; /// address is not contained in the FunctionInfo or if the data is corrupted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h:895,Availability,error,error,895,"/// Lookup an address within a FunctionInfo object's data stream.; ///; /// Instead of decoding an entire FunctionInfo object when doing lookups,; /// we can decode only the information we need from the FunctionInfo's data; /// for the specific address. The lookup result information is returned as; /// a LookupResult.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in information in the returned result.; ///; /// \param FuncAddr The function start address decoded from the GsymReader.; ///; /// \param Addr The address to lookup.; ///; /// \returns An LookupResult or an error describing the issue that was; /// encountered during decoding. An error should only be returned if the; /// address is not contained in the FunctionInfo or if the data is corrupted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/FunctionInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:1936,Energy Efficiency,efficient,efficient,1936,"l of the FunctionInfo objects have been added, the; /// GsymCreator::finalize(...) must be called prior to saving. This function; /// will sort the FunctionInfo objects, finalize the string table, and do any; /// other passes on the information needed to prepare the information to be; /// saved.; ///; /// Once the object has been finalized, it can be saved to a file or section.; ///; /// ENCODING; ///; /// GSYM files are designed to be memory mapped into a process as shared, read; /// only data, and used as is.; ///; /// The GSYM file format when in a stand alone file consists of:; /// - Header; /// - Address Table; /// - Function Info Offsets; /// - File Table; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:2576,Energy Efficiency,efficient,efficient,2576,"; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:3140,Energy Efficiency,reduce,reduce,3140," the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed by that number of FileEntry; /// structures. The file table is aligned to a 4 byte boundary, Each file in; /// the file table is represented with a FileEntry structure.; /// See ""llvm/DebugInfo/GSYM/FileEntry.h"" for details.; ///; /// STRING TABLE; ///; /// The string table follows the file table in stand alone GSYM files and; /// contains all strings for everything contained in the GSYM file. Any string; /// data should be added to the string table and any references to strings; /// inside GSYM information must be stored as 32 bit string table offsets into; /// ",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:2598,Performance,load,loaded,2598,"; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:785,Safety,safe,safe,785,"/// GsymCreator is used to emit GSYM data to a stand alone file or section; /// within a file.; ///; /// The GsymCreator is designed to be used in 3 stages:; /// - Create FunctionInfo objects and add them; /// - Finalize the GsymCreator object; /// - Save to file or section; ///; /// The first stage involves creating FunctionInfo objects from another source; /// of information like compiler debug info metadata, DWARF or Breakpad files.; /// Any strings in the FunctionInfo or contained information, like InlineInfo; /// or LineTable objects, should get the string table offsets by calling; /// GsymCreator::insertString(...). Any file indexes that are needed should be; /// obtained by calling GsymCreator::insertFile(...). All of the function calls; /// in GsymCreator are thread safe. This allows multiple threads to create and; /// add FunctionInfo objects while parsing debug information.; ///; /// Once all of the FunctionInfo objects have been added, the; /// GsymCreator::finalize(...) must be called prior to saving. This function; /// will sort the FunctionInfo objects, finalize the string table, and do any; /// other passes on the information needed to prepare the information to be; /// saved.; ///; /// Once the object has been finalized, it can be saved to a file or section.; ///; /// ENCODING; ///; /// GSYM files are designed to be memory mapped into a process as shared, read; /// only data, and used as is.; ///; /// The GSYM file format when in a stand alone file consists of:; /// - Header; /// - Address Table; /// - Function Info Offsets; /// - File Table; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:2586,Security,access,access,2586,"; /// - String Table; /// - Function Info Data; ///; /// HEADER; ///; /// The header is fully described in ""llvm/DebugInfo/GSYM/Header.h"".; ///; /// ADDRESS TABLE; ///; /// The address table immediately follows the header in the file and consists; /// of Header.NumAddresses address offsets. These offsets are sorted and can be; /// binary searched for efficient lookups. Addresses in the address table are; /// stored as offsets from a 64 bit base address found in Header.BaseAddress.; /// This allows the address table to contain 8, 16, or 32 offsets. This allows; /// the address table to not require full 64 bit addresses for each address.; /// The resulting GSYM size is smaller and causes fewer pages to be touched; /// during address lookups when the address table is smaller. The size of the; /// address offsets in the address table is specified in the header in; /// Header.AddrOffSize. The first offset in the address table is aligned to; /// Header.AddrOffSize alignment to ensure efficient access when loaded into; /// memory.; ///; /// FUNCTION INFO OFFSETS TABLE; ///; /// The function info offsets table immediately follows the address table and; /// consists of Header.NumAddresses 32 bit file offsets: one for each address; /// in the address table. This data is aligned to a 4 byte boundary. The; /// offsets in this table are the relative offsets from the start offset of the; /// GSYM header and point to the function info data for each address in the; /// address table. Keeping this data separate from the address table helps to; /// reduce the number of pages that are touched when address lookups occur on a; /// GSYM file.; ///; /// FILE TABLE; ///; /// The file table immediately follows the function info offsets table. The; /// encoding of the FileTable is:; ///; /// struct FileTable {; /// uint32_t Count;; /// FileEntry Files[];; /// };; ///; /// The file table starts with a 32 bit count of the number of files that are; /// used in all of the function info, followed",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:18,Modifiability,variab,variables,18,// Private member variables require Mutex protections,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:270,Modifiability,evolve,evolves,270,/// Get the maximum address offset for the current address offset size.; ///; /// This is used when creating the address offset table to ensure we have; /// values that are in range so we don't end up truncating address offsets; /// when creating GSYM files as the code evolves.; ///; /// \returns The maximum address offset value that will be encoded into a GSYM; /// file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:103,Safety,safe,safe,103,/// Inserts a FileEntry into the file table.; ///; /// This is used to insert a file entry in a thread safe way into this object.; ///; /// \param FE A file entry object that contains valid string table offsets; /// from this object already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:453,Deployability,update,updated,453,"/// Fixup any string and file references by updating any file indexes and; /// strings offsets in the InlineInfo parameter.; ///; /// When copying InlineInfo entries, we can simply make a copy of the object; /// and then fixup the files and strings for efficiency.; ///; /// \param SrcGC The source gsym creator to copy from.; /// \param II The inline info that contains file indexes and string offsets; /// that come from \a SrcGC. The entries will be updated by coping any files; /// and strings over into this object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:174,Usability,simpl,simply,174,"/// Fixup any string and file references by updating any file indexes and; /// strings offsets in the InlineInfo parameter.; ///; /// When copying InlineInfo entries, we can simply make a copy of the object; /// and then fixup the files and strings for efficiency.; ///; /// \param SrcGC The source gsym creator to copy from.; /// \param II The inline info that contains file indexes and string offsets; /// that come from \a SrcGC. The entries will be updated by coping any files; /// and strings over into this object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:456,Availability,down,download,456,"/// Save this GSYM file into segments that are roughly \a SegmentSize in size.; ///; /// When segemented GSYM files are saved to disk, they will use \a Path as a; /// prefix and then have the first function info address appended to the path; /// when each segment is saved. Each segmented GSYM file has a only the; /// strings and files that are needed to save the function infos that are in; /// each segment. These smaller files are easy to compress and download; /// separately and allow for efficient lookups with very large GSYM files and; /// segmenting them allows servers to download only the segments that are; /// needed.; ///; /// \param Path The path prefix to use when saving the GSYM files.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:583,Availability,down,download,583,"/// Save this GSYM file into segments that are roughly \a SegmentSize in size.; ///; /// When segemented GSYM files are saved to disk, they will use \a Path as a; /// prefix and then have the first function info address appended to the path; /// when each segment is saved. Each segmented GSYM file has a only the; /// strings and files that are needed to save the function infos that are in; /// each segment. These smaller files are easy to compress and download; /// separately and allow for efficient lookups with very large GSYM files and; /// segmenting them allows servers to download only the segments that are; /// needed.; ///; /// \param Path The path prefix to use when saving the GSYM files.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:495,Energy Efficiency,efficient,efficient,495,"/// Save this GSYM file into segments that are roughly \a SegmentSize in size.; ///; /// When segemented GSYM files are saved to disk, they will use \a Path as a; /// prefix and then have the first function info address appended to the path; /// when each segment is saved. Each segmented GSYM file has a only the; /// strings and files that are needed to save the function infos that are in; /// each segment. These smaller files are easy to compress and download; /// separately and allow for efficient lookups with very large GSYM files and; /// segmenting them allows servers to download only the segments that are; /// needed.; ///; /// \param Path The path prefix to use when saving the GSYM files.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:703,Availability,error,error,703,"/// Save a GSYM file to a stand alone file.; ///; /// \param Path The file path to save the GSYM file to.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into. If; /// this option is set this function will create N segments; /// that are all around \a SegmentSize bytes in size. This; /// allows a very large GSYM file to be broken up into; /// shards. Each GSYM file will have its own file table,; /// and string table that only have the files and strings; /// needed for the shared. If this argument has no value,; /// a single GSYM file that contains all function; /// information will be created.; /// \returns An error object that indicates success or failure of the save.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:742,Availability,failure,failure,742,"/// Save a GSYM file to a stand alone file.; ///; /// \param Path The file path to save the GSYM file to.; /// \param ByteOrder The endianness to use when saving the file.; /// \param SegmentSize The size in bytes to segment the GSYM file into. If; /// this option is set this function will create N segments; /// that are all around \a SegmentSize bytes in size. This; /// allows a very large GSYM file to be broken up into; /// shards. Each GSYM file will have its own file table,; /// and string table that only have the files and strings; /// needed for the shared. If this argument has no value,; /// a single GSYM file that contains all function; /// information will be created.; /// \returns An error object that indicates success or failure of the save.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:145,Availability,error,error,145,/// Encode a GSYM into the file writer stream at the current position.; ///; /// \param O The stream to save the binary data to; /// \returns An error object that indicates success or failure of the save.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:184,Availability,failure,failure,184,/// Encode a GSYM into the file writer stream at the current position.; ///; /// \param O The stream to save the binary data to; /// \returns An error object that indicates success or failure of the save.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:301,Energy Efficiency,efficient,efficiently,301,"/// Insert a file into this GSYM creator.; ///; /// Inserts a file by adding a FileEntry into the ""Files"" member variable if; /// the file has not already been added. The file path is split into; /// directory and filename which are both added to the string table. This; /// allows paths to be stored efficiently by reusing the directories that are; /// common between multiple files.; ///; /// \param Path The path to the file to insert.; /// \param Style The path style for the ""Path"" parameter.; /// \returns The unique file index for the inserted file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:113,Modifiability,variab,variable,113,"/// Insert a file into this GSYM creator.; ///; /// Inserts a file by adding a FileEntry into the ""Files"" member variable if; /// the file has not already been added. The file path is split into; /// directory and filename which are both added to the string table. This; /// allows paths to be stored efficiently by reusing the directories that are; /// common between multiple files.; ///; /// \param Path The path to the file to insert.; /// \param Style The path style for the ""Path"" parameter.; /// \returns The unique file index for the inserted file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:368,Availability,error,error,368,"/// Finalize the data in the GSYM creator prior to saving the data out.; ///; /// Finalize must be called after all FunctionInfo objects have been added; /// and before GsymCreator::save() is called.; ///; /// \param OS Output stream to report duplicate function infos, overlapping; /// function infos, and function infos that were merged or removed.; /// \returns An error object that indicates success or failure of the; /// finalize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:407,Availability,failure,failure,407,"/// Finalize the data in the GSYM creator prior to saving the data out.; ///; /// Finalize must be called after all FunctionInfo objects have been added; /// and before GsymCreator::save() is called.; ///; /// \param OS Output stream to report duplicate function infos, overlapping; /// function infos, and function infos that were merged or removed.; /// \returns An error object that indicates success or failure of the; /// finalize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:11,Safety,safe,safe,11,"/// Thread safe iteration over all function infos.; ///; /// \param Callback A callback function that will get called with each; /// FunctionInfo. If the callback returns false, stop iterating.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:11,Safety,safe,safe,11,"/// Thread safe const iteration over all function infos.; ///; /// \param Callback A callback function that will get called with each; /// FunctionInfo. If the callback returns false, stop iterating.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:144,Performance,load,loaded,144,/// Set the base address to use for the GSYM file.; ///; /// Setting the base address to use for the GSYM file. Object files typically; /// get loaded from a base address when the OS loads them into memory. Using; /// GSYM files for symbolication becomes easier if the base address in the; /// GSYM header is the same address as it allows addresses to be easily slid; /// and allows symbolication without needing to find the original base; /// address in the original object file.; ///; /// \param Addr The address to use as the base address of the GSYM file; /// when it is saved to disk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:183,Performance,load,loads,183,/// Set the base address to use for the GSYM file.; ///; /// Setting the base address to use for the GSYM file. Object files typically; /// get loaded from a base address when the OS loads them into memory. Using; /// GSYM files for symbolication becomes easier if the base address in the; /// GSYM header is the same address as it allows addresses to be easily slid; /// and allows symbolication without needing to find the original base; /// address in the original object file.; ///; /// \param Addr The address to use as the base address of the GSYM file; /// when it is saved to disk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:814,Availability,error,error,814,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:639,Deployability,update,updated,639,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:307,Testability,test,tests,307,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h:316,Testability,test,test,316,"/// Create a segmented GSYM creator starting with function info index; /// \a FuncIdx.; ///; /// This function will create a GsymCreator object that will encode into; /// roughly \a SegmentSize bytes and return it. It is used by the private; /// saveSegments(...) function and also is used by the GSYM unit tests to test; /// segmenting of GSYM files. The returned GsymCreator can be finalized and; /// encoded.; ///; /// \param [in] SegmentSize The size in bytes to roughly segment the GSYM file; /// into.; /// \param [in,out] FuncIdx The index of the first function info to encode; /// into the returned GsymCreator. This index will be updated so it can be; /// used in subsequent calls to this function to allow more segments to be; /// created.; /// \returns An expected unique pointer to a GsymCreator or an error. The; /// returned unique pointer can be NULL if there are no more functions to; /// encode.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymCreator.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:88,Performance,optimiz,optimized,88,"/// GsymReader is used to read GSYM data from a file or buffer.; ///; /// This class is optimized for very quick lookups when the endianness matches; /// the host system. The Header, address table, address info offsets, and file; /// table is designed to be mmap'ed as read only into memory and used without; /// any parsing needed. If the endianness doesn't match, we swap these objects; /// and tables into GsymReader::SwappedData and then point our header and; /// ArrayRefs to this swapped internal data.; ///; /// GsymReader objects must use one of the static functions to create an; /// instance: GsymReader::openFile(...) and GsymReader::copyBuffer(...).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:175,Availability,error,error,175,/// Construct a GsymReader from a file on disk.; ///; /// \param Path The file path the GSYM file to read.; /// \returns An expected GsymReader that contains the object or an error; /// object that indicates reason for failing to read the GSYM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:218,Availability,error,error,218,/// Construct a GsymReader from a buffer.; ///; /// \param Bytes A set of bytes that will be copied and owned by the; /// returned object on success.; /// \returns An expected GsymReader that contains the object or an error; /// object that indicates reason for failing to read the GSYM.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:4,Security,Access,Access,4,/// Access the GSYM header.; /// \returns A native endian version of the GSYM header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:642,Availability,error,error,642,"/// Get the full function info for an address.; ///; /// This should be called when a client will store a copy of the complete; /// FunctionInfo for a given address. For one off lookups, use the lookup(); /// function below.; ///; /// Symbolication server processes might want to parse the entire function; /// info for a given address and cache it if the process stays around to; /// service many symbolication addresses, like for parsing profiling; /// information.; ///; /// \param Addr A virtual address from the orignal object file to lookup.; ///; /// \returns An expected FunctionInfo that contains the function info object; /// or an error object that indicates reason for failing to lookup the; /// address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:340,Performance,cache,cache,340,"/// Get the full function info for an address.; ///; /// This should be called when a client will store a copy of the complete; /// FunctionInfo for a given address. For one off lookups, use the lookup(); /// function below.; ///; /// Symbolication server processes might want to parse the entire function; /// info for a given address and cache it if the process stays around to; /// service many symbolication addresses, like for parsing profiling; /// information.; ///; /// \param Addr A virtual address from the orignal object file to lookup.; ///; /// \returns An expected FunctionInfo that contains the function info object; /// or an error object that indicates reason for failing to lookup the; /// address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:227,Availability,error,error,227,/// Get the full function info given an address index.; ///; /// \param AddrIdx A address index for an address in the address table.; ///; /// \returns An expected FunctionInfo that contains the function info object; /// or an error object that indicates reason for failing get the function; /// info object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:809,Availability,error,error,809,"/// Lookup an address in the a GSYM.; ///; /// Lookup just the information needed for a specific address \a Addr. This; /// function is faster that calling getFunctionInfo() as it will only return; /// information that pertains to \a Addr and allows the parsing to skip any; /// extra information encoded for other addresses. For example the line table; /// parsing can stop when a matching LineEntry has been fouhnd, and the; /// InlineInfo can stop parsing early once a match has been found and also; /// skip information that doesn't match. This avoids memory allocations and; /// is much faster for lookups.; ///; /// \param Addr A virtual address from the orignal object file to lookup.; /// \returns An expected LookupResult that contains only the information; /// needed for the current address, or an error object that indicates reason; /// for failing to lookup the address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:549,Safety,avoid,avoids,549,"/// Lookup an address in the a GSYM.; ///; /// Lookup just the information needed for a specific address \a Addr. This; /// function is faster that calling getFunctionInfo() as it will only return; /// information that pertains to \a Addr and allows the parsing to skip any; /// extra information encoded for other addresses. For example the line table; /// parsing can stop when a matching LineEntry has been fouhnd, and the; /// InlineInfo can stop parsing early once a match has been found and also; /// skip information that doesn't match. This avoids memory allocations and; /// is much faster for lookups.; ///; /// \param Addr A virtual address from the orignal object file to lookup.; /// \returns An expected LookupResult that contains only the information; /// needed for the current address, or an error object that indicates reason; /// for failing to lookup the address.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:228,Security,access,access,228,"/// Get the a file entry for the suppplied file index.; ///; /// Used to convert any file indexes in the FunctionInfo data back into; /// files. This function can be used for iteration, but is more commonly used; /// for random access when doing lookups.; ///; /// \param Index An index into the file table.; /// \returns An optional FileInfo that will be valid if the file index is; /// valid, or std::nullopt if the file index is out of bounds,",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:467,Modifiability,variab,variable,467,"/// Get an appropriate address info offsets array.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte offsets from the The gsym::Header::BaseAddress. The table is stored; /// internally as a array of bytes that are in the correct endianness. When; /// we access this table we must get an array that matches those sizes. This; /// templatized helper function is used when accessing address offsets in the; /// AddrOffsets member variable.; ///; /// \returns An ArrayRef of an appropriate address offset size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:294,Security,access,access,294,"/// Get an appropriate address info offsets array.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte offsets from the The gsym::Header::BaseAddress. The table is stored; /// internally as a array of bytes that are in the correct endianness. When; /// we access this table we must get an array that matches those sizes. This; /// templatized helper function is used when accessing address offsets in the; /// AddrOffsets member variable.; ///; /// \returns An ArrayRef of an appropriate address offset size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:410,Security,access,accessing,410,"/// Get an appropriate address info offsets array.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte offsets from the The gsym::Header::BaseAddress. The table is stored; /// internally as a array of bytes that are in the correct endianness. When; /// we access this table we must get an array that matches those sizes. This; /// templatized helper function is used when accessing address offsets in the; /// AddrOffsets member variable.; ///; /// \returns An ArrayRef of an appropriate address offset size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:360,Security,access,access,360,"/// Get an appropriate address from the address table.; ///; /// The address table in the GSYM file is stored as array of 1, 2, 4 or 8; /// byte address offsets from the The gsym::Header::BaseAddress. The table is; /// stored internally as a array of bytes that are in the correct endianness.; /// In order to extract an address from the address table we must access the; /// address offset using the correct size and then add it to the BaseAddress; /// in the header.; ///; /// \param Index An index into the AddrOffsets array.; /// \returns An virtual address that matches the original object file for the; /// address as the specified index, or std::nullopt if Index is out of bounds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:176,Availability,error,error,176,"/// Create a GSYM from a memory buffer.; ///; /// Called by both openFile() and copyBuffer(), this function does all of the; /// work of parsing the GSYM file and returning an error.; ///; /// \param MemBuffer A memory buffer that will transfer ownership into the; /// GsymReader.; /// \returns An expected GsymReader that contains the object or an error; /// object that indicates reason for failing to read the GSYM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:349,Availability,error,error,349,"/// Create a GSYM from a memory buffer.; ///; /// Called by both openFile() and copyBuffer(), this function does all of the; /// work of parsing the GSYM file and returning an error.; ///; /// \param MemBuffer A memory buffer that will transfer ownership into the; /// GsymReader.; /// \returns An expected GsymReader that contains the object or an error; /// object that indicates reason for failing to read the GSYM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:384,Availability,error,error,384,"/// Given an address, find the address index.; ///; /// Binary search the address table and find the matching address index.; ///; /// \param Addr A virtual address that matches the original object file; /// to lookup.; /// \returns An index into the address table. This index can be used to; /// extract the FunctionInfo data's offset from the AddrInfoOffsets array.; /// Returns an error if the address isn't in the GSYM with details of why.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:913,Availability,error,error,913,"/// Given an address, find the correct function info data and function; /// address.; ///; /// Binary search the address table and find the matching address info; /// and make sure that the function info contains the address. GSYM allows; /// functions to overlap, and the most debug info is contained in the first; /// entries due to the sorting when GSYM files are created. We can have; /// multiple function info that start at the same address only if their; /// address range doesn't match. So find the first entry that matches \a Addr; /// and iterate forward until we find one that contains the address.; ///; /// \param[in] Addr A virtual address that matches the original object file; /// to lookup.; ///; /// \param[out] FuncStartAddr A virtual address that is the base address of; /// the function that is used for decoding the FunctionInfo.; ///; /// \returns An valid data extractor on success, or an error if we fail to; /// find the address in a function info or corrrectly decode the data",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h:221,Availability,error,error,221,/// Get the function data and address given an address index.; ///; /// \param AddrIdx A address index from the address table.; ///; /// \returns An expected FunctionInfo that contains the function info object; /// or an error object that indicates reason for failing to lookup the; /// address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/GsymReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:539,Performance,load,loading,539,"/// The GSYM header.; ///; /// The GSYM header is found at the start of a stand alone GSYM file, or as; /// the first bytes in a section when GSYM is contained in a section of an; /// executable file (ELF, mach-o, COFF).; ///; /// The structure is encoded exactly as it appears in the structure definition; /// with no gaps between members. Alignment should not change from system to; /// system as the members were laid out so that they shouldn't align; /// differently on different architectures.; ///; /// When endianness of the system loading a GSYM file matches, the file can; /// be mmap'ed in and a pointer to the header can be cast to the first bytes; /// of the file (stand alone GSYM file) or section data (GSYM in a section).; /// When endianness is swapped, the Header::decode() function should be used to; /// decode the header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:60,Safety,detect,detect,60,/// The magic bytes should be set to GSYM_MAGIC. This helps detect if a file; /// is a GSYM file by scanning the first 4 bytes of a file or section.; /// This value might appear byte swapped,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:45,Availability,error,error,45,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:280,Availability,error,errors,280,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:477,Availability,error,error,477,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:522,Availability,Error,Error,522,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:560,Availability,error,errors,560,"/// Check if a header is valid and return an error if anything is wrong.; ///; /// This function can be used prior to encoding a header to ensure it is; /// valid, or after decoding a header to ensure it is valid and supported.; ///; /// Check a correctly byte swapped header for errors:; /// - check magic value; /// - check that version number is supported; /// - check that the address offset size is supported; /// - check that the UUID size is valid; ///; /// \returns An error if anything is wrong in the header, or Error::success(); /// if there are no errors.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:270,Availability,error,error,270,/// Decode an object from a binary data stream.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \returns A Header or an error describing the issue that was; /// encountered during decoding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:162,Availability,error,error,162,/// Encode this object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \returns An error object that indicates success or failure of the; /// encoding process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h:201,Availability,failure,failure,201,/// Encode this object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \returns An error object that indicates success or failure of the; /// encoding process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/Header.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:1126,Energy Efficiency,efficient,efficiently,1126,"nline information stores the name of the inline function along with; /// an array of address ranges. It also stores the call file and call line; /// that called this inline function. This allows us to unwind inline call; /// stacks back to the inline or concrete function that called this; /// function. Inlined functions contained in this function are stored in the; /// ""Children"" variable. All address ranges must be sorted and all address; /// ranges of all children must be contained in the ranges of this function.; /// Any clients that encode information will need to ensure the ranges are; /// all contined correctly or lookups could fail. Add ranges in these objects; /// must be contained in the top level FunctionInfo address ranges as well.; ///; /// ENCODING; ///; /// When saved to disk, the inline info encodes all ranges to be relative to; /// a parent address range. This will be the FunctionInfo's start address if; /// the InlineInfo is directly contained in a FunctionInfo, or a the start; /// address of the containing parent InlineInfo's first ""Ranges"" member. This; /// allows address ranges to be efficiently encoded using ULEB128 encodings as; /// we encode the offset and size of each range instead of full addresses. This; /// also makes any encoded addresses easy to relocate as we just need to; /// relocate the FunctionInfo's start address.; ///; /// - The AddressRanges member ""Ranges"" is encoded using an appropriate base; /// address as described above.; /// - UINT8 boolean value that specifies if the InlineInfo object has children.; /// - UINT32 string table offset that points to the name of the inline; /// function.; /// - ULEB128 integer that specifies the file of the call site that called; /// this function.; /// - ULEB128 integer that specifies the source line of the call site that; /// called this function.; /// - if this object has children, enocode each child InlineInfo using the; /// the first address range's start address as the base address.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:388,Modifiability,variab,variable,388,"/// Inline information stores the name of the inline function along with; /// an array of address ranges. It also stores the call file and call line; /// that called this inline function. This allows us to unwind inline call; /// stacks back to the inline or concrete function that called this; /// function. Inlined functions contained in this function are stored in the; /// ""Children"" variable. All address ranges must be sorted and all address; /// ranges of all children must be contained in the ranges of this function.; /// Any clients that encode information will need to ensure the ranges are; /// all contined correctly or lookups could fail. Add ranges in these objects; /// must be contained in the top level FunctionInfo address ranges as well.; ///; /// ENCODING; ///; /// When saved to disk, the inline info encodes all ranges to be relative to; /// a parent address range. This will be the FunctionInfo's start address if; /// the InlineInfo is directly contained in a FunctionInfo, or a the start; /// address of the containing parent InlineInfo's first ""Ranges"" member. This; /// allows address ranges to be efficiently encoded using ULEB128 encodings as; /// we encode the offset and size of each range instead of full addresses. This; /// also makes any encoded addresses easy to relocate as we just need to; /// relocate the FunctionInfo's start address.; ///; /// - The AddressRanges member ""Ranges"" is encoded using an appropriate base; /// address as described above.; /// - UINT8 boolean value that specifies if the InlineInfo object has children.; /// - UINT32 string table offset that points to the name of the inline; /// function.; /// - ULEB128 integer that specifies the file of the call site that called; /// this function.; /// - ULEB128 integer that specifies the source line of the call site that; /// called this function.; /// - if this object has children, enocode each child InlineInfo using the; /// the first address range's start address as the base address.;",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:2045,Availability,error,error,2045,"g inline info using this; /// function. The benefit of using this function is that only the information; /// needed for the lookup will be extracted, other info can be skipped and; /// parsing can stop as soon as the deepest match is found. This allows; /// symbolication tools to be fast and efficient and avoid allocation costs; /// when doing lookups.; ///; /// This function will augment the SourceLocations array \a SrcLocs with any; /// inline information that pertains to \a Addr. If no inline information; /// exists for \a Addr, then \a SrcLocs will be left untouched. If there is; /// inline information for \a Addr, then \a SrcLocs will be modifiied to; /// contain the deepest most inline function's SourceLocation at index zero; /// in the array and proceed up the concrete function source file and; /// line at the end of the array.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in the source locations.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// decode the correct addresses for the inline information.; ///; /// \param Addr The address to lookup.; ///; /// \param SrcLocs The inline source locations that matches \a Addr. This; /// array must be initialized with the matching line entry; /// from the line table upon entry. The name of the concrete; /// function must be supplied since it will get pushed to; /// the last SourceLocation entry and the inline information; /// will fill in the source file and line from the inline; /// information.; ///; /// \returns An error if the inline information is corrupt, or; /// Error::success() for all other cases, even when no information; /// is added to \a SrcLocs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:2097,Availability,Error,Error,2097,"g inline info using this; /// function. The benefit of using this function is that only the information; /// needed for the lookup will be extracted, other info can be skipped and; /// parsing can stop as soon as the deepest match is found. This allows; /// symbolication tools to be fast and efficient and avoid allocation costs; /// when doing lookups.; ///; /// This function will augment the SourceLocations array \a SrcLocs with any; /// inline information that pertains to \a Addr. If no inline information; /// exists for \a Addr, then \a SrcLocs will be left untouched. If there is; /// inline information for \a Addr, then \a SrcLocs will be modifiied to; /// contain the deepest most inline function's SourceLocation at index zero; /// in the array and proceed up the concrete function source file and; /// line at the end of the array.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in the source locations.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// decode the correct addresses for the inline information.; ///; /// \param Addr The address to lookup.; ///; /// \param SrcLocs The inline source locations that matches \a Addr. This; /// array must be initialized with the matching line entry; /// from the line table upon entry. The name of the concrete; /// function must be supplied since it will get pushed to; /// the last SourceLocation entry and the inline information; /// will fill in the source file and line from the inline; /// information.; ///; /// \returns An error if the inline information is corrupt, or; /// Error::success() for all other cases, even when no information; /// is added to \a SrcLocs.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:481,Energy Efficiency,efficient,efficient,481,"/// Lookup a single address within the inline info data.; ///; /// Clients have the option to decode an entire InlineInfo object (using; /// InlineInfo::decode() ) or just find the matching inline info using this; /// function. The benefit of using this function is that only the information; /// needed for the lookup will be extracted, other info can be skipped and; /// parsing can stop as soon as the deepest match is found. This allows; /// symbolication tools to be fast and efficient and avoid allocation costs; /// when doing lookups.; ///; /// This function will augment the SourceLocations array \a SrcLocs with any; /// inline information that pertains to \a Addr. If no inline information; /// exists for \a Addr, then \a SrcLocs will be left untouched. If there is; /// inline information for \a Addr, then \a SrcLocs will be modifiied to; /// contain the deepest most inline function's SourceLocation at index zero; /// in the array and proceed up the concrete function source file and; /// line at the end of the array.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in the source locations.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// decode the correct addresses for the inline information.; ///; /// \param Addr The address to lookup.; ///; /// \param SrcLocs The inline source locations that matches \a Addr. This; /// array must be initialized with the matching line entry; /// from the line table upon entry. The name of the concrete; /// function must be supplied since it will get pushed to; /// the last SourceLocation entry and the inline information; /// will fill in the source file and line from the inl",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:495,Safety,avoid,avoid,495,"/// Lookup a single address within the inline info data.; ///; /// Clients have the option to decode an entire InlineInfo object (using; /// InlineInfo::decode() ) or just find the matching inline info using this; /// function. The benefit of using this function is that only the information; /// needed for the lookup will be extracted, other info can be skipped and; /// parsing can stop as soon as the deepest match is found. This allows; /// symbolication tools to be fast and efficient and avoid allocation costs; /// when doing lookups.; ///; /// This function will augment the SourceLocations array \a SrcLocs with any; /// inline information that pertains to \a Addr. If no inline information; /// exists for \a Addr, then \a SrcLocs will be left untouched. If there is; /// inline information for \a Addr, then \a SrcLocs will be modifiied to; /// contain the deepest most inline function's SourceLocation at index zero; /// in the array and proceed up the concrete function source file and; /// line at the end of the array.; ///; /// \param GR The GSYM reader that contains the string and file table that; /// will be used to fill in the source locations.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// decode the correct addresses for the inline information.; ///; /// \param Addr The address to lookup.; ///; /// \param SrcLocs The inline source locations that matches \a Addr. This; /// array must be initialized with the matching line entry; /// from the line table upon entry. The name of the concrete; /// function must be supplied since it will get pushed to; /// the last SourceLocation entry and the inline information; /// will fill in the source file and line from the inl",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:633,Availability,error,error,633,"/// Decode an InlineInfo object from a binary data stream.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the InlineInfo object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding all address ranges.; /// This will be the FunctionInfo's start address if this object is directly; /// contained in a FunctionInfo object, or the start address of the first; /// address range in an InlineInfo object of this object is a child of; /// another InlineInfo object.; /// \returns An InlineInfo or an error describing the issue that was; /// encountered during decoding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:514,Availability,error,error,514,"/// Encode this InlineInfo object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \param BaseAddr The base address to use when encoding all address ranges.; /// This will be the FunctionInfo's start address if this object is directly; /// contained in a FunctionInfo object, or the start address of the first; /// address range in an InlineInfo object of this object is a child of; /// another InlineInfo object.; ///; /// \returns An error object that indicates success or failure or the; /// encoding process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h:553,Availability,failure,failure,553,"/// Encode this InlineInfo object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \param BaseAddr The base address to use when encoding all address ranges.; /// This will be the FunctionInfo's start address if this object is directly; /// contained in a FunctionInfo object, or the start address of the first; /// address range in an InlineInfo object of this object is a child of; /// another InlineInfo object.; ///; /// \returns An error object that indicates success or failure or the; /// encoding process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/InlineInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:2429,Availability,down,down,2429,"rted in ascending address; /// order.; ///; /// NORMAL OPCODES; ///; /// The opcodes 0 through 3 are normal in opcodes. Their encoding and; /// descriptions are listed below:; ///; /// ENCODING ENUMERATION VALUE DESCRIPTION; /// ======== ================ ===== ========================================; /// LTOC_EndSequence 0x00 Parsing is done.; /// ULEB LTOC_SetFile 0x01 Row.File = ULEB; /// ULEB LTOC_AdvancePC 0x02 Row.Addr += ULEB, push ""Row"".; /// SLEB LTOC_AdvanceLine 0x03 Row.Line += SLEB; /// LTOC_FirstSpecial 0x04 First special opcode (see SPECIAL; /// OPCODES below).; ///; /// SPECIAL OPCODES; ///; /// Opcodes LTOC_FirstSpecial through 255 are special opcodes that always; /// increment both the Row.Addr and Row.Line and push ""Row"" onto the; /// LineEntry.Lines array. They do this by using some of the bits to; /// increment/decrement the source line number, and some of the bits to; /// increment the address. Line numbers can go up or down when making line; /// tables, where addresses always only increase since line tables are sorted; /// by address.; ///; /// In order to calculate the amount to increment the line and address for; /// these special opcodes, we calculate the number of values reserved for the; /// line increment/decrement using the ""MinDelta"" and ""MaxDelta"" from the; /// prolog:; ///; /// const int64_t LineRange = MaxDelta - MinDelta + 1;; ///; /// Then we can adjust the opcode to not include any of the normal opcodes:; ///; /// const uint8_t AdjustedOp = Opcode - LTOC_FirstSpecial;; ///; /// And we can calculate the line offset, and address offset:; ///; /// const int64_t LineDelta = MinDelta + (AdjustedOp % LineRange);; /// const uint64_t AddrDelta = (AdjustedOp / LineRange);; ///; /// And use these to modify our ""Row"":; ///; /// Row.Line += LineDelta;; /// Row.Addr += AddrDelta;; ///; /// And push a row onto the line table:; ///; /// Lines.push_back(Row);; ///; /// This is verify similar to the way that DWARF encodes its line tables. The; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:907,Availability,error,error,907,"/// Lookup a single address within a line table's data.; ///; /// Clients have the option to decode an entire line table using; /// LineTable::decode() or just find a single matching entry using this; /// function. The benefit of using this function is that parsed LineEntry; /// objects that do not match will not be stored in an array. This will avoid; /// memory allocation costs and parsing can stop once a match has been found.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// initialize the line table row prior to parsing any opcodes.; ///; /// \returns An LineEntry object if a match is found, error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:348,Safety,avoid,avoid,348,"/// Lookup a single address within a line table's data.; ///; /// Clients have the option to decode an entire line table using; /// LineTable::decode() or just find a single matching entry using this; /// function. The benefit of using this function is that parsed LineEntry; /// objects that do not match will not be stored in an array. This will avoid; /// memory allocation costs and parsing can stop once a match has been found.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// initialize the line table row prior to parsing any opcodes.; ///; /// \returns An LineEntry object if a match is found, error otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:510,Availability,error,error,510,/// Decode an LineTable object from a binary data stream.; ///; /// \param Data The binary stream to read the data from. This object must; /// have the data for the LineTable object starting at offset zero. The data; /// can contain more data than needed.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address and will be used to; /// initialize the line table row prior to parsing any opcodes.; ///; /// \returns An LineTable or an error describing the issue that was; /// encountered during decoding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:304,Availability,error,error,304,/// Encode this LineTable object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address.; ///; /// \returns An error object that indicates success or failure or the; /// encoding process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h:343,Availability,failure,failure,343,/// Encode this LineTable object into FileWriter stream.; ///; /// \param O The binary stream to write the data to at the current file; /// position.; ///; /// \param BaseAddr The base address to use when decoding the line table.; /// This will be the FunctionInfo's start address.; ///; /// \returns An error object that indicates success or failure or the; /// encoding process.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/LineTable.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:527,Availability,error,error,527,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:605,Availability,Error,Error,605,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:317,Testability,Log,Log,317,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:335,Testability,log,log,335,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h:393,Testability,log,log,393,"/// Extract any object file data that is needed by the GsymCreator.; ///; /// The extracted information includes the UUID of the binary and converting; /// all function symbols from any symbol tables into FunctionInfo objects.; ///; /// \param Obj The object file that contains the DWARF debug info.; ///; /// \param Log The stream to log warnings and non fatal issues to. If NULL,; /// don't log.; ///; /// \param Gsym The GSYM creator to populate with the function information; /// from the debug info.; ///; /// \returns An error indicating any fatal issues that happen when parsing; /// the DWARF, or Error::success() if all goes well.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/GSYM/ObjectFileTransformer.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:14,Performance,perform,performs,14,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:60,Testability,log,logical,60,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:181,Testability,log,logical,181,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:288,Testability,log,logical,288,"// This class performs the following tasks:; // - Creates a logical reader for every binary file in the command line,; // that parses the debug information and creates a high level logical; // view representation containing scopes, symbols, types and lines.; // - Prints and compares the logical views.; //; // The supported binary formats are: ELF, Mach-O and CodeView.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/LVReaderHandler.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:450,Testability,log,logical,450,"//===-- LVCompare.h ---------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the LVCompare class, which is used to describe a logical; // view comparison.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:24,Performance,perform,performed,24,"// As the comparison is performed twice (by exchanging the reference; // and target readers) the element missing/added status does specify; // the comparison pass.; // By recording each missing/added elements along with its pass, it; // allows checking which elements were missing/added during each pass.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:3,Performance,Perform,Perform,3,// Perform comparison between the 'Reference' and 'Target' scopes tree.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVCompare.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,Testability,log,logical,5,// A logical line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,Testability,log,logical,5,// A logical scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,Testability,log,logical,5,// A logical symbol.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:5,Testability,log,logical,5,// A logical type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:3,Security,Access,Access,3,// Access DW_AT_GNU_discriminator attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:9,Security,Access,Accessibility,9,// DWARF Accessibility Codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:12,Security,Access,Accessibility,12,// CodeView Accessibility Codes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:52,Testability,log,logical,52,"// During the parsing of the debug information, the logical elements are; // created with information extracted from its description entries (DIE).; // But they are not complete for the logical view concept. A second pass; // is executed in order to collect their additional information.; // The following functions 'resolve' some of their properties, such as; // name, references, parents, extra information based on the element kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:186,Testability,log,logical,186,"// During the parsing of the debug information, the logical elements are; // created with information extracted from its description entries (DIE).; // But they are not complete for the logical view concept. A second pass; // is executed in order to collect their additional information.; // The following functions 'resolve' some of their properties, such as; // name, references, parents, extra information based on the element kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:38,Testability,log,logically,38,// Returns true if current element is logically equal to the given 'Element'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVElement.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:24,Testability,log,logical,24,// Class to represent a logical line.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:35,Testability,log,logically,35,// Returns true if current line is logically equal to the given 'Line'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:46,Testability,log,logically,46,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:3,Security,Access,Access,3,// Access DW_LNE_set_discriminator attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:35,Testability,log,logically,35,// Returns true if current line is logically equal to the given 'Line'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:35,Testability,log,logically,35,// Returns true if current line is logically equal to the given 'Line'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLine.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h:472,Modifiability,variab,variable,472,"//===-- LVLocation.h --------------------------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines the LVOperation and LVLocation classes, which are used; // to describe variable locations.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h:49,Usability,simpl,simple,49,// The DW_AT_data_member_location attribute is a simple member offset.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVLocation.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:3,Security,Validat,Validate,3,// Validate functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:19,Performance,optimiz,optimized,19,// Object has been optimized by the compiler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:151,Availability,avail,available,151,// This is an internal ID used for debugging logical elements. It is used; // for cases where an unique offset within the binary input file is not; // available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:45,Testability,log,logical,45,// This is an internal ID used for debugging logical elements. It is used; // for cases where an unique offset within the binary input file is not; // available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:28,Testability,log,logical,28,"// This function prints the logical view to an output stream.; // Split: Prints the compilation unit view to a file.; // Match: Prints the object only if it satisfies the patterns collected; // from the command line. See the '--select' option.; // Print: Print the object only if satisfies the conditions specified by; // the different '--print' options.; // Full: Prints full information for objects representing debug locations,; // aggregated scopes, compile unit, functions and namespaces.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:48,Integrability,depend,depending,48,"// Prints additional information for an object, depending on its kind; // (class attributes, debug ranges, files, directories, etc).",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVObject.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:15,Modifiability,extend,extended,15,// --attribute=extended,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:14,Security,integrity,integrity,14,// --internal=integrity,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:114,Testability,log,logical,114,// Filters the output of the filename associated with the element being; // printed in order to see clearly which logical elements belongs to; // a particular filename. It is value is reset after the element; // that represents the Compile Unit is printed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:100,Usability,clear,clearly,100,// Filters the output of the filename associated with the element being; // printed in order to see clearly which logical elements belongs to; // a particular filename. It is value is reset after the element; // that represents the Compile Unit is printed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:3,Security,Access,Access,3,"// Access to command line options, pattern and printing information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:327,Integrability,depend,dependencies,327,"// Some command line options support shortcuts. For example:; // The command line option '--print=elements' is a shortcut for:; // '--print=instructions,lines,scopes,symbols,types'.; // In the case of logical view comparison, some options related to; // attributes must be set or reset for a proper comparison.; // Resolve any dependencies between command line options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:201,Testability,log,logical,201,"// Some command line options support shortcuts. For example:; // The command line option '--print=elements' is a shortcut for:; // '--print=instructions,lines,scopes,symbols,types'.; // In the case of logical view comparison, some options related to; // attributes must be set or reset for a proper comparison.; // Resolve any dependencies between command line options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:3,Usability,Clear,Clear,3,// Clear any existing patterns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h:13,Testability,log,logicalview,13,// namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVOptions.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVRange.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVRange.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVRange.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:8,Testability,log,logical,8,/// The logical reader owns of all the logical elements created during; /// the debug information parsing. For its creation it uses a specific; /// bump allocator for each type of logical element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:39,Testability,log,logical,39,/// The logical reader owns of all the logical elements created during; /// the debug information parsing. For its creation it uses a specific; /// bump allocator for each type of logical element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:180,Testability,log,logical,180,/// The logical reader owns of all the logical elements created during; /// the debug information parsing. For its creation it uses a specific; /// bump allocator for each type of logical element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:309,Testability,test,tests,309,"// Return a pathname composed by: parent_path(InputFilename)/filename(From).; // This is useful when a type server (PDB file associated with an object; // file or a precompiled header file) or a DWARF split object have been; // moved from their original location. That is the case when running; // regression tests, where object files are created in one location and; // executed in a different location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:13,Testability,log,logical,13,// Creates a logical object of the given KIND. The signature for the created; // functions looks like:; // ...; // LVScope *createScope(); // LVScopeRoot *creatScopeRoot(); // LVType *createType();; // ...,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:3,Security,Access,Access,3,// Access to the scopes root.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:3,Security,Access,Access,3,// Access to split context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:176,Testability,log,logical,176,"// Vector of elements (types, scopes and symbols).; // It is the union of (*Types, *Symbols and *Scopes) to be used for; // the following reasons:; // - Preserve the order the logical elements are read in.; // - To have a single container with all the logical elements, when; // the traversal does not require any specific element kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:252,Testability,log,logical,252,"// Vector of elements (types, scopes and symbols).; // It is the union of (*Types, *Symbols and *Scopes) to be used for; // the following reasons:; // - Preserve the order the logical elements are read in.; // - To have a single container with all the logical elements, when; // the traversal does not require any specific element kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:12,Testability,log,logical,12,// Sort the logical elements using the criteria specified by the; // command line option '--output-sort'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:98,Deployability,update,update,98,// Follow a chain of references given by DW_AT_abstract_origin and/or; // DW_AT_specification and update the scope name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:73,Integrability,Depend,Depending,73,"// Checks if the current scope is contained within the target scope.; // Depending on the result, the callback may be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:118,Performance,perform,performed,118,"// Checks if the current scope is contained within the target scope.; // Depending on the result, the callback may be performed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:46,Testability,log,logically,46,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:34,Testability,log,logical,34,"// It records the mapping between logical lines representing a debug line; // entry and its address in the text section. It is used to find a line; // giving its exact or closest address. To support comdat functions, all; // addresses for the same section are recorded in the same map.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:42,Energy Efficiency,allocate,allocated,42,// Values are used by '--summary' option (allocated).,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:3,Security,Access,Access,3,// Access DW_AT_extension reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:50,Testability,log,logically,50,// For the given 'Scopes' returns a scope that is logically equal; // to the current scope; otherwise 'nullptr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:36,Testability,log,logically,36,// Returns true if current scope is logically equal to the given 'Scope'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVScope.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSort.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSort.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSort.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h:61,Energy Efficiency,allocate,allocated,61,// Return number of strings in the pool. The empty string is allocated; // at the slot zero. We substract 1 to indicate the number of non empty; // strings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h:13,Testability,log,logicalview,13,// namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVStringPool.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h:503,Testability,log,logical,503,"// These are the values assigned to the debug location record IDs.; // See DebugInfo/CodeView/CodeViewSymbols.def.; // S_DEFRANGE 0x113f; // S_DEFRANGE_SUBFIELD 0x1140; // S_DEFRANGE_REGISTER 0x1141; // S_DEFRANGE_FRAMEPOINTER_REL 0x1142; // S_DEFRANGE_SUBFIELD_REGISTER 0x1143; // S_DEFRANGE_FRAMEPOINTER_REL_FULL_SCOPE 0x1144; // S_DEFRANGE_REGISTER_REL 0x1145; // When recording CodeView debug location, the above values are truncated; // to a uint8_t value in order to fit the 'OpCode' used for the logical; // debug location operations.; // Return the original CodeView enum value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSupport.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:3,Security,Access,Access,3,"// Access DW_AT_specification, DW_AT_abstract_origin reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:98,Deployability,update,update,98,// Follow a chain of references given by DW_AT_abstract_origin and/or; // DW_AT_specification and update the symbol name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Symbol'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:46,Testability,log,logically,46,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVSymbol.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:98,Deployability,update,update,98,// Follow a chain of references given by DW_AT_abstract_origin and/or; // DW_AT_specification and update the type name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:46,Testability,log,logically,46,// Returns true if the given 'References' are logically equal to the; // given 'Targets'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:35,Testability,log,logically,35,// Returns true if current type is logically equal to the given 'Type'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Core/LVType.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:3,Testability,Log,Logical,3,"// Logical scope, Section address, Section index, IsComdat.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:65,Testability,log,logical,65,"// It contains the LVLineDebug elements representing the inlined logical; // lines for the current compile unit, created by parsing the CodeView; // S_INLINESITE symbol annotation data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:27,Testability,log,logical,27,// Instruction lines for a logical scope. These instructions are fetched; // during its merge with the debug lines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:111,Performance,load,loaded,111,// Mapping from virtual address to section.; // The virtual address refers to the address where the section is loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:57,Testability,log,logical,57,"// It contains the LVLineDebug elements representing the logical lines for; // the current compile unit, created by parsing the debug line section.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:3,Performance,Load,Loads,3,// Loads all info for the architecture of the provided object file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVBinaryReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:57,Testability,log,logical,57,"// The ELF reader uses the DWARF constants to create the logical elements.; // The DW_TAG_* and DW_AT_* are used to select the logical object and to; // set specific attributes, such as name, type, etc.; // As the CodeView constants are different to the DWARF constants, the; // CodeView reader will map them to the DWARF ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:127,Testability,log,logical,127,"// The ELF reader uses the DWARF constants to create the logical elements.; // The DW_TAG_* and DW_AT_* are used to select the logical object and to; // set specific attributes, such as name, type, etc.; // As the CodeView constants are different to the DWARF constants, the; // CodeView reader will map them to the DWARF ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:49,Integrability,depend,dependent,49,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:16,Security,access,access,16,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:25,Performance,load,loading,25,// Persistance data when loading a type server.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:25,Performance,load,loading,25,// Persistance data when loading a precompiled header.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:25,Performance,load,loading,25,// Persistance data when loading an executable file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:61,Security,checksum,checksum,61,"/// Given a .debug$S section, find the string table and file checksum table.; /// This function taken from (COFFDumper.cpp).; /// TODO: It can be moved to the COFF library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:190,Security,access,access,190,"// In a PDB, a type index may refer to a type (TPI) or an item ID (IPI).; // In a COFF or PDB (/Z7), the type index always refer to a type (TPI).; // When creating logical elements, we must access the correct element; // table, while searching for a type index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:164,Testability,log,logical,164,"// In a PDB, a type index may refer to a type (TPI) or an item ID (IPI).; // In a COFF or PDB (/Z7), the type index always refer to a type (TPI).; // When creating logical elements, we must access the correct element; // table, while searching for a type index.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:15,Modifiability,variab,variable,15,// Assume is a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:49,Integrability,depend,dependent,49,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:16,Security,access,access,16,"// Encapsulates access to the input file and any dependent type server,; // including any precompiled header object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:9,Availability,down,down,9,// Break down the annotation byte code and calculate code and line offsets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h:13,Testability,log,logicalview,13,// namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVCodeViewVisitor.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h:32,Availability,avail,available,32,// Indicates if ranges data are available; in the case of split DWARF any; // reference to ranges is valid only if the skeleton DIE has been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h:141,Performance,load,loaded,141,// Indicates if ranges data are available; in the case of split DWARF any; // reference to ranges is valid only if the skeleton DIE has been loaded.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h:17,Testability,log,logicalview,17,// end namespace logicalview,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/LogicalView/Readers/LVELFReader.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h:60,Energy Efficiency,allocate,allocate,60,"// We just store the allocator by reference. We use this to allocate; // contiguous memory for things like arrays or strings that cross a block; // boundary, and this memory is expected to outlive the stream. For example,; // someone could create a stream, read some stuff, then close the stream, and; // we would like outstanding references to fields to remain valid since the; // entire file is mapped anyway. Because of that, the user must supply the; // allocator to allocate broken records from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h:471,Energy Efficiency,allocate,allocate,471,"// We just store the allocator by reference. We use this to allocate; // contiguous memory for things like arrays or strings that cross a block; // boundary, and this memory is expected to outlive the stream. For example,; // someone could create a stream, read some stuff, then close the stream, and; // we would like outstanding references to fields to remain valid since the; // entire file is mapped anyway. Because of that, the user must supply the; // allocator to allocate broken records from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MappedBlockStream.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:999,Availability,avail,available,999,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1168,Availability,error,error,1168,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1330,Availability,Error,Error,1330,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1397,Availability,error,error,1397,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1431,Availability,Error,Error,1431,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:819,Energy Efficiency,allocate,allocated,819,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1046,Energy Efficiency,allocate,allocate,1046,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1209,Testability,test,testing,1209,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:1246,Testability,test,test,1246,"/// Create a new `MSFBuilder`.; ///; /// \param BlockSize The internal block size used by the PDB file. See; /// isValidBlockSize() for a list of valid block sizes.; ///; /// \param MinBlockCount Causes the builder to reserve up front space for; /// at least `MinBlockCount` blocks. This is useful when using `MSFBuilder`; /// to read an existing MSF that you want to write back out later. The; /// original MSF file's SuperBlock contains the exact number of blocks used; /// by the file, so is a good hint as to how many blocks the new MSF file; /// will contain. Furthermore, it is actually necessary in this case. To; /// preserve stability of the file's layout, it is helpful to try to keep; /// all streams mapped to their original block numbers. To ensure that this; /// is possible, space for all blocks must be allocated beforehand so that; /// streams can be assigned to them.; ///; /// \param CanGrow If true, any operation which results in an attempt to; /// locate a free block when all available blocks have been exhausted will; /// allocate a new block, thereby growing the size of the final MSF file.; /// When false, any such attempt will result in an error. This is especially; /// useful in testing scenarios when you know your test isn't going to do; /// anything to increase the size of the file, so having an Error returned if; /// it were to happen would catch a programming error; ///; /// \returns an llvm::Error representing whether the operation succeeded or; /// failed. Currently the only way this can fail is if an invalid block size; /// is specified, or `MinBlockCount` does not leave enough room for the; /// mandatory reserved blocks required by an MSF file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:369,Availability,Error,Error,369,"/// Add a stream to the MSF file with the given size, occupying the given; /// list of blocks. This is useful when reading a MSF file and you want a; /// particular stream to occupy the original set of blocks. If the given; /// blocks are already allocated, or if the number of blocks specified is; /// incorrect for the given stream size, this function will return an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:247,Energy Efficiency,allocate,allocated,247,"/// Add a stream to the MSF file with the given size, occupying the given; /// list of blocks. This is useful when reading a MSF file and you want a; /// particular stream to occupy the original set of blocks. If the given; /// blocks are already allocated, or if the number of blocks specified is; /// incorrect for the given stream size, this function will return an Error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:68,Availability,avail,available,68,"/// Add a stream to the MSF file with the given size, occupying any available; /// blocks that the builder decides to use. This is useful when building a; /// new PDB file from scratch and you don't care what blocks a stream occupies; /// but you just want it to work.",MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:4,Deployability,Update,Update,4,/// Update the size of an existing stream. This will allocate or deallocate; /// blocks as needed to match the requested size. This can fail if `CanGrow`; /// was set to false when initializing the `MSFBuilder`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:53,Energy Efficiency,allocate,allocate,53,/// Update the size of an existing stream. This will allocate or deallocate; /// blocks as needed to match the requested size. This can fail if `CanGrow`; /// was set to false when initializing the `MSFBuilder`.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:27,Energy Efficiency,allocate,allocated,27,/// Get the list of blocks allocated to a particular stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:48,Energy Efficiency,allocate,allocated,48,/// Get the total number of blocks that will be allocated to actual data in; /// this MSF file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:79,Energy Efficiency,allocate,allocated,79,/// Get the total number of blocks that exist in the MSF file but are not; /// allocated to any valid data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h:40,Energy Efficiency,allocate,allocated,40,/// Check whether a particular block is allocated or free.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFBuilder.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h:35,Modifiability,variab,variable,35,// The file system is split into a variable number of fixed size elements.; // These elements are referred to as blocks. The size of a block may vary; // from system to system.,MatchSource.CODE_COMMENT,interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/include/llvm/DebugInfo/MSF/MSFCommon.h
