id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:338164,Testability,test,tests,338164,"endering. ### New features for developpers. - Preliminary Markdown support in the msg_* API. You can now write much better formatting & alignement as well as adding URL to documentations related to the error.; - class RichStyleConsoleFormatter which interprete the markdowns in the message and format this to a resizable console with nice alignement.; - class CountingMessageHandler (count the number of message for each message type); - class RoutingMessageHandler (to implement context specific routing of the messages to different handler); - class ExpectMessage and MessageAsATestFailure can be used to check that a component did or didn't send a message and generate a test failure.; - FileMonitor is now implemented on MacOS & Windows (for live-coding features, for example); - RequiredPlugin: modified API to take a list of plugins to load; - Implements the move semantics on sofa::helper::vector. ### Improvements. - **372 new tests**: DAGNode, MeshObj, DiagonalMass, BoxROI, ComplementaryROI, DifferenceEngine, BilateralInteractionConstraint, Quaternion, ImagePNG, etc.; - 184/480 components have an associated example; - [SofaKernel]; - replace raw pointers with a smart ones; - add a ComponentState attribute to BaseObject; - BaseData::typeName is now public: useful to debug; - implement DataTrackerEngine, a kind of DataEngine but that is not a BaseObject; - fix SVector<std::string>. The string serialization changed; - [SofaRigid]; - in case jetJs is called several times per step; - [SofaGeneralLoader]; - MeshVTKLoader can now read FIELD data of legacy file. Lookup tables are ignored.; - [SofaPython]; - binding AssembledSystem as a new class in python; - binding VisualModel::exportOBJ; - binding for DataFileNameVector; - add Compliant.getImplicitAssembledSystem(node); - SofaNumpy: bind/share a c++ 1d array as a numpy array; - script.Controller : handle optional arguments before createGraph; - [image]; - raw import: add commented basic size verifications (could be performed i",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:341055,Testability,log,log,341055," [SofaKernel]; - remove last direct opengl calls in modules; - add deprecation message on MechanicalObject attributes; - [SofaBaseVisual] clean BaseCamera: remove direct opengl calls; - [SofaHaptics] boost-thread is not used any more, clean cmake; - [SofaGeneralLoader] STLLoader: fixing binary loading in debug and cleaning examples; - [SofaPython]; - remove ScriptEnvironment i.e. automatic initialization of Node; - Node::isInitialized(), not used anymore; - [Flexible]; - clean relativeStrainMapping. ### Moved files. - move CImg from extlibs to image plugin extlibs. ### Documentation. - Add the contribution and guidelines : **CONTRIBUTING.md** and **GUIDELINES.md**; - Add the configuration required (ex: C++, compiler versions); - Add a page to use SOFA in Matlab; - Improve Logger documentation; - Add a page to use SOFA in Matlab. ____________________________________________________________. ## [v16.08]( https://github.com/sofa-framework/sofa/tree/v16.08 ). **Last commit: on Jul 28, 2016** ; [Full log]( https://github.com/sofa-framework/sofa/compare/v15.12...v16.08 ). ### New features. - SOFA on GitHub - [https://github.com/sofa-framework/sofa]( https://github.com/sofa-framework/sofa ); - creation of a RigidScale plugin: implementing mappings, especially allowing to get the DOF with Rigid+Scale type, while reusing affine DOF (Rigid+Scale+Shear) already implemented in Flexible; - creation of a LeapMotion plugin: allowing to integrate a Leap in your SOFA simulation; - add the DrawTool: DrawTool is an interface, describing an API to display primitives on screen. For now, only the OpenGL (fixed-pipeline version) implementation has been made.; - add a Logger; - add the diffusion effect in SOFA (heat transfer); - SOFA_USE_MASK compilation variable to activate or de-activate the masks in SOFA; - DataTracker: simple and elegant way to track Data in Engine; - extlibs: update cimg to version 1.7.3; - Add guidelines for contributions in CONTRIBUTING.md. ### Moved files. - Kernel ",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:342918,Testability,test,test,342918," ### Moved files. - Kernel modules of SOFA (SofaFramework, SofaBase, SofaCommon and SofaSimulation) have been moved to one common module SofaKernel, located at _sofa_root/SofaKernel_. SofaKernel is a pure LGPL module.; - code in _sofa_root/modules/sofa/simulation/_ has been splitted into three modules of SofaKernel: SofaSimulationCommon, SofaSimulationTree, SofaSimulationGraph; - MOVE the SofaPardiso module as a plugin; - Move OglTetrahedralModel into a new plugin called VolumetricRendering. - Minor moves; - Move ColorMap code to helper and let (Ogl)ColorMap from SofaOpenGLVisual doing OpenGL stuff; - Move TorsionForceField and ComplementaryROI into SOFA (those two components where in a deprecated repository _sofa_root/modules/sofa/components/_). - [Compliant]; - moving propagate_constraint_force_visitor in a helper file and minor cleaning of CompliantImplicitSolver. ### Improvements. - test examples are now running (on Jenkins for the Continuous Integration); - Add unit test for quaternions; - Improving default mouse manipulation while picking a dof; - MouseWheel events now propagated. - Minor improvements; - runSofa: force loading the SofaPython plugin if existing; - runSofa: adding clang-style formatting (option '-z clang'); - MechanicalObject: adding more visualisation colors for Rigids; - SofaPluginManager: Clear description and components when removing last plugin; - CMake: removing ""-Wno-deprecated-register"" compiler option that is only known by a few compilers; - Collision: add function setConstraintId in BaseConstraintSet; - SPtr: up to 10 parameters in constructor; - Add function in EigenBaseSparseMatrix in order to use eigen matrices with async solvers; - Add CUSPARSESolver in SofaCudaSolversPlugin, this solver uses cusparse library to solve a sparse triangular system on the GPU; - MeshBoundaryROI: allows specifying an input subset; - ColorMap: with face culling enabled; - ColorMap: adding a scale for the legend range values; - ImageViewer: adding new boo",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:343004,Testability,test,test,343004," ### Moved files. - Kernel modules of SOFA (SofaFramework, SofaBase, SofaCommon and SofaSimulation) have been moved to one common module SofaKernel, located at _sofa_root/SofaKernel_. SofaKernel is a pure LGPL module.; - code in _sofa_root/modules/sofa/simulation/_ has been splitted into three modules of SofaKernel: SofaSimulationCommon, SofaSimulationTree, SofaSimulationGraph; - MOVE the SofaPardiso module as a plugin; - Move OglTetrahedralModel into a new plugin called VolumetricRendering. - Minor moves; - Move ColorMap code to helper and let (Ogl)ColorMap from SofaOpenGLVisual doing OpenGL stuff; - Move TorsionForceField and ComplementaryROI into SOFA (those two components where in a deprecated repository _sofa_root/modules/sofa/components/_). - [Compliant]; - moving propagate_constraint_force_visitor in a helper file and minor cleaning of CompliantImplicitSolver. ### Improvements. - test examples are now running (on Jenkins for the Continuous Integration); - Add unit test for quaternions; - Improving default mouse manipulation while picking a dof; - MouseWheel events now propagated. - Minor improvements; - runSofa: force loading the SofaPython plugin if existing; - runSofa: adding clang-style formatting (option '-z clang'); - MechanicalObject: adding more visualisation colors for Rigids; - SofaPluginManager: Clear description and components when removing last plugin; - CMake: removing ""-Wno-deprecated-register"" compiler option that is only known by a few compilers; - Collision: add function setConstraintId in BaseConstraintSet; - SPtr: up to 10 parameters in constructor; - Add function in EigenBaseSparseMatrix in order to use eigen matrices with async solvers; - Add CUSPARSESolver in SofaCudaSolversPlugin, this solver uses cusparse library to solve a sparse triangular system on the GPU; - MeshBoundaryROI: allows specifying an input subset; - ColorMap: with face culling enabled; - ColorMap: adding a scale for the legend range values; - ImageViewer: adding new boo",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:347007,Testability,test,test,347007,"ile drawing bbox (QtViewer); - add of GUIEvent into the STLExporter; - Make the code compatible with ClipPlane (using ClipVertex in shaders, which is deprecated for GLSL > 1.4); - Optimize the callto C-PYTHON side when the functions are not implemented in the python side; - Add color attribute support (and default color if not present in the node); - Reactivate color map in TetraFEM, as it does not depend on SofaOpenGLVisual anymore; - indices data field for UniformMass; - analyze matrix only if number of non-zeroes has changed and no iterative refinement; - update the applyConstraint methods according to the actual API; - Adding ProjectionTo{Plane|Line}MultiMapping where the plane (origin,normal) and the line (origin,direction) are dofs; - add MeshBoundaryROI with an example. - [Tests]; - for (multi)Mapping test, check the size of the mapping output is correct; - adding TestMessageHandler that raises a gtest failure each time an error message is processed; - test for node removal; - test for removal of a node containing an UncoupledConstraintCorrection (for now the test fails because there is a problem with the removal of that component); - add of Multi2Mapping_test; - add DistanceMapping_test. - [SofaPython]; - logger: cleaning emitter; - sml.Mesh: adding load function; - sml: python set for tags is created by objects themselves; - sml: add tag to JointGeneric; - sml: add the printLog flag; - sml: setup units in BaseScene for all sml Scene class; - sml: mesh has a clear id; - sml:insertVisual: bug fix for solid with multiple meshes (just impacting the Display scene); - sml: handy constructor for Dof creation; - sml: like <mesh> <image> can be defined in <solid>; - sml: add a utility function: look into the valueByTag dictionary for a tag contained in tags; - sml: adding a warning if a vertex group is empty; - sml: can have offsets under solids; - sml: remove deprecated setTagFromTag() method; - API: add subsetFromDeformables function; - binding Node::isInitialized;",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:347161,Testability,test,test,347161,"ile drawing bbox (QtViewer); - add of GUIEvent into the STLExporter; - Make the code compatible with ClipPlane (using ClipVertex in shaders, which is deprecated for GLSL > 1.4); - Optimize the callto C-PYTHON side when the functions are not implemented in the python side; - Add color attribute support (and default color if not present in the node); - Reactivate color map in TetraFEM, as it does not depend on SofaOpenGLVisual anymore; - indices data field for UniformMass; - analyze matrix only if number of non-zeroes has changed and no iterative refinement; - update the applyConstraint methods according to the actual API; - Adding ProjectionTo{Plane|Line}MultiMapping where the plane (origin,normal) and the line (origin,direction) are dofs; - add MeshBoundaryROI with an example. - [Tests]; - for (multi)Mapping test, check the size of the mapping output is correct; - adding TestMessageHandler that raises a gtest failure each time an error message is processed; - test for node removal; - test for removal of a node containing an UncoupledConstraintCorrection (for now the test fails because there is a problem with the removal of that component); - add of Multi2Mapping_test; - add DistanceMapping_test. - [SofaPython]; - logger: cleaning emitter; - sml.Mesh: adding load function; - sml: python set for tags is created by objects themselves; - sml: add tag to JointGeneric; - sml: add the printLog flag; - sml: setup units in BaseScene for all sml Scene class; - sml: mesh has a clear id; - sml:insertVisual: bug fix for solid with multiple meshes (just impacting the Display scene); - sml: handy constructor for Dof creation; - sml: like <mesh> <image> can be defined in <solid>; - sml: add a utility function: look into the valueByTag dictionary for a tag contained in tags; - sml: adding a warning if a vertex group is empty; - sml: can have offsets under solids; - sml: remove deprecated setTagFromTag() method; - API: add subsetFromDeformables function; - binding Node::isInitialized;",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:347186,Testability,test,test,347186,"ile drawing bbox (QtViewer); - add of GUIEvent into the STLExporter; - Make the code compatible with ClipPlane (using ClipVertex in shaders, which is deprecated for GLSL > 1.4); - Optimize the callto C-PYTHON side when the functions are not implemented in the python side; - Add color attribute support (and default color if not present in the node); - Reactivate color map in TetraFEM, as it does not depend on SofaOpenGLVisual anymore; - indices data field for UniformMass; - analyze matrix only if number of non-zeroes has changed and no iterative refinement; - update the applyConstraint methods according to the actual API; - Adding ProjectionTo{Plane|Line}MultiMapping where the plane (origin,normal) and the line (origin,direction) are dofs; - add MeshBoundaryROI with an example. - [Tests]; - for (multi)Mapping test, check the size of the mapping output is correct; - adding TestMessageHandler that raises a gtest failure each time an error message is processed; - test for node removal; - test for removal of a node containing an UncoupledConstraintCorrection (for now the test fails because there is a problem with the removal of that component); - add of Multi2Mapping_test; - add DistanceMapping_test. - [SofaPython]; - logger: cleaning emitter; - sml.Mesh: adding load function; - sml: python set for tags is created by objects themselves; - sml: add tag to JointGeneric; - sml: add the printLog flag; - sml: setup units in BaseScene for all sml Scene class; - sml: mesh has a clear id; - sml:insertVisual: bug fix for solid with multiple meshes (just impacting the Display scene); - sml: handy constructor for Dof creation; - sml: like <mesh> <image> can be defined in <solid>; - sml: add a utility function: look into the valueByTag dictionary for a tag contained in tags; - sml: adding a warning if a vertex group is empty; - sml: can have offsets under solids; - sml: remove deprecated setTagFromTag() method; - API: add subsetFromDeformables function; - binding Node::isInitialized;",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:347270,Testability,test,test,347270,"ile drawing bbox (QtViewer); - add of GUIEvent into the STLExporter; - Make the code compatible with ClipPlane (using ClipVertex in shaders, which is deprecated for GLSL > 1.4); - Optimize the callto C-PYTHON side when the functions are not implemented in the python side; - Add color attribute support (and default color if not present in the node); - Reactivate color map in TetraFEM, as it does not depend on SofaOpenGLVisual anymore; - indices data field for UniformMass; - analyze matrix only if number of non-zeroes has changed and no iterative refinement; - update the applyConstraint methods according to the actual API; - Adding ProjectionTo{Plane|Line}MultiMapping where the plane (origin,normal) and the line (origin,direction) are dofs; - add MeshBoundaryROI with an example. - [Tests]; - for (multi)Mapping test, check the size of the mapping output is correct; - adding TestMessageHandler that raises a gtest failure each time an error message is processed; - test for node removal; - test for removal of a node containing an UncoupledConstraintCorrection (for now the test fails because there is a problem with the removal of that component); - add of Multi2Mapping_test; - add DistanceMapping_test. - [SofaPython]; - logger: cleaning emitter; - sml.Mesh: adding load function; - sml: python set for tags is created by objects themselves; - sml: add tag to JointGeneric; - sml: add the printLog flag; - sml: setup units in BaseScene for all sml Scene class; - sml: mesh has a clear id; - sml:insertVisual: bug fix for solid with multiple meshes (just impacting the Display scene); - sml: handy constructor for Dof creation; - sml: like <mesh> <image> can be defined in <solid>; - sml: add a utility function: look into the valueByTag dictionary for a tag contained in tags; - sml: adding a warning if a vertex group is empty; - sml: can have offsets under solids; - sml: remove deprecated setTagFromTag() method; - API: add subsetFromDeformables function; - binding Node::isInitialized;",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:347420,Testability,log,logger,347420,"t implemented in the python side; - Add color attribute support (and default color if not present in the node); - Reactivate color map in TetraFEM, as it does not depend on SofaOpenGLVisual anymore; - indices data field for UniformMass; - analyze matrix only if number of non-zeroes has changed and no iterative refinement; - update the applyConstraint methods according to the actual API; - Adding ProjectionTo{Plane|Line}MultiMapping where the plane (origin,normal) and the line (origin,direction) are dofs; - add MeshBoundaryROI with an example. - [Tests]; - for (multi)Mapping test, check the size of the mapping output is correct; - adding TestMessageHandler that raises a gtest failure each time an error message is processed; - test for node removal; - test for removal of a node containing an UncoupledConstraintCorrection (for now the test fails because there is a problem with the removal of that component); - add of Multi2Mapping_test; - add DistanceMapping_test. - [SofaPython]; - logger: cleaning emitter; - sml.Mesh: adding load function; - sml: python set for tags is created by objects themselves; - sml: add tag to JointGeneric; - sml: add the printLog flag; - sml: setup units in BaseScene for all sml Scene class; - sml: mesh has a clear id; - sml:insertVisual: bug fix for solid with multiple meshes (just impacting the Display scene); - sml: handy constructor for Dof creation; - sml: like <mesh> <image> can be defined in <solid>; - sml: add a utility function: look into the valueByTag dictionary for a tag contained in tags; - sml: adding a warning if a vertex group is empty; - sml: can have offsets under solids; - sml: remove deprecated setTagFromTag() method; - API: add subsetFromDeformables function; - binding Node::isInitialized; - binding loadPythonSceneWithArguments; - adding a binding to get the pointer of a Data (with its dimensions and type); - adding binding of BaseMapping::getJs (as dense matrices for now); - adding python functions to convert a Data in a n",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:348804,Testability,test,tested,348804, of Multi2Mapping_test; - add DistanceMapping_test. - [SofaPython]; - logger: cleaning emitter; - sml.Mesh: adding load function; - sml: python set for tags is created by objects themselves; - sml: add tag to JointGeneric; - sml: add the printLog flag; - sml: setup units in BaseScene for all sml Scene class; - sml: mesh has a clear id; - sml:insertVisual: bug fix for solid with multiple meshes (just impacting the Display scene); - sml: handy constructor for Dof creation; - sml: like <mesh> <image> can be defined in <solid>; - sml: add a utility function: look into the valueByTag dictionary for a tag contained in tags; - sml: adding a warning if a vertex group is empty; - sml: can have offsets under solids; - sml: remove deprecated setTagFromTag() method; - API: add subsetFromDeformables function; - binding Node::isInitialized; - binding loadPythonSceneWithArguments; - adding a binding to get the pointer of a Data (with its dimensions and type); - adding binding of BaseMapping::getJs (as dense matrices for now); - adding python functions to convert a Data in a numpy array with shared memory; - adding a visitor to set all mstates as non pickable (such as picking will only be performed with collision models); - add tags to mesh groups; - add a groupsByTag dict to easily iterate over groups knowing a tag; - add of SceneDataIO to save and load the current state of a simulation; - add of the method getDataFields; - adding automatically tested examples; - add tags to MeshAttributes; - add a helper PythonScriptFunction_call and PythonScriptFunction_callNoResult to call a python controller function from c++ code; - PythonScriptHelper -> PythonScriptControllerHelper: PythonScriptHelper: add convertion for float and std::string; - Add the timingEnabled attribute to the PythonScriptController to control if the script is gather timing statistics; - adding python module to load .obj files; - adding BaseContext_getObject_noWarning that returns None w/o warning if the object is not,MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:349486,Testability,test,test,349486," add of SceneDataIO to save and load the current state of a simulation; - add of the method getDataFields; - adding automatically tested examples; - add tags to MeshAttributes; - add a helper PythonScriptFunction_call and PythonScriptFunction_callNoResult to call a python controller function from c++ code; - PythonScriptHelper -> PythonScriptControllerHelper: PythonScriptHelper: add convertion for float and std::string; - Add the timingEnabled attribute to the PythonScriptController to control if the script is gather timing statistics; - adding python module to load .obj files; - adding BaseContext_getObject_noWarning that returns None w/o warning if the object is not found; - improving a bit the conversion from a cpp Base* to a PyObject* when the cpp Base* type is (even partially) known.; - adding a test to show how to bind a component outside of SofaPython; - Factory: conversion shortcuts for known types; - PythonScriptController: if the filename is let empty, the controller is supposed to be in an already loaded file, to avoid to read the same file several times; - adding ""loadPlugin"" function to the Sofa python module; - Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name.; - object and type names are now both optional when calling BaseContext_getObjects(); - search direction can now optionally be passed to BaseContext_getObjects(); - at object creation failure, print additional error messages from BaseObjectDescription; - adding special Data types in the PythonFactory, so more specific cases can be added outside of the plugin SofaPython.; - adding Node::addObject_noWarning not to print a warning when adding an object to an already initialized node; - add of a method which compute quaternion from a line define by a director vector; - add of few new features to save and load the current state of simulation. - [Flexible]; - adding FlexibleCorotationalMeshFEMForceField (meta-forcefield). Not optimized but wor",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:350729,Testability,test,tests,350729,"ion to the Sofa python module; - Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name.; - object and type names are now both optional when calling BaseContext_getObjects(); - search direction can now optionally be passed to BaseContext_getObjects(); - at object creation failure, print additional error messages from BaseObjectDescription; - adding special Data types in the PythonFactory, so more specific cases can be added outside of the plugin SofaPython.; - adding Node::addObject_noWarning not to print a warning when adding an object to an already initialized node; - add of a method which compute quaternion from a line define by a director vector; - add of few new features to save and load the current state of simulation. - [Flexible]; - adding FlexibleCorotationalMeshFEMForceField (meta-forcefield). Not optimized but working; - add of RigidScale mapping in addition to their tests and examples; - HexaFEM comparison: each method has its own solver and uses the same decomposition so the only difference came from the deformation tensor used to find the rotation.; - Flexible: WIP adding a meta-forcefield to compute regular corotational FEM. The idea is to use Flexible's components internally without adding extra computation neither extra memory; - API: add strain offseting option; - API: strainMappings as data members; - API: use branching images for mass computation; - API: make AffineMass, ShapeFunction, Behavior work in more cases; - API: make Behavior work in simple cases with no label image; - materials: removed checking for changed parameters at each step.; - add example showing how to better handle partially filled elements using fine volumes; - optimizing FlexibleCorotationalMeshFEMForceField by preassembling constant sub-graph; - refactoring of MassFromDensity; - adding a warning when creating a UniformMass on Affine/Quadratic frames.; - add FEMDof class to python API; - DeformationMapping: print a warnin",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:352017,Testability,log,logging,352017,"ible's components internally without adding extra computation neither extra memory; - API: add strain offseting option; - API: strainMappings as data members; - API: use branching images for mass computation; - API: make AffineMass, ShapeFunction, Behavior work in more cases; - API: make Behavior work in simple cases with no label image; - materials: removed checking for changed parameters at each step.; - add example showing how to better handle partially filled elements using fine volumes; - optimizing FlexibleCorotationalMeshFEMForceField by preassembling constant sub-graph; - refactoring of MassFromDensity; - adding a warning when creating a UniformMass on Affine/Quadratic frames.; - add FEMDof class to python API; - DeformationMapping: print a warning if a child particle has no parent; - adding HEML implementation of St Venant-Kirchhoff materials (for tetrahedra).; - if correct weights are given in mapping as input data, use it (even if a shapefunction is found); - use sout for logging; - compute tangents for VisualModel loaded using loadVisual python function; - transformEngine for Affine frames. - [Compliant]; - sml: export of meshes; - sml: the solids tags to be simulated as rigids are gathered in a set(); - sml: geometricStiffness option; - sml: using logger; - implementing compliance unassembled API; - in the python API, joints can be created in compliance or not; - API: write a addSpring() in GenericRigidJoint, reuse it in children classes where possible; - API: simplify usage of jointCompliance specification by tag; - API: relative offset position is given to the AssembledRigidRigidMapping, and then computed at init into the MO; - API: modifying the API to move an Offset; - API: adding Offset::moveOffset to apply a rigid transformation to an offset (in its local frame); - API: new parameter to add non-mechanical Offsets and MappedPoints; - API: collision mesh and visual model can be added to a Rigid Offset; - adding an automatic execution of a scene base",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:352300,Testability,log,logger,352300,"python API; - DeformationMapping: print a warning if a child particle has no parent; - adding HEML implementation of St Venant-Kirchhoff materials (for tetrahedra).; - if correct weights are given in mapping as input data, use it (even if a shapefunction is found); - use sout for logging; - compute tangents for VisualModel loaded using loadVisual python function; - transformEngine for Affine frames. - [Compliant]; - sml: export of meshes; - sml: the solids tags to be simulated as rigids are gathered in a set(); - sml: geometricStiffness option; - sml: using logger; - implementing compliance unassembled API; - in the python API, joints can be created in compliance or not; - API: write a addSpring() in GenericRigidJoint, reuse it in children classes where possible; - API: simplify usage of jointCompliance specification by tag; - API: relative offset position is given to the AssembledRigidRigidMapping, and then computed at init into the MO; - API: modifying the API to move an Offset; - API: adding Offset::moveOffset to apply a rigid transformation to an offset (in its local frame); - API: new parameter to add non-mechanical Offsets and MappedPoints; - API: collision mesh and visual model can be added to a Rigid Offset; - adding an automatic execution of a scene based on a sml description; - Constraint: adding a typeid for faster Constraint type comparisons; - adding short name to create a ConstantCompliantPseudoStaticSolver; - using tag on joints in a generic way, set their compliance / isCompliance value; - added machinery to map data to numpy arrays, see example/numpy_data.py; - added easy pure python mappings, see examples/numpy_mapping.py; - added pure python forcefields, see examples/numpy_forcefield.py; - AssembledRigidRigidMapping autoresize; - geometric stiffness in python mappings; - insertMergeRigid is coherent with solid tags usage; - CompliantPseudoStaticSolver: avoiding an unnecessary propagation when the stopping criterion is the nb of iterations.; - visua",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:354128,Testability,log,log,354128,"omparisons; - adding short name to create a ConstantCompliantPseudoStaticSolver; - using tag on joints in a generic way, set their compliance / isCompliance value; - added machinery to map data to numpy arrays, see example/numpy_data.py; - added easy pure python mappings, see examples/numpy_mapping.py; - added pure python forcefields, see examples/numpy_forcefield.py; - AssembledRigidRigidMapping autoresize; - geometric stiffness in python mappings; - insertMergeRigid is coherent with solid tags usage; - CompliantPseudoStaticSolver: avoiding an unnecessary propagation when the stopping criterion is the nb of iterations.; - visualization in DifferenceFromTargetMapping; - Frame.py: adding a function to force quaternion normalization (to avoid numerical drift); - added SimpleAnimationLoop; - adding RigidRestJointMapping to compute a joint between a rigid body's current position and its rest position.; - large compliances are considered as null stiffnesses; - Offset default to isMechanical=True; - python quaternion log; - added nlnscg acceleration; - pure python constraints; - .inl for python mappings; - adding Addition[Multi]Mapping; - implementing AssembledMultiMapping::applyDJT; - adding DotProduct[Multi]Mapping (with tests); - adding NormalizationMapping to map a 3d vector to its normalization; - adding ConstantAssembled[Multi]Mapping; - adding SafeDistanceMapping: a distance mapping that becomes a difference mapping for too small distances.; - adding SafeDistanceFromTargetMapping; - using the new SofaPython API; - SafeDistanceFromTargetMapping can now be ""safe"" by giving the edge directions when they are known; - adding the SofaCompliant python module (first module created outside of SofaPython!); - adding DotProductFromTargetMapping (with test); - adding RigidJointFromTargetMapping and RigidJointFromWorldFrameMapping; - add of complementary API to create deformable articulated systems; - adding NegativeUnilateralConstraint to guarantee negativeness; - adding Penalt",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:354338,Testability,test,tests,354338,"xamples/numpy_mapping.py; - added pure python forcefields, see examples/numpy_forcefield.py; - AssembledRigidRigidMapping autoresize; - geometric stiffness in python mappings; - insertMergeRigid is coherent with solid tags usage; - CompliantPseudoStaticSolver: avoiding an unnecessary propagation when the stopping criterion is the nb of iterations.; - visualization in DifferenceFromTargetMapping; - Frame.py: adding a function to force quaternion normalization (to avoid numerical drift); - added SimpleAnimationLoop; - adding RigidRestJointMapping to compute a joint between a rigid body's current position and its rest position.; - large compliances are considered as null stiffnesses; - Offset default to isMechanical=True; - python quaternion log; - added nlnscg acceleration; - pure python constraints; - .inl for python mappings; - adding Addition[Multi]Mapping; - implementing AssembledMultiMapping::applyDJT; - adding DotProduct[Multi]Mapping (with tests); - adding NormalizationMapping to map a 3d vector to its normalization; - adding ConstantAssembled[Multi]Mapping; - adding SafeDistanceMapping: a distance mapping that becomes a difference mapping for too small distances.; - adding SafeDistanceFromTargetMapping; - using the new SofaPython API; - SafeDistanceFromTargetMapping can now be ""safe"" by giving the edge directions when they are known; - adding the SofaCompliant python module (first module created outside of SofaPython!); - adding DotProductFromTargetMapping (with test); - adding RigidJointFromTargetMapping and RigidJointFromWorldFrameMapping; - add of complementary API to create deformable articulated systems; - adding NegativeUnilateralConstraint to guarantee negativeness; - adding PenaltyForceField and using it in penalty contact response; - add of two file from the SohusimDev plugin. - [image]; - API: Sampler.addMechanicalObject() more versatile; - API: refactor python API; - API: add addClosingVisual(); - add function in python API to retrieve perspective p",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:354872,Testability,test,test,354872,"eAnimationLoop; - adding RigidRestJointMapping to compute a joint between a rigid body's current position and its rest position.; - large compliances are considered as null stiffnesses; - Offset default to isMechanical=True; - python quaternion log; - added nlnscg acceleration; - pure python constraints; - .inl for python mappings; - adding Addition[Multi]Mapping; - implementing AssembledMultiMapping::applyDJT; - adding DotProduct[Multi]Mapping (with tests); - adding NormalizationMapping to map a 3d vector to its normalization; - adding ConstantAssembled[Multi]Mapping; - adding SafeDistanceMapping: a distance mapping that becomes a difference mapping for too small distances.; - adding SafeDistanceFromTargetMapping; - using the new SofaPython API; - SafeDistanceFromTargetMapping can now be ""safe"" by giving the edge directions when they are known; - adding the SofaCompliant python module (first module created outside of SofaPython!); - adding DotProductFromTargetMapping (with test); - adding RigidJointFromTargetMapping and RigidJointFromWorldFrameMapping; - add of complementary API to create deformable articulated systems; - adding NegativeUnilateralConstraint to guarantee negativeness; - adding PenaltyForceField and using it in penalty contact response; - add of two file from the SohusimDev plugin. - [image]; - API: Sampler.addMechanicalObject() more versatile; - API: refactor python API; - API: add addClosingVisual(); - add function in python API to retrieve perspective property; - MeshToImageEngine: move getValue out of for loops; - add a python ImagePlaneController; - Data<Image<T>> are now specifically bound in python; - remove pthread and X11 dependencies; - add metaimage tags that may be used to define orientation; - add python function to retrieve image type; - simpler imagePlane python controller; - add a createTransferFunction method; - improved cutplane texture resolution; - half perspective, half orthographic image transforms; - add imageCoordValuesFromPosi",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:357783,Testability,log,log,357783,"hen drawing 3d text; - compilation with SofaDumpVisitor flag enabled; - compilation of BezierTriangleSetGeometryAlgorithms (color changed from Vec3f to Vec4f); - runSofa: viewport aspect issue and loss of interaction in QtGLViewer; - BoxROI: visual bounding box; - SofaMiscForceField on Windows; - VisualVisitor traversal order; - SphereROI: indices out when multiple spheres; - bug in RestShapeSpringsForceField; - Remove VariationalSymplecticSolver.h from the package in SofaCommon (to fix history); - some static analysis warnings and errors (including memory leaks); - MeshROI: remove unnecessary sqrt; - SphereROI: set centers' size to radii if only one radius is provided; - ARTrack plugin compilation; - bug in MeshNewProximityIntersection involving false positive detection with triangles containing an angle > 90°; - path to images for html description pop up window; - OglModel hasTexture; - DataDisplay: normal computation; - DataDisplay: crash when the component was dynamically added to a scene; - visual bug with OglModel when putOnlyTexCoords is enabled with no texture; - Order Independent Transparency for old graphics card; - sofa::gui::glut applying changes in BaseCamera; - computation of the bounding box in PlaneForceField; - SofaHelper: Fix bug with FBO (causing some weird things when using textures); - corrected the visualization of heterogeneous tetrahedra; - SofaOpenGLVisual: Fix Spotlight source drawing + add some log for ShaderElement; - OmniDriverEmu plugin and examples; - scene test: ICPRegistration_ShapeMatching.scn is ignored; - Vec: 'normalized' function constness; - SpotLight: direction normalization; - ProjectionTo{Plane,Line}MultiMapping Jacobian insertion order; - SofaGeneralRigid: bug in ArticulatedSystemMapping; - SofaEngine: BoxROI instantiation; - SofaBaseCollision: Fix computeBBox in SPhereModel; - bug in MechanicalPickParticlesWithTagsVisitor input tags were not respected; - SofaOpenGLVisual: fix light's modelview matrix computation (lookat da",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:357851,Testability,test,test,357851,"hen drawing 3d text; - compilation with SofaDumpVisitor flag enabled; - compilation of BezierTriangleSetGeometryAlgorithms (color changed from Vec3f to Vec4f); - runSofa: viewport aspect issue and loss of interaction in QtGLViewer; - BoxROI: visual bounding box; - SofaMiscForceField on Windows; - VisualVisitor traversal order; - SphereROI: indices out when multiple spheres; - bug in RestShapeSpringsForceField; - Remove VariationalSymplecticSolver.h from the package in SofaCommon (to fix history); - some static analysis warnings and errors (including memory leaks); - MeshROI: remove unnecessary sqrt; - SphereROI: set centers' size to radii if only one radius is provided; - ARTrack plugin compilation; - bug in MeshNewProximityIntersection involving false positive detection with triangles containing an angle > 90°; - path to images for html description pop up window; - OglModel hasTexture; - DataDisplay: normal computation; - DataDisplay: crash when the component was dynamically added to a scene; - visual bug with OglModel when putOnlyTexCoords is enabled with no texture; - Order Independent Transparency for old graphics card; - sofa::gui::glut applying changes in BaseCamera; - computation of the bounding box in PlaneForceField; - SofaHelper: Fix bug with FBO (causing some weird things when using textures); - corrected the visualization of heterogeneous tetrahedra; - SofaOpenGLVisual: Fix Spotlight source drawing + add some log for ShaderElement; - OmniDriverEmu plugin and examples; - scene test: ICPRegistration_ShapeMatching.scn is ignored; - Vec: 'normalized' function constness; - SpotLight: direction normalization; - ProjectionTo{Plane,Line}MultiMapping Jacobian insertion order; - SofaGeneralRigid: bug in ArticulatedSystemMapping; - SofaEngine: BoxROI instantiation; - SofaBaseCollision: Fix computeBBox in SPhereModel; - bug in MechanicalPickParticlesWithTagsVisitor input tags were not respected; - SofaOpenGLVisual: fix light's modelview matrix computation (lookat da",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:358546,Testability,test,tests,358546,"ation of the bounding box in PlaneForceField; - SofaHelper: Fix bug with FBO (causing some weird things when using textures); - corrected the visualization of heterogeneous tetrahedra; - SofaOpenGLVisual: Fix Spotlight source drawing + add some log for ShaderElement; - OmniDriverEmu plugin and examples; - scene test: ICPRegistration_ShapeMatching.scn is ignored; - Vec: 'normalized' function constness; - SpotLight: direction normalization; - ProjectionTo{Plane,Line}MultiMapping Jacobian insertion order; - SofaGeneralRigid: bug in ArticulatedSystemMapping; - SofaEngine: BoxROI instantiation; - SofaBaseCollision: Fix computeBBox in SPhereModel; - bug in MechanicalPickParticlesWithTagsVisitor input tags were not respected; - SofaOpenGLVisual: fix light's modelview matrix computation (lookat data was not checked); - StateMask method clean needs to resize m_size to 0. - [Test-CI]; - fix crash UncoupledConstraintCorrection_test; - fix SofaComponentBase_test on windows; - fix Mapping and MultiMapping tests; - fix MultiMapping::applyDJT test; - fix {Difference,Addition}Mapping when a pair is composed of the same index.; - fix tested scenes selection; - removed OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisua",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:358582,Testability,test,test,358582,"ation of the bounding box in PlaneForceField; - SofaHelper: Fix bug with FBO (causing some weird things when using textures); - corrected the visualization of heterogeneous tetrahedra; - SofaOpenGLVisual: Fix Spotlight source drawing + add some log for ShaderElement; - OmniDriverEmu plugin and examples; - scene test: ICPRegistration_ShapeMatching.scn is ignored; - Vec: 'normalized' function constness; - SpotLight: direction normalization; - ProjectionTo{Plane,Line}MultiMapping Jacobian insertion order; - SofaGeneralRigid: bug in ArticulatedSystemMapping; - SofaEngine: BoxROI instantiation; - SofaBaseCollision: Fix computeBBox in SPhereModel; - bug in MechanicalPickParticlesWithTagsVisitor input tags were not respected; - SofaOpenGLVisual: fix light's modelview matrix computation (lookat data was not checked); - StateMask method clean needs to resize m_size to 0. - [Test-CI]; - fix crash UncoupledConstraintCorrection_test; - fix SofaComponentBase_test on windows; - fix Mapping and MultiMapping tests; - fix MultiMapping::applyDJT test; - fix {Difference,Addition}Mapping when a pair is composed of the same index.; - fix tested scenes selection; - removed OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisua",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:358673,Testability,test,tested,358673,"nGLVisual: Fix Spotlight source drawing + add some log for ShaderElement; - OmniDriverEmu plugin and examples; - scene test: ICPRegistration_ShapeMatching.scn is ignored; - Vec: 'normalized' function constness; - SpotLight: direction normalization; - ProjectionTo{Plane,Line}MultiMapping Jacobian insertion order; - SofaGeneralRigid: bug in ArticulatedSystemMapping; - SofaEngine: BoxROI instantiation; - SofaBaseCollision: Fix computeBBox in SPhereModel; - bug in MechanicalPickParticlesWithTagsVisitor input tags were not respected; - SofaOpenGLVisual: fix light's modelview matrix computation (lookat data was not checked); - StateMask method clean needs to resize m_size to 0. - [Test-CI]; - fix crash UncoupledConstraintCorrection_test; - fix SofaComponentBase_test on windows; - fix Mapping and MultiMapping tests; - fix MultiMapping::applyDJT test; - fix {Difference,Addition}Mapping when a pair is composed of the same index.; - fix tested scenes selection; - removed OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisual; - fix bug in topologygausspointsampler (computation of volume integrals for irregular hexa). - [Compliant]; - CompliantImplicitSolver: fix Lagrange multipliers clear when reseting the simulat",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:358792,Testability,test,testing,358792,"nGLVisual: Fix Spotlight source drawing + add some log for ShaderElement; - OmniDriverEmu plugin and examples; - scene test: ICPRegistration_ShapeMatching.scn is ignored; - Vec: 'normalized' function constness; - SpotLight: direction normalization; - ProjectionTo{Plane,Line}MultiMapping Jacobian insertion order; - SofaGeneralRigid: bug in ArticulatedSystemMapping; - SofaEngine: BoxROI instantiation; - SofaBaseCollision: Fix computeBBox in SPhereModel; - bug in MechanicalPickParticlesWithTagsVisitor input tags were not respected; - SofaOpenGLVisual: fix light's modelview matrix computation (lookat data was not checked); - StateMask method clean needs to resize m_size to 0. - [Test-CI]; - fix crash UncoupledConstraintCorrection_test; - fix SofaComponentBase_test on windows; - fix Mapping and MultiMapping tests; - fix MultiMapping::applyDJT test; - fix {Difference,Addition}Mapping when a pair is composed of the same index.; - fix tested scenes selection; - removed OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisual; - fix bug in topologygausspointsampler (computation of volume integrals for irregular hexa). - [Compliant]; - CompliantImplicitSolver: fix Lagrange multipliers clear when reseting the simulat",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:359350,Testability,test,test,359350,"to 0. - [Test-CI]; - fix crash UncoupledConstraintCorrection_test; - fix SofaComponentBase_test on windows; - fix Mapping and MultiMapping tests; - fix MultiMapping::applyDJT test; - fix {Difference,Addition}Mapping when a pair is composed of the same index.; - fix tested scenes selection; - removed OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisual; - fix bug in topologygausspointsampler (computation of volume integrals for irregular hexa). - [Compliant]; - CompliantImplicitSolver: fix Lagrange multipliers clear when reseting the simulation; - auto-fix init errors in RigidMass; - Frame.py: adding tolist() conversion; - fix Jacobian reserved size; - fix contacts and associated test. - [image]; - python tools: fix bug in mhd parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using help",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:359358,Testability,test,testing,359358,"to 0. - [Test-CI]; - fix crash UncoupledConstraintCorrection_test; - fix SofaComponentBase_test on windows; - fix Mapping and MultiMapping tests; - fix MultiMapping::applyDJT test; - fix {Difference,Addition}Mapping when a pair is composed of the same index.; - fix tested scenes selection; - removed OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisual; - fix bug in topologygausspointsampler (computation of volume integrals for irregular hexa). - [Compliant]; - CompliantImplicitSolver: fix Lagrange multipliers clear when reseting the simulation; - auto-fix init errors in RigidMass; - Frame.py: adding tolist() conversion; - fix Jacobian reserved size; - fix contacts and associated test. - [image]; - python tools: fix bug in mhd parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using help",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:359462,Testability,test,testing,359462,"to 0. - [Test-CI]; - fix crash UncoupledConstraintCorrection_test; - fix SofaComponentBase_test on windows; - fix Mapping and MultiMapping tests; - fix MultiMapping::applyDJT test; - fix {Difference,Addition}Mapping when a pair is composed of the same index.; - fix tested scenes selection; - removed OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisual; - fix bug in topologygausspointsampler (computation of volume integrals for irregular hexa). - [Compliant]; - CompliantImplicitSolver: fix Lagrange multipliers clear when reseting the simulation; - auto-fix init errors in RigidMass; - Frame.py: adding tolist() conversion; - fix Jacobian reserved size; - fix contacts and associated test. - [image]; - python tools: fix bug in mhd parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using help",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:359489,Testability,test,test,359489,"to 0. - [Test-CI]; - fix crash UncoupledConstraintCorrection_test; - fix SofaComponentBase_test on windows; - fix Mapping and MultiMapping tests; - fix MultiMapping::applyDJT test; - fix {Difference,Addition}Mapping when a pair is composed of the same index.; - fix tested scenes selection; - removed OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisual; - fix bug in topologygausspointsampler (computation of volume integrals for irregular hexa). - [Compliant]; - CompliantImplicitSolver: fix Lagrange multipliers clear when reseting the simulation; - auto-fix init errors in RigidMass; - Frame.py: adding tolist() conversion; - fix Jacobian reserved size; - fix contacts and associated test. - [image]; - python tools: fix bug in mhd parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using help",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:359875,Testability,test,test,359875,"logy type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisual; - fix bug in topologygausspointsampler (computation of volume integrals for irregular hexa). - [Compliant]; - CompliantImplicitSolver: fix Lagrange multipliers clear when reseting the simulation; - auto-fix init errors in RigidMass; - Frame.py: adding tolist() conversion; - fix Jacobian reserved size; - fix contacts and associated test. - [image]; - python tools: fix bug in mhd parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using helper::vector"" from VecTypes.h; - SofaQtGui: Remove qt3 remnants in ui files. - Minor clean; - clean SofaBaseCollision of OpenGL dependency; - cleaning Material::setColor; - Base: write sout as info (rather than warnings); - clean and fix RestShapeSpringsForceField draw functions; - Remove useless tests, optimize and fix potential bugs; - cleanup, precompute barycenters for tetra and hexa; - SofaBaseVisual: clean up and mak",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:360704,Testability,test,tests,360704,"ion; - fix Jacobian reserved size; - fix contacts and associated test. - [image]; - python tools: fix bug in mhd parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using helper::vector"" from VecTypes.h; - SofaQtGui: Remove qt3 remnants in ui files. - Minor clean; - clean SofaBaseCollision of OpenGL dependency; - cleaning Material::setColor; - Base: write sout as info (rather than warnings); - clean and fix RestShapeSpringsForceField draw functions; - Remove useless tests, optimize and fix potential bugs; - cleanup, precompute barycenters for tetra and hexa; - SofaBaseVisual: clean up and make consistent BaseCamera's code: clean QtViewer projection (remove OpenGL functions); - SofaBaseVisual: clean and fix BaseCamera Z clipping; - SofaOpenGLVisual: cleanup Lights (remove Glu calls and set matrices as data) + Fix typo in Camera; - quaternion to euler: not need for the hack since atan2 is used. - [SofaPython]; - clean examples; - clean the hard-binding example; - clean noPicking visitor. - [Flexible]; - remove unecessary data for Gauss points visualization; - some clean regarding openmp parallelisation; - clean metaFF; - remove unecessary apply in reinit; - clean FlexibleCorotationalMeshFEMForceField. - [Compliant]; - clean RigidJoint{Multi}Mapping. ____________________________________________________________. ## [v15.12]( https://github.com/sofa-framework/sofa/tree/v15.12 ). [Full log]( https://github.com/sofa-framework/sofa/compare/v15.09...v15.12 ). ____________________________________________________________. ## [v15.09]( https://github.com/sofa-fra",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:361636,Testability,log,log,361636,"parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using helper::vector"" from VecTypes.h; - SofaQtGui: Remove qt3 remnants in ui files. - Minor clean; - clean SofaBaseCollision of OpenGL dependency; - cleaning Material::setColor; - Base: write sout as info (rather than warnings); - clean and fix RestShapeSpringsForceField draw functions; - Remove useless tests, optimize and fix potential bugs; - cleanup, precompute barycenters for tetra and hexa; - SofaBaseVisual: clean up and make consistent BaseCamera's code: clean QtViewer projection (remove OpenGL functions); - SofaBaseVisual: clean and fix BaseCamera Z clipping; - SofaOpenGLVisual: cleanup Lights (remove Glu calls and set matrices as data) + Fix typo in Camera; - quaternion to euler: not need for the hack since atan2 is used. - [SofaPython]; - clean examples; - clean the hard-binding example; - clean noPicking visitor. - [Flexible]; - remove unecessary data for Gauss points visualization; - some clean regarding openmp parallelisation; - clean metaFF; - remove unecessary apply in reinit; - clean FlexibleCorotationalMeshFEMForceField. - [Compliant]; - clean RigidJoint{Multi}Mapping. ____________________________________________________________. ## [v15.12]( https://github.com/sofa-framework/sofa/tree/v15.12 ). [Full log]( https://github.com/sofa-framework/sofa/compare/v15.09...v15.12 ). ____________________________________________________________. ## [v15.09]( https://github.com/sofa-framework/sofa/tree/v15.09 ). [Full log]( https://github.com/sofa-framework/sofa/compare/release-v15.12...v15.09 ); ",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:361843,Testability,log,log,361843,"parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using helper::vector"" from VecTypes.h; - SofaQtGui: Remove qt3 remnants in ui files. - Minor clean; - clean SofaBaseCollision of OpenGL dependency; - cleaning Material::setColor; - Base: write sout as info (rather than warnings); - clean and fix RestShapeSpringsForceField draw functions; - Remove useless tests, optimize and fix potential bugs; - cleanup, precompute barycenters for tetra and hexa; - SofaBaseVisual: clean up and make consistent BaseCamera's code: clean QtViewer projection (remove OpenGL functions); - SofaBaseVisual: clean and fix BaseCamera Z clipping; - SofaOpenGLVisual: cleanup Lights (remove Glu calls and set matrices as data) + Fix typo in Camera; - quaternion to euler: not need for the hack since atan2 is used. - [SofaPython]; - clean examples; - clean the hard-binding example; - clean noPicking visitor. - [Flexible]; - remove unecessary data for Gauss points visualization; - some clean regarding openmp parallelisation; - clean metaFF; - remove unecessary apply in reinit; - clean FlexibleCorotationalMeshFEMForceField. - [Compliant]; - clean RigidJoint{Multi}Mapping. ____________________________________________________________. ## [v15.12]( https://github.com/sofa-framework/sofa/tree/v15.12 ). [Full log]( https://github.com/sofa-framework/sofa/compare/v15.09...v15.12 ). ____________________________________________________________. ## [v15.09]( https://github.com/sofa-framework/sofa/tree/v15.09 ). [Full log]( https://github.com/sofa-framework/sofa/compare/release-v15.12...v15.09 ); ",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:24244,Usability,progress bar,progress bar,24244,ffnessMatrix for PlaneForceField [#3972](https://github.com/sofa-framework/sofa/pull/3972); - [AnimationLoop] Change the default constraint solver in FreeMotionAnimationLoop [#3994](https://github.com/sofa-framework/sofa/pull/3994); - [Spring] Implement buildStiffnessMatrix in PolynomialRestShapeSpringsForceField [#4009](https://github.com/sofa-framework/sofa/pull/4009); - [MechanicalLoad] Remove the data force in ConstantFF and solves circular dependency [#4019](https://github.com/sofa-framework/sofa/pull/4019); - [all] Lifecycle v23.12 1/n [#4034](https://github.com/sofa-framework/sofa/pull/4034); - [Core] Make doDrawVisual final [#4045](https://github.com/sofa-framework/sofa/pull/4045); - [Visual] ADD a visualization flag and draw method for NarrowPhaseDetection [#4048](https://github.com/sofa-framework/sofa/pull/4048); - [SolidMechanics.TensorMass] Implement buildStiffnessMatrix for TetrahedralTensorMassForceField [#4127](https://github.com/sofa-framework/sofa/pull/4127); - [BatchGUI] Show progress bar [#4168](https://github.com/sofa-framework/sofa/pull/4168); - [Constraint.Lagrangian.Solver] Another step to factorize both constraint solvers [#4213](https://github.com/sofa-framework/sofa/pull/4213); - [all] Replace tinyxml by external tinyxml2 [#4240](https://github.com/sofa-framework/sofa/pull/4240). ### Improvements; - [all] Add namespaces in the factory and a python-like import mechanism [#2512](https://github.com/sofa-framework/sofa/pull/2512); - [IO][Tests] Add basic test for the MeshSTLLoader [#2999](https://github.com/sofa-framework/sofa/pull/2999); - [SofaCarving] Add an example written in python [#3457](https://github.com/sofa-framework/sofa/pull/3457); - [MultiThreading] Implement domain decomposition for a lock-free parallelism [#3566](https://github.com/sofa-framework/sofa/pull/3566); - [Components] Add functions to visualization of TetrahedronFemForceField [#3821](https://github.com/sofa-framework/sofa/pull/3821); - [LinearAlgebra] Change access spe,MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:45104,Usability,simpl,simple,45104,ofa-framework/sofa/pull/4026); - [all] Lifecycle v23.12 2/n [#4040](https://github.com/sofa-framework/sofa/pull/4040); - [GUI.Qt] Remove unused recorder feature [#4041](https://github.com/sofa-framework/sofa/pull/4041); - [MechanicalLoad] Use prefix d_ in DiagonalVelocityDampingForceField [#4046](https://github.com/sofa-framework/sofa/pull/4046); - [all] Lifecycle v23.12 3/n [#4056](https://github.com/sofa-framework/sofa/pull/4056); - [all] Clean unused warnings in SOFA [#4057](https://github.com/sofa-framework/sofa/pull/4057); - [all] Lifecycle v23.12 4/n [#4058](https://github.com/sofa-framework/sofa/pull/4058); - [plugins] Fix OptionGroup deprecated constructor in image and SofaCUDA plugin [#4064](https://github.com/sofa-framework/sofa/pull/4064); - [all] Update code regarding lifecycle in Topology.h [#4065](https://github.com/sofa-framework/sofa/pull/4065); - [all] Fix warnings related to Vec and unused var [#4067](https://github.com/sofa-framework/sofa/pull/4067); - [all] Remove some simple uses of bwdInit() [#4075](https://github.com/sofa-framework/sofa/pull/4075); - [SofaMatrix] Remove CImgPlugin dependency [#4112](https://github.com/sofa-framework/sofa/pull/4112); - [all] Replace deprecated wbloc function by its new function name [#4118](https://github.com/sofa-framework/sofa/pull/4118); - [Core] VecId: set correct message for the deleted function holonomicC [#4120](https://github.com/sofa-framework/sofa/pull/4120); - [IO.Mesh.Tests] Reduce number of logs by unactivating printlog [#4148](https://github.com/sofa-framework/sofa/pull/4148); - [Constraint.Lagrangian.Solver] LCPConstraintSolver: remove useless computation if printLog is enabled [#4170](https://github.com/sofa-framework/sofa/pull/4170); - [Scene] Eigen3-SVD.scn: disable printLog [#4184](https://github.com/sofa-framework/sofa/pull/4184); - [Constraint.Lagrangian.Solver] Clean both constraint solvers [#4185](https://github.com/sofa-framework/sofa/pull/4185); - [Topology.Container] Update and rename ,MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:128098,Usability,guid,guidelines,128098,"SofaCore] Fix type conversion [#2639]( https://github.com/sofa-framework/sofa/pull/2639 ); - [SofaCore] Name dynamically allocated vec ids [#2811]( https://github.com/sofa-framework/sofa/pull/2811 ); - [SofaCore_test] Minor clean of few unit tests [#2573]( https://github.com/sofa-framework/sofa/pull/2573 ); - [SofaEulerianFluid] Move examples into plugin [#2833]( https://github.com/sofa-framework/sofa/pull/2833 ); - [SofaGeneralEngine] Fix some warnings [#2723]( https://github.com/sofa-framework/sofa/pull/2723 ); - [SofaGuiQt] Error handling when exporting graph [#2771]( https://github.com/sofa-framework/sofa/pull/2771 ); - [SofaGuiQt] Fix english spelling: AdvancedTimer instead of AdvanceTimer [#2816]( https://github.com/sofa-framework/sofa/pull/2816 ); - [SofaGuiQt] Modernize the 'qt::connect' to use the c++ syntax [#2943]( https://github.com/sofa-framework/sofa/pull/2943 ); - [SofaGuiQt] Remove sec unit from GUI [#2742]( https://github.com/sofa-framework/sofa/pull/2742 ); - [SofaGuiQt] Rename attributes to follow SOFA guidelines. [#2944]( https://github.com/sofa-framework/sofa/pull/2944 ); - [SofaKernel] fix shadow variable [#2791]( https://github.com/sofa-framework/sofa/pull/2791 ); - [SofaMiscCollision] Extract OBB/Capsule code into its own plugin [#2820]( https://github.com/sofa-framework/sofa/pull/2820 ); - [SofaMiscFEM] Clean FastTetrahedralCorotationalForceField and add extraData [#2569]( https://github.com/sofa-framework/sofa/pull/2569 ); - [SofaMiscForceField] Fix type conversion in tests [#2714]( https://github.com/sofa-framework/sofa/pull/2714 ); - [SofaRigid][SofaGeneralSimpleFem] Fix typos [#2947]( https://github.com/sofa-framework/sofa/pull/2947 ); - [SofaSimpleFEM_test] Add tests on Tetrahedron, CorotationalTetrahedral and FastTetrahedral FEM ForceField [#2842]( https://github.com/sofa-framework/sofa/pull/2842 ); - [SofaSimpleFem] Prefer usage of accessor in HexahedronFEMForceField [#2778]( https://github.com/sofa-framework/sofa/pull/2778 ); - [SofaS",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:142250,Usability,UX,UX,142250,timization on MechanicalMatrixMapper [#2411]( https://github.com/sofa-framework/sofa/pull/2411 ); - [SofaGeneralAnimationLoop] Remove matrix compression [#2367]( https://github.com/sofa-framework/sofa/pull/2367 ); - [SofaGeneralDeformable] Add option to enable/disable spring display in TriangularBendingSprings [#2297]( https://github.com/sofa-framework/sofa/pull/2297 ); - [SofaGeneralSimpleFem] Update BeamFEMForceField topologyHander and add tests [#2382]( https://github.com/sofa-framework/sofa/pull/2382 ); - [SofaGraphComponent] Restore check of deprecated components [#2267]( https://github.com/sofa-framework/sofa/pull/2267 ); - [SofaGuiQt] Introduce expand/collapse buttons [#2322]( https://github.com/sofa-framework/sofa/pull/2322 ); - [SofaGuiQt] Introduce expand/collapse buttons in profiler [#2351]( https://github.com/sofa-framework/sofa/pull/2351 ); - [SofaGuiQt] Multiple selection of timers in the profiler [#2141]( https://github.com/sofa-framework/sofa/pull/2141 ); - [SofaGuiQt] UX: graph is easier to read [#2356]( https://github.com/sofa-framework/sofa/pull/2356 ); - [SofaHelper] Add a method getTrace() to BackTrace class. [#2341]( https://github.com/sofa-framework/sofa/pull/2341 ); - [SofaHelper] Factory key type can be other than std::string [#2259]( https://github.com/sofa-framework/sofa/pull/2259 ); - [SofaMiscFEM_test] Add class to test and compare TriangleFEM and TriangularFEMForceField [#2249]( https://github.com/sofa-framework/sofa/pull/2249 ); - [SofaMiscForceField_test] Add TopologicalChanges unit tests for MeshMatrixMass [#2215]( https://github.com/sofa-framework/sofa/pull/2215 ); - [SofaMiscTopology] Add a component TopologyBoundingTrasher to remove mesh going outside from scene bounding box [#2288]( https://github.com/sofa-framework/sofa/pull/2288 ); - [SofaSimpleFem] Add callback on VonMises in TetrahedronFEMForceField [#2407]( https://github.com/sofa-framework/sofa/pull/2407 ); - [SofaSimpleFem] Hexa FEM optimization when assembling by bloc [#22,MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:157697,Usability,clear,clear,157697,recate the module [#2368]( https://github.com/sofa-framework/sofa/pull/2368 ); - [SofaBaseLinearSolver] Extract and uncomment CRSMultiMatrixAccessor [#2220]( https://github.com/sofa-framework/sofa/pull/2220 ); - [SofaBaseLinearSolver] Fix typo [#2256]( https://github.com/sofa-framework/sofa/pull/2256 ); - [SofaBaseLinearSolver] Make CRSMultiMatrixAccessor optional (compilation and usage) [#2372]( https://github.com/sofa-framework/sofa/pull/2372 ); - [SofaBaseLinearSolver] Remove FullMatrix<bool> and FullVector<bool> [#2313]( https://github.com/sofa-framework/sofa/pull/2313 ); - [SofaBaseMechanics] Remove TopologyHandler in masses to use TopologyData callbacks (part 5) [#2391]( https://github.com/sofa-framework/sofa/pull/2391 ); - [SofaBaseMechanics] Remove unused handleEvent in UniformMass [#2521]( https://github.com/sofa-framework/sofa/pull/2521 ); - [SofaBaseMechanics] Simplify expression [#2468]( https://github.com/sofa-framework/sofa/pull/2468 ); - [SofaBaseMechanics] Use directly clear() when resetting force in MechanicalObject [#2518]( https://github.com/sofa-framework/sofa/pull/2518 ); - [SofaBaseTopology] 'createTopologyHandler' overrides a member function but is not marked 'override' [#2260]( https://github.com/sofa-framework/sofa/pull/2260 ); - [SofaBaseVisual] Split VisualModelImpl init method in several methods for more clarity [#2299]( https://github.com/sofa-framework/sofa/pull/2299 ); - [SofaConstraint] Better includes [#2266]( https://github.com/sofa-framework/sofa/pull/2266 ); - [SofaConstraint] Divide a timer in 2 [#2469]( https://github.com/sofa-framework/sofa/pull/2469 ); - [SofaConstraint] Remove dependency on TetrahedronFEMForcefield [#2250]( https://github.com/sofa-framework/sofa/pull/2250 ); - [SofaCore] Clean force fields [#2243]( https://github.com/sofa-framework/sofa/pull/2243 ); - [SofaCore] Fix two determiners in a row [#2271]( https://github.com/sofa-framework/sofa/pull/2271 ); - [SofaCore] Remove unused addSubMBKToMatrix in force fields,MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:173604,Usability,clear,clear,173604,"aBaseTopology]** Remove getter to some Data in Topology container and put them public [#1947]( https://github.com/sofa-framework/sofa/pull/1947 ); - **[SofaBaseTopology]** Remove public access to propagateTopologyChanges [#1860]( https://github.com/sofa-framework/sofa/pull/1860 ); - **[SofaBaseTopology]** Rename TopologyEngine and TopologyData classes to match file names [#1872]( https://github.com/sofa-framework/sofa/pull/1872 ); - **[SofaBaseTopology]** Secure All Topology modifiers API [#1859]( https://github.com/sofa-framework/sofa/pull/1859 ); - **[SofaBaseTopology]** Secure PointSetTopologyModifier API [#1858]( https://github.com/sofa-framework/sofa/pull/1858 ); - **[SofaBaseTopology]** Totally remove topologyEngine and move mechanism only in TopologyData and TopologyHandler [#1898]( https://github.com/sofa-framework/sofa/pull/1898 ); - **[SofaCore]** Base::findLinkDest returns Base* instead of void* [#1700]( https://github.com/sofa-framework/sofa/pull/1700 ); - **[SofaCore]** FIX SingleLink clear/set behavior [#1749]( https://github.com/sofa-framework/sofa/pull/1749 ); - **[SofaCore]** Move definition of Link::updateLinks to BaseLink.h [#1735]( https://github.com/sofa-framework/sofa/pull/1735 ); - **[SofaCore]** Moves MechanicaMatrix out of MultiMatrix.h [#1870]( https://github.com/sofa-framework/sofa/pull/1870 ); - **[SofaCore]** Remove ""depend"" from Node [#1763]( https://github.com/sofa-framework/sofa/pull/1763 ); - **[SofaCore]** isDiagonal is const [#1903]( https://github.com/sofa-framework/sofa/pull/1903 ); - [SofaExplicitOdeSolver] Introduce visitor to know the number of non-diagonal mass matrices [#2165]( https://github.com/sofa-framework/sofa/pull/2165 ); - [SofaGeneralSimpleFem] Remove \*Containers [#2099]( https://github.com/sofa-framework/sofa/pull/2099 ); - **[SofaHelper]** Add two search paths for every prefixes of the plugin manager [#1824]( https://github.com/sofa-framework/sofa/pull/1824 ); - **[SofaHelper]** Move polygon cube intersection ad-",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:218002,Usability,simpl,simple,218002,://github.com/sofa-framework/sofa/pull/1464 ); - [SofaMacros] Handle COMPONENTS (needed by SofaPython3) [#1671]( https://github.com/sofa-framework/sofa/pull/1671 ). **Modules**; - [All] Replace last use of Qwt by QtCharts and remove internal library [#1512]( https://github.com/sofa-framework/sofa/pull/1512 ); - [SofaBaseCollision] Add option to use of normal orientation in triangle and self-colliding cube [#1559]( https://github.com/sofa-framework/sofa/pull/1559 ); - **[SofaCore]** Add virtual getPathName function in Base [#1455]( https://github.com/sofa-framework/sofa/pull/1455 ); - [SofaGeneralLoader] Add option for transform in SphereLoader to match other loaders API [#1495]( https://github.com/sofa-framework/sofa/pull/1495 ); - [SofaGeneralLoader] allow ReadState at init [#1654]( https://github.com/sofa-framework/sofa/pull/1654 ); - [SofaHaptics] Add multithread test on LCPForceFeedback component [#1581]( https://github.com/sofa-framework/sofa/pull/1581 ); - [SofaHaptics] Add simple tests on LCPForceFeedback component [#1576]( https://github.com/sofa-framework/sofa/pull/1576 ); - [SofaImplicitField] Add new ImplicitFields and getHessian to ScalarField [#1510]( https://github.com/sofa-framework/sofa/pull/1510 ); - **[SofaKernel]** ADD: add polynomial springs force fields [#1342]( https://github.com/sofa-framework/sofa/pull/1342 ); - **[SofaKernel]** Add DataLink object & PathResolver. [#1485]( https://github.com/sofa-framework/sofa/pull/1485 ); - **[SofaKernel]** Add setLinkedBase method in BaseLink [#1436]( https://github.com/sofa-framework/sofa/pull/1436 ); - **[SofaKernel]** Add whole program optimization (aka link-time optimization) for msvc [#1468]( https://github.com/sofa-framework/sofa/pull/1468 ); - **[SofaKernel]** Exposing Data in ContactListener. [#1678]( https://github.com/sofa-framework/sofa/pull/1678 ); - **[SofaKernel]** Filerepository gettemppath [#1383]( https://github.com/sofa-framework/sofa/pull/1383 ); - **[SofaKernel]** Set read-only all data,MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:254576,Usability,clear,clear,254576,"all cleaning on sout and serr [#1234]( https://github.com/sofa-framework/sofa/pull/1234 ); - [All] Standardize epsilons in SOFA [#1049]( https://github.com/sofa-framework/sofa/pull/1049 ); - [All] Code cleaning of multiple classes [#1116]( https://github.com/sofa-framework/sofa/pull/1116 ); - [All] Remove deprecated macro SOFA_TRANGLEFEM [#1233]( https://github.com/sofa-framework/sofa/pull/1233 ); - [All] Remove references to ""isToPrint"" because it's broken [#1197]( https://github.com/sofa-framework/sofa/pull/1197 ); - [All] Replace NULL by nullptr [#1179]( https://github.com/sofa-framework/sofa/pull/1179 ); - [All] Try to reduce the number of compilation warnings [#1196]( https://github.com/sofa-framework/sofa/pull/1196 ); - [SceneCreator] Pluginizing... [#1109]( https://github.com/sofa-framework/sofa/pull/1109 ); - **[SofaBaseLinearSolver]** Remove virtual function BaseLinearSolver::isMultiGroup [#1063]( https://github.com/sofa-framework/sofa/pull/1063 ); - **[SofaBaseLinearSolver][FullMatrix]** Restore fast clear function [#1128]( https://github.com/sofa-framework/sofa/pull/1128 ); - **[SofaFramework]** Remove (painful) check/warning with Rigids [#1229]( https://github.com/sofa-framework/sofa/pull/1229 ); - [SofaGUI] Split OpenGL and Qt dependency [#1121]( https://github.com/sofa-framework/sofa/pull/1121 ); - [SofaGeneralObjectInteraction] Create delegate functions in AttachConstraint [#1185]( https://github.com/sofa-framework/sofa/pull/1185 ); - [SofaGraphComponent] Update sceneCheckerAPI and deprecate MatrixMass [#1107]( https://github.com/sofa-framework/sofa/pull/1107 ); - [SofaHAPI] Fixes for HAPI [#1189]( https://github.com/sofa-framework/sofa/pull/1189 ); - **[SofaKernel]** ADD const specifier on notify methods in Node [#1169]( https://github.com/sofa-framework/sofa/pull/1169 ); - **[SofaKernel]** Remove deprecated SOFA_DEBUG macro [#1232]( https://github.com/sofa-framework/sofa/pull/1232 ); - **[SofaMeshCollision]** Clean deprecated code [#1201]( https://g",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:274194,Usability,guid,guiding,274194,"ofaKernel]** Remove boost::locale dependency [#1033]( https://github.com/sofa-framework/sofa/pull/1033 ); - **[SofaKernel]** Remove usage of helper::system::atomic<int> (replaced by STL's) [#1035]( https://github.com/sofa-framework/sofa/pull/1035 ); - **[SofaKernel]** Several changes in Topology components [#999]( https://github.com/sofa-framework/sofa/pull/999 ); - **[SofaKernel]** minor cleaning in mesh loader [#1025]( https://github.com/sofa-framework/sofa/pull/1025 ); - **[SofaKernel]** Remove multigroup option in MatrixLinearSolver [#901]( https://github.com/sofa-framework/sofa/pull/901 ); - [SofaRigid] Clean JointSpringFF [#850]( https://github.com/sofa-framework/sofa/pull/850 ); - [SofaRigid] Cosmetic clean in RigidRigidMapping & msg_* update. [#1005]( https://github.com/sofa-framework/sofa/pull/1005 ); - **[SofaSimpleFem]** Use msg and size_t in TetraDiff [#1016]( https://github.com/sofa-framework/sofa/pull/1016 ). **Plugins / Projects**; - [image] Add warning guiding users regarding pluginization of DiffusionSolver [#1067]( https://github.com/sofa-framework/sofa/pull/1067 ); - [Modeler] Deactivate Modeler by default, since it is deprecated [#972]( https://github.com/sofa-framework/sofa/pull/972 ). **Examples / Scenes**; - [Scenes] Apply script on all scenes using VisualModel/OglModel [#1081]( https://github.com/sofa-framework/sofa/pull/1081 ). ____________________________________________________________. ## [v18.12]( https://github.com/sofa-framework/sofa/tree/v18.12 ). [Full log]( https://github.com/sofa-framework/sofa/compare/v18.06...v18.12 ). ### Deprecated. **Removed in v18.12**; - [SofaBoundaryCondition] BuoyantForceField [#457]( https://github.com/sofa-framework/sofa/pull/457 ); - [SofaBoundaryCondition] VaccumSphereForceField [#457]( https://github.com/sofa-framework/sofa/pull/457 ); - **[SofaHelper]** Utils::getPluginDirectory() [#518]( https://github.com/sofa-framework/sofa/pull/518) - Use PluginRepository.getFirstPath( ) instead; - [SofaMisc] Par",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:280022,Usability,simpl,simpler,280022,"/pull/704 ); - [All] Sofa add mechanical matrix mapper [#721]( https://github.com/sofa-framework/sofa/pull/721 ); - **[SofaBaseTopology]** Add battery of tests on topology containers [#708]( https://github.com/sofa-framework/sofa/pull/708 ); - **[SofaBaseTopology]** Topology change propagation to Mechanical State [#838]( https://github.com/sofa-framework/sofa/pull/838 ); - **[SofaBaseMechanics]** Optimize barycentric mapping initialization [#798]( https://github.com/sofa-framework/sofa/pull/798 ); - [SofaBoundaryCondition] Factorize partial fixedconstraint [#718]( https://github.com/sofa-framework/sofa/pull/718 ); - [SofaConstraint] add a force data field in SlidingConstraint [#780]( https://github.com/sofa-framework/sofa/pull/780 ); - [SofaConstraint] ADD Data to show constraint forces [#840]( https://github.com/sofa-framework/sofa/pull/840 ); - [SofaConstraint] allow call of constraints' storeLambda() [#854]( https://github.com/sofa-framework/sofa/pull/854 ); - **[SofaCore]** Add new (simpler) DataEngine implementation [#760]( https://github.com/sofa-framework/sofa/pull/760 ); - [SofaExporter] ADD in WriteState all required tests on data and clean export with msg API [#714]( https://github.com/sofa-framework/sofa/pull/714 ); - **[SofaFramework]** Improve external dirs fetching in SofaMacros [#759]( https://github.com/sofa-framework/sofa/pull/759 ); - [SofaGeneralAnimationLoop] Improvement on MMMapper [#772]( https://github.com/sofa-framework/sofa/pull/772 ); - **[SofaHelper]** EDIT FileSystem and FileRepository for regression tests [#830]( https://github.com/sofa-framework/sofa/pull/830 ); - **[SofaKernel]** Improve Displayflags [#671]( https://github.com/sofa-framework/sofa/pull/671 ); - **[SofaKernel]** Add a ""sofa_add_module"" in SofaMacro.cmake [#732]( https://github.com/sofa-framework/sofa/pull/732 ); - **[SofaKernel]** use string in base object description [#862]( https://github.com/sofa-framework/sofa/pull/862 ); - [SofaMeshCollision] TriangleModel optimizat",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:289804,Usability,simpl,simplefem,289804,); - **[SofaFramework]** CLEAN: removing unused PS3 files [#851]( https://github.com/sofa-framework/sofa/pull/851 ); - [SofaGeneralSimpleFEM] Clean BeamFemForceField [#846]( https://github.com/sofa-framework/sofa/pull/846 ); - **[SofaHelper]** Change drawTriangle and drawQuad with internal functions [#813]( https://github.com/sofa-framework/sofa/pull/813 ); - **[SofaHelper]** Update ComponentChange with removed Components [#905]( https://github.com/sofa-framework/sofa/pull/905 ); - **[SofaKernel]** Remove commented code since years in SofaBaseMechanics [#733]( https://github.com/sofa-framework/sofa/pull/733 ); - **[SofaKernel]** Move ScriptEvent class from SofaPython to core/objectModel [#764]( https://github.com/sofa-framework/sofa/pull/764 ); - [SofaMiscFem] Clean BaseMaterial::handleTopologyChange [#817]( https://github.com/sofa-framework/sofa/pull/817 ); - [SofaMiscMapping] Clean DeformableOnRigidFrameMapping [#848]( https://github.com/sofa-framework/sofa/pull/848 ); - **[SofaSimpleFem]** Stc clean simplefem [#826]( https://github.com/sofa-framework/sofa/pull/826 ). **Plugins / Projects**; - [Multithreading] Move TaskScheduler files from MultiThreading plugin to SofaKernel [#805]( https://github.com/sofa-framework/sofa/pull/805 ). **Examples / Scenes**; - [examples] Remove scenes about deprecated components [#922]( https://github.com/sofa-framework/sofa/pull/922 ). ____________________________________________________________. ## [v18.06]( https://github.com/sofa-framework/sofa/tree/v18.06 ). [Full log]( https://github.com/sofa-framework/sofa/compare/v17.12...v18.06 ). ### Deprecated. **Will be removed in v18.06**; - **[SofaHelper]** Utils::getPluginDirectory() [#518]( https://github.com/sofa-framework/sofa/pull/518) - Use PluginRepository.getFirstPath( ) instead. **Will be removed in v18.12**; - [SofaBoundaryCondition] BuoyantForceField [#457]( https://github.com/sofa-framework/sofa/pull/457 ); - [SofaBoundaryCondition] VaccumSphereForceField [#457]( https://gith,MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:329979,Usability,simpl,simplify,329979,"thub.com/sofa-framework/sofa/pull/258 ); - add tests for Light [#258]( https://github.com/sofa-framework/sofa/pull/258 ); - [SofaBoundaryCondition]; - add tests for ConstantForceField, some of them are OpenIssue demonstrating existing problem, as crashing sofa when using negative or too large values in indices [#258]( https://github.com/sofa-framework/sofa/pull/258 ); - [CI]; - improvement of all test scripts. **Plugins / Projects**; - [GUI]; - mouse events are now transmitted to the scene with QtGLViewer [#132]( https://github.com/sofa-framework/sofa/pull/132 ); - [SceneCreator]; - Cosmetic changes and remove un-needed include [#169]( https://github.com/sofa-framework/sofa/pull/169 ); - [SofaPython]; - Macros to bind ""sequence"" types [#165]( https://github.com/sofa-framework/sofa/pull/165 ); - ModuleReload [#214]( https://github.com/sofa-framework/sofa/pull/214 ); - light module reload [#202]( https://github.com/sofa-framework/sofa/pull/202 ); - change the way createObject() handle its arguments to simplify scene writing + batch of tests [#286]( https://github.com/sofa-framework/sofa/pull/286 ); - [SofaTest]; - add Backtrace::autodump to all tests to ease debugging [#191]( https://github.com/sofa-framework/sofa/pull/191 ); - add automatic tests for updateForceMask [#209]( https://github.com/sofa-framework/sofa/pull/209 ); - add tests on PluginManager [#240]( https://github.com/sofa-framework/sofa/pull/240 ); - TestMessageHandler : new and robust implementation to connect msg_* message to test failure [#213]( https://github.com/sofa-framework/sofa/pull/213 ); - update to use the new TestMessageHandler where msg_error generates test failures [#213]( https://github.com/sofa-framework/sofa/pull/213 ); - add tests for TestMessageHandler [#213]( https://github.com/sofa-framework/sofa/pull/213 ); - [SofaCUDA]; - FIX NVCC flags for debug build on Windows [#300]( https://github.com/sofa-framework/sofa/pull/300 ). ### Bug Fixes. **Modules**; - Warnings have been fixed [#229](",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:335720,Usability,guid,guideline,335720," ### Cleanings. **Modules**; - [All]; - clean the consistency issues related to the readOnly flag [#115]( https://github.com/sofa-framework/sofa/pull/115 ); - Clean licenses [#139]( https://github.com/sofa-framework/sofa/pull/139 ); - [SofaKernel]; - clean DefaultPipeline.cpp/h (API BREAKING); - clean the attributes names in BoxROI (API BREAKING); - TetrahedronFEMForceField clean code [#270]( https://github.com/sofa-framework/sofa/pull/270 ); - GridTopology : clean the code & factor the constructor [#270]( https://github.com/sofa-framework/sofa/pull/270 ); - RegularGridTopology : clean the constructor's code & remove NDEBUG code [#270]( https://github.com/sofa-framework/sofa/pull/270 ); - MechanicalObject : removal of code specific to the grid [#270]( https://github.com/sofa-framework/sofa/pull/270 ). - [SofaVolumetricData]; - Light: clean and strenghening the interface [#258]( https://github.com/sofa-framework/sofa/pull/258 ); - DistanceGrid; - [SofaBoundaryCondition]; - ConstantForceField: clean to follow sofa guideline & fix the ""visible dependencies"" [#258]( https://github.com/sofa-framework/sofa/pull/258 ); - ConstantForceField: replace the ""points"" attribute by ""indices"" with backward compatibility & deprecation message [#258]( https://github.com/sofa-framework/sofa/pull/258 ). **Plugins / Projects**; - [SceneCreator]; - clean with cosmetic changes and removed un-needed includes; - [SofaPython]; - cleaning data binding [#166]( https://github.com/sofa-framework/sofa/pull/166 ). ### Moved files. - The module handling HighOrderTopologies moved into a [separate repository]( https://github.com/sofa-framework/plugin.HighOrder) [#222](https://github.com/sofa-framework/sofa/pull/222 ). ____________________________________________________________. ## [v16.12]( https://github.com/sofa-framework/sofa/tree/v16.12 ). **Last commit: on Jan 08, 2017** ; [Full log]( https://github.com/sofa-framework/sofa/compare/v16.08...v16.12 ). ### Environment; - **C++11 is now mandatory**",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:336951,Usability,feedback,feedback,336951,"nges and removed un-needed includes; - [SofaPython]; - cleaning data binding [#166]( https://github.com/sofa-framework/sofa/pull/166 ). ### Moved files. - The module handling HighOrderTopologies moved into a [separate repository]( https://github.com/sofa-framework/plugin.HighOrder) [#222](https://github.com/sofa-framework/sofa/pull/222 ). ____________________________________________________________. ## [v16.12]( https://github.com/sofa-framework/sofa/tree/v16.12 ). **Last commit: on Jan 08, 2017** ; [Full log]( https://github.com/sofa-framework/sofa/compare/v16.08...v16.12 ). ### Environment; - **C++11 is now mandatory**. This implies some changes in building tools.; - Generator: CMake 3.1 or higher.; - Compiler: GCC 4.8 or higher, Clang 3.4 or higher, Microsoft Visual C++ 2013 or higher. ### New features for users. - new Geomagic plugin: supporting latest versions of force feedback interfaces from Geomagic; - add ForceMaskOff, a component to locally (in a branch of the scene graph) cancel the force mask; - live-coding for python; - live-coding for GLSL; - new component MakeAlias; - new component MakeDataAlias; - improved error message & console rendering. ### New features for developpers. - Preliminary Markdown support in the msg_* API. You can now write much better formatting & alignement as well as adding URL to documentations related to the error.; - class RichStyleConsoleFormatter which interprete the markdowns in the message and format this to a resizable console with nice alignement.; - class CountingMessageHandler (count the number of message for each message type); - class RoutingMessageHandler (to implement context specific routing of the messages to different handler); - class ExpectMessage and MessageAsATestFailure can be used to check that a component did or didn't send a message and generate a test failure.; - FileMonitor is now implemented on MacOS & Windows (for live-coding features, for example); - RequiredPlugin: modified API to take a list of plugi",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:340662,Usability,guid,guidelines,340662," OglTexture: fix possible memory leaks; - [Compliant]; - clean python. ### Cleanings. - clean the compilation when SOFA_NO_OPENGL flag is activated; - clean the config.h (SOFAGUI_HAVE_QWT); - remove boost library links (includes still required). boost chrono is not required anymore.; - remove unused POINT_DATA_VECTOR_ACCESS macro; - make miniflowVR build optional (default OFF); - [SofaKernel]; - remove last direct opengl calls in modules; - add deprecation message on MechanicalObject attributes; - [SofaBaseVisual] clean BaseCamera: remove direct opengl calls; - [SofaHaptics] boost-thread is not used any more, clean cmake; - [SofaGeneralLoader] STLLoader: fixing binary loading in debug and cleaning examples; - [SofaPython]; - remove ScriptEnvironment i.e. automatic initialization of Node; - Node::isInitialized(), not used anymore; - [Flexible]; - clean relativeStrainMapping. ### Moved files. - move CImg from extlibs to image plugin extlibs. ### Documentation. - Add the contribution and guidelines : **CONTRIBUTING.md** and **GUIDELINES.md**; - Add the configuration required (ex: C++, compiler versions); - Add a page to use SOFA in Matlab; - Improve Logger documentation; - Add a page to use SOFA in Matlab. ____________________________________________________________. ## [v16.08]( https://github.com/sofa-framework/sofa/tree/v16.08 ). **Last commit: on Jul 28, 2016** ; [Full log]( https://github.com/sofa-framework/sofa/compare/v15.12...v16.08 ). ### New features. - SOFA on GitHub - [https://github.com/sofa-framework/sofa]( https://github.com/sofa-framework/sofa ); - creation of a RigidScale plugin: implementing mappings, especially allowing to get the DOF with Rigid+Scale type, while reusing affine DOF (Rigid+Scale+Shear) already implemented in Flexible; - creation of a LeapMotion plugin: allowing to integrate a Leap in your SOFA simulation; - add the DrawTool: DrawTool is an interface, describing an API to display primitives on screen. For now, only the OpenGL (fixed-pi",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:341875,Usability,simpl,simple,341875," documentation; - Add a page to use SOFA in Matlab. ____________________________________________________________. ## [v16.08]( https://github.com/sofa-framework/sofa/tree/v16.08 ). **Last commit: on Jul 28, 2016** ; [Full log]( https://github.com/sofa-framework/sofa/compare/v15.12...v16.08 ). ### New features. - SOFA on GitHub - [https://github.com/sofa-framework/sofa]( https://github.com/sofa-framework/sofa ); - creation of a RigidScale plugin: implementing mappings, especially allowing to get the DOF with Rigid+Scale type, while reusing affine DOF (Rigid+Scale+Shear) already implemented in Flexible; - creation of a LeapMotion plugin: allowing to integrate a Leap in your SOFA simulation; - add the DrawTool: DrawTool is an interface, describing an API to display primitives on screen. For now, only the OpenGL (fixed-pipeline version) implementation has been made.; - add a Logger; - add the diffusion effect in SOFA (heat transfer); - SOFA_USE_MASK compilation variable to activate or de-activate the masks in SOFA; - DataTracker: simple and elegant way to track Data in Engine; - extlibs: update cimg to version 1.7.3; - Add guidelines for contributions in CONTRIBUTING.md. ### Moved files. - Kernel modules of SOFA (SofaFramework, SofaBase, SofaCommon and SofaSimulation) have been moved to one common module SofaKernel, located at _sofa_root/SofaKernel_. SofaKernel is a pure LGPL module.; - code in _sofa_root/modules/sofa/simulation/_ has been splitted into three modules of SofaKernel: SofaSimulationCommon, SofaSimulationTree, SofaSimulationGraph; - MOVE the SofaPardiso module as a plugin; - Move OglTetrahedralModel into a new plugin called VolumetricRendering. - Minor moves; - Move ColorMap code to helper and let (Ogl)ColorMap from SofaOpenGLVisual doing OpenGL stuff; - Move TorsionForceField and ComplementaryROI into SOFA (those two components where in a deprecated repository _sofa_root/modules/sofa/components/_). - [Compliant]; - moving propagate_constraint_force_visitor",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:341970,Usability,guid,guidelines,341970,"ework/sofa/tree/v16.08 ). **Last commit: on Jul 28, 2016** ; [Full log]( https://github.com/sofa-framework/sofa/compare/v15.12...v16.08 ). ### New features. - SOFA on GitHub - [https://github.com/sofa-framework/sofa]( https://github.com/sofa-framework/sofa ); - creation of a RigidScale plugin: implementing mappings, especially allowing to get the DOF with Rigid+Scale type, while reusing affine DOF (Rigid+Scale+Shear) already implemented in Flexible; - creation of a LeapMotion plugin: allowing to integrate a Leap in your SOFA simulation; - add the DrawTool: DrawTool is an interface, describing an API to display primitives on screen. For now, only the OpenGL (fixed-pipeline version) implementation has been made.; - add a Logger; - add the diffusion effect in SOFA (heat transfer); - SOFA_USE_MASK compilation variable to activate or de-activate the masks in SOFA; - DataTracker: simple and elegant way to track Data in Engine; - extlibs: update cimg to version 1.7.3; - Add guidelines for contributions in CONTRIBUTING.md. ### Moved files. - Kernel modules of SOFA (SofaFramework, SofaBase, SofaCommon and SofaSimulation) have been moved to one common module SofaKernel, located at _sofa_root/SofaKernel_. SofaKernel is a pure LGPL module.; - code in _sofa_root/modules/sofa/simulation/_ has been splitted into three modules of SofaKernel: SofaSimulationCommon, SofaSimulationTree, SofaSimulationGraph; - MOVE the SofaPardiso module as a plugin; - Move OglTetrahedralModel into a new plugin called VolumetricRendering. - Minor moves; - Move ColorMap code to helper and let (Ogl)ColorMap from SofaOpenGLVisual doing OpenGL stuff; - Move TorsionForceField and ComplementaryROI into SOFA (those two components where in a deprecated repository _sofa_root/modules/sofa/components/_). - [Compliant]; - moving propagate_constraint_force_visitor in a helper file and minor cleaning of CompliantImplicitSolver. ### Improvements. - test examples are now running (on Jenkins for the Continuous Integrati",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:347678,Usability,clear,clear,347678, of Multi2Mapping_test; - add DistanceMapping_test. - [SofaPython]; - logger: cleaning emitter; - sml.Mesh: adding load function; - sml: python set for tags is created by objects themselves; - sml: add tag to JointGeneric; - sml: add the printLog flag; - sml: setup units in BaseScene for all sml Scene class; - sml: mesh has a clear id; - sml:insertVisual: bug fix for solid with multiple meshes (just impacting the Display scene); - sml: handy constructor for Dof creation; - sml: like <mesh> <image> can be defined in <solid>; - sml: add a utility function: look into the valueByTag dictionary for a tag contained in tags; - sml: adding a warning if a vertex group is empty; - sml: can have offsets under solids; - sml: remove deprecated setTagFromTag() method; - API: add subsetFromDeformables function; - binding Node::isInitialized; - binding loadPythonSceneWithArguments; - adding a binding to get the pointer of a Data (with its dimensions and type); - adding binding of BaseMapping::getJs (as dense matrices for now); - adding python functions to convert a Data in a numpy array with shared memory; - adding a visitor to set all mstates as non pickable (such as picking will only be performed with collision models); - add tags to mesh groups; - add a groupsByTag dict to easily iterate over groups knowing a tag; - add of SceneDataIO to save and load the current state of a simulation; - add of the method getDataFields; - adding automatically tested examples; - add tags to MeshAttributes; - add a helper PythonScriptFunction_call and PythonScriptFunction_callNoResult to call a python controller function from c++ code; - PythonScriptHelper -> PythonScriptControllerHelper: PythonScriptHelper: add convertion for float and std::string; - Add the timingEnabled attribute to the PythonScriptController to control if the script is gather timing statistics; - adding python module to load .obj files; - adding BaseContext_getObject_noWarning that returns None w/o warning if the object is not,MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:351325,Usability,simpl,simple,351325," the PythonFactory, so more specific cases can be added outside of the plugin SofaPython.; - adding Node::addObject_noWarning not to print a warning when adding an object to an already initialized node; - add of a method which compute quaternion from a line define by a director vector; - add of few new features to save and load the current state of simulation. - [Flexible]; - adding FlexibleCorotationalMeshFEMForceField (meta-forcefield). Not optimized but working; - add of RigidScale mapping in addition to their tests and examples; - HexaFEM comparison: each method has its own solver and uses the same decomposition so the only difference came from the deformation tensor used to find the rotation.; - Flexible: WIP adding a meta-forcefield to compute regular corotational FEM. The idea is to use Flexible's components internally without adding extra computation neither extra memory; - API: add strain offseting option; - API: strainMappings as data members; - API: use branching images for mass computation; - API: make AffineMass, ShapeFunction, Behavior work in more cases; - API: make Behavior work in simple cases with no label image; - materials: removed checking for changed parameters at each step.; - add example showing how to better handle partially filled elements using fine volumes; - optimizing FlexibleCorotationalMeshFEMForceField by preassembling constant sub-graph; - refactoring of MassFromDensity; - adding a warning when creating a UniformMass on Affine/Quadratic frames.; - add FEMDof class to python API; - DeformationMapping: print a warning if a child particle has no parent; - adding HEML implementation of St Venant-Kirchhoff materials (for tetrahedra).; - if correct weights are given in mapping as input data, use it (even if a shapefunction is found); - use sout for logging; - compute tangents for VisualModel loaded using loadVisual python function; - transformEngine for Affine frames. - [Compliant]; - sml: export of meshes; - sml: the solids tags to be si",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:352517,Usability,simpl,simplify,352517,"python API; - DeformationMapping: print a warning if a child particle has no parent; - adding HEML implementation of St Venant-Kirchhoff materials (for tetrahedra).; - if correct weights are given in mapping as input data, use it (even if a shapefunction is found); - use sout for logging; - compute tangents for VisualModel loaded using loadVisual python function; - transformEngine for Affine frames. - [Compliant]; - sml: export of meshes; - sml: the solids tags to be simulated as rigids are gathered in a set(); - sml: geometricStiffness option; - sml: using logger; - implementing compliance unassembled API; - in the python API, joints can be created in compliance or not; - API: write a addSpring() in GenericRigidJoint, reuse it in children classes where possible; - API: simplify usage of jointCompliance specification by tag; - API: relative offset position is given to the AssembledRigidRigidMapping, and then computed at init into the MO; - API: modifying the API to move an Offset; - API: adding Offset::moveOffset to apply a rigid transformation to an offset (in its local frame); - API: new parameter to add non-mechanical Offsets and MappedPoints; - API: collision mesh and visual model can be added to a Rigid Offset; - adding an automatic execution of a scene based on a sml description; - Constraint: adding a typeid for faster Constraint type comparisons; - adding short name to create a ConstantCompliantPseudoStaticSolver; - using tag on joints in a generic way, set their compliance / isCompliance value; - added machinery to map data to numpy arrays, see example/numpy_data.py; - added easy pure python mappings, see examples/numpy_mapping.py; - added pure python forcefields, see examples/numpy_forcefield.py; - AssembledRigidRigidMapping autoresize; - geometric stiffness in python mappings; - insertMergeRigid is coherent with solid tags usage; - CompliantPseudoStaticSolver: avoiding an unnecessary propagation when the stopping criterion is the nb of iterations.; - visua",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:355681,Usability,simpl,simpler,355681,"ces.; - adding SafeDistanceFromTargetMapping; - using the new SofaPython API; - SafeDistanceFromTargetMapping can now be ""safe"" by giving the edge directions when they are known; - adding the SofaCompliant python module (first module created outside of SofaPython!); - adding DotProductFromTargetMapping (with test); - adding RigidJointFromTargetMapping and RigidJointFromWorldFrameMapping; - add of complementary API to create deformable articulated systems; - adding NegativeUnilateralConstraint to guarantee negativeness; - adding PenaltyForceField and using it in penalty contact response; - add of two file from the SohusimDev plugin. - [image]; - API: Sampler.addMechanicalObject() more versatile; - API: refactor python API; - API: add addClosingVisual(); - add function in python API to retrieve perspective property; - MeshToImageEngine: move getValue out of for loops; - add a python ImagePlaneController; - Data<Image<T>> are now specifically bound in python; - remove pthread and X11 dependencies; - add metaimage tags that may be used to define orientation; - add python function to retrieve image type; - simpler imagePlane python controller; - add a createTransferFunction method; - improved cutplane texture resolution; - half perspective, half orthographic image transforms; - add imageCoordValuesFromPositions engine. ### Bug Fixes. - [PluginManager] crashed when a plugin was removed; - [SofaCUDA] fix the compilation using SofaCUDA on Windows; - unstable behavior of masks - USE-MASK variable added; - fix DAGNode traversal when a visitor is run from a node with a not up-to-date descendancy; - fix flaws in glText (memory leak and an other bug); - EigenBaseSparseMatrix: fix parallel matrix-vector product; - XML export. - Minor fix; - Sofa helper: leak when drawing 3d text; - compilation with SofaDumpVisitor flag enabled; - compilation of BezierTriangleSetGeometryAlgorithms (color changed from Vec3f to Vec4f); - runSofa: viewport aspect issue and loss of interaction in QtGLV",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md:359702,Usability,clear,clear,359702,"OptiTrackNatNet from ""options"" configurations; - ignore some OptiTrackNatNet scenes testing. - [SofaPython]; - fix GridTopology type on the python side; - fix OBJ loader; - fix loading a scene from a .py in a Node independently from the awful Simulation singleton.; - fix SofaPython.Tools.localPath in some situations; - fix BaseContext_getObjects so it can select objects from a base class name (and adding an example); - quaternion: fix singularity in from_line function. - [Flexible]; - fix case sensitive issues; - API: fix a bug with colors when reloading a scene; - fix the bulk factor in NeoHookean material; - fix NeoHookean traction test; - testing detachFromGraph; - BaseDeformationMapping: remove debug message, fix usage of sout (no need for testing f_printLog); - fix test compilation w/o image plugin; - fix loadVisual; - fix bug in topologygausspointsampler (computation of volume integrals for irregular hexa). - [Compliant]; - CompliantImplicitSolver: fix Lagrange multipliers clear when reseting the simulation; - auto-fix init errors in RigidMass; - Frame.py: adding tolist() conversion; - fix Jacobian reserved size; - fix contacts and associated test. - [image]; - python tools: fix bug in mhd parsing; - MeshToImage: fix bresenham, be sure dmax>=1; - fix resampling of projection images, and marching cubes default parameter; - fix bug in mhd file loader; - fix rasterization when using vertex colors. ### Cleanings. - warnings were removed; - dead branches were removed; - the ‘using’ directives were removed in header files; - the repository sofa_root/modules/sofa/components has been cleaned (deprecated components removed); - clean many SOFA examples; - removing ""using helper::vector"" from VecTypes.h; - SofaQtGui: Remove qt3 remnants in ui files. - Minor clean; - clean SofaBaseCollision of OpenGL dependency; - cleaning Material::setColor; - Base: write sout as info (rather than warnings); - clean and fix RestShapeSpringsForceField draw functions; - Remove useless tests",MatchSource.DOCS,CHANGELOG.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CHANGELOG.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:582,Availability,mainten,maintenance,582,"# Welcome. Welcome to the SOFA Community! Here is a brief summary of how it is structured:. - SOFA Users: people using SOFA by writing scenes or using the SOFA API.; - SOFA Developers: people programming into SOFA, modifying the API, writing plugins.; - SOFA Contributors: (awesome) people proposing their changes in SOFA code via pull-requests.; - SOFA Reviewers: people reviewing and merging the pull-requests. This group is validated by the Scientific and Technical Committee (STC).; - SOFA Consortium: research centers and companies willing to share the cost of development and maintenance of SOFA, hosted by Inria.; - SOFA Consortium Staff: administrators of SOFA and its ecosystem. This group is directed by the Executive Committee (EC). All SOFA Developers are gladly invited to the SOFA-dev meetings. ; They take place remotely every Wednesday at 10 a.m. CET and are animated by the SOFA Reviewers + the Consortium Staff. ; [Subscribe to SOFA-dev mailing-list](https://sympa.inria.fr/sympa/subscribe/sofa-dev) to get the agenda, reports and conference room url. About the steering committees:. - SOFA Scientific and Technical Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understandi",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:1485,Availability,avail,available,1485,"C).; - SOFA Consortium: research centers and companies willing to share the cost of development and maintenance of SOFA, hosted by Inria.; - SOFA Consortium Staff: administrators of SOFA and its ecosystem. This group is directed by the Executive Committee (EC). All SOFA Developers are gladly invited to the SOFA-dev meetings. ; They take place remotely every Wednesday at 10 a.m. CET and are animated by the SOFA Reviewers + the Consortium Staff. ; [Subscribe to SOFA-dev mailing-list](https://sympa.inria.fr/sympa/subscribe/sofa-dev) to get the agenda, reports and conference room url. About the steering committees:. - SOFA Scientific and Technical Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understanding SOFA, announcements), create a topic on [the SOFA GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) and benefit from the feedback of the community. When creating a new topic, pay attention to some tips:. - **Check existing topics** using the Search bar. Your question may have been answered already.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - **Addi",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:8223,Availability,avail,available,8223,"/uploads/2022/06/GitHub-PR-review-workflow.png"" alt=""PullRequestProcess"" style=""width:75%""><figcaption align = ""center""><b>Workflow of a PR review</b></figcaption></figure></center>. For more information on forks and pull request, check out [this GitHub guide](https://guides.github.com/activities/forking/). ### SOFA Developer Certificate Of Origin (DCO). SOFA is using the [mechanism of the linux project](https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin) to track and secure all issues related to copyrights: the Developper Certificate of Origin (DCO). If you are contributing code or documentation to the SOFA project, and using the git signed-off-by mechanism, you are agreeing to this certificate. This DCO essentially means that:. - you offer the changes under the same license agreement as the project, and; - you have the right to do that,; - you did not steal somebody else’s work. The original DCO is available online : [http://developercertificate.org](http://developercertificate.org). ```; Developer Certificate of Origin; Version 1.1. Copyright (C) 2004, 2006 The Linux Foundation and its contributors.; 1 Letterman Drive; Suite D4700; San Francisco, CA, 94129. Everyone is permitted to copy and distribute verbatim copies of this; license document, but changing it is not allowed. Developer's Certificate of Origin 1.1. By making a contribution to this project, I certify that:. (a) The contribution was created in whole or in part by me and I; have the right to submit it under the open source license; indicated in the file; or. (b) The contribution is based upon previous work that, to the best; of my knowledge, is covered under an appropriate open source; license and I have the right under that license to submit that; work with modifications, whether created in whole or in part; by me, under the same open source license (unless I am; permitted to submit under a different license), as indicated; in th",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:3779,Deployability,patch,patch,3779,""" are also used for larger topics: architecture, future of SOFA, long term dev, etc. Please **DO NOT create an issue for questions or support**. Use [the GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) instead. When creating an issue, pay attention to the following tips:. - **Check existing issues**. What you are running into may have been addressed already.; - **Set the right label** to your issue among our label list or propose them in the description.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - If your issue reports a bug or any abnormal behavior in SOFA, a **test highlighting the issue** should be written and pull requested. For more information on issues, check out [this GitHub guide](https://guides.github.com/features/issues/). . # Pull requests. If you are able to patch the bug or add the feature yourself – fantastic, make a pull request with the code! Be sure you have read any documents on contributing and you understand [the SOFA license](https://github.com/sofa-framework/sofa/blob/master/LICENCE.txt). Once you have submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes. ### Reminder - How to pull request (from GitHub documentation). - **[Fork](http://guides.github.com/activities/forking/)** the repository and clone it locally.; - [Connect your clone](https://help.github.com/articles/configuring-a-remote-for-a-fork/) to [the original **upstream** repository](https://github.com/sofa-framework/sofa/) by adding it as a remote.; - **Create a branch** for your changes.; - Make your changes.; - Pull in changes from upstream often to [**sync your fork**](https://help.github.com/articles/syncing-a-fork/) so that merge conflicts will be less likely in your pull request.; - [**Create a pull request**](https://help.github.com/articles/creating-a-",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:7702,Deployability,patch,patches,7702,"o delay the merge and avoid CI overflow.; - **Control the builds**: Dashboard > Details in the pull request checks.; - Merge method: **prefer ""merge""** or ""squash"" over ""rebase"". Remember that:. - You can **add commits** in a pull request: see [GitHub documentation](https://help.github.com/articles/committing-changes-to-a-pull-request-branch-created-from-a-fork/).; - If the pull request contains out of scope commits (from a previous merge with master), **consider rebasing it**. <center><figure><img src=""https://www.sofa-framework.org/wp-content/uploads/2022/06/GitHub-PR-review-workflow.png"" alt=""PullRequestProcess"" style=""width:75%""><figcaption align = ""center""><b>Workflow of a PR review</b></figcaption></figure></center>. For more information on forks and pull request, check out [this GitHub guide](https://guides.github.com/activities/forking/). ### SOFA Developer Certificate Of Origin (DCO). SOFA is using the [mechanism of the linux project](https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin) to track and secure all issues related to copyrights: the Developper Certificate of Origin (DCO). If you are contributing code or documentation to the SOFA project, and using the git signed-off-by mechanism, you are agreeing to this certificate. This DCO essentially means that:. - you offer the changes under the same license agreement as the project, and; - you have the right to do that,; - you did not steal somebody else’s work. The original DCO is available online : [http://developercertificate.org](http://developercertificate.org). ```; Developer Certificate of Origin; Version 1.1. Copyright (C) 2004, 2006 The Linux Foundation and its contributors.; 1 Letterman Drive; Suite D4700; San Francisco, CA, 94129. Everyone is permitted to copy and distribute verbatim copies of this; license document, but changing it is not allowed. Developer's Certificate of Origin 1.1. By making a contribution to this project",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:1364,Integrability,contract,contract,1364,"s: people reviewing and merging the pull-requests. This group is validated by the Scientific and Technical Committee (STC).; - SOFA Consortium: research centers and companies willing to share the cost of development and maintenance of SOFA, hosted by Inria.; - SOFA Consortium Staff: administrators of SOFA and its ecosystem. This group is directed by the Executive Committee (EC). All SOFA Developers are gladly invited to the SOFA-dev meetings. ; They take place remotely every Wednesday at 10 a.m. CET and are animated by the SOFA Reviewers + the Consortium Staff. ; [Subscribe to SOFA-dev mailing-list](https://sympa.inria.fr/sympa/subscribe/sofa-dev) to get the agenda, reports and conference room url. About the steering committees:. - SOFA Scientific and Technical Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understanding SOFA, announcements), create a topic on [the SOFA GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) and benefit from the feedback of the community. When creating a new topic, pay attention to some tips:. - **Check existing topics** using the Search bar. Your question may have been answered already.; - **Be clear** about what your probl",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:242,Modifiability,plugin,plugins,242,"# Welcome. Welcome to the SOFA Community! Here is a brief summary of how it is structured:. - SOFA Users: people using SOFA by writing scenes or using the SOFA API.; - SOFA Developers: people programming into SOFA, modifying the API, writing plugins.; - SOFA Contributors: (awesome) people proposing their changes in SOFA code via pull-requests.; - SOFA Reviewers: people reviewing and merging the pull-requests. This group is validated by the Scientific and Technical Committee (STC).; - SOFA Consortium: research centers and companies willing to share the cost of development and maintenance of SOFA, hosted by Inria.; - SOFA Consortium Staff: administrators of SOFA and its ecosystem. This group is directed by the Executive Committee (EC). All SOFA Developers are gladly invited to the SOFA-dev meetings. ; They take place remotely every Wednesday at 10 a.m. CET and are animated by the SOFA Reviewers + the Consortium Staff. ; [Subscribe to SOFA-dev mailing-list](https://sympa.inria.fr/sympa/subscribe/sofa-dev) to get the agenda, reports and conference room url. About the steering committees:. - SOFA Scientific and Technical Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understandi",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:4407,Modifiability,config,configuring-a-remote-for-a-fork,4407," Detail how someone else can recreate the problem.; - If your issue reports a bug or any abnormal behavior in SOFA, a **test highlighting the issue** should be written and pull requested. For more information on issues, check out [this GitHub guide](https://guides.github.com/features/issues/). . # Pull requests. If you are able to patch the bug or add the feature yourself – fantastic, make a pull request with the code! Be sure you have read any documents on contributing and you understand [the SOFA license](https://github.com/sofa-framework/sofa/blob/master/LICENCE.txt). Once you have submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes. ### Reminder - How to pull request (from GitHub documentation). - **[Fork](http://guides.github.com/activities/forking/)** the repository and clone it locally.; - [Connect your clone](https://help.github.com/articles/configuring-a-remote-for-a-fork/) to [the original **upstream** repository](https://github.com/sofa-framework/sofa/) by adding it as a remote.; - **Create a branch** for your changes.; - Make your changes.; - Pull in changes from upstream often to [**sync your fork**](https://help.github.com/articles/syncing-a-fork/) so that merge conflicts will be less likely in your pull request.; - [**Create a pull request**](https://help.github.com/articles/creating-a-pull-request-from-a-fork/) when you are ready to propose your changes into the main project. ### Start easy and simple. For newcomers in the community, we regularly identify issues easy to tackle and to get started with, using a [label ""*good first issue*""](https://github.com/sofa-framework/sofa/issues?q=label%3A%22good+first+issue%22). Choose one, solve it and create your first pull request!. ### Rules. - Description must explain the **issue solved** or the **feature added**, and this must be reported in the **[CHANGELOG.md](https://github.com/sofa-framework/sofa/blob/mas",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:6708,Safety,avoid,avoid,6708,"required for each new component or if an issue is fixed.; - **Examples** (at least one) must be provided showing the new feature. ### Management of pull requests. Standard pull-requests are reviewed and approved by the ""Reviewers"" team. ; Major pull-requests (BREAKING, major features) are reviewed by the ""Reviewers"" team and approved by the ""STC members"" team through a vote within a maximum period of 2 weeks. Reviewing:. - Make sure the pull request is **labelized** and well assigned.; - Control that it follows **our rules** (defined above).; - Track the **status of each pull request** using the dedicated labels:; - ""pr: wip"" must be set if the PR has been created for a team work or if some fixes are needed (discussed in the comments).; - ""pr: to review"" must be set if the PR is ready to be reviewed. ; - ""pr: ready"" must be set **instead of merge** if another PR merge is being built on the [Dashboard](https://www.sofa-framework.org/dash/?branch=origin/master). It is used to delay the merge and avoid CI overflow.; - **Control the builds**: Dashboard > Details in the pull request checks.; - Merge method: **prefer ""merge""** or ""squash"" over ""rebase"". Remember that:. - You can **add commits** in a pull request: see [GitHub documentation](https://help.github.com/articles/committing-changes-to-a-pull-request-branch-created-from-a-fork/).; - If the pull request contains out of scope commits (from a previous merge with master), **consider rebasing it**. <center><figure><img src=""https://www.sofa-framework.org/wp-content/uploads/2022/06/GitHub-PR-review-workflow.png"" alt=""PullRequestProcess"" style=""width:75%""><figcaption align = ""center""><b>Workflow of a PR review</b></figcaption></figure></center>. For more information on forks and pull request, check out [this GitHub guide](https://guides.github.com/activities/forking/). ### SOFA Developer Certificate Of Origin (DCO). SOFA is using the [mechanism of the linux project](https://www.kernel.org/doc/html/latest/process/submittin",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:427,Security,validat,validated,427,"# Welcome. Welcome to the SOFA Community! Here is a brief summary of how it is structured:. - SOFA Users: people using SOFA by writing scenes or using the SOFA API.; - SOFA Developers: people programming into SOFA, modifying the API, writing plugins.; - SOFA Contributors: (awesome) people proposing their changes in SOFA code via pull-requests.; - SOFA Reviewers: people reviewing and merging the pull-requests. This group is validated by the Scientific and Technical Committee (STC).; - SOFA Consortium: research centers and companies willing to share the cost of development and maintenance of SOFA, hosted by Inria.; - SOFA Consortium Staff: administrators of SOFA and its ecosystem. This group is directed by the Executive Committee (EC). All SOFA Developers are gladly invited to the SOFA-dev meetings. ; They take place remotely every Wednesday at 10 a.m. CET and are animated by the SOFA Reviewers + the Consortium Staff. ; [Subscribe to SOFA-dev mailing-list](https://sympa.inria.fr/sympa/subscribe/sofa-dev) to get the agenda, reports and conference room url. About the steering committees:. - SOFA Scientific and Technical Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understandi",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:1195,Security,validat,validate,1195,"gramming into SOFA, modifying the API, writing plugins.; - SOFA Contributors: (awesome) people proposing their changes in SOFA code via pull-requests.; - SOFA Reviewers: people reviewing and merging the pull-requests. This group is validated by the Scientific and Technical Committee (STC).; - SOFA Consortium: research centers and companies willing to share the cost of development and maintenance of SOFA, hosted by Inria.; - SOFA Consortium Staff: administrators of SOFA and its ecosystem. This group is directed by the Executive Committee (EC). All SOFA Developers are gladly invited to the SOFA-dev meetings. ; They take place remotely every Wednesday at 10 a.m. CET and are animated by the SOFA Reviewers + the Consortium Staff. ; [Subscribe to SOFA-dev mailing-list](https://sympa.inria.fr/sympa/subscribe/sofa-dev) to get the agenda, reports and conference room url. About the steering committees:. - SOFA Scientific and Technical Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understanding SOFA, announcements), create a topic on [the SOFA GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) and benefit from the feedback of the community. When creating a new t",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:7746,Security,certificate,certificate-of-origin,7746,"quest checks.; - Merge method: **prefer ""merge""** or ""squash"" over ""rebase"". Remember that:. - You can **add commits** in a pull request: see [GitHub documentation](https://help.github.com/articles/committing-changes-to-a-pull-request-branch-created-from-a-fork/).; - If the pull request contains out of scope commits (from a previous merge with master), **consider rebasing it**. <center><figure><img src=""https://www.sofa-framework.org/wp-content/uploads/2022/06/GitHub-PR-review-workflow.png"" alt=""PullRequestProcess"" style=""width:75%""><figcaption align = ""center""><b>Workflow of a PR review</b></figcaption></figure></center>. For more information on forks and pull request, check out [this GitHub guide](https://guides.github.com/activities/forking/). ### SOFA Developer Certificate Of Origin (DCO). SOFA is using the [mechanism of the linux project](https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin) to track and secure all issues related to copyrights: the Developper Certificate of Origin (DCO). If you are contributing code or documentation to the SOFA project, and using the git signed-off-by mechanism, you are agreeing to this certificate. This DCO essentially means that:. - you offer the changes under the same license agreement as the project, and; - you have the right to do that,; - you did not steal somebody else’s work. The original DCO is available online : [http://developercertificate.org](http://developercertificate.org). ```; Developer Certificate of Origin; Version 1.1. Copyright (C) 2004, 2006 The Linux Foundation and its contributors.; 1 Letterman Drive; Suite D4700; San Francisco, CA, 94129. Everyone is permitted to copy and distribute verbatim copies of this; license document, but changing it is not allowed. Developer's Certificate of Origin 1.1. By making a contribution to this project, I certify that:. (a) The contribution was created in whole or in part by me and I; have the right t",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:7782,Security,secur,secure,7782,"quest checks.; - Merge method: **prefer ""merge""** or ""squash"" over ""rebase"". Remember that:. - You can **add commits** in a pull request: see [GitHub documentation](https://help.github.com/articles/committing-changes-to-a-pull-request-branch-created-from-a-fork/).; - If the pull request contains out of scope commits (from a previous merge with master), **consider rebasing it**. <center><figure><img src=""https://www.sofa-framework.org/wp-content/uploads/2022/06/GitHub-PR-review-workflow.png"" alt=""PullRequestProcess"" style=""width:75%""><figcaption align = ""center""><b>Workflow of a PR review</b></figcaption></figure></center>. For more information on forks and pull request, check out [this GitHub guide](https://guides.github.com/activities/forking/). ### SOFA Developer Certificate Of Origin (DCO). SOFA is using the [mechanism of the linux project](https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin) to track and secure all issues related to copyrights: the Developper Certificate of Origin (DCO). If you are contributing code or documentation to the SOFA project, and using the git signed-off-by mechanism, you are agreeing to this certificate. This DCO essentially means that:. - you offer the changes under the same license agreement as the project, and; - you have the right to do that,; - you did not steal somebody else’s work. The original DCO is available online : [http://developercertificate.org](http://developercertificate.org). ```; Developer Certificate of Origin; Version 1.1. Copyright (C) 2004, 2006 The Linux Foundation and its contributors.; 1 Letterman Drive; Suite D4700; San Francisco, CA, 94129. Everyone is permitted to copy and distribute verbatim copies of this; license document, but changing it is not allowed. Developer's Certificate of Origin 1.1. By making a contribution to this project, I certify that:. (a) The contribution was created in whole or in part by me and I; have the right t",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:8002,Security,certificate,certificate,8002,"cumentation](https://help.github.com/articles/committing-changes-to-a-pull-request-branch-created-from-a-fork/).; - If the pull request contains out of scope commits (from a previous merge with master), **consider rebasing it**. <center><figure><img src=""https://www.sofa-framework.org/wp-content/uploads/2022/06/GitHub-PR-review-workflow.png"" alt=""PullRequestProcess"" style=""width:75%""><figcaption align = ""center""><b>Workflow of a PR review</b></figcaption></figure></center>. For more information on forks and pull request, check out [this GitHub guide](https://guides.github.com/activities/forking/). ### SOFA Developer Certificate Of Origin (DCO). SOFA is using the [mechanism of the linux project](https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin) to track and secure all issues related to copyrights: the Developper Certificate of Origin (DCO). If you are contributing code or documentation to the SOFA project, and using the git signed-off-by mechanism, you are agreeing to this certificate. This DCO essentially means that:. - you offer the changes under the same license agreement as the project, and; - you have the right to do that,; - you did not steal somebody else’s work. The original DCO is available online : [http://developercertificate.org](http://developercertificate.org). ```; Developer Certificate of Origin; Version 1.1. Copyright (C) 2004, 2006 The Linux Foundation and its contributors.; 1 Letterman Drive; Suite D4700; San Francisco, CA, 94129. Everyone is permitted to copy and distribute verbatim copies of this; license document, but changing it is not allowed. Developer's Certificate of Origin 1.1. By making a contribution to this project, I certify that:. (a) The contribution was created in whole or in part by me and I; have the right to submit it under the open source license; indicated in the file; or. (b) The contribution is based upon previous work that, to the best; of my knowledg",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:3566,Testability,test,test,3566," For **bug tracking**, **feature proposals** and **task management**, create a [SOFA issue](https://github.com/sofa-framework/sofa/issues)! There is nothing to it and whatever issue you are having, you are likely not the only one, so others will find your issue helpful, too. Issues labeled ""discussion"" are also used for larger topics: architecture, future of SOFA, long term dev, etc. Please **DO NOT create an issue for questions or support**. Use [the GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) instead. When creating an issue, pay attention to the following tips:. - **Check existing issues**. What you are running into may have been addressed already.; - **Set the right label** to your issue among our label list or propose them in the description.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - If your issue reports a bug or any abnormal behavior in SOFA, a **test highlighting the issue** should be written and pull requested. For more information on issues, check out [this GitHub guide](https://guides.github.com/features/issues/). . # Pull requests. If you are able to patch the bug or add the feature yourself – fantastic, make a pull request with the code! Be sure you have read any documents on contributing and you understand [the SOFA license](https://github.com/sofa-framework/sofa/blob/master/LICENCE.txt). Once you have submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes. ### Reminder - How to pull request (from GitHub documentation). - **[Fork](http://guides.github.com/activities/forking/)** the repository and clone it locally.; - [Connect your clone](https://help.github.com/articles/configuring-a-remote-for-a-fork/) to [the original **upstream** repository](https://github.com/sofa-framework/sofa/) by adding it as a remote.; - **Create a b",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:5658,Testability,test,tests,5658,"nges from upstream often to [**sync your fork**](https://help.github.com/articles/syncing-a-fork/) so that merge conflicts will be less likely in your pull request.; - [**Create a pull request**](https://help.github.com/articles/creating-a-pull-request-from-a-fork/) when you are ready to propose your changes into the main project. ### Start easy and simple. For newcomers in the community, we regularly identify issues easy to tackle and to get started with, using a [label ""*good first issue*""](https://github.com/sofa-framework/sofa/issues?q=label%3A%22good+first+issue%22). Choose one, solve it and create your first pull request!. ### Rules. - Description must explain the **issue solved** or the **feature added**, and this must be reported in the **[CHANGELOG.md](https://github.com/sofa-framework/sofa/blob/master/CHANGELOG.md)** file.; - Code must follow **[our guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md)**.; - Commit must build **successfully** on Jenkins for all steps (compilation + tests + examples).; - **Unit Tests** are required for each new component or if an issue is fixed.; - **Examples** (at least one) must be provided showing the new feature. ### Management of pull requests. Standard pull-requests are reviewed and approved by the ""Reviewers"" team. ; Major pull-requests (BREAKING, major features) are reviewed by the ""Reviewers"" team and approved by the ""STC members"" team through a vote within a maximum period of 2 weeks. Reviewing:. - Make sure the pull request is **labelized** and well assigned.; - Control that it follows **our rules** (defined above).; - Track the **status of each pull request** using the dedicated labels:; - ""pr: wip"" must be set if the PR has been created for a team work or if some fixes are needed (discussed in the comments).; - ""pr: to review"" must be set if the PR is ready to be reviewed. ; - ""pr: ready"" must be set **instead of merge** if another PR merge is being built on the [Dashboard](https://www.so",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:1632,Usability,guid,guide,1632,"Staff: administrators of SOFA and its ecosystem. This group is directed by the Executive Committee (EC). All SOFA Developers are gladly invited to the SOFA-dev meetings. ; They take place remotely every Wednesday at 10 a.m. CET and are animated by the SOFA Reviewers + the Consortium Staff. ; [Subscribe to SOFA-dev mailing-list](https://sympa.inria.fr/sympa/subscribe/sofa-dev) to get the agenda, reports and conference room url. About the steering committees:. - SOFA Scientific and Technical Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understanding SOFA, announcements), create a topic on [the SOFA GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) and benefit from the feedback of the community. When creating a new topic, pay attention to some tips:. - **Check existing topics** using the Search bar. Your question may have been answered already.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - **Additional infos**: link to demos, screenshots or code showing the problem. # Issues. For **bug tracking**, **feature proposals** and **task management**, creat",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:1678,Usability,guid,guides,1678,"Staff: administrators of SOFA and its ecosystem. This group is directed by the Executive Committee (EC). All SOFA Developers are gladly invited to the SOFA-dev meetings. ; They take place remotely every Wednesday at 10 a.m. CET and are animated by the SOFA Reviewers + the Consortium Staff. ; [Subscribe to SOFA-dev mailing-list](https://sympa.inria.fr/sympa/subscribe/sofa-dev) to get the agenda, reports and conference room url. About the steering committees:. - SOFA Scientific and Technical Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understanding SOFA, announcements), create a topic on [the SOFA GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) and benefit from the feedback of the community. When creating a new topic, pay attention to some tips:. - **Check existing topics** using the Search bar. Your question may have been answered already.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - **Additional infos**: link to demos, screenshots or code showing the problem. # Issues. For **bug tracking**, **feature proposals** and **task management**, creat",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:2147,Usability,feedback,feedback,2147,"al Committee (STC): defines the technical roadmap twice a year, validate the contribution rules, the Reviewers team and discuss every technical point in SOFA.; - SOFA Executive Committee (EC): decides on evolutions of the membership contract, the communication policy and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understanding SOFA, announcements), create a topic on [the SOFA GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) and benefit from the feedback of the community. When creating a new topic, pay attention to some tips:. - **Check existing topics** using the Search bar. Your question may have been answered already.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - **Additional infos**: link to demos, screenshots or code showing the problem. # Issues. For **bug tracking**, **feature proposals** and **task management**, create a [SOFA issue](https://github.com/sofa-framework/sofa/issues)! There is nothing to it and whatever issue you are having, you are likely not the only one, so others will find your issue helpful, too. Issues labeled ""discussion"" are also used for larger topics: architecture, future of SOFA, long term dev, etc. Please **DO NOT create an issue for questions or support**. Use [the GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) instead. When creating an issue, pay at",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:2334,Usability,clear,clear,2334,"and the priorities of the Consortium. A more detailed definition of the committees is available [in the SOFA website](https://www.sofa-framework.org/consortium/presentation/). # Getting started. Please **read carefully** [the GitHub guide on Contributing to Open Source](https://guides.github.com/activities/contributing-to-open-source/). We also recommend you to check this [more detailed documentation on issues and pull requests](https://help.github.com/categories/collaborating-with-issues-and-pull-requests/). # Support - Discussion forum. For any **question** (help needed, problem of understanding SOFA, announcements), create a topic on [the SOFA GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) and benefit from the feedback of the community. When creating a new topic, pay attention to some tips:. - **Check existing topics** using the Search bar. Your question may have been answered already.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - **Additional infos**: link to demos, screenshots or code showing the problem. # Issues. For **bug tracking**, **feature proposals** and **task management**, create a [SOFA issue](https://github.com/sofa-framework/sofa/issues)! There is nothing to it and whatever issue you are having, you are likely not the only one, so others will find your issue helpful, too. Issues labeled ""discussion"" are also used for larger topics: architecture, future of SOFA, long term dev, etc. Please **DO NOT create an issue for questions or support**. Use [the GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) instead. When creating an issue, pay attention to the following tips:. - **Check existing issues**. What you are running into may have been addressed already.; - **Set the right label** to your issue among our label list or propose them in the description.; - **Be clear** about what your problem is: what w",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:3357,Usability,clear,clear,3357,"? Detail how someone else can recreate the problem.; - **Additional infos**: link to demos, screenshots or code showing the problem. # Issues. For **bug tracking**, **feature proposals** and **task management**, create a [SOFA issue](https://github.com/sofa-framework/sofa/issues)! There is nothing to it and whatever issue you are having, you are likely not the only one, so others will find your issue helpful, too. Issues labeled ""discussion"" are also used for larger topics: architecture, future of SOFA, long term dev, etc. Please **DO NOT create an issue for questions or support**. Use [the GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) instead. When creating an issue, pay attention to the following tips:. - **Check existing issues**. What you are running into may have been addressed already.; - **Set the right label** to your issue among our label list or propose them in the description.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - If your issue reports a bug or any abnormal behavior in SOFA, a **test highlighting the issue** should be written and pull requested. For more information on issues, check out [this GitHub guide](https://guides.github.com/features/issues/). . # Pull requests. If you are able to patch the bug or add the feature yourself – fantastic, make a pull request with the code! Be sure you have read any documents on contributing and you understand [the SOFA license](https://github.com/sofa-framework/sofa/blob/master/LICENCE.txt). Once you have submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes. ### Reminder - How to pull request (from GitHub documentation). - **[Fork](http://guides.github.com/activities/forking/)** the repository and clone it locally.; - [Connect your clone](https://help.github.com/articles/configuring-a-r",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:3689,Usability,guid,guide,3689,"om/sofa-framework/sofa/issues)! There is nothing to it and whatever issue you are having, you are likely not the only one, so others will find your issue helpful, too. Issues labeled ""discussion"" are also used for larger topics: architecture, future of SOFA, long term dev, etc. Please **DO NOT create an issue for questions or support**. Use [the GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) instead. When creating an issue, pay attention to the following tips:. - **Check existing issues**. What you are running into may have been addressed already.; - **Set the right label** to your issue among our label list or propose them in the description.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - If your issue reports a bug or any abnormal behavior in SOFA, a **test highlighting the issue** should be written and pull requested. For more information on issues, check out [this GitHub guide](https://guides.github.com/features/issues/). . # Pull requests. If you are able to patch the bug or add the feature yourself – fantastic, make a pull request with the code! Be sure you have read any documents on contributing and you understand [the SOFA license](https://github.com/sofa-framework/sofa/blob/master/LICENCE.txt). Once you have submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes. ### Reminder - How to pull request (from GitHub documentation). - **[Fork](http://guides.github.com/activities/forking/)** the repository and clone it locally.; - [Connect your clone](https://help.github.com/articles/configuring-a-remote-for-a-fork/) to [the original **upstream** repository](https://github.com/sofa-framework/sofa/) by adding it as a remote.; - **Create a branch** for your changes.; - Make your changes.; - Pull in changes from upstream often to [**sync your fork",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:3704,Usability,guid,guides,3704,"om/sofa-framework/sofa/issues)! There is nothing to it and whatever issue you are having, you are likely not the only one, so others will find your issue helpful, too. Issues labeled ""discussion"" are also used for larger topics: architecture, future of SOFA, long term dev, etc. Please **DO NOT create an issue for questions or support**. Use [the GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) instead. When creating an issue, pay attention to the following tips:. - **Check existing issues**. What you are running into may have been addressed already.; - **Set the right label** to your issue among our label list or propose them in the description.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - If your issue reports a bug or any abnormal behavior in SOFA, a **test highlighting the issue** should be written and pull requested. For more information on issues, check out [this GitHub guide](https://guides.github.com/features/issues/). . # Pull requests. If you are able to patch the bug or add the feature yourself – fantastic, make a pull request with the code! Be sure you have read any documents on contributing and you understand [the SOFA license](https://github.com/sofa-framework/sofa/blob/master/LICENCE.txt). Once you have submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes. ### Reminder - How to pull request (from GitHub documentation). - **[Fork](http://guides.github.com/activities/forking/)** the repository and clone it locally.; - [Connect your clone](https://help.github.com/articles/configuring-a-remote-for-a-fork/) to [the original **upstream** repository](https://github.com/sofa-framework/sofa/) by adding it as a remote.; - **Create a branch** for your changes.; - Make your changes.; - Pull in changes from upstream often to [**sync your fork",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:4272,Usability,guid,guides,4272,"ght label** to your issue among our label list or propose them in the description.; - **Be clear** about what your problem is: what was the expected outcome, what happened instead? Detail how someone else can recreate the problem.; - If your issue reports a bug or any abnormal behavior in SOFA, a **test highlighting the issue** should be written and pull requested. For more information on issues, check out [this GitHub guide](https://guides.github.com/features/issues/). . # Pull requests. If you are able to patch the bug or add the feature yourself – fantastic, make a pull request with the code! Be sure you have read any documents on contributing and you understand [the SOFA license](https://github.com/sofa-framework/sofa/blob/master/LICENCE.txt). Once you have submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes. ### Reminder - How to pull request (from GitHub documentation). - **[Fork](http://guides.github.com/activities/forking/)** the repository and clone it locally.; - [Connect your clone](https://help.github.com/articles/configuring-a-remote-for-a-fork/) to [the original **upstream** repository](https://github.com/sofa-framework/sofa/) by adding it as a remote.; - **Create a branch** for your changes.; - Make your changes.; - Pull in changes from upstream often to [**sync your fork**](https://help.github.com/articles/syncing-a-fork/) so that merge conflicts will be less likely in your pull request.; - [**Create a pull request**](https://help.github.com/articles/creating-a-pull-request-from-a-fork/) when you are ready to propose your changes into the main project. ### Start easy and simple. For newcomers in the community, we regularly identify issues easy to tackle and to get started with, using a [label ""*good first issue*""](https://github.com/sofa-framework/sofa/issues?q=label%3A%22good+first+issue%22). Choose one, solve it and create your first pull request!. ##",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:4979,Usability,simpl,simple,4979,"b.com/sofa-framework/sofa/blob/master/LICENCE.txt). Once you have submitted a pull request the maintainer(s) can compare your branch to the existing one and decide whether or not to incorporate (pull in) your changes. ### Reminder - How to pull request (from GitHub documentation). - **[Fork](http://guides.github.com/activities/forking/)** the repository and clone it locally.; - [Connect your clone](https://help.github.com/articles/configuring-a-remote-for-a-fork/) to [the original **upstream** repository](https://github.com/sofa-framework/sofa/) by adding it as a remote.; - **Create a branch** for your changes.; - Make your changes.; - Pull in changes from upstream often to [**sync your fork**](https://help.github.com/articles/syncing-a-fork/) so that merge conflicts will be less likely in your pull request.; - [**Create a pull request**](https://help.github.com/articles/creating-a-pull-request-from-a-fork/) when you are ready to propose your changes into the main project. ### Start easy and simple. For newcomers in the community, we regularly identify issues easy to tackle and to get started with, using a [label ""*good first issue*""](https://github.com/sofa-framework/sofa/issues?q=label%3A%22good+first+issue%22). Choose one, solve it and create your first pull request!. ### Rules. - Description must explain the **issue solved** or the **feature added**, and this must be reported in the **[CHANGELOG.md](https://github.com/sofa-framework/sofa/blob/master/CHANGELOG.md)** file.; - Code must follow **[our guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md)**.; - Commit must build **successfully** on Jenkins for all steps (compilation + tests + examples).; - **Unit Tests** are required for each new component or if an issue is fixed.; - **Examples** (at least one) must be provided showing the new feature. ### Management of pull requests. Standard pull-requests are reviewed and approved by the ""Reviewers"" team. ; Major pull-requests (BREAKING, majo",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:5499,Usability,guid,guidelines,5499,"com/sofa-framework/sofa/) by adding it as a remote.; - **Create a branch** for your changes.; - Make your changes.; - Pull in changes from upstream often to [**sync your fork**](https://help.github.com/articles/syncing-a-fork/) so that merge conflicts will be less likely in your pull request.; - [**Create a pull request**](https://help.github.com/articles/creating-a-pull-request-from-a-fork/) when you are ready to propose your changes into the main project. ### Start easy and simple. For newcomers in the community, we regularly identify issues easy to tackle and to get started with, using a [label ""*good first issue*""](https://github.com/sofa-framework/sofa/issues?q=label%3A%22good+first+issue%22). Choose one, solve it and create your first pull request!. ### Rules. - Description must explain the **issue solved** or the **feature added**, and this must be reported in the **[CHANGELOG.md](https://github.com/sofa-framework/sofa/blob/master/CHANGELOG.md)** file.; - Code must follow **[our guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md)**.; - Commit must build **successfully** on Jenkins for all steps (compilation + tests + examples).; - **Unit Tests** are required for each new component or if an issue is fixed.; - **Examples** (at least one) must be provided showing the new feature. ### Management of pull requests. Standard pull-requests are reviewed and approved by the ""Reviewers"" team. ; Major pull-requests (BREAKING, major features) are reviewed by the ""Reviewers"" team and approved by the ""STC members"" team through a vote within a maximum period of 2 weeks. Reviewing:. - Make sure the pull request is **labelized** and well assigned.; - Control that it follows **our rules** (defined above).; - Track the **status of each pull request** using the dedicated labels:; - ""pr: wip"" must be set if the PR has been created for a team work or if some fixes are needed (discussed in the comments).; - ""pr: to review"" must be set if the PR is ready to b",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:7490,Usability,guid,guide,7490,"ust be set if the PR is ready to be reviewed. ; - ""pr: ready"" must be set **instead of merge** if another PR merge is being built on the [Dashboard](https://www.sofa-framework.org/dash/?branch=origin/master). It is used to delay the merge and avoid CI overflow.; - **Control the builds**: Dashboard > Details in the pull request checks.; - Merge method: **prefer ""merge""** or ""squash"" over ""rebase"". Remember that:. - You can **add commits** in a pull request: see [GitHub documentation](https://help.github.com/articles/committing-changes-to-a-pull-request-branch-created-from-a-fork/).; - If the pull request contains out of scope commits (from a previous merge with master), **consider rebasing it**. <center><figure><img src=""https://www.sofa-framework.org/wp-content/uploads/2022/06/GitHub-PR-review-workflow.png"" alt=""PullRequestProcess"" style=""width:75%""><figcaption align = ""center""><b>Workflow of a PR review</b></figcaption></figure></center>. For more information on forks and pull request, check out [this GitHub guide](https://guides.github.com/activities/forking/). ### SOFA Developer Certificate Of Origin (DCO). SOFA is using the [mechanism of the linux project](https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin) to track and secure all issues related to copyrights: the Developper Certificate of Origin (DCO). If you are contributing code or documentation to the SOFA project, and using the git signed-off-by mechanism, you are agreeing to this certificate. This DCO essentially means that:. - you offer the changes under the same license agreement as the project, and; - you have the right to do that,; - you did not steal somebody else’s work. The original DCO is available online : [http://developercertificate.org](http://developercertificate.org). ```; Developer Certificate of Origin; Version 1.1. Copyright (C) 2004, 2006 The Linux Foundation and its contributors.; 1 Letterman Drive; Suite D4700; San",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md:7505,Usability,guid,guides,7505,"ust be set if the PR is ready to be reviewed. ; - ""pr: ready"" must be set **instead of merge** if another PR merge is being built on the [Dashboard](https://www.sofa-framework.org/dash/?branch=origin/master). It is used to delay the merge and avoid CI overflow.; - **Control the builds**: Dashboard > Details in the pull request checks.; - Merge method: **prefer ""merge""** or ""squash"" over ""rebase"". Remember that:. - You can **add commits** in a pull request: see [GitHub documentation](https://help.github.com/articles/committing-changes-to-a-pull-request-branch-created-from-a-fork/).; - If the pull request contains out of scope commits (from a previous merge with master), **consider rebasing it**. <center><figure><img src=""https://www.sofa-framework.org/wp-content/uploads/2022/06/GitHub-PR-review-workflow.png"" alt=""PullRequestProcess"" style=""width:75%""><figcaption align = ""center""><b>Workflow of a PR review</b></figcaption></figure></center>. For more information on forks and pull request, check out [this GitHub guide](https://guides.github.com/activities/forking/). ### SOFA Developer Certificate Of Origin (DCO). SOFA is using the [mechanism of the linux project](https://www.kernel.org/doc/html/latest/process/submitting-patches.html#sign-your-work-the-developer-s-certificate-of-origin) to track and secure all issues related to copyrights: the Developper Certificate of Origin (DCO). If you are contributing code or documentation to the SOFA project, and using the git signed-off-by mechanism, you are agreeing to this certificate. This DCO essentially means that:. - you offer the changes under the same license agreement as the project, and; - you have the right to do that,; - you did not steal somebody else’s work. The original DCO is available online : [http://developercertificate.org](http://developercertificate.org). ```; Developer Certificate of Origin; Version 1.1. Copyright (C) 2004, 2006 The Linux Foundation and its contributors.; 1 Letterman Drive; Suite D4700; San",MatchSource.DOCS,CONTRIBUTING.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CONTRIBUTING.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:6789,Availability,error,error,6789,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:4116,Deployability,update,updated,4116,"ecCoord >* write(core::VecCoordId v);; virtual const Data< VecCoord >* read(core::ConstVecCoordId v) const;. virtual Data< VecDeriv >* write(core::VecDerivId v);; virtual const Data< VecDeriv >* read(core::ConstVecDerivId v) const;; /// @}. /** \brief Reorder values according to parameter.; *; * Result of this method is :; * newValue[ i ] = oldValue[ index[i] ];; */; void renumberValues( const sofa::helper::vector<unsigned int> &index );. /// Force the position of a point (and force its velocity to zero value); void forcePointPosition( const unsigned int i, const sofa::helper::vector< double >& m_x);; ; /// src and dest must have the same size.; /// Performs: dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects); /// @param offset the offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns; virtual void addFromBaseVectorSameSize(core::VecId dest, const defaulttype::BaseVector* src, unsigned int &offset);; }; ``` ; More info about Doxygen here: https://www.stack.nl/~dimitri/doxygen/manual/index.html . ### Good practices; - [G1] You should try to use as few `#include` directive as possible.; - [G2] You should limit as much as possible the amount of code in included files (*.h, *.inl).; - [G3] All definitions should reside in source files. The header files should declare an interface only.; - [G4] Variables should be initialized when they are declared.; - [G5] You should use `const` profusely.; - [G6] You should use `assert` profusely.; - [G7] You must avoid the `using` directive in header files (.h and .inl): ~~`using namespace foo;`~~; - [G8] You should declare automatic variables only when you need them (not before).; - [G9] You must always initialize pointers, either to the address of something, or to `nullptr`; - [G10] You may use the type specifier `auto` (since C++11) when:; - you are in a for lo",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:287,Integrability,message,message,287,"# Code style guide. ## General rules. ### Base rules; The base rules are in Google C++ Style Guide: https://google.github.io/styleguide/cppguide.html ; All rules below **replace** the corresponding base rules. ; For any subject not mentionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; whil",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:313,Integrability,message,message,313,"# Code style guide. ## General rules. ### Base rules; The base rules are in Google C++ Style Guide: https://google.github.io/styleguide/cppguide.html ; All rules below **replace** the corresponding base rules. ; For any subject not mentionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; whil",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:391,Integrability,message,message,391,"# Code style guide. ## General rules. ### Base rules; The base rules are in Google C++ Style Guide: https://google.github.io/styleguide/cppguide.html ; All rules below **replace** the corresponding base rules. ; For any subject not mentionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; whil",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:4704,Integrability,interface,interface,4704,"ce the position of a point (and force its velocity to zero value); void forcePointPosition( const unsigned int i, const sofa::helper::vector< double >& m_x);; ; /// src and dest must have the same size.; /// Performs: dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects); /// @param offset the offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns; virtual void addFromBaseVectorSameSize(core::VecId dest, const defaulttype::BaseVector* src, unsigned int &offset);; }; ``` ; More info about Doxygen here: https://www.stack.nl/~dimitri/doxygen/manual/index.html . ### Good practices; - [G1] You should try to use as few `#include` directive as possible.; - [G2] You should limit as much as possible the amount of code in included files (*.h, *.inl).; - [G3] All definitions should reside in source files. The header files should declare an interface only.; - [G4] Variables should be initialized when they are declared.; - [G5] You should use `const` profusely.; - [G6] You should use `assert` profusely.; - [G7] You must avoid the `using` directive in header files (.h and .inl): ~~`using namespace foo;`~~; - [G8] You should declare automatic variables only when you need them (not before).; - [G9] You must always initialize pointers, either to the address of something, or to `nullptr`; - [G10] You may use the type specifier `auto` (since C++11) when:; - you are in a for loop; - you deal with iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named const",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:6514,Integrability,message,message-api,6514,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:6575,Integrability,message,message,6575,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:6676,Integrability,message,message,6676,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:6715,Integrability,message,message,6715,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:6758,Integrability,message,message,6758,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:6795,Integrability,message,message,6795,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:895,Modifiability,variab,variables,895,"# Code style guide. ## General rules. ### Base rules; The base rules are in Google C++ Style Guide: https://google.github.io/styleguide/cppguide.html ; All rules below **replace** the corresponding base rules. ; For any subject not mentionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; whil",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:1008,Modifiability,variab,variables,1008,"s. ### Base rules; The base rules are in Google C++ Style Guide: https://google.github.io/styleguide/cppguide.html ; All rules below **replace** the corresponding base rules. ; For any subject not mentionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; while (x == y); {; something();; someth",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:1065,Modifiability,variab,variables,1065,"s. ### Base rules; The base rules are in Google C++ Style Guide: https://google.github.io/styleguide/cppguide.html ; All rules below **replace** the corresponding base rules. ; For any subject not mentionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; while (x == y); {; something();; someth",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:1141,Modifiability,variab,variables,1141,"ntionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; while (x == y); {; something();; somethingElse();; }; finalThing();; ```. - A space character should be used in the following situations:; - After C++ reserved words: `if (true)`; - Around binary operators: `a + b`; - After commas: `doSom",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:1278,Modifiability,variab,variables,1278,"ntionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; while (x == y); {; something();; somethingElse();; }; finalThing();; ```. - A space character should be used in the following situations:; - After C++ reserved words: `if (true)`; - Around binary operators: `a + b`; - After commas: `doSom",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:5009,Modifiability,variab,variables,5009," < 2 (for 2D objects); /// @param offset the offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns; virtual void addFromBaseVectorSameSize(core::VecId dest, const defaulttype::BaseVector* src, unsigned int &offset);; }; ``` ; More info about Doxygen here: https://www.stack.nl/~dimitri/doxygen/manual/index.html . ### Good practices; - [G1] You should try to use as few `#include` directive as possible.; - [G2] You should limit as much as possible the amount of code in included files (*.h, *.inl).; - [G3] All definitions should reside in source files. The header files should declare an interface only.; - [G4] Variables should be initialized when they are declared.; - [G5] You should use `const` profusely.; - [G6] You should use `assert` profusely.; - [G7] You must avoid the `using` directive in header files (.h and .inl): ~~`using namespace foo;`~~; - [G8] You should declare automatic variables only when you need them (not before).; - [G9] You must always initialize pointers, either to the address of something, or to `nullptr`; - [G10] You may use the type specifier `auto` (since C++11) when:; - you are in a for loop; - you deal with iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real E",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:5321,Modifiability,variab,variable,5321,"hod returns; virtual void addFromBaseVectorSameSize(core::VecId dest, const defaulttype::BaseVector* src, unsigned int &offset);; }; ``` ; More info about Doxygen here: https://www.stack.nl/~dimitri/doxygen/manual/index.html . ### Good practices; - [G1] You should try to use as few `#include` directive as possible.; - [G2] You should limit as much as possible the amount of code in included files (*.h, *.inl).; - [G3] All definitions should reside in source files. The header files should declare an interface only.; - [G4] Variables should be initialized when they are declared.; - [G5] You should use `const` profusely.; - [G6] You should use `assert` profusely.; - [G7] You must avoid the `using` directive in header files (.h and .inl): ~~`using namespace foo;`~~; - [G8] You should declare automatic variables only when you need them (not before).; - [G9] You must always initialize pointers, either to the address of something, or to `nullptr`; - [G10] You may use the type specifier `auto` (since C++11) when:; - you are in a for loop; - you deal with iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:7085,Modifiability,variab,variable,7085,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:1637,Safety,avoid,avoided,1637," Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; while (x == y); {; something();; somethingElse();; }; finalThing();; ```. - A space character should be used in the following situations:; - After C++ reserved words: `if (true)`; - Around binary operators: `a + b`; - After commas: `doSomething(a, b, c)`; - After semicolons in for statements: `for (unsigned int i = 0; i < container.size(); i++)`; ```cpp; for (unsigned int i = 0; i < container.size(); ++i ); {; if ((a + b) > c); {; doSomething(a, b, c);; }; }; ```. - Template declarations are split on two lines; ; ```cpp; template<class T>; static void dynamicCast(T*& ptr, Base* b);; ```. ### Commenting",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:4886,Safety,avoid,avoid,4886," Performs: dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects); /// @param offset the offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns; virtual void addFromBaseVectorSameSize(core::VecId dest, const defaulttype::BaseVector* src, unsigned int &offset);; }; ``` ; More info about Doxygen here: https://www.stack.nl/~dimitri/doxygen/manual/index.html . ### Good practices; - [G1] You should try to use as few `#include` directive as possible.; - [G2] You should limit as much as possible the amount of code in included files (*.h, *.inl).; - [G3] All definitions should reside in source files. The header files should declare an interface only.; - [G4] Variables should be initialized when they are declared.; - [G5] You should use `const` profusely.; - [G6] You should use `assert` profusely.; - [G7] You must avoid the `using` directive in header files (.h and .inl): ~~`using namespace foo;`~~; - [G8] You should declare automatic variables only when you need them (not before).; - [G9] You must always initialize pointers, either to the address of something, or to `nullptr`; - [G10] You may use the type specifier `auto` (since C++11) when:; - you are in a for loop; - you deal with iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:5625,Safety,avoid,avoided,5625,"h, *.inl).; - [G3] All definitions should reside in source files. The header files should declare an interface only.; - [G4] Variables should be initialized when they are declared.; - [G5] You should use `const` profusely.; - [G6] You should use `assert` profusely.; - [G7] You must avoid the `using` directive in header files (.h and .inl): ~~`using namespace foo;`~~; - [G8] You should declare automatic variables only when you need them (not before).; - [G9] You must always initialize pointers, either to the address of something, or to `nullptr`; - [G10] You may use the type specifier `auto` (since C++11) when:; - you are in a for loop; - you deal with iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only i",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:3193,Security,access,access,3193," semicolons in for statements: `for (unsigned int i = 0; i < container.size(); i++)`; ```cpp; for (unsigned int i = 0; i < container.size(); ++i ); {; if ((a + b) > c); {; doSomething(a, b, c);; }; }; ```. - Template declarations are split on two lines; ; ```cpp; template<class T>; static void dynamicCast(T*& ptr, Base* b);; ```. ### Commenting; Code must be commented in a Doxygen compliant way. ; Most used commands are `///` or `/**` before blocks and `///<` after member declarations. ; Please DO NOT use `//` or `///` after member declarations. ; Example ; ```cpp; /**; * @brief MechanicalObject class; */; template <class DataTypes>; class MechanicalObject : public sofa::core::behavior::MechanicalState<DataTypes>; {; Data< bool > d_showObject; ///< Show objects. (default=false); Data< defaulttype::Vec4f > d_color; ///< drawing color; Data< bool > d_isToPrint; ///< ignore some Data for file export. /// @name New vectors access API based on VecId; /// @{; virtual Data< VecCoord >* write(core::VecCoordId v);; virtual const Data< VecCoord >* read(core::ConstVecCoordId v) const;. virtual Data< VecDeriv >* write(core::VecDerivId v);; virtual const Data< VecDeriv >* read(core::ConstVecDerivId v) const;; /// @}. /** \brief Reorder values according to parameter.; *; * Result of this method is :; * newValue[ i ] = oldValue[ index[i] ];; */; void renumberValues( const sofa::helper::vector<unsigned int> &index );. /// Force the position of a point (and force its velocity to zero value); void forcePointPosition( const unsigned int i, const sofa::helper::vector< double >& m_x);; ; /// src and dest must have the same size.; /// Performs: dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects); /// @param offset the offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns; virtual void addFromBaseVectorSameSize(core::Ve",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:6931,Security,access,access,6931,"ith iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/message-api/) must be used.; - `msg_info()` will display the message in the console only if the `printLog` flag is activated.; - `msg_warning()` will display the message in the console with an warning message.; - `msg_error()` will display the message in the console with an error message.; - Use `sofa::type::vector` instead of `std::vector`; - Only use `sofa::simulation::tree::GNode` when you need to directly use access to the children or the parent of the node. If not, use the more generic `sofa::simulation::Node`; - When an information, a function or an internal variable from an external component is needed in a component, prefer an explicit Link to connect both components instead of implicitly browsing the graph using `getContext`; ",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:486,Testability,test,test,486,"# Code style guide. ## General rules. ### Base rules; The base rules are in Google C++ Style Guide: https://google.github.io/styleguide/cppguide.html ; All rules below **replace** the corresponding base rules. ; For any subject not mentionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; whil",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:4850,Testability,assert,assert,4850,"_x);; ; /// src and dest must have the same size.; /// Performs: dest[i][j] += src[offset + i][j] 0<= i < src_entries 0<= j < 3 (for 3D objects) 0 <= j < 2 (for 2D objects); /// @param offset the offset in the BaseVector where the scalar values will be used. It will be updated to the first scalar value after the ones used by this operation when this method returns; virtual void addFromBaseVectorSameSize(core::VecId dest, const defaulttype::BaseVector* src, unsigned int &offset);; }; ``` ; More info about Doxygen here: https://www.stack.nl/~dimitri/doxygen/manual/index.html . ### Good practices; - [G1] You should try to use as few `#include` directive as possible.; - [G2] You should limit as much as possible the amount of code in included files (*.h, *.inl).; - [G3] All definitions should reside in source files. The header files should declare an interface only.; - [G4] Variables should be initialized when they are declared.; - [G5] You should use `const` profusely.; - [G6] You should use `assert` profusely.; - [G7] You must avoid the `using` directive in header files (.h and .inl): ~~`using namespace foo;`~~; - [G8] You should declare automatic variables only when you need them (not before).; - [G9] You must always initialize pointers, either to the address of something, or to `nullptr`; - [G10] You may use the type specifier `auto` (since C++11) when:; - you are in a for loop; - you deal with iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use t",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:5556,Testability,log,logical,5556,"hould try to use as few `#include` directive as possible.; - [G2] You should limit as much as possible the amount of code in included files (*.h, *.inl).; - [G3] All definitions should reside in source files. The header files should declare an interface only.; - [G4] Variables should be initialized when they are declared.; - [G5] You should use `const` profusely.; - [G6] You should use `assert` profusely.; - [G7] You must avoid the `using` directive in header files (.h and .inl): ~~`using namespace foo;`~~; - [G8] You should declare automatic variables only when you need them (not before).; - [G9] You must always initialize pointers, either to the address of something, or to `nullptr`; - [G10] You may use the type specifier `auto` (since C++11) when:; - you are in a for loop; - you deal with iterators; - you deal with long typenames AND or when the variable type is obvious. ## SOFA specific rules; - Tricky code should not be commented but rewritten! In general, the use of comments should be minimized by making the code self-documenting by appropriate name choices and an explicit logical structure.; - The use of magic numbers in the code should be avoided. Numbers other than 0 and 1 should be declared as named constants instead.; - The definition of ε-definition of limit ('epsilon', an arbitrarily small positive quantity) should not be code specific but rather use the class template [`std::numeric_limits`](https://en.cppreference.com/w/cpp/types/numeric_limits/epsilon). Here is an example: `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; `const DataTypes::Real EPSILON = std::numeric_limits<DataTypes::Real>::epsilon();`; - All internal data, needed by your component, and that can’t be recomputed must be put inside a `Data` or a `DataPtr`. This way, your component can be saved. Also, this `Data` will be automatically displayed inside the GUI.; - For messaging in SOFA components, the [dedicated Messaging API](https://www.sofa-framework",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md:13,Usability,guid,guide,13,"# Code style guide. ## General rules. ### Base rules; The base rules are in Google C++ Style Guide: https://google.github.io/styleguide/cppguide.html ; All rules below **replace** the corresponding base rules. ; For any subject not mentionned below, please refer to the base. ### Commit message; A correct commit message must therefore be structured as: ; `[NAME_OF_MODULE_OR_PLUGIN] ACTION message` ; where ACTION includes ADD, REMOVE, FIX, CLEAN, REVERT. ; Example: `[SofaKernel] ADD test for the mass conservation in UniformMass` . ### Naming; Identifiers must respect the following conventions:. - [N1] Class names are in UpperCamelCase; - [N2] Function names are in lowerCamelCase(); - [N3] Namespaces names are in lowercase; - [N4] Variables names are in lowerCamelCase and must express their use more than their type. **Exceptions**: mathematical objects like `Matrix M`, local iterators variables like `i`, `j`, `k` and usual symbols like `x` for positions or `v` for velocities.; - [N5] Data member variables names must begin with `d_`; - [N6] Link member variables names (e.g. SingleLink) must begin with `l_`; - [N7] Other member variables names must begin with `m_ `(exception: this is not mandatory for PODs as well as public attributes); - [N8] Names for booleans variables must answer a question: `m_isRed`, `m_hasName`; - [N9] C++ files must must have the extension .h, .cpp, or .inl; - [N10] Files that define a class should have the same name as the class and should contain only one class.; - [N11] Each library name should be prefixed with `Sofa`. ### Formatting; - Special characters like TAB and page break must be avoided.; - Indentation must use **4 spaces** everywhere (C++ and Python), but there must be no indentation for namespaces; - Braces use the **Allman style**: the opening brace associated with a control statement is on the next line, indented to the same level as the control statement, and statements within the braces are indented to the next level. ```cpp; whil",MatchSource.DOCS,GUIDELINES.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/GUIDELINES.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:320,Deployability,release,released,320," GNU LESSER GENERAL PUBLIC LICENSE; Version 2.1, February 1999. Copyright (C) 1991, 1999 Free Software Foundation, Inc.; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. [This is the first released version of the Lesser GPL. It also counts; as the successor of the GNU Library Public License, version 2, hence; the version number 2.1.]. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:7305,Deployability,install,installation,7305,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge ",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:15880,Deployability,install,installs,15880,"s License. Also, you must do one; of these things:. a) Accompany the work with the complete corresponding; machine-readable source code for the Library including whatever; changes were used in the work (which must be distributed under; Sections 1 and 2 above); and, if the work is an executable linked; with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in ei",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:1368,Energy Efficiency,charge,charge,1368,"e, version 2, hence; the version number 2.1.]. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:8216,Energy Efficiency,charge,charge,8216," control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still ope",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:8859,Energy Efficiency,charge,charge,8859,"ary's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be re",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:16152,Energy Efficiency,charge,charge,16152," with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary librarie",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:7227,Integrability,interface,interface,7227,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge ",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:7716,Integrability,depend,depends,7716,"der; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:15930,Integrability,interface,interface-compatible,15930,"s License. Also, you must do one; of these things:. a) Accompany the work with the complete corresponding; machine-readable source code for the Library including whatever; changes were used in the work (which must be distributed under; Sections 1 and 2 above); and, if the work is an executable linked; with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in ei",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:21384,Integrability,interface,interfaces,21384," the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorporates the limitation as if; written in the body of this License. 13. The Free Software Foundation may publish revised and/or new; versions of the Lesser General Public License from time to time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation. 14. If y",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:10243,Modifiability,extend,extend,10243,"at,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote; it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Library. In addition, mere aggregation of another work not based on the Library; with the Library (or with a work based on the Library) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may opt to apply the terms of the ordinary GNU General Public; License instead of this License to a given copy of the Library. To do; this, you must alter all the notices that refer to this License, so; that they refer to the ordinary GNU General Public License, version 2,; instead of to this License. (If a newer version than version 2 of the; ordinary GN",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:9290,Performance,perform,performs,9290,"; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:16185,Performance,perform,performing,16185," with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary librarie",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:24661,Safety,safe,safest,24661,"BLE TO YOU; FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR; CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE; LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING; RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A; FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF; SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH; DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Libraries. If you develop a new library, and you want it to be of the greatest; possible use to the public, we recommend making it free software that; everyone can redistribute and change. You can do so by permitting; redistribution under these terms (or, alternatively, under the terms of the; ordinary General Public License). To apply these terms, attach the following notices to the library. It is; safest to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least the; ""copyright"" line and a pointer to where the full notice is found. <one line to give the library's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This library is free software; you can redistribute it and/or; modify it under the terms of the GNU Lesser General Public; License as published by the Free Software Foundation; either; version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public; License along with this library; if not, write to the Free Software; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301; USA. Also add information on how to contact you by electronic and paper ",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:2957,Security,threat,threat,2957,"you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others. Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for certain libraries in order to permit linking those; libraries into non-free programs. When a program is linked with a library, whether statically or using; a shared library, the combination of the two is legally speaking a; combined work, a derivative of the original library. The ordinary; General Public License therefore permits such linking only if the;",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:6183,Security,authoriz,authorized,6183,"le, permission to use the GNU C Library in; non-free programs enables many more people to use the whole GNU; operating system, as well as its variant, the GNU/Linux operating; system. Although the Lesser General Public License is Less protective of the; users' freedom, it does ensure that the user of a program that is; linked with the Library has the freedom and the wherewithal to run; that program using a modified version of the Library. The precise terms and conditions for copying, distribution and; modification follow. Pay close attention to the difference between a; ""work based on the library"" and a ""work that uses the library"". The; former contains code derived from the library, whereas the latter must; be combined with the library in order to run. GNU LESSER GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License Agreement applies to any software library or other; program which contains a notice placed by the copyright holder or; other authorized party saying it may be distributed under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code fo",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:12081,Security,access,access,12081,"eral Public License has appeared, then you can specify; that version instead if you wish.) Do not make any other change in; these notices. Once this change is made in a given copy, it is irreversible for; that copy, so the ordinary GNU General Public License applies to all; subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of; the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or; derivative of it, under Section 2) in object code or executable form; under the terms of Sections 1 and 2 above provided that you accompany; it with the complete corresponding machine-readable source code, which; must be distributed under the terms of Sections 1 and 2 above on a; medium customarily used for software interchange. If distribution of object code is made by offering access to copy; from a designated place, then offering equivalent access to copy the; source code from the same place satisfies the requirement to; distribute the source code, even though third parties are not; compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the; Library, but is designed to work with the Library by being compiled or; linked with it, is called a ""work that uses the Library"". Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the sour",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:12147,Security,access,access,12147,"eral Public License has appeared, then you can specify; that version instead if you wish.) Do not make any other change in; these notices. Once this change is made in a given copy, it is irreversible for; that copy, so the ordinary GNU General Public License applies to all; subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of; the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or; derivative of it, under Section 2) in object code or executable form; under the terms of Sections 1 and 2 above provided that you accompany; it with the complete corresponding machine-readable source code, which; must be distributed under the terms of Sections 1 and 2 above on a; medium customarily used for software interchange. If distribution of object code is made by offering access to copy; from a designated place, then offering equivalent access to copy the; source code from the same place satisfies the requirement to; distribute the source code, even though third parties are not; compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the; Library, but is designed to work with the Library by being compiled or; linked with it, is called a ""work that uses the Library"". Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the sour",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:13488,Security,access,accessors,13488," Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the source code is not.; Whether this is true is especially significant if the work can be; linked without the Library, or if the work is itself a library. The; threshold for this to be true is not precisely defined by law. If such an object file uses only numerical parameters, data; structure layouts and accessors, and small macros and small inline; functions (ten lines or less in length), then the use of the object; file is unrestricted, regardless of whether it is legally a derivative; work. (Executables containing this object code plus portions of the; Library will still fall under Section 6.). Otherwise, if the work is a derivative of the Library, you may; distribute the object code for the work under the terms of Section 6.; Any executables containing that work also fall under Section 6,; whether or not they are linked directly with the Library itself. 6. As an exception to the Sections above, you may also combine or; link a ""work that uses the Library"" with the Library to produce a; work containing portions of the Library, and distribute that work; under terms of your choice, provided that the terms permit; modification of the work for the customer's own use and reverse; engineering for debugging such modifications. You must give prominent notice with each copy of the work that the; Library is used in it and that the Library and its",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:16266,Security,access,access,16266,"d; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary libraries that do not normally; accompany the operating system. Such a contradiction means you cannot; use both them and the Library together in an executable that you; distribute. 7. You may place library",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:16324,Security,access,access,16324,"d; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary libraries that do not normally; accompany the operating system. Such a contradiction means you cannot; use both them and the Library together in an executable that you; distribute. 7. You may place library",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:20724,Security,integrity,integrity,20724,"der, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Library at all. For example, if a patent; license would not permit royalty-free redistribution of the Library by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any; particular circumstance, the balance of the section is intended to apply,; and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorpora",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:2606,Usability,clear,clear,2606,"otect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others. Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for certa",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:21189,Usability,clear,clear,21189,"tisfy both it and this License would be to; refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any; particular circumstance, the balance of the section is intended to apply,; and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorporates the limitation as if; written in the body of this License. 13. The Free Software Foundation may publish revised and/or new; versions of the Lesser General Public License from time to time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md:22792,Usability,guid,guided,22792,"time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation. 14. If you wish to incorporate parts of the Library into other free; programs whose distribution conditions are incompatible with these,; write to the author to ask for permission. For software which is; copyrighted by the Free Software Foundation, write to the Free; Software Foundation; we sometimes make exceptions for this. Our; decision will be guided by the two goals of preserving the free status; of all derivatives of our free software and of promoting the sharing; and reuse of software generally. NO WARRANTY. 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO; WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.; EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR; OTHER PARTIES PROVIDE THE LIBRARY ""AS IS"" WITHOUT WARRANTY OF ANY; KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE; LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME; THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN; WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY; AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU; FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR; CONSEQUENTIAL DAMAGES A",MatchSource.DOCS,LICENSE-LGPL.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/LICENSE-LGPL.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2776,Availability,down,download,2776,"e representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ### Licenses; SOFA is LGPL, except:; - applications/projects (GPL); - applications/tutorials (GPL); - directories with a license file specifying a different license. LGPL refers to the GNU Lesser General Public License as published by the Free Software; Foundation; either version 2.1 of the License, or (at your option) any later ; version. GPL refers to the GNU General Public License as published by the Free Software Foundation;; either version 2 of t",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2819,Availability,down,download,2819,"collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ### Licenses; SOFA is LGPL, except:; - applications/projects (GPL); - applications/tutorials (GPL); - directories with a license file specifying a different license. LGPL refers to the GNU Lesser General Public License as published by the Free Software; Foundation; either version 2.1 of the License, or (at your option) any later ; version. GPL refers to the GNU General Public License as published by the Free Software Foundation;; either version 2 of the License, or (at your option) any later",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2865,Availability,down,download,2865,"complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ### Licenses; SOFA is LGPL, except:; - applications/projects (GPL); - applications/tutorials (GPL); - directories with a license file specifying a different license. LGPL refers to the GNU Lesser General Public License as published by the Free Software; Foundation; either version 2.1 of the License, or (at your option) any later ; version. GPL refers to the GNU General Public License as published by the Free Software Foundation;; either version 2 of the License, or (at your option) any later version. ### Contact; contact@sofa-framework.",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2252,Deployability,integrat,integrated,2252,"ork.org/about/jobs/). ## What is SOFA. SOFA is an open source framework targeted at interactive physics simulation based on the Finite Element Method (FEM), with an emphasis on medical simulation and robotics. ; It is mainly intended for the research community to help foster newer algorithms, but can also be used as an efficient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2789,Deployability,install,install,2789,"e representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ### Licenses; SOFA is LGPL, except:; - applications/projects (GPL); - applications/tutorials (GPL); - directories with a license file specifying a different license. LGPL refers to the GNU Lesser General Public License as published by the Free Software; Foundation; either version 2.1 of the License, or (at your option) any later ; version. GPL refers to the GNU General Public License as published by the Free Software Foundation;; either version 2 of t",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:1505,Energy Efficiency,efficient,efficient,1505,"://img.shields.io/badge/chat-on_Discord-darkred.svg)](https://discord.gg/G63t3a8Ra6). <a href=""https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fpublish.twitter.com%2F%3FbuttonType%3DFollowButton%26query%3Dhttps%253A%252F%252Ftwitter.com%252FSofaFramework%26widget%3DButton&ref_src=twsrc%5Etfw&region=follow_link&screen_name=SofaFramework&tw_p=followbutton""><img src=""https://img.shields.io/twitter/follow/SofaFramework?label=Follow%20%40SofaFramework&style=social""></a>; [![Contact](https://img.shields.io/badge/contact-on_website-brightgreen.svg)](https://www.sofa-framework.org/consortium/contact/); [![we're hiring](https://img.shields.io/badge/we're%20hiring!-join%20us-orange)](https://www.sofa-framework.org/about/jobs/). ## What is SOFA. SOFA is an open source framework targeted at interactive physics simulation based on the Finite Element Method (FEM), with an emphasis on medical simulation and robotics. ; It is mainly intended for the research community to help foster newer algorithms, but can also be used as an efficient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-f",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:1934,Energy Efficiency,efficient,efficient,1934,"/img.shields.io/badge/contact-on_website-brightgreen.svg)](https://www.sofa-framework.org/consortium/contact/); [![we're hiring](https://img.shields.io/badge/we're%20hiring!-join%20us-orange)](https://www.sofa-framework.org/about/jobs/). ## What is SOFA. SOFA is an open source framework targeted at interactive physics simulation based on the Finite Element Method (FEM), with an emphasis on medical simulation and robotics. ; It is mainly intended for the research community to help foster newer algorithms, but can also be used as an efficient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2252,Integrability,integrat,integrated,2252,"ork.org/about/jobs/). ## What is SOFA. SOFA is an open source framework targeted at interactive physics simulation based on the Finite Element Method (FEM), with an emphasis on medical simulation and robotics. ; It is mainly intended for the research community to help foster newer algorithms, but can also be used as an efficient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2297,Modifiability,plugin,plugin,2297,"ethod (FEM), with an emphasis on medical simulation and robotics. ; It is mainly intended for the research community to help foster newer algorithms, but can also be used as an efficient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ##",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2324,Modifiability,coupling,coupling,2324,"ethod (FEM), with an emphasis on medical simulation and robotics. ; It is mainly intended for the research community to help foster newer algorithms, but can also be used as an efficient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ##",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2386,Modifiability,plugin,plugins,2386,"ded for the research community to help foster newer algorithms, but can also be used as an efficient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ### Licenses; SOFA is LGPL, except:; - applications/projects (GPL); - applications/tutori",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2502,Modifiability,plugin,plugins,2502,"icient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ### Licenses; SOFA is LGPL, except:; - applications/projects (GPL); - applications/tutorials (GPL); - directories with a license file specifying a different license. LGPL refers to t",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2602,Modifiability,plugin,plugin,2602,"nd evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ### Licenses; SOFA is LGPL, except:; - applications/projects (GPL); - applications/tutorials (GPL); - directories with a license file specifying a different license. LGPL refers to the GNU Lesser General Public License as published by the Free Software; Foundation; either version 2.1 ",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:2745,Modifiability,plugin,plugins,2745,"imulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways to contribute to the project: https://www.sofa-framework.org/community/get-involved/. Before creating any issue or pull request, please read carefully [our CONTRIBUTING rules](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md). ## Information. ### Authors; See [Authors.txt](https://github.com/sofa-framework/sofa/blob/master/Authors.txt). ### Licenses; SOFA is LGPL, except:; - applications/projects (GPL); - applications/tutorials (GPL); - directories with a license file specifying a different license. LGPL refers to the GNU Lesser General Public License as published by the Free Software; Foundation; either version 2.1 of the License, or (at your option) any later ; version. GPL refers to the GNU General Public License as published by the Fr",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md:1888,Usability,simpl,simpler,1888,"/img.shields.io/badge/contact-on_website-brightgreen.svg)](https://www.sofa-framework.org/consortium/contact/); [![we're hiring](https://img.shields.io/badge/we're%20hiring!-join%20us-orange)](https://www.sofa-framework.org/about/jobs/). ## What is SOFA. SOFA is an open source framework targeted at interactive physics simulation based on the Finite Element Method (FEM), with an emphasis on medical simulation and robotics. ; It is mainly intended for the research community to help foster newer algorithms, but can also be used as an efficient prototyping tool. ; SOFA's advanced software architecture allows: ; - the creation of complex and evolving simulations by combining new algorithms with existing algorithms ; - the modification of key parameters of the simulation such as deformable behavior, ; surface representation, solvers, constraints, collision algorithm, etc. ; - the synthesis of complex models from simpler ones using a graph description; - the efficient simulation of the dynamics of interacting objects using abstract equation solvers; - the comparison of various algorithms and mathematical models. SOFA is often presented as a standalone software (runSofa) and a simulation tool, but the project is most importantly a bundle of libraries and thus can be used/integrated in any project. . SOFA provides a plugin system allowing the coupling of additional codes to add functionalities. A lot of plugins are already referenced in the [source code](https://github.com/sofa-framework/sofa/tree/master/applications/plugins), under [sofa-framework organisation](https://github.com/orgs/sofa-framework/repositories?q=plugin&sort=name), and on the [Marketplace](https://www.sofa-framework.org/applications/marketplace/). Feel free to contact us to get your own plugins referenced!. ## How to download and install. Please refer to SOFA download page: https://www.sofa-framework.org/download/. ## How to contribute. The SOFA community will be pleased to welcome you! ; Find all the ways",MatchSource.DOCS,README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md:546,Availability,failure,failures,546,". ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md:595,Availability,failure,failures,595,". ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md:276,Security,certificate,certificate-of-origin-dco,276,". ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md:541,Testability,test,test,541,". ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md:590,Testability,test,test,590,". ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).; ",MatchSource.DOCS,.github/PULL_REQUEST_TEMPLATE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/.github/PULL_REQUEST_TEMPLATE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExporter/README.md:21,Modifiability,plugin,plugin,21,= SofaExporter. This plugin provide several exporters to save simulation. There is several classes of exporters.; Some of them are saving object surfaces while other are saving complete topologies. Have a look at the examples provided in:; ```; examples/MeshExporter.scn; examples/OBJExporter.scn; examples/STLExporter.scn; ```. For these three exporters. The filename property can have the following pattern:; ```; /absolute/path/file; ./relative/path/file; ./relative/path/nofilename/ (use the object name as filename); ```. ,MatchSource.DOCS,applications/collections/deprecated/modules/SofaExporter/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExporter/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscForceField/README.md:27,Modifiability,plugin,plugin,27,= SofaMiscForceField. This plugin provide several exporters to save simulation. There is several classes of exporters.; Some of them are saving object surfaces while other are saving complete topologies. Have a look at the examples provided in:; ```; examples/MeshExporter.scn; examples/OBJExporter.scn; examples/STLExporter.scn; ```. For these three exporters. The filename property can have the following pattern:; ```; /absolute/path/file; ./relative/path/file; ./relative/path/nofilename/ (use the object name as filename); ```. ,MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscForceField/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscForceField/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaOpenglVisual/README.md:46,Modifiability,plugin,plugin,46, SofaOpenglVisual =. OpenGL 1.x/2.0 rendering plugin for Sofa. ,MatchSource.DOCS,applications/collections/deprecated/modules/SofaOpenglVisual/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaOpenglVisual/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/README.md:23,Modifiability,plugin,plugin,23,= SofaValidation. This plugin provide tools to validate simulations.; ,MatchSource.DOCS,applications/collections/deprecated/modules/SofaValidation/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/README.md:47,Security,validat,validate,47,= SofaValidation. This plugin provide tools to validate simulations.; ,MatchSource.DOCS,applications/collections/deprecated/modules/SofaValidation/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:320,Deployability,release,released,320," GNU LESSER GENERAL PUBLIC LICENSE; Version 2.1, February 1999. Copyright (C) 1991, 1999 Free Software Foundation, Inc.; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. [This is the first released version of the Lesser GPL. It also counts; as the successor of the GNU Library Public License, version 2, hence; the version number 2.1.]. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:7305,Deployability,install,installation,7305,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge ",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:15880,Deployability,install,installs,15880,"s License. Also, you must do one; of these things:. a) Accompany the work with the complete corresponding; machine-readable source code for the Library including whatever; changes were used in the work (which must be distributed under; Sections 1 and 2 above); and, if the work is an executable linked; with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in ei",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:1368,Energy Efficiency,charge,charge,1368,"e, version 2, hence; the version number 2.1.]. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; Licenses are intended to guarantee your freedom to share and change; free software--to make sure the software is free for all its users. This license, the Lesser General Public License, applies to some; specially designated software packages--typically libraries--of the; Free Software Foundation and other authors who decide to use it. You; can use it too, but we suggest you first think carefully about whether; this license or the ordinary General Public License is the better; strategy to use in any particular case, based on the explanations below. When we speak of free software, we are referring to freedom of use,; not price. Our General Public Licenses are designed to make sure that; you have the freedom to distribute copies of free software (and charge; for this service if you wish); that you receive source code or can get; it if you want it; that you can change the software and use pieces of; it in new free programs; and that you are informed that you can do; these things. To protect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:8216,Energy Efficiency,charge,charge,8216," control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still ope",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:8859,Energy Efficiency,charge,charge,8859,"ary's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be re",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:16152,Energy Efficiency,charge,charge,16152," with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary librarie",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:7227,Integrability,interface,interface,7227,"buted under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge ",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:7716,Integrability,depend,depends,7716,"der; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code for all modules it contains, plus any associated; interface definition files, plus the scripts used to control compilation; and installation of the library. Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running a program using the Library is not restricted, and output from; such a program is covered only if its contents constitute a work based; on the Library (independent of the use of the Library in a tool for; writing it). Whether that is true depends on what the Library does; and what the program that uses the Library does. 1. You may copy and distribute verbatim copies of the Library's; complete source code as you receive it, in any medium, provided that; you conspicuously and appropriately publish on each copy an; appropriate copyright notice and disclaimer of warranty; keep intact; all the notices that refer to this License and to the absence of any; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:15930,Integrability,interface,interface-compatible,15930,"s License. Also, you must do one; of these things:. a) Accompany the work with the complete corresponding; machine-readable source code for the Library including whatever; changes were used in the work (which must be distributed under; Sections 1 and 2 above); and, if the work is an executable linked; with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in ei",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:21384,Integrability,interface,interfaces,21384," the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorporates the limitation as if; written in the body of this License. 13. The Free Software Foundation may publish revised and/or new; versions of the Lesser General Public License from time to time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation. 14. If y",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:10243,Modifiability,extend,extend,10243,"at,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote; it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Library. In addition, mere aggregation of another work not based on the Library; with the Library (or with a work based on the Library) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may opt to apply the terms of the ordinary GNU General Public; License instead of this License to a given copy of the Library. To do; this, you must alter all the notices that refer to this License, so; that they refer to the ordinary GNU General Public License, version 2,; instead of to this License. (If a newer version than version 2 of the; ordinary GN",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:9290,Performance,perform,performs,9290,"; warranty; and distribute a copy of this License along with the; Library. You may charge a fee for the physical act of transferring a copy,; and you may at your option offer warranty protection in exchange for a; fee. 2. You may modify your copy or copies of the Library or any portion; of it, thus forming a work based on the Library, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) The modified work must itself be a software library. b) You must cause the files modified to carry prominent notices; stating that you changed the files and the date of any change. c) You must cause the whole of the work to be licensed at no; charge to all third parties under the terms of this License. d) If a facility in the modified Library refers to a function or a; table of data to be supplied by an application program that uses; the facility, other than as an argument passed when the facility; is invoked, then you must make a good faith effort to ensure that,; in the event an application does not supply such function or; table, the facility still operates, and performs whatever part of; its purpose remains meaningful. (For example, a function in a library to compute square roots has; a purpose that is entirely well-defined independent of the; application. Therefore, Subsection 2d requires that any; application-supplied function or table used by this function must; be optional: if the application does not supply it, the square; root function must still compute square roots.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Library,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Library",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:16185,Performance,perform,performing,16185," with the Library, with the complete machine-readable ""work that; uses the Library"", as object code and/or source code, so that the; user can modify the Library and then relink to produce a modified; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary librarie",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:24661,Safety,safe,safest,24661,"BLE TO YOU; FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR; CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE; LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING; RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A; FAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF; SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH; DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Libraries. If you develop a new library, and you want it to be of the greatest; possible use to the public, we recommend making it free software that; everyone can redistribute and change. You can do so by permitting; redistribution under these terms (or, alternatively, under the terms of the; ordinary General Public License). To apply these terms, attach the following notices to the library. It is; safest to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least the; ""copyright"" line and a pointer to where the full notice is found. <one line to give the library's name and a brief idea of what it does.>; Copyright (C) <year> <name of author>. This library is free software; you can redistribute it and/or; modify it under the terms of the GNU Lesser General Public; License as published by the Free Software Foundation; either; version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU; Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public; License along with this library; if not, write to the Free Software; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301; USA. Also add information on how to contact you by electronic and paper ",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:2957,Security,threat,threat,2957,"you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others. Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for certain libraries in order to permit linking those; libraries into non-free programs. When a program is linked with a library, whether statically or using; a shared library, the combination of the two is legally speaking a; combined work, a derivative of the original library. The ordinary; General Public License therefore permits such linking only if the;",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:6183,Security,authoriz,authorized,6183,"le, permission to use the GNU C Library in; non-free programs enables many more people to use the whole GNU; operating system, as well as its variant, the GNU/Linux operating; system. Although the Lesser General Public License is Less protective of the; users' freedom, it does ensure that the user of a program that is; linked with the Library has the freedom and the wherewithal to run; that program using a modified version of the Library. The precise terms and conditions for copying, distribution and; modification follow. Pay close attention to the difference between a; ""work based on the library"" and a ""work that uses the library"". The; former contains code derived from the library, whereas the latter must; be combined with the library in order to run. GNU LESSER GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License Agreement applies to any software library or other; program which contains a notice placed by the copyright holder or; other authorized party saying it may be distributed under the terms of; this Lesser General Public License (also called ""this License"").; Each licensee is addressed as ""you"". A ""library"" means a collection of software functions and/or data; prepared so as to be conveniently linked with application programs; (which use some of those functions and data) to form executables. The ""Library"", below, refers to any such software library or work; which has been distributed under these terms. A ""work based on the; Library"" means either the Library or any derivative work under; copyright law: that is to say, a work containing the Library or a; portion of it, either verbatim or with modifications and/or translated; straightforwardly into another language. (Hereinafter, translation is; included without limitation in the term ""modification"".). ""Source code"" for a work means the preferred form of the work for; making modifications to it. For a library, complete source code means; all the source code fo",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:12081,Security,access,access,12081,"eral Public License has appeared, then you can specify; that version instead if you wish.) Do not make any other change in; these notices. Once this change is made in a given copy, it is irreversible for; that copy, so the ordinary GNU General Public License applies to all; subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of; the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or; derivative of it, under Section 2) in object code or executable form; under the terms of Sections 1 and 2 above provided that you accompany; it with the complete corresponding machine-readable source code, which; must be distributed under the terms of Sections 1 and 2 above on a; medium customarily used for software interchange. If distribution of object code is made by offering access to copy; from a designated place, then offering equivalent access to copy the; source code from the same place satisfies the requirement to; distribute the source code, even though third parties are not; compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the; Library, but is designed to work with the Library by being compiled or; linked with it, is called a ""work that uses the Library"". Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the sour",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:12147,Security,access,access,12147,"eral Public License has appeared, then you can specify; that version instead if you wish.) Do not make any other change in; these notices. Once this change is made in a given copy, it is irreversible for; that copy, so the ordinary GNU General Public License applies to all; subsequent copies and derivative works made from that copy. This option is useful when you wish to copy part of the code of; the Library into a program that is not a library. 4. You may copy and distribute the Library (or a portion or; derivative of it, under Section 2) in object code or executable form; under the terms of Sections 1 and 2 above provided that you accompany; it with the complete corresponding machine-readable source code, which; must be distributed under the terms of Sections 1 and 2 above on a; medium customarily used for software interchange. If distribution of object code is made by offering access to copy; from a designated place, then offering equivalent access to copy the; source code from the same place satisfies the requirement to; distribute the source code, even though third parties are not; compelled to copy the source along with the object code. 5. A program that contains no derivative of any portion of the; Library, but is designed to work with the Library by being compiled or; linked with it, is called a ""work that uses the Library"". Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the sour",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:13488,Security,access,accessors,13488," Such a; work, in isolation, is not a derivative work of the Library, and; therefore falls outside the scope of this License. However, linking a ""work that uses the Library"" with the Library; creates an executable that is a derivative of the Library (because it; contains portions of the Library), rather than a ""work that uses the; library"". The executable is therefore covered by this License.; Section 6 states terms for distribution of such executables. When a ""work that uses the Library"" uses material from a header file; that is part of the Library, the object code for the work may be a; derivative work of the Library even though the source code is not.; Whether this is true is especially significant if the work can be; linked without the Library, or if the work is itself a library. The; threshold for this to be true is not precisely defined by law. If such an object file uses only numerical parameters, data; structure layouts and accessors, and small macros and small inline; functions (ten lines or less in length), then the use of the object; file is unrestricted, regardless of whether it is legally a derivative; work. (Executables containing this object code plus portions of the; Library will still fall under Section 6.). Otherwise, if the work is a derivative of the Library, you may; distribute the object code for the work under the terms of Section 6.; Any executables containing that work also fall under Section 6,; whether or not they are linked directly with the Library itself. 6. As an exception to the Sections above, you may also combine or; link a ""work that uses the Library"" with the Library to produce a; work containing portions of the Library, and distribute that work; under terms of your choice, provided that the terms permit; modification of the work for the customer's own use and reverse; engineering for debugging such modifications. You must give prominent notice with each copy of the work that the; Library is used in it and that the Library and its",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:16266,Security,access,access,16266,"d; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary libraries that do not normally; accompany the operating system. Such a contradiction means you cannot; use both them and the Library together in an executable that you; distribute. 7. You may place library",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:16324,Security,access,access,16324,"d; executable containing the modified Library. (It is understood; that the user who changes the contents of definitions files in the; Library will not necessarily be able to recompile the application; to use the modified definitions.). b) Use a suitable shared library mechanism for linking with the; Library. A suitable mechanism is one that (1) uses at run time a; copy of the library already present on the user's computer system,; rather than copying library functions into the executable, and (2); will operate properly with a modified version of the library, if; the user installs one, as long as the modified version is; interface-compatible with the version that the work was made with. c) Accompany the work with a written offer, valid for at; least three years, to give the same user the materials; specified in Subsection 6a, above, for a charge no more; than the cost of performing this distribution. d) If distribution of the work is made by offering access to copy; from a designated place, offer equivalent access to copy the above; specified materials from the same place. e) Verify that the user has already received a copy of these; materials or that you have already sent this user a copy. For an executable, the required form of the ""work that uses the; Library"" must include any data and utility programs needed for; reproducing the executable from it. However, as a special exception,; the materials to be distributed need not include anything that is; normally distributed (in either source or binary form) with the major; components (compiler, kernel, and so on) of the operating system on; which the executable runs, unless that component itself accompanies; the executable. It may happen that this requirement contradicts the license; restrictions of other proprietary libraries that do not normally; accompany the operating system. Such a contradiction means you cannot; use both them and the Library together in an executable that you; distribute. 7. You may place library",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:20724,Security,integrity,integrity,20724,"der, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Library at all. For example, if a patent; license would not permit royalty-free redistribution of the Library by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any; particular circumstance, the balance of the section is intended to apply,; and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorpora",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:2606,Usability,clear,clear,2606,"otect your rights, we need to make restrictions that forbid; distributors to deny you these rights or to ask you to surrender these; rights. These restrictions translate to certain responsibilities for; you if you distribute copies of the library or if you modify it. For example, if you distribute copies of the library, whether gratis; or for a fee, you must give the recipients all the rights that we gave; you. You must make sure that they, too, receive or can get the source; code. If you link other code with the library, you must provide; complete object files to the recipients, so that they can relink them; with the library after making changes to the library and recompiling; it. And you must show them these terms so they know their rights. We protect your rights with a two-step method: (1) we copyright the; library, and (2) we offer you this license, which gives you legal; permission to copy, distribute and/or modify the library. To protect each distributor, we want to make it very clear that; there is no warranty for the free library. Also, if the library is; modified by someone else and passed on, the recipients should know; that what they have is not the original version, so that the original; author's reputation will not be affected by problems that might be; introduced by others. Finally, software patents pose a constant threat to the existence of; any free program. We wish to make sure that a company cannot; effectively restrict the users of a free program by obtaining a; restrictive license from a patent holder. Therefore, we insist that; any patent license obtained for a version of the library must be; consistent with the full freedom of use specified in this license. Most GNU software, including some libraries, is covered by the; ordinary GNU General Public License. This license, the GNU Lesser; General Public License, applies to certain designated libraries, and; is quite different from the ordinary General Public License. We use; this license for certa",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:21189,Usability,clear,clear,21189,"tisfy both it and this License would be to; refrain entirely from distribution of the Library. If any portion of this section is held invalid or unenforceable under any; particular circumstance, the balance of the section is intended to apply,; and the section as a whole is intended to apply in other circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 12. If the distribution and/or use of the Library is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Library under this License may add; an explicit geographical distribution limitation excluding those countries,; so that distribution is permitted only in or among countries not thus; excluded. In such case, this License incorporates the limitation as if; written in the body of this License. 13. The Free Software Foundation may publish revised and/or new; versions of the Lesser General Public License from time to time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md:22792,Usability,guid,guided,22792,"time.; Such new versions will be similar in spirit to the present version,; but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Library; specifies a version number of this License which applies to it and; ""any later version"", you have the option of following the terms and; conditions either of that version or of any later version published by; the Free Software Foundation. If the Library does not specify a; license version number, you may choose any version ever published by; the Free Software Foundation. 14. If you wish to incorporate parts of the Library into other free; programs whose distribution conditions are incompatible with these,; write to the author to ask for permission. For software which is; copyrighted by the Free Software Foundation, write to the Free; Software Foundation; we sometimes make exceptions for this. Our; decision will be guided by the two goals of preserving the free status; of all derivatives of our free software and of promoting the sharing; and reuse of software generally. NO WARRANTY. 15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO; WARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.; EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR; OTHER PARTIES PROVIDE THE LIBRARY ""AS IS"" WITHOUT WARRANTY OF ANY; KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR; PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE; LIBRARY IS WITH YOU. SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME; THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. 16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN; WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY; AND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU; FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR; CONSEQUENTIAL DAMAGES A",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/LICENSE.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/LICENSE.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/README.md:16,Modifiability,plugin,plugin,16,"# Haption. SOFA plugin allowing the use a Haption's haptic device in a SOFA simulation. ## Requirements. The plugin relies on the [Virtuose API](https://www.haption.com/en/software-en/virtuose-en.html), which is not provided with the plugin.; ",MatchSource.DOCS,applications/plugins/Haption/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/README.md:109,Modifiability,plugin,plugin,109,"# Haption. SOFA plugin allowing the use a Haption's haptic device in a SOFA simulation. ## Requirements. The plugin relies on the [Virtuose API](https://www.haption.com/en/software-en/virtuose-en.html), which is not provided with the plugin.; ",MatchSource.DOCS,applications/plugins/Haption/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/README.md:234,Modifiability,plugin,plugin,234,"# Haption. SOFA plugin allowing the use a Haption's haptic device in a SOFA simulation. ## Requirements. The plugin relies on the [Virtuose API](https://www.haption.com/en/software-en/virtuose-en.html), which is not provided with the plugin.; ",MatchSource.DOCS,applications/plugins/Haption/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md:42,Modifiability,plugin,plugin,42,"# External PluginExample. This example of plugin has been converted to an external repository, and it is used as a showcase of:; - how to write a plugin for SOFA (CMake, file structure, code); - how to configure the plugin to be fetchable from CMake. The content of the plugin is now located at: https://github.com/sofa-framework/PluginExample . The associated *ExternalProjectConfig.cmake.in* describes how to fetch from an repostitory, automatically at the cmake configure time.; Finally, one has to declare this plugin in the root CMakefile, where he will declare this plugin as external, using *add_sofa_plugin_external(<dirname> <projectname>)*; Once fetched, this directory will be populated with the current code pointed in the *ExternalProjectConfig.cmake.in* file.; ",MatchSource.DOCS,applications/plugins/PluginExample/ExternalPluginExample.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md:146,Modifiability,plugin,plugin,146,"# External PluginExample. This example of plugin has been converted to an external repository, and it is used as a showcase of:; - how to write a plugin for SOFA (CMake, file structure, code); - how to configure the plugin to be fetchable from CMake. The content of the plugin is now located at: https://github.com/sofa-framework/PluginExample . The associated *ExternalProjectConfig.cmake.in* describes how to fetch from an repostitory, automatically at the cmake configure time.; Finally, one has to declare this plugin in the root CMakefile, where he will declare this plugin as external, using *add_sofa_plugin_external(<dirname> <projectname>)*; Once fetched, this directory will be populated with the current code pointed in the *ExternalProjectConfig.cmake.in* file.; ",MatchSource.DOCS,applications/plugins/PluginExample/ExternalPluginExample.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md:202,Modifiability,config,configure,202,"# External PluginExample. This example of plugin has been converted to an external repository, and it is used as a showcase of:; - how to write a plugin for SOFA (CMake, file structure, code); - how to configure the plugin to be fetchable from CMake. The content of the plugin is now located at: https://github.com/sofa-framework/PluginExample . The associated *ExternalProjectConfig.cmake.in* describes how to fetch from an repostitory, automatically at the cmake configure time.; Finally, one has to declare this plugin in the root CMakefile, where he will declare this plugin as external, using *add_sofa_plugin_external(<dirname> <projectname>)*; Once fetched, this directory will be populated with the current code pointed in the *ExternalProjectConfig.cmake.in* file.; ",MatchSource.DOCS,applications/plugins/PluginExample/ExternalPluginExample.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md:216,Modifiability,plugin,plugin,216,"# External PluginExample. This example of plugin has been converted to an external repository, and it is used as a showcase of:; - how to write a plugin for SOFA (CMake, file structure, code); - how to configure the plugin to be fetchable from CMake. The content of the plugin is now located at: https://github.com/sofa-framework/PluginExample . The associated *ExternalProjectConfig.cmake.in* describes how to fetch from an repostitory, automatically at the cmake configure time.; Finally, one has to declare this plugin in the root CMakefile, where he will declare this plugin as external, using *add_sofa_plugin_external(<dirname> <projectname>)*; Once fetched, this directory will be populated with the current code pointed in the *ExternalProjectConfig.cmake.in* file.; ",MatchSource.DOCS,applications/plugins/PluginExample/ExternalPluginExample.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md:270,Modifiability,plugin,plugin,270,"# External PluginExample. This example of plugin has been converted to an external repository, and it is used as a showcase of:; - how to write a plugin for SOFA (CMake, file structure, code); - how to configure the plugin to be fetchable from CMake. The content of the plugin is now located at: https://github.com/sofa-framework/PluginExample . The associated *ExternalProjectConfig.cmake.in* describes how to fetch from an repostitory, automatically at the cmake configure time.; Finally, one has to declare this plugin in the root CMakefile, where he will declare this plugin as external, using *add_sofa_plugin_external(<dirname> <projectname>)*; Once fetched, this directory will be populated with the current code pointed in the *ExternalProjectConfig.cmake.in* file.; ",MatchSource.DOCS,applications/plugins/PluginExample/ExternalPluginExample.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md:465,Modifiability,config,configure,465,"# External PluginExample. This example of plugin has been converted to an external repository, and it is used as a showcase of:; - how to write a plugin for SOFA (CMake, file structure, code); - how to configure the plugin to be fetchable from CMake. The content of the plugin is now located at: https://github.com/sofa-framework/PluginExample . The associated *ExternalProjectConfig.cmake.in* describes how to fetch from an repostitory, automatically at the cmake configure time.; Finally, one has to declare this plugin in the root CMakefile, where he will declare this plugin as external, using *add_sofa_plugin_external(<dirname> <projectname>)*; Once fetched, this directory will be populated with the current code pointed in the *ExternalProjectConfig.cmake.in* file.; ",MatchSource.DOCS,applications/plugins/PluginExample/ExternalPluginExample.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md:515,Modifiability,plugin,plugin,515,"# External PluginExample. This example of plugin has been converted to an external repository, and it is used as a showcase of:; - how to write a plugin for SOFA (CMake, file structure, code); - how to configure the plugin to be fetchable from CMake. The content of the plugin is now located at: https://github.com/sofa-framework/PluginExample . The associated *ExternalProjectConfig.cmake.in* describes how to fetch from an repostitory, automatically at the cmake configure time.; Finally, one has to declare this plugin in the root CMakefile, where he will declare this plugin as external, using *add_sofa_plugin_external(<dirname> <projectname>)*; Once fetched, this directory will be populated with the current code pointed in the *ExternalProjectConfig.cmake.in* file.; ",MatchSource.DOCS,applications/plugins/PluginExample/ExternalPluginExample.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md:572,Modifiability,plugin,plugin,572,"# External PluginExample. This example of plugin has been converted to an external repository, and it is used as a showcase of:; - how to write a plugin for SOFA (CMake, file structure, code); - how to configure the plugin to be fetchable from CMake. The content of the plugin is now located at: https://github.com/sofa-framework/PluginExample . The associated *ExternalProjectConfig.cmake.in* describes how to fetch from an repostitory, automatically at the cmake configure time.; Finally, one has to declare this plugin in the root CMakefile, where he will declare this plugin as external, using *add_sofa_plugin_external(<dirname> <projectname>)*; Once fetched, this directory will be populated with the current code pointed in the *ExternalProjectConfig.cmake.in* file.; ",MatchSource.DOCS,applications/plugins/PluginExample/ExternalPluginExample.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PluginExample/ExternalPluginExample.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:31,Modifiability,plugin,plugin,31,"## Introduction. SofaCUDA is a plugin that provides a number of Sofa components that have been implemented using CUDA, which allows the graphics card to be used for multithreaded programming. This can significantly improve the performance of your scene when working with large meshes. ## Compilation. See [instructions on the SOFA website](https://www.sofa-framework.org/community/doc/plugins/usual-plugins/using-cuda/). ## Paradigm. The plugin is mainly a list of components that already exist in various modules of SOFA.; The difference is that those components are now implemented using CUDA. In SOFA, components are defined to work with specific data types, such as `Vec3Types` or `Rigid3Types` (most of them are defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are us",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:385,Modifiability,plugin,plugins,385,"## Introduction. SofaCUDA is a plugin that provides a number of Sofa components that have been implemented using CUDA, which allows the graphics card to be used for multithreaded programming. This can significantly improve the performance of your scene when working with large meshes. ## Compilation. See [instructions on the SOFA website](https://www.sofa-framework.org/community/doc/plugins/usual-plugins/using-cuda/). ## Paradigm. The plugin is mainly a list of components that already exist in various modules of SOFA.; The difference is that those components are now implemented using CUDA. In SOFA, components are defined to work with specific data types, such as `Vec3Types` or `Rigid3Types` (most of them are defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are us",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:399,Modifiability,plugin,plugins,399,"## Introduction. SofaCUDA is a plugin that provides a number of Sofa components that have been implemented using CUDA, which allows the graphics card to be used for multithreaded programming. This can significantly improve the performance of your scene when working with large meshes. ## Compilation. See [instructions on the SOFA website](https://www.sofa-framework.org/community/doc/plugins/usual-plugins/using-cuda/). ## Paradigm. The plugin is mainly a list of components that already exist in various modules of SOFA.; The difference is that those components are now implemented using CUDA. In SOFA, components are defined to work with specific data types, such as `Vec3Types` or `Rigid3Types` (most of them are defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are us",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:438,Modifiability,plugin,plugin,438,"## Introduction. SofaCUDA is a plugin that provides a number of Sofa components that have been implemented using CUDA, which allows the graphics card to be used for multithreaded programming. This can significantly improve the performance of your scene when working with large meshes. ## Compilation. See [instructions on the SOFA website](https://www.sofa-framework.org/community/doc/plugins/usual-plugins/using-cuda/). ## Paradigm. The plugin is mainly a list of components that already exist in various modules of SOFA.; The difference is that those components are now implemented using CUDA. In SOFA, components are defined to work with specific data types, such as `Vec3Types` or `Rigid3Types` (most of them are defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are us",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:227,Performance,perform,performance,227,"## Introduction. SofaCUDA is a plugin that provides a number of Sofa components that have been implemented using CUDA, which allows the graphics card to be used for multithreaded programming. This can significantly improve the performance of your scene when working with large meshes. ## Compilation. See [instructions on the SOFA website](https://www.sofa-framework.org/community/doc/plugins/usual-plugins/using-cuda/). ## Paradigm. The plugin is mainly a list of components that already exist in various modules of SOFA.; The difference is that those components are now implemented using CUDA. In SOFA, components are defined to work with specific data types, such as `Vec3Types` or `Rigid3Types` (most of them are defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are us",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:2188,Performance,perform,performances,2188,"defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are using float on the device. You can activate double precision using CMake option: SOFACUDA_DOUBLE). ## Performances. The folder `scenes/benchmarks` contains simulation files used to compare performances between CPU and GPU implementations.; All scenes exist in double: the CPU version has the suffix `_cpu`, and the GPU version has the suffix `_gpu`. To give you an idea of the speed up you can achieve using SofaCUDA, measurement have been performed on some systems on some simulations in `scenes/benchmarks`.; It is provided as a CSV file in the `doc` folder.; Here is the corresponding graph:; ![performances_csv](https://user-images.githubusercontent.com/21199245/148964875-99c21320-384f-40c9-9dc6-a5e77a8dca82.png)",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:2439,Performance,perform,performed,2439,"defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are using float on the device. You can activate double precision using CMake option: SOFACUDA_DOUBLE). ## Performances. The folder `scenes/benchmarks` contains simulation files used to compare performances between CPU and GPU implementations.; All scenes exist in double: the CPU version has the suffix `_cpu`, and the GPU version has the suffix `_gpu`. To give you an idea of the speed up you can achieve using SofaCUDA, measurement have been performed on some systems on some simulations in `scenes/benchmarks`.; It is provided as a CSV file in the `doc` folder.; Here is the corresponding graph:; ![performances_csv](https://user-images.githubusercontent.com/21199245/148964875-99c21320-384f-40c9-9dc6-a5e77a8dca82.png)",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:2134,Testability,benchmark,benchmarks,2134,"defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are using float on the device. You can activate double precision using CMake option: SOFACUDA_DOUBLE). ## Performances. The folder `scenes/benchmarks` contains simulation files used to compare performances between CPU and GPU implementations.; All scenes exist in double: the CPU version has the suffix `_cpu`, and the GPU version has the suffix `_gpu`. To give you an idea of the speed up you can achieve using SofaCUDA, measurement have been performed on some systems on some simulations in `scenes/benchmarks`.; It is provided as a CSV file in the `doc` folder.; Here is the corresponding graph:; ![performances_csv](https://user-images.githubusercontent.com/21199245/148964875-99c21320-384f-40c9-9dc6-a5e77a8dca82.png)",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md:2496,Testability,benchmark,benchmarks,2496,"defined in `VecTypes.h` and `RigidTypes.h`).; SofaCUDA adds more data types.; They still represent the same type of data, but they are implemented such that they can be manipulated on the GPU using CUDA.; For example, the CPU data type `Vec3Types` equivalent in SofaCUDA is `CudaVec3Types`.; CUDA data types are defined in `CudaTypes.h`. In SOFA, components working with a specific data type are just template classes explicitly instantiated with this data type.; For example, `MechanicalObject<Vec3Types>` is the instantiation of the template class `MechanicalObject` with `Vec3Types` as the template parameter.; In SofaCUDA, components are template specializations of the SOFA equivalents.; For example, `MechanicalObject<CudaVec3Types>` is a specialization of `MechanicalObject` for `CudaVec3Types`. The result is that the user just has to change the template parameter in the scene, in order to use the CUDA version of the same component.; For example, in XML, `<MechanicalObject template=""Vec3f"" />` is the CPU version of `MechanicalObject`, and `<MechanicalObject template=""CudaVec3f"" />` is the GPU version.; Note that in SOFA Vec3Types are by default in double (Vec3d), except if you compile in float only (CMake option: SOFA_FLOATING_POINT_TYPE). However CudaVec3Types are using float on the device. You can activate double precision using CMake option: SOFACUDA_DOUBLE). ## Performances. The folder `scenes/benchmarks` contains simulation files used to compare performances between CPU and GPU implementations.; All scenes exist in double: the CPU version has the suffix `_cpu`, and the GPU version has the suffix `_gpu`. To give you an idea of the speed up you can achieve using SofaCUDA, measurement have been performed on some systems on some simulations in `scenes/benchmarks`.; It is provided as a CSV file in the `doc` folder.; Here is the corresponding graph:; ![performances_csv](https://user-images.githubusercontent.com/21199245/148964875-99c21320-384f-40c9-9dc6-a5e77a8dca82.png)",MatchSource.DOCS,applications/plugins/SofaCUDA/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/README.md:23,Modifiability,plugin,plugin,23,= The SofaDistanceGrid plugin. ,MatchSource.DOCS,applications/plugins/SofaDistanceGrid/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/README.md:16,Modifiability,plugin,plugin,16,= ImplicitField plugin. ,MatchSource.DOCS,applications/plugins/SofaImplicitField/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:359,Availability,avail,available,359,"# SofaMatrix. SofaMatrix is a SOFA plugin containing components related to linear system matrices. ## Components. The plugin contains the following components that can be placed into a SOFA scene:. ### GlobalSystemMatrixExporter. GlobalSystemMatrixExporter is a component to export the matrix of a linear system as a file. #### Filename. A Data ""filename"" is available to specify the name of the exported file.; If ""filename"" is not set, it gets the name of the component. ""filename"" can be an absolute path, or relative to the SOFA executable.; Directories are created if necessary. The extension in ""filename"" defines the file format. A number is added after the filename.; It corresponds to the number of elapsed time steps when the file is exported. Depending on the Data ""exportEveryNumberOfSteps"", the matrix can be export only at specified number of time steps. #### Supported File Format. GlobalSystemMatrixExporter supports the following file formats:; * **txt**: exports a Python-like list of lists, containing all the matrix values including the zeros.; It uses the `operator<<` in `BaseMatrix`.; * **csv**: exports a simple comma-separated values file, containing all the matrix values including the zeros.; * **jpg**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **png**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:2050,Availability,avail,available,2050,"ros.; It uses the `operator<<` in `BaseMatrix`.; * **csv**: exports a simple comma-separated values file, containing all the matrix values including the zeros.; * **jpg**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **png**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixExporter/>; ```. A use case is available in the examples folder. ### GlobalSystemMatrixImage. GlobalSystemMatrixImage is a component to visualize the matrix of a linear system in a; Qt widget. #### Link to Linear Solver. GlobalSystemMatrixImage must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixImage linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixImage/>; ```. A use case is available in the examples folder. #### Screenshot. ![GlobalSystemMatrixImage](doc/GlobalSystemMatrixImage.png). ### FillReducingOrdering. This component reorders the degrees of freedom in a mesh in order to reduce fill-in in sparse matrix factorization.; Two methods of reordering are available:; 1) Metis; 2) Approximate minimum degree (AMD) from Eigen. The example `FillReducingOrdering.scn` sho",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:2662,Availability,avail,available,2662,"he value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixExporter/>; ```. A use case is available in the examples folder. ### GlobalSystemMatrixImage. GlobalSystemMatrixImage is a component to visualize the matrix of a linear system in a; Qt widget. #### Link to Linear Solver. GlobalSystemMatrixImage must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixImage linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixImage/>; ```. A use case is available in the examples folder. #### Screenshot. ![GlobalSystemMatrixImage](doc/GlobalSystemMatrixImage.png). ### FillReducingOrdering. This component reorders the degrees of freedom in a mesh in order to reduce fill-in in sparse matrix factorization.; Two methods of reordering are available:; 1) Metis; 2) Approximate minimum degree (AMD) from Eigen. The example `FillReducingOrdering.scn` shows how to use this component.; In this simulation, the same object is simulated twice:; 1) No reordering method is applied; 2) A reordering method is applied. It can be observed that the number of non-zero values in the matrix decomposition is about 80% lower when the vertices are reordered.; It results to a faster matrix system resolution.; ",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:2947,Availability,avail,available,2947,"he value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixExporter/>; ```. A use case is available in the examples folder. ### GlobalSystemMatrixImage. GlobalSystemMatrixImage is a component to visualize the matrix of a linear system in a; Qt widget. #### Link to Linear Solver. GlobalSystemMatrixImage must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixImage linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixImage/>; ```. A use case is available in the examples folder. #### Screenshot. ![GlobalSystemMatrixImage](doc/GlobalSystemMatrixImage.png). ### FillReducingOrdering. This component reorders the degrees of freedom in a mesh in order to reduce fill-in in sparse matrix factorization.; Two methods of reordering are available:; 1) Metis; 2) Approximate minimum degree (AMD) from Eigen. The example `FillReducingOrdering.scn` shows how to use this component.; In this simulation, the same object is simulated twice:; 1) No reordering method is applied; 2) A reordering method is applied. It can be observed that the number of non-zero values in the matrix decomposition is about 80% lower when the vertices are reordered.; It results to a faster matrix system resolution.; ",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:2869,Energy Efficiency,reduce,reduce,2869,"he value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixExporter/>; ```. A use case is available in the examples folder. ### GlobalSystemMatrixImage. GlobalSystemMatrixImage is a component to visualize the matrix of a linear system in a; Qt widget. #### Link to Linear Solver. GlobalSystemMatrixImage must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixImage linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixImage/>; ```. A use case is available in the examples folder. #### Screenshot. ![GlobalSystemMatrixImage](doc/GlobalSystemMatrixImage.png). ### FillReducingOrdering. This component reorders the degrees of freedom in a mesh in order to reduce fill-in in sparse matrix factorization.; Two methods of reordering are available:; 1) Metis; 2) Approximate minimum degree (AMD) from Eigen. The example `FillReducingOrdering.scn` shows how to use this component.; In this simulation, the same object is simulated twice:; 1) No reordering method is applied; 2) A reordering method is applied. It can be observed that the number of non-zero values in the matrix decomposition is about 80% lower when the vertices are reordered.; It results to a faster matrix system resolution.; ",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:35,Modifiability,plugin,plugin,35,"# SofaMatrix. SofaMatrix is a SOFA plugin containing components related to linear system matrices. ## Components. The plugin contains the following components that can be placed into a SOFA scene:. ### GlobalSystemMatrixExporter. GlobalSystemMatrixExporter is a component to export the matrix of a linear system as a file. #### Filename. A Data ""filename"" is available to specify the name of the exported file.; If ""filename"" is not set, it gets the name of the component. ""filename"" can be an absolute path, or relative to the SOFA executable.; Directories are created if necessary. The extension in ""filename"" defines the file format. A number is added after the filename.; It corresponds to the number of elapsed time steps when the file is exported. Depending on the Data ""exportEveryNumberOfSteps"", the matrix can be export only at specified number of time steps. #### Supported File Format. GlobalSystemMatrixExporter supports the following file formats:; * **txt**: exports a Python-like list of lists, containing all the matrix values including the zeros.; It uses the `operator<<` in `BaseMatrix`.; * **csv**: exports a simple comma-separated values file, containing all the matrix values including the zeros.; * **jpg**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **png**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:118,Modifiability,plugin,plugin,118,"# SofaMatrix. SofaMatrix is a SOFA plugin containing components related to linear system matrices. ## Components. The plugin contains the following components that can be placed into a SOFA scene:. ### GlobalSystemMatrixExporter. GlobalSystemMatrixExporter is a component to export the matrix of a linear system as a file. #### Filename. A Data ""filename"" is available to specify the name of the exported file.; If ""filename"" is not set, it gets the name of the component. ""filename"" can be an absolute path, or relative to the SOFA executable.; Directories are created if necessary. The extension in ""filename"" defines the file format. A number is added after the filename.; It corresponds to the number of elapsed time steps when the file is exported. Depending on the Data ""exportEveryNumberOfSteps"", the matrix can be export only at specified number of time steps. #### Supported File Format. GlobalSystemMatrixExporter supports the following file formats:; * **txt**: exports a Python-like list of lists, containing all the matrix values including the zeros.; It uses the `operator<<` in `BaseMatrix`.; * **csv**: exports a simple comma-separated values file, containing all the matrix values including the zeros.; * **jpg**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **png**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:1695,Modifiability,inherit,inheriting,1695,"esponds to the number of elapsed time steps when the file is exported. Depending on the Data ""exportEveryNumberOfSteps"", the matrix can be export only at specified number of time steps. #### Supported File Format. GlobalSystemMatrixExporter supports the following file formats:; * **txt**: exports a Python-like list of lists, containing all the matrix values including the zeros.; It uses the `operator<<` in `BaseMatrix`.; * **csv**: exports a simple comma-separated values file, containing all the matrix values including the zeros.; * **jpg**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **png**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixExporter/>; ```. A use case is available in the examples folder. ### GlobalSystemMatrixImage. GlobalSystemMatrixImage is a component to visualize the matrix of a linear system in a; Qt widget. #### Link to Linear Solver. GlobalSystemMatrixImage must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixImage linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixImage/>; ```. A use case is available in the examp",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:2313,Modifiability,inherit,inheriting,2313,"ack; pixel means the value is non-zero.; * **png**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixExporter/>; ```. A use case is available in the examples folder. ### GlobalSystemMatrixImage. GlobalSystemMatrixImage is a component to visualize the matrix of a linear system in a; Qt widget. #### Link to Linear Solver. GlobalSystemMatrixImage must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixImage linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixImage/>; ```. A use case is available in the examples folder. #### Screenshot. ![GlobalSystemMatrixImage](doc/GlobalSystemMatrixImage.png). ### FillReducingOrdering. This component reorders the degrees of freedom in a mesh in order to reduce fill-in in sparse matrix factorization.; Two methods of reordering are available:; 1) Metis; 2) Approximate minimum degree (AMD) from Eigen. The example `FillReducingOrdering.scn` shows how to use this component.; In this simulation, the same object is simulated twice:; 1) No reordering method is applied; 2) A reordering method is applied. It can be observed that the number of non-zero values in the matrix decomposition is ",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md:1129,Usability,simpl,simple,1129,"t can be placed into a SOFA scene:. ### GlobalSystemMatrixExporter. GlobalSystemMatrixExporter is a component to export the matrix of a linear system as a file. #### Filename. A Data ""filename"" is available to specify the name of the exported file.; If ""filename"" is not set, it gets the name of the component. ""filename"" can be an absolute path, or relative to the SOFA executable.; Directories are created if necessary. The extension in ""filename"" defines the file format. A number is added after the filename.; It corresponds to the number of elapsed time steps when the file is exported. Depending on the Data ""exportEveryNumberOfSteps"", the matrix can be export only at specified number of time steps. #### Supported File Format. GlobalSystemMatrixExporter supports the following file formats:; * **txt**: exports a Python-like list of lists, containing all the matrix values including the zeros.; It uses the `operator<<` in `BaseMatrix`.; * **csv**: exports a simple comma-separated values file, containing all the matrix values including the zeros.; * **jpg**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **png**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero.; * **bmp**: exports a binary image where white pixel means the value is zero, and black; pixel means the value is non-zero. #### Link to Linear Solver. GlobalSystemMatrixExporter must have a link to a linear solver (a component inheriting from `sofa::core::behavior::LinearSolver`). The link can be explicit. Example:; ```xml; <GlobalSystemMatrixExporter linearSolver=""@pathToLinearSolver""/>; ```. The link can be implicit. I.e the component will search for a linear solver in the current Node. Example:; ```xml; <SparseLDLSolver/>; <GlobalSystemMatrixExporter/>; ```. A use case is available in the examples folder. ### GlobalSystemMatrixImage. GlobalSystemMatrixImage is a component to visuali",MatchSource.DOCS,applications/plugins/SofaMatrix/SofaMatrix.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/SofaMatrix.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/README.md:24,Modifiability,plugin,plugin,24,# SofaNewmat. This SOFA plugin use the (old) newmat library.,MatchSource.DOCS,applications/plugins/SofaNewmat/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md:387,Availability,down,downloaded,387,"README.md; =========. This plugin requires the following dependencies:; - gfortran; - blas; - lapack; - gomp. Download the Pardiso library and license key from https://www.pardiso-project.org. In your home directory, create a file ""pardiso.lic"" which includes the license key. When configuring SOFA in CMake, fill the path variable ""PARDISO_LIB"" with the path to the pardiso library you downloaded.; ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md:57,Integrability,depend,dependencies,57,"README.md; =========. This plugin requires the following dependencies:; - gfortran; - blas; - lapack; - gomp. Download the Pardiso library and license key from https://www.pardiso-project.org. In your home directory, create a file ""pardiso.lic"" which includes the license key. When configuring SOFA in CMake, fill the path variable ""PARDISO_LIB"" with the path to the pardiso library you downloaded.; ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md:27,Modifiability,plugin,plugin,27,"README.md; =========. This plugin requires the following dependencies:; - gfortran; - blas; - lapack; - gomp. Download the Pardiso library and license key from https://www.pardiso-project.org. In your home directory, create a file ""pardiso.lic"" which includes the license key. When configuring SOFA in CMake, fill the path variable ""PARDISO_LIB"" with the path to the pardiso library you downloaded.; ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md:282,Modifiability,config,configuring,282,"README.md; =========. This plugin requires the following dependencies:; - gfortran; - blas; - lapack; - gomp. Download the Pardiso library and license key from https://www.pardiso-project.org. In your home directory, create a file ""pardiso.lic"" which includes the license key. When configuring SOFA in CMake, fill the path variable ""PARDISO_LIB"" with the path to the pardiso library you downloaded.; ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md:323,Modifiability,variab,variable,323,"README.md; =========. This plugin requires the following dependencies:; - gfortran; - blas; - lapack; - gomp. Download the Pardiso library and license key from https://www.pardiso-project.org. In your home directory, create a file ""pardiso.lic"" which includes the license key. When configuring SOFA in CMake, fill the path variable ""PARDISO_LIB"" with the path to the pardiso library you downloaded.; ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md:201,Deployability,install,install,201,# Articulated Arm . ![](images/robot.png). ## Requirements . - [SofaPython3](https://github.com/sofa-framework/SofaPython3) plugin for SOFA. ### Optional. To use a GUI to control the robot you need to install [tkinter](https://docs.python.org/3/library/tkinter.html) for python. For instance on Ubuntu:. `sudo apt-install python-tk`. and uncomment the following lines in `robot.py`:. ```python; from robotGUI import RobotGUI # Uncomment this if you want to use the GUI; ```; ```python; robot.addObject(RobotGUI(robot=robot)) # Uncomment this if you want to use the GUI; ```. ## How to run the simulation. ```bash; runSofa robot.py; ```. ,MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md:314,Deployability,install,install,314,# Articulated Arm . ![](images/robot.png). ## Requirements . - [SofaPython3](https://github.com/sofa-framework/SofaPython3) plugin for SOFA. ### Optional. To use a GUI to control the robot you need to install [tkinter](https://docs.python.org/3/library/tkinter.html) for python. For instance on Ubuntu:. `sudo apt-install python-tk`. and uncomment the following lines in `robot.py`:. ```python; from robotGUI import RobotGUI # Uncomment this if you want to use the GUI; ```; ```python; robot.addObject(RobotGUI(robot=robot)) # Uncomment this if you want to use the GUI; ```. ## How to run the simulation. ```bash; runSofa robot.py; ```. ,MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md:124,Modifiability,plugin,plugin,124,# Articulated Arm . ![](images/robot.png). ## Requirements . - [SofaPython3](https://github.com/sofa-framework/SofaPython3) plugin for SOFA. ### Optional. To use a GUI to control the robot you need to install [tkinter](https://docs.python.org/3/library/tkinter.html) for python. For instance on Ubuntu:. `sudo apt-install python-tk`. and uncomment the following lines in `robot.py`:. ```python; from robotGUI import RobotGUI # Uncomment this if you want to use the GUI; ```; ```python; robot.addObject(RobotGUI(robot=robot)) # Uncomment this if you want to use the GUI; ```. ## How to run the simulation. ```bash; runSofa robot.py; ```. ,MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/README.md:324,Availability,avail,available,324,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. ## Installation. Ubuntu :; ```; $ sudo apt-get install libavcodec-dev libswscale-dev libavutil-dev libavformat-dev ; ```. ## How to use it. Every needed information are available in runSofa helper.; ```; $ ./runSofa -h; ```. Here is an example for recording a 5 seconds video in 1920x1080 ; ```; $ ./runSofa -g hRecorder --video --width=1920 --height=1080 --fps=60 --recordTime=5 -a --filename aFileName; ```; This example will record in a video file named myFileName a footage of the default runSofa scene (aka caduceus). The dimensions of the video will be 1920x1080, the framerate is set to 60fps, the recording time will be 10 seconds and the option -a animate the scene. Here is an example for screenshots 1920x1080 ; ```; $ ./runSofa -g hRecorder --picture --width=1920 --height=1080 --fps=60 --recordTime=10 -a --filename aFileName; ```; ## Information. You have to use an InteractiveCamera component in your scene and correctly place it before recording.; By example you need to add this line to your caduceus scene :; ```; <InteractiveCamera position=""0 30 90"" lookAt=""0 30 0""/>; ```. ### Authors; Douaille Erwan. ### Contact information; douailleerwan@gmail.com; ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/README.md:202,Deployability,install,install,202,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. ## Installation. Ubuntu :; ```; $ sudo apt-get install libavcodec-dev libswscale-dev libavutil-dev libavformat-dev ; ```. ## How to use it. Every needed information are available in runSofa helper.; ```; $ ./runSofa -h; ```. Here is an example for recording a 5 seconds video in 1920x1080 ; ```; $ ./runSofa -g hRecorder --video --width=1920 --height=1080 --fps=60 --recordTime=5 -a --filename aFileName; ```; This example will record in a video file named myFileName a footage of the default runSofa scene (aka caduceus). The dimensions of the video will be 1920x1080, the framerate is set to 60fps, the recording time will be 10 seconds and the option -a animate the scene. Here is an example for screenshots 1920x1080 ; ```; $ ./runSofa -g hRecorder --picture --width=1920 --height=1080 --fps=60 --recordTime=10 -a --filename aFileName; ```; ## Information. You have to use an InteractiveCamera component in your scene and correctly place it before recording.; By example you need to add this line to your caduceus scene :; ```; <InteractiveCamera position=""0 30 90"" lookAt=""0 30 0""/>; ```. ### Authors; Douaille Erwan. ### Contact information; douailleerwan@gmail.com; ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/README.md:52,Modifiability,plugin,plugin,52,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. ## Installation. Ubuntu :; ```; $ sudo apt-get install libavcodec-dev libswscale-dev libavutil-dev libavformat-dev ; ```. ## How to use it. Every needed information are available in runSofa helper.; ```; $ ./runSofa -h; ```. Here is an example for recording a 5 seconds video in 1920x1080 ; ```; $ ./runSofa -g hRecorder --video --width=1920 --height=1080 --fps=60 --recordTime=5 -a --filename aFileName; ```; This example will record in a video file named myFileName a footage of the default runSofa scene (aka caduceus). The dimensions of the video will be 1920x1080, the framerate is set to 60fps, the recording time will be 10 seconds and the option -a animate the scene. Here is an example for screenshots 1920x1080 ; ```; $ ./runSofa -g hRecorder --picture --width=1920 --height=1080 --fps=60 --recordTime=10 -a --filename aFileName; ```; ## Information. You have to use an InteractiveCamera component in your scene and correctly place it before recording.; By example you need to add this line to your caduceus scene :; ```; <InteractiveCamera position=""0 30 90"" lookAt=""0 30 0""/>; ```. ### Authors; Douaille Erwan. ### Contact information; douailleerwan@gmail.com; ",MatchSource.DOCS,Sofa/GUI/HeadlessRecorder/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/HeadlessRecorder/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:1032,Deployability,configurat,configuration,1032,"l *sofa-launcher* ease the scripting of **numerous SOFA simulations**. This can be done from XML or python scripts. To accelerate the processing of the simulations the script has the ability to run the simulation either: sequentially, in parallel or on a cluster. There is two options to use it depending on your needs:. - You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the distributed version of the launcher yo",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:332,Integrability,depend,depending,332,"SOFA launcher; =============. The tool *sofa-launcher* ease the scripting of **numerous SOFA simulations**. This can be done from XML or python scripts. To accelerate the processing of the simulations the script has the ability to run the simulation either: sequentially, in parallel or on a cluster. There is two options to use it depending on your needs:. - You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the di",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:1530,Integrability,depend,depend,1530," You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the distributed version of the launcher you need all hosts to share directories as well as being able to login using ssh+key (no password login).; - Depending on the files you are using in your scene you may need to protect certain symbols: see [https://pythonhosted.org/Cheetah/users_guide/](https://pythonhosted.org/cheetah/users_guide/parserinstructions.html); ",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:1032,Modifiability,config,configuration,1032,"l *sofa-launcher* ease the scripting of **numerous SOFA simulations**. This can be done from XML or python scripts. To accelerate the processing of the simulations the script has the ability to run the simulation either: sequentially, in parallel or on a cluster. There is two options to use it depending on your needs:. - You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the distributed version of the launcher yo",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:1111,Modifiability,variab,variables,1111," the script has the ability to run the simulation either: sequentially, in parallel or on a cluster. There is two options to use it depending on your needs:. - You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the distributed version of the launcher you need all hosts to share directories as well as being able to login using ssh+key (no password login).; - Depending on the files you are using in your scene you ma",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:1398,Modifiability,variab,variables,1398," You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the distributed version of the launcher you need all hosts to share directories as well as being able to login using ssh+key (no password login).; - Depending on the files you are using in your scene you may need to protect certain symbols: see [https://pythonhosted.org/Cheetah/users_guide/](https://pythonhosted.org/cheetah/users_guide/parserinstructions.html); ",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:2124,Security,password,password,2124," You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the distributed version of the launcher you need all hosts to share directories as well as being able to login using ssh+key (no password login).; - Depending on the files you are using in your scene you may need to protect certain symbols: see [https://pythonhosted.org/Cheetah/users_guide/](https://pythonhosted.org/cheetah/users_guide/parserinstructions.html); ",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:2100,Testability,log,login,2100," You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the distributed version of the launcher you need all hosts to share directories as well as being able to login using ssh+key (no password login).; - Depending on the files you are using in your scene you may need to protect certain symbols: see [https://pythonhosted.org/Cheetah/users_guide/](https://pythonhosted.org/cheetah/users_guide/parserinstructions.html); ",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md:2133,Testability,log,login,2133," You want to run a lot of simulation from you own python script. In this case you should look at the file ""integration_example.py"". This example shows how to start simulation in sequence, in parallel or using a cluster. The example also shows how all the simulation results are returned back to your script so you can implement your own number-crunching processing on them, e.g.: plotting graphs with *matplotlib*. - You don't want to write your own python script but still want to start a lot a lot of simulations you should have a look at the sofa-launcher.py application.; Example:; ```batch; ./sofa-launcher example.json; ```. This application is controlled via a json configuration file; ```json; {; ""files"": [; ""example.scn"",; ""example.py""; ],; ""variables"": [; {; ""GRAVITYXML"": ""1 2 3"",; ""nbIterations"": 1000; },; {; ""GRAVITYXML"": ""2 3 4"",; ""nbIterations"": 1000; }; ],; ""launcher"": ""parallel"",; ""numjobs"": 5,; ""resultsstyle"": ""results.thtml"",; ""resultsfile"": ""results.html""; }; ```; with:. - files: The sofa files with your scene; - variables: Some values in your scene can be changed automatically in each run of your scene ; You can use any name as $MYVALUE...it depend on what you put in your scene. ; in my example scene I replace the $GRAVITYXML with a different value at each run; - launcher: Indicate to launch the simulations in parallel (other choice are sequential or ssh); - numjobs: with a maximum of 5 simulation in parallel; - resultsstyle: Name of the report file template, here html but it could be anything else (eg latex array); - resultsfile: The file generated from the template and the results. NB:. - To run the distributed version of the launcher you need all hosts to share directories as well as being able to login using ssh+key (no password login).; - Depending on the files you are using in your scene you may need to protect certain symbols: see [https://pythonhosted.org/Cheetah/users_guide/](https://pythonhosted.org/cheetah/users_guide/parserinstructions.html); ",MatchSource.DOCS,tools/sofa-launcher/README.md,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/tools/sofa-launcher/README.md
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:7842,Availability,avail,available,7842,"limit the cores used by specific targets"" OFF). # Sofa.Config sets the environment (options, compiler flags, global variables); sofa_add_subdirectory(library Sofa/framework/Config Sofa.Config ON). ### Extlibs; add_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All depend on SOFA_ENABLE_LEGACY_HEADERS; # Some still contain (maybe useful) components not moved in Sofa/ yet.; # TODO: finally empty those remnants; add_subdirectory(applications/collections/deprecated). ## Tutorials option; option(SOFA_BUILD_TUTORIALS ""Build (most of) the tutorials available."" OFF). # SceneCreator plugin; # Library used by SOFA_BUILD_TESTS and SOFA_BUILD_TUTORIALS; sofa_add_subdirectory(plugin applications/plugins/SceneCreator SceneCreator OFF; WHEN_TO_SHOW ""NOT SOFA_BUILD_SCENECREATOR AND NOT SOFA_BUILD_TESTS AND NOT SOFA_BUILD_TUTORIALS AND NOT SOFA_BUILD_RELEASE_PACKAGE""; VALUE_IF_HIDDEN ""ON""). ## Plugins; add_subdirectory(applications/plugins). ## Applications; add_subdirectory(applications/projects). # Tutorial add subdirectory; if(SOFA_BUILD_TUTORIALS); add_subdirectory(applications/tutorials); endif(). ## SOFA scenes; option(SOFA_BUILD_ADD_SCENES ""Add SOFA scenes as a project of the build."" OFF); if (SOFA_BUILD_ADD_SCENES); add_subdirectory(examples); endif(). ## SOFA shaders; option(SOFA_BUILD_ADD_SHADERS ""Add SOFA shaders as a project of the build."" OFF); if (SOFA_BUILD_ADD_SHADERS); add_subdirectory(share/shaders); endif(). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" C",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:126,Deployability,patch,patch,126,"cmake_minimum_required(VERSION 3.22); project(Sofa; HOMEPAGE_URL https://www.sofa-framework.org/; ) # Cannot use VERSION with patch like ""00"". include(CMakeDependentOption). # Manually define VERSION; set(Sofa_VERSION_MAJOR 24); set(Sofa_VERSION_MINOR 06); set(Sofa_VERSION_PATCH 00); set(Sofa_VERSION ${Sofa_VERSION_MAJOR}.${Sofa_VERSION_MINOR}.${Sofa_VERSION_PATCH}). set(SOFA_URL ""${CMAKE_PROJECT_HOMEPAGE_URL}""). set(SOFA_VERSION_STR ""\""${Sofa_VERSION}\""""); set(SOFA_VERSION ""${Sofa_VERSION_MAJOR}${Sofa_VERSION_MINOR}${Sofa_VERSION_PATCH}""). ## Default build type; if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(STATUS ""Setting build type to Release as none was specified.""); set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Build type"" FORCE); endif(). # Output Directories definition; set(ARCHIVE_OUTPUT_DIRECTORY lib); set(RUNTIME_OUTPUT_DIRECTORY bin); if(WIN32); set(LIBRARY_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY}); else(); set(LIBRARY_OUTPUT_DIRECTORY ${ARCHIVE_OUTPUT_DIRECTORY}); endif(); ## Set the output directories globally; set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${ARCHIVE_OUTPUT_DIRECTORY}); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${RUNTIME_OUTPUT_DIRECTORY}); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBRARY_OUTPUT_DIRECTORY}). # Option for packaging; option(SOFA_BUILD_RELEASE_PACKAGE ""Run package specific configure"" OFF). # Option to allow some dependencies such as cxxopts to be fetched by cmake if; # the package is not found; option(SOFA_ALLOW_FETCH_DEPENDENCIES ""Allow compatible dependencies to be fetched if the package is not found by cmake.; List of dependencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSI",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:2539,Deployability,install,install,2539,"ndencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:2719,Deployability,install,install,2719,"ndencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:2775,Deployability,install,install,2775,"ndencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:3512,Deployability,configurat,configuration,3512,"PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindEigen3.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/macdeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/windeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindTinyXML2.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). ## RPATH; if(UNIX); # RPATH is a field in ELF binaries that is used as a hint by the system; # loader to find needed shared li",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:3981,Deployability,install,install,3981,"; set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindEigen3.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/macdeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/windeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindTinyXML2.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). ## RPATH; if(UNIX); # RPATH is a field in ELF binaries that is used as a hint by the system; # loader to find needed shared libraries.; #; # In the build directory, cmake creates binaries with absolute paths in; # RPATH. And by default, it strips RPATH from installed binaries. Here we; # use CMAKE_INSTALL_RPATH to set a relative RPATH. By doing so, we avoid; # the need to play with LD_LIBRARY_PATH to get applications to run. # see https://cmake.org/Wiki/CMake_RPATH_handling for $ORI",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:4042,Deployability,install,install,4042,"LD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindEigen3.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/macdeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/windeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindTinyXML2.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). ## RPATH; if(UNIX); # RPATH is a field in ELF binaries that is used as a hint by the system; # loader to find needed shared libraries.; #; # In the build directory, cmake creates binaries with absolute paths in; # RPATH. And by default, it strips RPATH from installed binaries. Here we; # use CMAKE_INSTALL_RPATH to set a relative RPATH. By doing so, we avoid; # the need to play with LD_LIBRARY_PATH to get applications to run. # see https://cmake.org/Wiki/CMake_RPATH_handling for $ORIGIN doc; set(CMAKE_INSTALL_RPATH; ""$ORIGIN/../lib""; ""$$ORIGIN/../lib""; ). if(APPLE); set(CMAKE_MACOSX_RPATH ON); list(APPEND CMAKE_INSTALL_RPATH; ""@loader_path/../lib""; ""@executable_path/../lib""; ""@loader_path/../../Frameworks""",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:4620,Deployability,install,installed,4620,"RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindEigen3.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/macdeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/windeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindTinyXML2.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). ## RPATH; if(UNIX); # RPATH is a field in ELF binaries that is used as a hint by the system; # loader to find needed shared libraries.; #; # In the build directory, cmake creates binaries with absolute paths in; # RPATH. And by default, it strips RPATH from installed binaries. Here we; # use CMAKE_INSTALL_RPATH to set a relative RPATH. By doing so, we avoid; # the need to play with LD_LIBRARY_PATH to get applications to run. # see https://cmake.org/Wiki/CMake_RPATH_handling for $ORIGIN doc; set(CMAKE_INSTALL_RPATH; ""$ORIGIN/../lib""; ""$$ORIGIN/../lib""; ). if(APPLE); set(CMAKE_MACOSX_RPATH ON); list(APPEND CMAKE_INSTALL_RPATH; ""@loader_path/../lib""; ""@executable_path/../lib""; ""@loader_path/../../Frameworks""; ""@executable_path/../../Frameworks""; ); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(UNIX). ### Windows config; if(MSVC); # WinDepPack; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack""); if(NOT EXISTS ${SOFA_DEPENDENCY_PACK_DIR}); # force back to default value; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack"" FORCE); endif(); list(APPEND CMAKE_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); i",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:5786,Deployability,install,install,5786,", it strips RPATH from installed binaries. Here we; # use CMAKE_INSTALL_RPATH to set a relative RPATH. By doing so, we avoid; # the need to play with LD_LIBRARY_PATH to get applications to run. # see https://cmake.org/Wiki/CMake_RPATH_handling for $ORIGIN doc; set(CMAKE_INSTALL_RPATH; ""$ORIGIN/../lib""; ""$$ORIGIN/../lib""; ). if(APPLE); set(CMAKE_MACOSX_RPATH ON); list(APPEND CMAKE_INSTALL_RPATH; ""@loader_path/../lib""; ""@executable_path/../lib""; ""@loader_path/../../Frameworks""; ""@executable_path/../../Frameworks""; ); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(UNIX). ### Windows config; if(MSVC); # WinDepPack; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack""); if(NOT EXISTS ${SOFA_DEPENDENCY_PACK_DIR}); # force back to default value; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack"" FORCE); endif(); list(APPEND CMAKE_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); if(CMAKE_CL_64); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win64); else(); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win32); endif(); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/include/ DESTINATION include/extlibs/WinDepPack COMPONENT headers); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/licenses/ DESTINATION licenses COMPONENT applications); endif(). ### Testing; option(SOFA_BUILD_TESTS ""Compile the automatic tests for Sofa, along with the gtest library."" ON). ## Active or not the use of ccache; option(SOFA_USE_CCACHE ""Compile using ccache optimization"" OFF); if(SOFA_USE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disab",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:5900,Deployability,install,install,5900,", it strips RPATH from installed binaries. Here we; # use CMAKE_INSTALL_RPATH to set a relative RPATH. By doing so, we avoid; # the need to play with LD_LIBRARY_PATH to get applications to run. # see https://cmake.org/Wiki/CMake_RPATH_handling for $ORIGIN doc; set(CMAKE_INSTALL_RPATH; ""$ORIGIN/../lib""; ""$$ORIGIN/../lib""; ). if(APPLE); set(CMAKE_MACOSX_RPATH ON); list(APPEND CMAKE_INSTALL_RPATH; ""@loader_path/../lib""; ""@executable_path/../lib""; ""@loader_path/../../Frameworks""; ""@executable_path/../../Frameworks""; ); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(UNIX). ### Windows config; if(MSVC); # WinDepPack; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack""); if(NOT EXISTS ${SOFA_DEPENDENCY_PACK_DIR}); # force back to default value; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack"" FORCE); endif(); list(APPEND CMAKE_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); if(CMAKE_CL_64); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win64); else(); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win32); endif(); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/include/ DESTINATION include/extlibs/WinDepPack COMPONENT headers); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/licenses/ DESTINATION licenses COMPONENT applications); endif(). ### Testing; option(SOFA_BUILD_TESTS ""Compile the automatic tests for Sofa, along with the gtest library."" ON). ## Active or not the use of ccache; option(SOFA_USE_CCACHE ""Compile using ccache optimization"" OFF); if(SOFA_USE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disab",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:9967,Deployability,configurat,configuration,9967,"Get the name of the actual directory; message(""Adding external directory: ${name} (${dir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""F",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:9983,Deployability,install,install,9983,"Get the name of the actual directory; message(""Adding external directory: ${name} (${dir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""F",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10068,Deployability,install,install,10068,"ir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10153,Deployability,install,install,10153,"name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION p",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10241,Deployability,install,install,10241,"ke""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""Th",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10332,Deployability,install,install,10332,"ies; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about co",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10530,Deployability,install,installing,10530,"ofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10608,Deployability,install,install,10608,"ofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10678,Deployability,install,install,10678,"ofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10760,Deployability,install,install,10760,"ofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11103,Deployability,install,install,11103,"ions); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CON",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11440,Deployability,install,install,11440,"y resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CONTACT ""contact@sofa-framework.org""); set(CPACK_PACKAGE_DESCRIPTION ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_EXECUTABLES ""runSofa"" ""runSofa"");",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11613,Deployability,install,install,11613,"COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CONTACT ""contact@sofa-framework.org""); set(CPACK_PACKAGE_DESCRIPTION ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_EXECUTABLES ""runSofa"" ""runSofa""); set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_SOURCE_DIR}/README.md""); set(CPACK_PACKAGE_HOMEPAGE_URL ""https://www.sofa-framework.org""); set(CPACK_PACKAGE_FILE_NAME ""SOFA_v${CPACK_PACKAGE_VERSION}"")",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11774,Deployability,configurat,configuration,11774,"nstall(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CONTACT ""contact@sofa-framework.org""); set(CPACK_PACKAGE_DESCRIPTION ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_EXECUTABLES ""runSofa"" ""runSofa""); set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_SOURCE_DIR}/README.md""); set(CPACK_PACKAGE_HOMEPAGE_URL ""https://www.sofa-framework.org""); set(CPACK_PACKAGE_FILE_NAME ""SOFA_v${CPACK_PACKAGE_VERSION}""); if(WIN32); set(CPACK_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/share/icons\\\\SOFA.png""); set(CPACK_PACKAGE_INS",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:15700,Deployability,install,install,15700,"aries""); set(CPACK_COMPONENT_RESOURCES_DISPLAY_NAME ""Resources""). set(CPACK_COMPONENT_APPLICATIONS_GROUP ""Runtime""); set(CPACK_COMPONENT_HEADERS_GROUP ""Development""); set(CPACK_COMPONENT_GTEST_HEADERS_GROUP ""Development""); set(CPACK_COMPONENT_LIBRARIES_GROUP ""Runtime""); set(CPACK_COMPONENT_RESOURCES_GROUP ""Runtime""); ##################. ######################; # IFW Generator config; if(CPACK_BINARY_IFW); set(CPACK_IFW_PACKAGE_NAME ""${CPACK_PACKAGE_NAME}""); set(CPACK_IFW_PACKAGE_TITLE ""${CPACK_PACKAGE_NAME}""); set(CPACK_IFW_PRODUCT_URL ""${CPACK_PACKAGE_HOMEPAGE_URL}""); set(CPACK_IFW_PACKAGE_LOGO ""${CPACK_PACKAGE_ICON}""); set(CPACK_IFW_TARGET_DIRECTORY ""@HomeDir@/${CPACK_PACKAGE_INSTALL_DIRECTORY}""); if(WIN32); set(CPACK_IFW_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.ico""); elseif(APPLE); set(CPACK_IFW_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.icns""); endif(). cpack_ifw_configure_component_group(runtime; SORTING_PRIORITY 50; DEFAULT TRUE; EXPANDED; SCRIPT ""${CMAKE_SOURCE_DIR}/scripts/qtifw/install.qs""; ); cpack_ifw_configure_component_group(development; SORTING_PRIORITY 10; DEFAULT TRUE; EXPANDED; ). cpack_ifw_configure_component(applications; DISPLAY_NAME ""runSofa Application""; DEPENDS runtime; ); cpack_ifw_configure_component(headers; DISPLAY_NAME ""C++ Headers""; DEPENDS development; ); cpack_ifw_configure_component(GTest_headers; DISPLAY_NAME ""GTest Headers""; DEPENDS development; ); cpack_ifw_configure_component(libraries; DISPLAY_NAME ""Libraries""; DEPENDS development; ); cpack_ifw_configure_component(resources; DISPLAY_NAME ""Resources""; DEPENDS runtime; ); endif(); ######################. #######################; # NSIS Generator config; if(CPACK_BINARY_NSIS); # There is a bug in NSIS that does not handle full unix paths properly. Make; # sure there is at least one set of four (4) backslashes.; set(CPACK_NSIS_MUI_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.ico""); set(CPACK_NSIS_INSTALLED",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:17627,Deployability,install,install,17627,"""; DEPENDS development; ); cpack_ifw_configure_component(GTest_headers; DISPLAY_NAME ""GTest Headers""; DEPENDS development; ); cpack_ifw_configure_component(libraries; DISPLAY_NAME ""Libraries""; DEPENDS development; ); cpack_ifw_configure_component(resources; DISPLAY_NAME ""Resources""; DEPENDS runtime; ); endif(); ######################. #######################; # NSIS Generator config; if(CPACK_BINARY_NSIS); # There is a bug in NSIS that does not handle full unix paths properly. Make; # sure there is at least one set of four (4) backslashes.; set(CPACK_NSIS_MUI_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.ico""); set(CPACK_NSIS_INSTALLED_ICON_NAME ""bin\\\\runSofa.exe""); set(CPACK_NSIS_DISPLAY_NAME ${CPACK_PACKAGE_NAME}); set(CPACK_NSIS_PACKAGE_NAME ${CPACK_PACKAGE_NAME}); set(CPACK_NSIS_HELP_LINK ${CPACK_PACKAGE_HOMEPAGE_URL}); set(CPACK_NSIS_URL_INFO_ABOUT ${CPACK_PACKAGE_HOMEPAGE_URL}); set(CPACK_NSIS_MODIFY_PATH ON); set(CPACK_NSIS_CONTACT ""contact@sofa-framework.org""); set(CPACK_NSIS_INSTALL_ROOT ""$PROFILE""); string(CONCAT EXTRA_INSTALL_COMMAND ""ExecShell \\\""open\\\"" \\\""https://www.sofa-framework.org/thank-you?sofa="" ${CPACK_PACKAGE_VERSION} ""&os=windows\\\""""); set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""${EXTRA_INSTALL_COMMAND}""); set(CPACK_NSIS_MENU_LINKS; ""https://www.sofa-framework.org/documentation/"" ""SOFA User Documentation""; ""https://www.sofa-framework.org/api/"" ""SOFA Developper API""; ""https://github.com/sofa-framework/sofa/discussions"" ""SOFA Support""); endif(); #######################. if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(CPACK_BINARY_DRAGNDROP ON); set(CPACK_GENERATOR DragNDrop). # Monolithic install containing everything; unset(CPACK_COMPONENTS_ALL); set(CPACK_MONOLITHIC_INSTALL ON). # Force CPack install dir to $ENV{DESTDIR}/runSofa.app/Contents/MacOS; # CPack always adds ""$ENV{DESTDIR}"" before CPACK_INSTALL_PREFIX; set(CPACK_SET_DESTDIR TRUE); set(CPACK_INSTALL_PREFIX ""/runSofa.app/Contents/MacOS""); endif(). include(CPack); endif(); ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:17735,Deployability,install,install,17735,"""; DEPENDS development; ); cpack_ifw_configure_component(GTest_headers; DISPLAY_NAME ""GTest Headers""; DEPENDS development; ); cpack_ifw_configure_component(libraries; DISPLAY_NAME ""Libraries""; DEPENDS development; ); cpack_ifw_configure_component(resources; DISPLAY_NAME ""Resources""; DEPENDS runtime; ); endif(); ######################. #######################; # NSIS Generator config; if(CPACK_BINARY_NSIS); # There is a bug in NSIS that does not handle full unix paths properly. Make; # sure there is at least one set of four (4) backslashes.; set(CPACK_NSIS_MUI_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.ico""); set(CPACK_NSIS_INSTALLED_ICON_NAME ""bin\\\\runSofa.exe""); set(CPACK_NSIS_DISPLAY_NAME ${CPACK_PACKAGE_NAME}); set(CPACK_NSIS_PACKAGE_NAME ${CPACK_PACKAGE_NAME}); set(CPACK_NSIS_HELP_LINK ${CPACK_PACKAGE_HOMEPAGE_URL}); set(CPACK_NSIS_URL_INFO_ABOUT ${CPACK_PACKAGE_HOMEPAGE_URL}); set(CPACK_NSIS_MODIFY_PATH ON); set(CPACK_NSIS_CONTACT ""contact@sofa-framework.org""); set(CPACK_NSIS_INSTALL_ROOT ""$PROFILE""); string(CONCAT EXTRA_INSTALL_COMMAND ""ExecShell \\\""open\\\"" \\\""https://www.sofa-framework.org/thank-you?sofa="" ${CPACK_PACKAGE_VERSION} ""&os=windows\\\""""); set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""${EXTRA_INSTALL_COMMAND}""); set(CPACK_NSIS_MENU_LINKS; ""https://www.sofa-framework.org/documentation/"" ""SOFA User Documentation""; ""https://www.sofa-framework.org/api/"" ""SOFA Developper API""; ""https://github.com/sofa-framework/sofa/discussions"" ""SOFA Support""); endif(); #######################. if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(CPACK_BINARY_DRAGNDROP ON); set(CPACK_GENERATOR DragNDrop). # Monolithic install containing everything; unset(CPACK_COMPONENTS_ALL); set(CPACK_MONOLITHIC_INSTALL ON). # Force CPack install dir to $ENV{DESTDIR}/runSofa.app/Contents/MacOS; # CPack always adds ""$ENV{DESTDIR}"" before CPACK_INSTALL_PREFIX; set(CPACK_SET_DESTDIR TRUE); set(CPACK_INSTALL_PREFIX ""/runSofa.app/Contents/MacOS""); endif(). include(CPack); endif(); ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:630,Integrability,message,message,630,"cmake_minimum_required(VERSION 3.22); project(Sofa; HOMEPAGE_URL https://www.sofa-framework.org/; ) # Cannot use VERSION with patch like ""00"". include(CMakeDependentOption). # Manually define VERSION; set(Sofa_VERSION_MAJOR 24); set(Sofa_VERSION_MINOR 06); set(Sofa_VERSION_PATCH 00); set(Sofa_VERSION ${Sofa_VERSION_MAJOR}.${Sofa_VERSION_MINOR}.${Sofa_VERSION_PATCH}). set(SOFA_URL ""${CMAKE_PROJECT_HOMEPAGE_URL}""). set(SOFA_VERSION_STR ""\""${Sofa_VERSION}\""""); set(SOFA_VERSION ""${Sofa_VERSION_MAJOR}${Sofa_VERSION_MINOR}${Sofa_VERSION_PATCH}""). ## Default build type; if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(STATUS ""Setting build type to Release as none was specified.""); set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Build type"" FORCE); endif(). # Output Directories definition; set(ARCHIVE_OUTPUT_DIRECTORY lib); set(RUNTIME_OUTPUT_DIRECTORY bin); if(WIN32); set(LIBRARY_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY}); else(); set(LIBRARY_OUTPUT_DIRECTORY ${ARCHIVE_OUTPUT_DIRECTORY}); endif(); ## Set the output directories globally; set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${ARCHIVE_OUTPUT_DIRECTORY}); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${RUNTIME_OUTPUT_DIRECTORY}); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBRARY_OUTPUT_DIRECTORY}). # Option for packaging; option(SOFA_BUILD_RELEASE_PACKAGE ""Run package specific configure"" OFF). # Option to allow some dependencies such as cxxopts to be fetched by cmake if; # the package is not found; option(SOFA_ALLOW_FETCH_DEPENDENCIES ""Allow compatible dependencies to be fetched if the package is not found by cmake.; List of dependencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSI",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:1440,Integrability,depend,dependencies,1440,"VERSION_PATCH}""). ## Default build type; if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(STATUS ""Setting build type to Release as none was specified.""); set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Build type"" FORCE); endif(). # Output Directories definition; set(ARCHIVE_OUTPUT_DIRECTORY lib); set(RUNTIME_OUTPUT_DIRECTORY bin); if(WIN32); set(LIBRARY_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY}); else(); set(LIBRARY_OUTPUT_DIRECTORY ${ARCHIVE_OUTPUT_DIRECTORY}); endif(); ## Set the output directories globally; set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${ARCHIVE_OUTPUT_DIRECTORY}); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${RUNTIME_OUTPUT_DIRECTORY}); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBRARY_OUTPUT_DIRECTORY}). # Option for packaging; option(SOFA_BUILD_RELEASE_PACKAGE ""Run package specific configure"" OFF). # Option to allow some dependencies such as cxxopts to be fetched by cmake if; # the package is not found; option(SOFA_ALLOW_FETCH_DEPENDENCIES ""Allow compatible dependencies to be fetched if the package is not found by cmake.; List of dependencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:1579,Integrability,depend,dependencies,1579,"VERSION_PATCH}""). ## Default build type; if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(STATUS ""Setting build type to Release as none was specified.""); set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Build type"" FORCE); endif(). # Output Directories definition; set(ARCHIVE_OUTPUT_DIRECTORY lib); set(RUNTIME_OUTPUT_DIRECTORY bin); if(WIN32); set(LIBRARY_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY}); else(); set(LIBRARY_OUTPUT_DIRECTORY ${ARCHIVE_OUTPUT_DIRECTORY}); endif(); ## Set the output directories globally; set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${ARCHIVE_OUTPUT_DIRECTORY}); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${RUNTIME_OUTPUT_DIRECTORY}); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBRARY_OUTPUT_DIRECTORY}). # Option for packaging; option(SOFA_BUILD_RELEASE_PACKAGE ""Run package specific configure"" OFF). # Option to allow some dependencies such as cxxopts to be fetched by cmake if; # the package is not found; option(SOFA_ALLOW_FETCH_DEPENDENCIES ""Allow compatible dependencies to be fetched if the package is not found by cmake.; List of dependencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:1653,Integrability,depend,dependencies,1653,"ne was specified.""); set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Build type"" FORCE); endif(). # Output Directories definition; set(ARCHIVE_OUTPUT_DIRECTORY lib); set(RUNTIME_OUTPUT_DIRECTORY bin); if(WIN32); set(LIBRARY_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY}); else(); set(LIBRARY_OUTPUT_DIRECTORY ${ARCHIVE_OUTPUT_DIRECTORY}); endif(); ## Set the output directories globally; set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${ARCHIVE_OUTPUT_DIRECTORY}); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${RUNTIME_OUTPUT_DIRECTORY}); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBRARY_OUTPUT_DIRECTORY}). # Option for packaging; option(SOFA_BUILD_RELEASE_PACKAGE ""Run package specific configure"" OFF). # Option to allow some dependencies such as cxxopts to be fetched by cmake if; # the package is not found; option(SOFA_ALLOW_FETCH_DEPENDENCIES ""Allow compatible dependencies to be fetched if the package is not found by cmake.; List of dependencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAK",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:2288,Integrability,message,message,2288,"T_DIRECTORY}). # Option for packaging; option(SOFA_BUILD_RELEASE_PACKAGE ""Run package specific configure"" OFF). # Option to allow some dependencies such as cxxopts to be fetched by cmake if; # the package is not found; option(SOFA_ALLOW_FETCH_DEPENDENCIES ""Allow compatible dependencies to be fetched if the package is not found by cmake.; List of dependencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages t",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:2377,Integrability,message,message,2377," # Option to allow some dependencies such as cxxopts to be fetched by cmake if; # the package is not found; option(SOFA_ALLOW_FETCH_DEPENDENCIES ""Allow compatible dependencies to be fetched if the package is not found by cmake.; List of dependencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:2965,Integrability,message,message,2965,"ent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/c",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:3171,Integrability,message,message,3171,"ent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON).""); else(); message(""-- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).""); set(DISABLE_PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/c",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:6557,Integrability,message,message,6557,"E_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); if(CMAKE_CL_64); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win64); else(); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win32); endif(); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/include/ DESTINATION include/extlibs/WinDepPack COMPONENT headers); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/licenses/ DESTINATION licenses COMPONENT applications); endif(). ### Testing; option(SOFA_BUILD_TESTS ""Compile the automatic tests for Sofa, along with the gtest library."" ON). ## Active or not the use of ccache; option(SOFA_USE_CCACHE ""Compile using ccache optimization"" OFF); if(SOFA_USE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disabling option""); set(SOFA_USE_CCACHE OFF CACHE bool ""Compile using ccache optimization"" FORCE); endif(); endif(). ### Ninja build pools; option(SOFA_NINJA_BUILD_POOLS ""Activate the Ninja build pools feature, to limit the cores used by specific targets"" OFF). # Sofa.Config sets the environment (options, compiler flags, global variables); sofa_add_subdirectory(library Sofa/framework/Config Sofa.Config ON). ### Extlibs; add_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:7232,Integrability,message,message,7232,"SE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disabling option""); set(SOFA_USE_CCACHE OFF CACHE bool ""Compile using ccache optimization"" FORCE); endif(); endif(). ### Ninja build pools; option(SOFA_NINJA_BUILD_POOLS ""Activate the Ninja build pools feature, to limit the cores used by specific targets"" OFF). # Sofa.Config sets the environment (options, compiler flags, global variables); sofa_add_subdirectory(library Sofa/framework/Config Sofa.Config ON). ### Extlibs; add_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All depend on SOFA_ENABLE_LEGACY_HEADERS; # Some still contain (maybe useful) components not moved in Sofa/ yet.; # TODO: finally empty those remnants; add_subdirectory(applications/collections/deprecated). ## Tutorials option; option(SOFA_BUILD_TUTORIALS ""Build (most of) the tutorials available."" OFF). # SceneCreator plugin; # Library used by SOFA_BUILD_TESTS and SOFA_BUILD_TUTORIALS; sofa_add_subdirectory(plugin applications/plugins/SceneCreator SceneCreator OFF; WHEN_TO_SHOW ""NOT SOFA_BUILD_SCENECREATOR AND NOT SOFA_BUILD_TESTS AND NOT SOFA_BUILD_TUTORIALS AND NOT SOFA_BUILD_RELEASE_PACKAGE""; VALUE_IF_HIDDEN ""ON""). ## Plugins; add_subdirectory(applications/plugins). ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:7559,Integrability,depend,depend,7559,"); set(SOFA_USE_CCACHE OFF CACHE bool ""Compile using ccache optimization"" FORCE); endif(); endif(). ### Ninja build pools; option(SOFA_NINJA_BUILD_POOLS ""Activate the Ninja build pools feature, to limit the cores used by specific targets"" OFF). # Sofa.Config sets the environment (options, compiler flags, global variables); sofa_add_subdirectory(library Sofa/framework/Config Sofa.Config ON). ### Extlibs; add_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All depend on SOFA_ENABLE_LEGACY_HEADERS; # Some still contain (maybe useful) components not moved in Sofa/ yet.; # TODO: finally empty those remnants; add_subdirectory(applications/collections/deprecated). ## Tutorials option; option(SOFA_BUILD_TUTORIALS ""Build (most of) the tutorials available."" OFF). # SceneCreator plugin; # Library used by SOFA_BUILD_TESTS and SOFA_BUILD_TUTORIALS; sofa_add_subdirectory(plugin applications/plugins/SceneCreator SceneCreator OFF; WHEN_TO_SHOW ""NOT SOFA_BUILD_SCENECREATOR AND NOT SOFA_BUILD_TESTS AND NOT SOFA_BUILD_TUTORIALS AND NOT SOFA_BUILD_RELEASE_PACKAGE""; VALUE_IF_HIDDEN ""ON""). ## Plugins; add_subdirectory(applications/plugins). ## Applications; add_subdirectory(applications/projects). # Tutorial add subdirectory; if(SOFA_BUILD_TUTORIALS); add_subdirectory(applications/tutorials); endif(). ## SOFA scenes; option(SOFA_BUILD_ADD_SCENES ""Add SOFA scenes as a project of the build."" OFF); if (SOFA_BUILD_ADD_SCENES); add_subdirectory(examples); endif(). ## SOFA shaders; option(SOFA_BUILD_ADD_SHADERS ""Add",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:9030,Integrability,message,message,9030,"ctory(plugin applications/plugins/SceneCreator SceneCreator OFF; WHEN_TO_SHOW ""NOT SOFA_BUILD_SCENECREATOR AND NOT SOFA_BUILD_TESTS AND NOT SOFA_BUILD_TUTORIALS AND NOT SOFA_BUILD_RELEASE_PACKAGE""; VALUE_IF_HIDDEN ""ON""). ## Plugins; add_subdirectory(applications/plugins). ## Applications; add_subdirectory(applications/projects). # Tutorial add subdirectory; if(SOFA_BUILD_TUTORIALS); add_subdirectory(applications/tutorials); endif(). ## SOFA scenes; option(SOFA_BUILD_ADD_SCENES ""Add SOFA scenes as a project of the build."" OFF); if (SOFA_BUILD_ADD_SCENES); add_subdirectory(examples); endif(). ## SOFA shaders; option(SOFA_BUILD_ADD_SHADERS ""Add SOFA shaders as a project of the build."" OFF); if (SOFA_BUILD_ADD_SHADERS); add_subdirectory(share/shaders); endif(). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" CACHE STRING ""list of paths separated by ';'""); if(NOT ""${SOFA_EXTERNAL_DIRECTORIES}"" STREQUAL """"); foreach(dir ${SOFA_EXTERNAL_DIRECTORIES}); get_filename_component(name ${dir} NAME) # Get the name of the actual directory; message(""Adding external directory: ${name} (${dir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## I",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:9258,Integrability,message,message,9258,"ns/projects). # Tutorial add subdirectory; if(SOFA_BUILD_TUTORIALS); add_subdirectory(applications/tutorials); endif(). ## SOFA scenes; option(SOFA_BUILD_ADD_SCENES ""Add SOFA scenes as a project of the build."" OFF); if (SOFA_BUILD_ADD_SCENES); add_subdirectory(examples); endif(). ## SOFA shaders; option(SOFA_BUILD_ADD_SHADERS ""Add SOFA shaders as a project of the build."" OFF); if (SOFA_BUILD_ADD_SHADERS); add_subdirectory(share/shaders); endif(). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" CACHE STRING ""list of paths separated by ';'""); if(NOT ""${SOFA_EXTERNAL_DIRECTORIES}"" STREQUAL """"); foreach(dir ${SOFA_EXTERNAL_DIRECTORIES}); get_filename_component(name ${dir} NAME) # Get the name of the actual directory; message(""Adding external directory: ${name} (${dir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LI",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:1400,Modifiability,config,configure,1400,"). set(SOFA_URL ""${CMAKE_PROJECT_HOMEPAGE_URL}""). set(SOFA_VERSION_STR ""\""${Sofa_VERSION}\""""); set(SOFA_VERSION ""${Sofa_VERSION_MAJOR}${Sofa_VERSION_MINOR}${Sofa_VERSION_PATCH}""). ## Default build type; if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(STATUS ""Setting build type to Release as none was specified.""); set(CMAKE_BUILD_TYPE ""Release"" CACHE STRING ""Build type"" FORCE); endif(). # Output Directories definition; set(ARCHIVE_OUTPUT_DIRECTORY lib); set(RUNTIME_OUTPUT_DIRECTORY bin); if(WIN32); set(LIBRARY_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY}); else(); set(LIBRARY_OUTPUT_DIRECTORY ${ARCHIVE_OUTPUT_DIRECTORY}); endif(); ## Set the output directories globally; set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${ARCHIVE_OUTPUT_DIRECTORY}); set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${RUNTIME_OUTPUT_DIRECTORY}); set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${LIBRARY_OUTPUT_DIRECTORY}). # Option for packaging; option(SOFA_BUILD_RELEASE_PACKAGE ""Run package specific configure"" OFF). # Option to allow some dependencies such as cxxopts to be fetched by cmake if; # the package is not found; option(SOFA_ALLOW_FETCH_DEPENDENCIES ""Allow compatible dependencies to be fetched if the package is not found by cmake.; List of dependencies that can be fetched: cxxopts, gtest, metis, CImg"" ON). # Option to accelerate the compilation; # see https://cmake.org/cmake/help/v3.16/command/target_precompile_headers.html; # and https://cmake.org/cmake/help/v3.16/prop_tgt/DISABLE_PRECOMPILE_HEADERS.html. # https://cmake.org/cmake/help/latest/policy/CMP0127.html; if (${CMAKE_VERSION} VERSION_GREATER_EQUAL 3.22); cmake_policy(SET CMP0127 NEW); endif(); cmake_dependent_option(SOFA_BUILD_WITH_PCH_ENABLED ; ""Compile SOFA using precompiled header (to accelerate the build process)"" OFF; ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16"" OFF); if(SOFA_BUILD_WITH_PCH_ENABLED); message(""-- Precompiled headers: enabled (SOFA_BUILD_WITH_PCH_ENABLED is ON)."");",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:3512,Modifiability,config,configuration,3512,"PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindEigen3.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/macdeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/windeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindTinyXML2.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). ## RPATH; if(UNIX); # RPATH is a field in ELF binaries that is used as a hint by the system; # loader to find needed shared li",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:3588,Modifiability,plugin,plugins,3588,"PRECOMPILE_HEADERS ON); endif(). ## Change default install component and prefix; set(CMAKE_INSTALL_DEFAULT_COMPONENT_NAME applications); if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT); set(CMAKE_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/install CACHE PATH ""Install path prefix, prepended onto install directories."" FORCE); endif(); if(APPLE AND SOFA_BUILD_APP_BUNDLE); set(SOFA_BUILD_RELEASE_PACKAGE ON); set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/runSofa.app/Contents/MacOS); message(""SOFA_BUILD_APP_BUNDLE = ${SOFA_BUILD_APP_BUNDLE}\n""; "" Forcing SOFA_BUILD_RELEASE_PACKAGE = ${SOFA_BUILD_RELEASE_PACKAGE}\n""; "" Forcing CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}""; ); endif(); message(STATUS ""Install prefix: ${CMAKE_INSTALL_PREFIX}""). # Remove generated CMake files, this prevents CMake from finding packages that; # were disabled (like, unchecked in cmake-gui) after being built once.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/cmake); file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindEigen3.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/macdeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/windeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindTinyXML2.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). ## RPATH; if(UNIX); # RPATH is a field in ELF binaries that is used as a hint by the system; # loader to find needed shared li",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:5197,Modifiability,config,config,5197,", it strips RPATH from installed binaries. Here we; # use CMAKE_INSTALL_RPATH to set a relative RPATH. By doing so, we avoid; # the need to play with LD_LIBRARY_PATH to get applications to run. # see https://cmake.org/Wiki/CMake_RPATH_handling for $ORIGIN doc; set(CMAKE_INSTALL_RPATH; ""$ORIGIN/../lib""; ""$$ORIGIN/../lib""; ). if(APPLE); set(CMAKE_MACOSX_RPATH ON); list(APPEND CMAKE_INSTALL_RPATH; ""@loader_path/../lib""; ""@executable_path/../lib""; ""@loader_path/../../Frameworks""; ""@executable_path/../../Frameworks""; ); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(UNIX). ### Windows config; if(MSVC); # WinDepPack; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack""); if(NOT EXISTS ${SOFA_DEPENDENCY_PACK_DIR}); # force back to default value; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack"" FORCE); endif(); list(APPEND CMAKE_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); if(CMAKE_CL_64); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win64); else(); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win32); endif(); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/include/ DESTINATION include/extlibs/WinDepPack COMPONENT headers); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/licenses/ DESTINATION licenses COMPONENT applications); endif(). ### Testing; option(SOFA_BUILD_TESTS ""Compile the automatic tests for Sofa, along with the gtest library."" ON). ## Active or not the use of ccache; option(SOFA_USE_CCACHE ""Compile using ccache optimization"" OFF); if(SOFA_USE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disab",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:6922,Modifiability,variab,variables,6922,"EPENDENCY_PACK_DIR}/licenses/ DESTINATION licenses COMPONENT applications); endif(). ### Testing; option(SOFA_BUILD_TESTS ""Compile the automatic tests for Sofa, along with the gtest library."" ON). ## Active or not the use of ccache; option(SOFA_USE_CCACHE ""Compile using ccache optimization"" OFF); if(SOFA_USE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disabling option""); set(SOFA_USE_CCACHE OFF CACHE bool ""Compile using ccache optimization"" FORCE); endif(); endif(). ### Ninja build pools; option(SOFA_NINJA_BUILD_POOLS ""Activate the Ninja build pools feature, to limit the cores used by specific targets"" OFF). # Sofa.Config sets the environment (options, compiler flags, global variables); sofa_add_subdirectory(library Sofa/framework/Config Sofa.Config ON). ### Extlibs; add_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All depend on SOFA_ENABLE_LEGACY_HEADERS; # Some still contain (maybe useful) components not moved in Sofa/ yet.; # TODO: finally empty those remnants; add_subdirectory(applications/collections/deprecated). ## Tutorials option; option(SOFA_BUILD_TUTORIALS ""Build (most of) the tutorials available."" OFF). # SceneCreator plugin; # Library used by SOFA_BUILD_TESTS and SOFA",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:7875,Modifiability,plugin,plugin,7875,"_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All depend on SOFA_ENABLE_LEGACY_HEADERS; # Some still contain (maybe useful) components not moved in Sofa/ yet.; # TODO: finally empty those remnants; add_subdirectory(applications/collections/deprecated). ## Tutorials option; option(SOFA_BUILD_TUTORIALS ""Build (most of) the tutorials available."" OFF). # SceneCreator plugin; # Library used by SOFA_BUILD_TESTS and SOFA_BUILD_TUTORIALS; sofa_add_subdirectory(plugin applications/plugins/SceneCreator SceneCreator OFF; WHEN_TO_SHOW ""NOT SOFA_BUILD_SCENECREATOR AND NOT SOFA_BUILD_TESTS AND NOT SOFA_BUILD_TUTORIALS AND NOT SOFA_BUILD_RELEASE_PACKAGE""; VALUE_IF_HIDDEN ""ON""). ## Plugins; add_subdirectory(applications/plugins). ## Applications; add_subdirectory(applications/projects). # Tutorial add subdirectory; if(SOFA_BUILD_TUTORIALS); add_subdirectory(applications/tutorials); endif(). ## SOFA scenes; option(SOFA_BUILD_ADD_SCENES ""Add SOFA scenes as a project of the build."" OFF); if (SOFA_BUILD_ADD_SCENES); add_subdirectory(examples); endif(). ## SOFA shaders; option(SOFA_BUILD_ADD_SHADERS ""Add SOFA shaders as a project of the build."" OFF); if (SOFA_BUILD_ADD_SHADERS); add_subdirectory(share/shaders); endif(). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" CACHE STRING ""list of paths separated by ';'""); if(NOT ""${SOFA_EXTERNAL_DIRECTORIES}"" STREQUAL """"); foreach(dir ${SOFA_EXTERNAL_DIRECTORIES}); get_filename_component(name ${dir} NAME) # Get the name of the actual d",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:7966,Modifiability,plugin,plugin,7966,"_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All depend on SOFA_ENABLE_LEGACY_HEADERS; # Some still contain (maybe useful) components not moved in Sofa/ yet.; # TODO: finally empty those remnants; add_subdirectory(applications/collections/deprecated). ## Tutorials option; option(SOFA_BUILD_TUTORIALS ""Build (most of) the tutorials available."" OFF). # SceneCreator plugin; # Library used by SOFA_BUILD_TESTS and SOFA_BUILD_TUTORIALS; sofa_add_subdirectory(plugin applications/plugins/SceneCreator SceneCreator OFF; WHEN_TO_SHOW ""NOT SOFA_BUILD_SCENECREATOR AND NOT SOFA_BUILD_TESTS AND NOT SOFA_BUILD_TUTORIALS AND NOT SOFA_BUILD_RELEASE_PACKAGE""; VALUE_IF_HIDDEN ""ON""). ## Plugins; add_subdirectory(applications/plugins). ## Applications; add_subdirectory(applications/projects). # Tutorial add subdirectory; if(SOFA_BUILD_TUTORIALS); add_subdirectory(applications/tutorials); endif(). ## SOFA scenes; option(SOFA_BUILD_ADD_SCENES ""Add SOFA scenes as a project of the build."" OFF); if (SOFA_BUILD_ADD_SCENES); add_subdirectory(examples); endif(). ## SOFA shaders; option(SOFA_BUILD_ADD_SHADERS ""Add SOFA shaders as a project of the build."" OFF); if (SOFA_BUILD_ADD_SHADERS); add_subdirectory(share/shaders); endif(). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" CACHE STRING ""list of paths separated by ';'""); if(NOT ""${SOFA_EXTERNAL_DIRECTORIES}"" STREQUAL """"); foreach(dir ${SOFA_EXTERNAL_DIRECTORIES}); get_filename_component(name ${dir} NAME) # Get the name of the actual d",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:7986,Modifiability,plugin,plugins,7986,"_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All depend on SOFA_ENABLE_LEGACY_HEADERS; # Some still contain (maybe useful) components not moved in Sofa/ yet.; # TODO: finally empty those remnants; add_subdirectory(applications/collections/deprecated). ## Tutorials option; option(SOFA_BUILD_TUTORIALS ""Build (most of) the tutorials available."" OFF). # SceneCreator plugin; # Library used by SOFA_BUILD_TESTS and SOFA_BUILD_TUTORIALS; sofa_add_subdirectory(plugin applications/plugins/SceneCreator SceneCreator OFF; WHEN_TO_SHOW ""NOT SOFA_BUILD_SCENECREATOR AND NOT SOFA_BUILD_TESTS AND NOT SOFA_BUILD_TUTORIALS AND NOT SOFA_BUILD_RELEASE_PACKAGE""; VALUE_IF_HIDDEN ""ON""). ## Plugins; add_subdirectory(applications/plugins). ## Applications; add_subdirectory(applications/projects). # Tutorial add subdirectory; if(SOFA_BUILD_TUTORIALS); add_subdirectory(applications/tutorials); endif(). ## SOFA scenes; option(SOFA_BUILD_ADD_SCENES ""Add SOFA scenes as a project of the build."" OFF); if (SOFA_BUILD_ADD_SCENES); add_subdirectory(examples); endif(). ## SOFA shaders; option(SOFA_BUILD_ADD_SHADERS ""Add SOFA shaders as a project of the build."" OFF); if (SOFA_BUILD_ADD_SHADERS); add_subdirectory(share/shaders); endif(). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" CACHE STRING ""list of paths separated by ';'""); if(NOT ""${SOFA_EXTERNAL_DIRECTORIES}"" STREQUAL """"); foreach(dir ${SOFA_EXTERNAL_DIRECTORIES}); get_filename_component(name ${dir} NAME) # Get the name of the actual d",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:8223,Modifiability,plugin,plugins,8223,"A_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All depend on SOFA_ENABLE_LEGACY_HEADERS; # Some still contain (maybe useful) components not moved in Sofa/ yet.; # TODO: finally empty those remnants; add_subdirectory(applications/collections/deprecated). ## Tutorials option; option(SOFA_BUILD_TUTORIALS ""Build (most of) the tutorials available."" OFF). # SceneCreator plugin; # Library used by SOFA_BUILD_TESTS and SOFA_BUILD_TUTORIALS; sofa_add_subdirectory(plugin applications/plugins/SceneCreator SceneCreator OFF; WHEN_TO_SHOW ""NOT SOFA_BUILD_SCENECREATOR AND NOT SOFA_BUILD_TESTS AND NOT SOFA_BUILD_TUTORIALS AND NOT SOFA_BUILD_RELEASE_PACKAGE""; VALUE_IF_HIDDEN ""ON""). ## Plugins; add_subdirectory(applications/plugins). ## Applications; add_subdirectory(applications/projects). # Tutorial add subdirectory; if(SOFA_BUILD_TUTORIALS); add_subdirectory(applications/tutorials); endif(). ## SOFA scenes; option(SOFA_BUILD_ADD_SCENES ""Add SOFA scenes as a project of the build."" OFF); if (SOFA_BUILD_ADD_SCENES); add_subdirectory(examples); endif(). ## SOFA shaders; option(SOFA_BUILD_ADD_SHADERS ""Add SOFA shaders as a project of the build."" OFF); if (SOFA_BUILD_ADD_SHADERS); add_subdirectory(share/shaders); endif(). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" CACHE STRING ""list of paths separated by ';'""); if(NOT ""${SOFA_EXTERNAL_DIRECTORIES}"" STREQUAL """"); foreach(dir ${SOFA_EXTERNAL_DIRECTORIES}); get_filename_component(name ${dir} NAME) # Get the name of the actual directory; message(""Adding external directory: ${name} (${dir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; i",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:9967,Modifiability,config,configuration,9967,"Get the name of the actual directory; message(""Adding external directory: ${name} (${dir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""F",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:10899,Modifiability,plugin,plugins,10899,"FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11010,Modifiability,plugin,plugins,11010,"RY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${So",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11093,Modifiability,plugin,plugin,11093,"ions); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CON",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11141,Modifiability,plugin,plugins,11141,"ions); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CON",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11162,Modifiability,plugin,plugins,11162,"ions); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/sofa/examples COMPONENT resources); install(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CON",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11774,Modifiability,config,configuration,11774,"nstall(DIRECTORY tools/sofa-launcher/ DESTINATION share/sofa/sofa-launcher COMPONENT resources); endif(). file(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CONTACT ""contact@sofa-framework.org""); set(CPACK_PACKAGE_DESCRIPTION ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_EXECUTABLES ""runSofa"" ""runSofa""); set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_SOURCE_DIR}/README.md""); set(CPACK_PACKAGE_HOMEPAGE_URL ""https://www.sofa-framework.org""); set(CPACK_PACKAGE_FILE_NAME ""SOFA_v${CPACK_PACKAGE_VERSION}""); if(WIN32); set(CPACK_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/share/icons\\\\SOFA.png""); set(CPACK_PACKAGE_INS",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:11844,Modifiability,config,config,11844,"le(WRITE ""${CMAKE_BINARY_DIR}/plugins/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about plugins, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#plugin""); install(DIRECTORY ${CMAKE_BINARY_DIR}/plugins/ DESTINATION plugins COMPONENT resources); file(WRITE ""${CMAKE_BINARY_DIR}/collections/README.txt""; ""This folder will be automatically scanned by the Plugin Manager.\n""; ""For all info about collections, see https://www.sofa-framework.org/community/doc/using-sofa/lexicography/#collection""); install(DIRECTORY ${CMAKE_BINARY_DIR}/collections/ DESTINATION collections COMPONENT resources). sofa_install_git_infos(${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}). # Post-install scripts (must be the last add_subdirectory); add_subdirectory(tools/postinstall-fixup). if(SOFA_BUILD_RELEASE_PACKAGE); #######################; # CPack configuration #; #######################. ################; # Package config; include(CPackComponent); if(WIN32 AND ${CMAKE_VERSION} VERSION_LESS ""3.13.0""); include(CPackNSIS); endif(); include(CPackIFW); set(CPACK_PACKAGE_VERSION ""${Sofa_VERSION}""); set(CPACK_PACKAGE_NAME ""SOFA v${CPACK_PACKAGE_VERSION}""); set(CPACK_PACKAGE_VENDOR ""The SOFA Team""); set(CPACK_PACKAGE_CONTACT ""contact@sofa-framework.org""); set(CPACK_PACKAGE_DESCRIPTION ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_DESCRIPTION_SUMMARY ""Real-time multi-physics simulation with an emphasis on medical simulation.""); set(CPACK_PACKAGE_EXECUTABLES ""runSofa"" ""runSofa""); set(CPACK_PACKAGE_DESCRIPTION_FILE ""${CMAKE_SOURCE_DIR}/README.md""); set(CPACK_PACKAGE_HOMEPAGE_URL ""https://www.sofa-framework.org""); set(CPACK_PACKAGE_FILE_NAME ""SOFA_v${CPACK_PACKAGE_VERSION}""); if(WIN32); set(CPACK_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/share/icons\\\\SOFA.png""); set(CPACK_PACKAGE_INSTALL_DIRECTORY ""SOFA\\\\v${CPACK_PACKAGE_VERSION}""); if(CMAKE_EXE_LINKER_FLAGS MATCHES "".*machine:x64""); se",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:15016,Modifiability,config,config,15016,"""Libraries""; GROUP runtime; ); cpack_add_component(resources; DISPLAY_NAME ""Resources""; GROUP runtime; ). set(CPACK_COMPONENTS_ALL applications headers GTest_headers libraries resources). set(CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME ""runSofa Application""); set(CPACK_COMPONENT_HEADERS_DISPLAY_NAME ""C++ Headers""); set(CPACK_COMPONENT_GTEST_HEADERS_DISPLAY_NAME ""GTest Headers""); set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME ""Libraries""); set(CPACK_COMPONENT_RESOURCES_DISPLAY_NAME ""Resources""). set(CPACK_COMPONENT_APPLICATIONS_GROUP ""Runtime""); set(CPACK_COMPONENT_HEADERS_GROUP ""Development""); set(CPACK_COMPONENT_GTEST_HEADERS_GROUP ""Development""); set(CPACK_COMPONENT_LIBRARIES_GROUP ""Runtime""); set(CPACK_COMPONENT_RESOURCES_GROUP ""Runtime""); ##################. ######################; # IFW Generator config; if(CPACK_BINARY_IFW); set(CPACK_IFW_PACKAGE_NAME ""${CPACK_PACKAGE_NAME}""); set(CPACK_IFW_PACKAGE_TITLE ""${CPACK_PACKAGE_NAME}""); set(CPACK_IFW_PRODUCT_URL ""${CPACK_PACKAGE_HOMEPAGE_URL}""); set(CPACK_IFW_PACKAGE_LOGO ""${CPACK_PACKAGE_ICON}""); set(CPACK_IFW_TARGET_DIRECTORY ""@HomeDir@/${CPACK_PACKAGE_INSTALL_DIRECTORY}""); if(WIN32); set(CPACK_IFW_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.ico""); elseif(APPLE); set(CPACK_IFW_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.icns""); endif(). cpack_ifw_configure_component_group(runtime; SORTING_PRIORITY 50; DEFAULT TRUE; EXPANDED; SCRIPT ""${CMAKE_SOURCE_DIR}/scripts/qtifw/install.qs""; ); cpack_ifw_configure_component_group(development; SORTING_PRIORITY 10; DEFAULT TRUE; EXPANDED; ). cpack_ifw_configure_component(applications; DISPLAY_NAME ""runSofa Application""; DEPENDS runtime; ); cpack_ifw_configure_component(headers; DISPLAY_NAME ""C++ Headers""; DEPENDS development; ); cpack_ifw_configure_component(GTest_headers; DISPLAY_NAME ""GTest Headers""; DEPENDS development; ); cpack_ifw_configure_component(libraries; DISPLAY_NAME ""Libraries""; DEPENDS development; ); cpack_ifw_confi",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:16356,Modifiability,config,config,16356,"${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.ico""); elseif(APPLE); set(CPACK_IFW_PACKAGE_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.icns""); endif(). cpack_ifw_configure_component_group(runtime; SORTING_PRIORITY 50; DEFAULT TRUE; EXPANDED; SCRIPT ""${CMAKE_SOURCE_DIR}/scripts/qtifw/install.qs""; ); cpack_ifw_configure_component_group(development; SORTING_PRIORITY 10; DEFAULT TRUE; EXPANDED; ). cpack_ifw_configure_component(applications; DISPLAY_NAME ""runSofa Application""; DEPENDS runtime; ); cpack_ifw_configure_component(headers; DISPLAY_NAME ""C++ Headers""; DEPENDS development; ); cpack_ifw_configure_component(GTest_headers; DISPLAY_NAME ""GTest Headers""; DEPENDS development; ); cpack_ifw_configure_component(libraries; DISPLAY_NAME ""Libraries""; DEPENDS development; ); cpack_ifw_configure_component(resources; DISPLAY_NAME ""Resources""; DEPENDS runtime; ); endif(); ######################. #######################; # NSIS Generator config; if(CPACK_BINARY_NSIS); # There is a bug in NSIS that does not handle full unix paths properly. Make; # sure there is at least one set of four (4) backslashes.; set(CPACK_NSIS_MUI_ICON ""${CMAKE_SOURCE_DIR}/applications/projects/runSofa/runSofa.ico""); set(CPACK_NSIS_INSTALLED_ICON_NAME ""bin\\\\runSofa.exe""); set(CPACK_NSIS_DISPLAY_NAME ${CPACK_PACKAGE_NAME}); set(CPACK_NSIS_PACKAGE_NAME ${CPACK_PACKAGE_NAME}); set(CPACK_NSIS_HELP_LINK ${CPACK_PACKAGE_HOMEPAGE_URL}); set(CPACK_NSIS_URL_INFO_ABOUT ${CPACK_PACKAGE_HOMEPAGE_URL}); set(CPACK_NSIS_MODIFY_PATH ON); set(CPACK_NSIS_CONTACT ""contact@sofa-framework.org""); set(CPACK_NSIS_INSTALL_ROOT ""$PROFILE""); string(CONCAT EXTRA_INSTALL_COMMAND ""ExecShell \\\""open\\\"" \\\""https://www.sofa-framework.org/thank-you?sofa="" ${CPACK_PACKAGE_VERSION} ""&os=windows\\\""""); set(CPACK_NSIS_EXTRA_INSTALL_COMMANDS ""${EXTRA_INSTALL_COMMAND}""); set(CPACK_NSIS_MENU_LINKS; ""https://www.sofa-framework.org/documentation/"" ""SOFA User Documentation""; ""https://www.sofa-framework.org/api/"" ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:4457,Performance,load,loader,4457,"; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/lib/cmake); # Remove generated SofaPython configuration files, to prevent SofaPython from; # adding paths to disabled plugins.; file(REMOVE_RECURSE ${CMAKE_BINARY_DIR}/etc/sofa/python.d). ## Custom Environment; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindEigen3.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/macdeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/windeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindTinyXML2.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). ## RPATH; if(UNIX); # RPATH is a field in ELF binaries that is used as a hint by the system; # loader to find needed shared libraries.; #; # In the build directory, cmake creates binaries with absolute paths in; # RPATH. And by default, it strips RPATH from installed binaries. Here we; # use CMAKE_INSTALL_RPATH to set a relative RPATH. By doing so, we avoid; # the need to play with LD_LIBRARY_PATH to get applications to run. # see https://cmake.org/Wiki/CMake_RPATH_handling for $ORIGIN doc; set(CMAKE_INSTALL_RPATH; ""$ORIGIN/../lib""; ""$$ORIGIN/../lib""; ). if(APPLE); set(CMAKE_MACOSX_RPATH ON); list(APPEND CMAKE_INSTALL_RPATH; ""@loader_path/../lib""; ""@executable_path/../lib""; ""@loader_path/../../Frameworks""; ""@executable_path/../../Frameworks""; ); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(UNIX). ### Windows config; if(MSVC); # WinDepPack; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack""); if(NOT EXISTS ${SOFA_DEPENDENCY_PACK_DIR}); # force back to default value; set(SOFA_DEPEN",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:6204,Performance,optimiz,optimization,6204,"KE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack""); if(NOT EXISTS ${SOFA_DEPENDENCY_PACK_DIR}); # force back to default value; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack"" FORCE); endif(); list(APPEND CMAKE_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); if(CMAKE_CL_64); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win64); else(); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win32); endif(); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/include/ DESTINATION include/extlibs/WinDepPack COMPONENT headers); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/licenses/ DESTINATION licenses COMPONENT applications); endif(). ### Testing; option(SOFA_BUILD_TESTS ""Compile the automatic tests for Sofa, along with the gtest library."" ON). ## Active or not the use of ccache; option(SOFA_USE_CCACHE ""Compile using ccache optimization"" OFF); if(SOFA_USE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disabling option""); set(SOFA_USE_CCACHE OFF CACHE bool ""Compile using ccache optimization"" FORCE); endif(); endif(). ### Ninja build pools; option(SOFA_NINJA_BUILD_POOLS ""Activate the Ninja build pools feature, to limit the cores used by specific targets"" OFF). # Sofa.Config sets the environment (options, compiler flags, global variables); sofa_add_subdirectory(library Sofa/framework/Config Sofa.Config ON). ### Extlibs; add_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is ",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:6669,Performance,optimiz,optimization,6669,"E_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); if(CMAKE_CL_64); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win64); else(); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win32); endif(); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/include/ DESTINATION include/extlibs/WinDepPack COMPONENT headers); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/licenses/ DESTINATION licenses COMPONENT applications); endif(). ### Testing; option(SOFA_BUILD_TESTS ""Compile the automatic tests for Sofa, along with the gtest library."" ON). ## Active or not the use of ccache; option(SOFA_USE_CCACHE ""Compile using ccache optimization"" OFF); if(SOFA_USE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disabling option""); set(SOFA_USE_CCACHE OFF CACHE bool ""Compile using ccache optimization"" FORCE); endif(); endif(). ### Ninja build pools; option(SOFA_NINJA_BUILD_POOLS ""Activate the Ninja build pools feature, to limit the cores used by specific targets"" OFF). # Sofa.Config sets the environment (options, compiler flags, global variables); sofa_add_subdirectory(library Sofa/framework/Config Sofa.Config ON). ### Extlibs; add_subdirectory(extlibs). ### Compatibility; option(SOFA_ENABLE_LEGACY_HEADERS ""Enable the compatibility layer (headers located in legacy folders) and deprecated cmake modules."" ON); if(SOFA_ENABLE_LEGACY_HEADERS); message(""Using legacy headers is enabled.""); endif(); sofa_add_subdirectory(library Sofa/framework/Compat Sofa.Compat ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ### SOFA (framework and components); add_subdirectory(Sofa). ### Compatibility; # Deprecated (hollow) framework and component modules.; # All",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:4716,Safety,avoid,avoid,4716,"e""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules""); list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/Sofa/framework/Config/cmake""); list(APPEND CMAKE_IGNORE_PATH ""${CMAKE_INSTALL_PREFIX}"") # ignore install directory for findXXX commands; include(SofaMacros). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindEigen3.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/macdeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/windeployqt.cmake""; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules/FindTinyXML2.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). ## RPATH; if(UNIX); # RPATH is a field in ELF binaries that is used as a hint by the system; # loader to find needed shared libraries.; #; # In the build directory, cmake creates binaries with absolute paths in; # RPATH. And by default, it strips RPATH from installed binaries. Here we; # use CMAKE_INSTALL_RPATH to set a relative RPATH. By doing so, we avoid; # the need to play with LD_LIBRARY_PATH to get applications to run. # see https://cmake.org/Wiki/CMake_RPATH_handling for $ORIGIN doc; set(CMAKE_INSTALL_RPATH; ""$ORIGIN/../lib""; ""$$ORIGIN/../lib""; ). if(APPLE); set(CMAKE_MACOSX_RPATH ON); list(APPEND CMAKE_INSTALL_RPATH; ""@loader_path/../lib""; ""@executable_path/../lib""; ""@loader_path/../../Frameworks""; ""@executable_path/../../Frameworks""; ); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(UNIX). ### Windows config; if(MSVC); # WinDepPack; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack""); if(NOT EXISTS ${SOFA_DEPENDENCY_PACK_DIR}); # force back to default value; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack"" FORCE); endif(); list(APPEND CMAKE_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); if(CMAKE_CL_64); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win64); else(); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_D",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:6071,Testability,test,tests,6071,"./Frameworks""; ""@executable_path/../../Frameworks""; ); set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE); endif(); endif(UNIX). ### Windows config; if(MSVC); # WinDepPack; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack""); if(NOT EXISTS ${SOFA_DEPENDENCY_PACK_DIR}); # force back to default value; set(SOFA_DEPENDENCY_PACK_DIR ""${CMAKE_SOURCE_DIR}"" CACHE PATH ""Directory containing Windows Dependency Pack"" FORCE); endif(); list(APPEND CMAKE_INCLUDE_PATH ${SOFA_DEPENDENCY_PACK_DIR}/include); if(CMAKE_CL_64); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win64); else(); list(APPEND CMAKE_LIBRARY_PATH ${SOFA_DEPENDENCY_PACK_DIR}/lib/win32); endif(); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/include/ DESTINATION include/extlibs/WinDepPack COMPONENT headers); install(DIRECTORY ${SOFA_DEPENDENCY_PACK_DIR}/licenses/ DESTINATION licenses COMPONENT applications); endif(). ### Testing; option(SOFA_BUILD_TESTS ""Compile the automatic tests for Sofa, along with the gtest library."" ON). ## Active or not the use of ccache; option(SOFA_USE_CCACHE ""Compile using ccache optimization"" OFF); if(SOFA_USE_CCACHE); find_program(CCACHE_PROGRAM ccache); if(CCACHE_PROGRAM); # Support Unix Makefiles and Ninja; #TODO replace by <LANG>_COMPILER_LAUNCHER when min cmake version > 3.4; set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ""${CCACHE_PROGRAM}""); set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ""${CCACHE_PROGRAM}""); else(); message(WARNING ""ccache not found, disabling option""); set(SOFA_USE_CCACHE OFF CACHE bool ""Compile using ccache optimization"" FORCE); endif(); endif(). ### Ninja build pools; option(SOFA_NINJA_BUILD_POOLS ""Activate the Ninja build pools feature, to limit the cores used by specific targets"" OFF). # Sofa.Config sets the environment (options, compiler flags, global variables); sofa_add_subdirectory(library Sofa/framework/Config Sofa.Config ON). ### Extlibs; add_subdirectory(extlibs). ### Compatibility; o",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:9679,Testability,test,test,9679,"). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" CACHE STRING ""list of paths separated by ';'""); if(NOT ""${SOFA_EXTERNAL_DIRECTORIES}"" STREQUAL """"); foreach(dir ${SOFA_EXTERNAL_DIRECTORIES}); get_filename_component(name ${dir} NAME) # Get the name of the actual directory; message(""Adding external directory: ${name} (${dir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/so",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt:9695,Testability,test,tests,9695,"). ## Build external projects at the same time; set(SOFA_EXTERNAL_DIRECTORIES """" CACHE STRING ""list of paths separated by ';'""); if(NOT ""${SOFA_EXTERNAL_DIRECTORIES}"" STREQUAL """"); foreach(dir ${SOFA_EXTERNAL_DIRECTORIES}); get_filename_component(name ${dir} NAME) # Get the name of the actual directory; message(""Adding external directory: ${name} (${dir})""); add_subdirectory(${dir} ""${CMAKE_CURRENT_BINARY_DIR}/external_directories/${name}""); endforeach(); endif(). ## Custom; if(EXISTS ""${CMAKE_CURRENT_LIST_DIR}/custom.cmake""); message(""Adding custom file""); include( ""custom.cmake"" ); endif(). ## IDE directories; # Sofa.Component; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES ""Sofa.Component.*"" AND NOT target MATCHES "".*_relocatable_install""); set_target_properties(${target} PROPERTIES FOLDER Sofa.Component) # IDE folder; endif(); endforeach(); # Testing; if(TARGET Sofa.Testing) # No need to search for test targets if tests are not enabled; sofa_get_all_targets(all_targets); foreach(target ${all_targets}); if(target MATCHES "".*_test"" OR target MATCHES "".*_simutest""); set_target_properties(${target} PROPERTIES FOLDER Testing) # IDE folder; endif(); endforeach(); endif(); ##. ## Install configuration; #install(FILES ""${CMAKE_BINARY_DIR}/CMakeCache.txt"" DESTINATION . COMPONENT headers); install(FILES ""${CMAKE_SOURCE_DIR}/README.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/CHANGELOG.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/LICENSE-LGPL.md"" DESTINATION . COMPONENT applications); install(FILES ""${CMAKE_SOURCE_DIR}/Authors.txt"" DESTINATION . COMPONENT applications). option(SOFA_INSTALL_RESOURCES_FILES ""Copy resources files (etc/, share/, examples/, tools/sofa-launcher/) when installing"" ON); ## Install resource files; if(SOFA_INSTALL_RESOURCES_FILES); install(DIRECTORY share/ DESTINATION share/sofa COMPONENT resources); install(DIRECTORY examples/ DESTINATION share/so",MatchSource.DOCS,CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/CMakeLists.txt:280,Modifiability,variab,variables,280,"cmake_minimum_required(VERSION 3.22). # framework; add_subdirectory(framework). # Component; sofa_add_subdirectory(module Component Sofa.Component ON). # GL; option(SOFA_WITH_OPENGL ""Compile Sofa with OpenGL support. This will define the SOFA_WITH_OPENGL and SOFA_NO_OPENGL CMake variables."" ON); sofa_add_subdirectory(library GL Sofa.GL ON WHEN_TO_SHOW ""SOFA_WITH_OPENGL"" VALUE_IF_HIDDEN OFF). # GUI; add_subdirectory(GUI); ",MatchSource.DOCS,Sofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3813,Availability,avail,available,3813,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:4198,Integrability,message,message,4198,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:230,Modifiability,plugin,plugin,230,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:288,Modifiability,plugin,plugin,288,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:445,Modifiability,plugin,plugin,445,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:524,Modifiability,plugin,plugins,524,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:556,Modifiability,plugin,plugin,556,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:638,Modifiability,plugin,plugin,638,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:705,Modifiability,plugin,plugin,705,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:786,Modifiability,plugin,plugin,786,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:882,Modifiability,plugin,plugin,882,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:949,Modifiability,plugin,plugin,949,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1013,Modifiability,plugin,plugin,1013,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1100,Modifiability,plugin,plugin,1100,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1207,Modifiability,plugin,plugin,1207,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1342,Modifiability,plugin,plugin,1342,"ctory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subd",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1438,Modifiability,plugin,plugin,1438,"ry(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaH",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1580,Modifiability,plugin,plugin,1580,"_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_su",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1701,Modifiability,plugin,plugin,1701,"_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_su",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1784,Modifiability,plugin,plugin,1784,"stanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlu",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1869,Modifiability,plugin,plugin,1869,"lugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:1952,Modifiability,plugin,plugin,1952,"MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2045,Modifiability,plugin,plugin,2045,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2102,Modifiability,plugin,plugin,2102,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2155,Modifiability,plugin,plugin,2155,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2200,Modifiability,plugin,plugin,2200,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2247,Modifiability,plugin,plugin,2247,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2314,Modifiability,plugin,plugin,2314,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2363,Modifiability,plugin,plugin,2363,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2430,Modifiability,plugin,plugin,2430,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2479,Modifiability,plugin,plugin,2479,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2534,Modifiability,plugin,plugin,2534,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2587,Modifiability,plugin,plugin,2587,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2636,Modifiability,plugin,plugin,2636,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2740,Modifiability,plugin,plugin,2740,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2827,Modifiability,plugin,plugin,2827,"istration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelO",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2906,Modifiability,plugin,plugin,2906," GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:2973,Modifiability,plugin,plugin,2973,"ldTopologies EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SixenseHydra SixenseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3050,Modifiability,plugin,plugin,3050,"nseHydra); sofa_add_subdirectory(plugin SofaOpenCL SofaOpenCL); sofa_add_subdirectory(plugin Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_a",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3143,Modifiability,plugin,plugin,3143,"Xitact Xitact); sofa_add_subdirectory(plugin Haption Haption); sofa_add_subdirectory(plugin PersistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3236,Modifiability,plugin,plugin,3236,"rsistentContact PersistentContact); sofa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and Vol",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3331,Modifiability,plugin,plugin,3331,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3416,Modifiability,plugin,plugin,3416,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3511,Modifiability,plugin,plugin,3511,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3588,Modifiability,plugin,plugin,3588,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3741,Modifiability,plugin,plugin,3741,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3876,Modifiability,plugin,plugin,3876,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:3978,Modifiability,plugin,plugin,3978,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:4030,Modifiability,plugin,plugin,4030,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:4086,Modifiability,plugin,plugin,4086,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:4156,Modifiability,plugin,plugin,4156,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:4274,Modifiability,plugin,plugins,4274,"fa_add_subdirectory(plugin Sensable Sensable); sofa_add_subdirectory(plugin SensableEmulation SensableEmulation); sofa_add_subdirectory(plugin SofaHAPI SofaHAPI); sofa_add_subdirectory(plugin SofaCarving SofaCarving); sofa_add_subdirectory(plugin LeapMotion LeapMotion); sofa_add_subdirectory(plugin Geomagic Geomagic); sofa_add_subdirectory(plugin SofaAssimp SofaAssimp) # ColladaSceneLoader Depends on Flexible and image; sofa_add_subdirectory(plugin SofaMatrix SofaMatrix ON) # Depends on image, CImgPlugin; sofa_add_subdirectory(plugin BeamAdapter BeamAdapter EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin STLIB STLIB EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SoftRobots SoftRobots EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CollisionAlgorithm CollisionAlgorithm EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ConstraintGeometry ConstraintGeometry EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ShapeMatchingPlugin ShapeMatchingPlugin EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CSparseSolvers CSparseSolvers EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ModelOrderReduction ModelOrderReduction EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin Sofa.Metis Sofa.Metis EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin PSL PSL EXTERNAL GIT_REF v24.06). if((${CMAKE_CXX_COMPILER_ID} STREQUAL ""GNU"") AND (${CMAKE_SYSTEM_NAME} MATCHES ""Linux"")); sofa_add_subdirectory(plugin SofaPardisoSolver SofaPardisoSolver) # SofaPardisoSolver is only available under linux with gcc; endif(). sofa_add_subdirectory(plugin SofaCUDA SofaCUDA). sofa_find_package(Sofa.GL QUIET); if(Sofa.GL_FOUND); sofa_add_subdirectory(plugin SofaSimpleGUI SofaSimpleGUI) # SofaSimpleGUI plugin can't work without OPENGL; sofa_add_subdirectory(plugin VolumetricRendering VolumetricRendering) # VolumetricRendering plugin can't work without OPENGL; else(); message(""Sofa.GL not found; disabling SofaSimpleGUI and VolumetricRendering plugins""); endif(); ",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt:174,Testability,test,tests,174,"cmake_minimum_required(VERSION 3.22). find_package(Sofa.Config REQUIRED). if(SOFA_BUILD_TESTS OR SOFA_BUILD_RELEASE_PACKAGE); # (Deprecated) Library used to write high level tests involving many components.; sofa_add_subdirectory(plugin SofaTest SofaTest); endif(). sofa_add_subdirectory(plugin CollisionOBBCapsule CollisionOBBCapsule). sofa_add_subdirectory(directory SofaHighOrder SofaHighOrder EXTERNAL GIT_REF v24.06). sofa_add_subdirectory(plugin CImgPlugin CImgPlugin) # ON by default and first as it is used by other plugins.; sofa_add_subdirectory(plugin ArticulatedSystemPlugin ArticulatedSystemPlugin ON); sofa_add_subdirectory(plugin SofaEulerianFluid SofaEulerianFluid); sofa_add_subdirectory(plugin SofaSphFluid SofaSphFluid EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin SofaDistanceGrid SofaDistanceGrid) # Depends on SofaMiscCollision; sofa_add_subdirectory(plugin SofaImplicitField SofaImplicitField); sofa_add_subdirectory(plugin MultiThreading MultiThreading ON); sofa_add_subdirectory(plugin DiffusionSolver DiffusionSolver) # Depends on CImgPlugin; sofa_add_subdirectory(plugin image image) # Depends on CImgPlugin, DiffusionSolver, MultiThreading (soft); sofa_add_subdirectory(plugin SofaNewmat SofaNewmat). sofa_add_subdirectory(directory SofaPython3 SofaPython3 EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin CGALPlugin CGALPlugin EXTERNAL GIT_REF v24.06) # Depends on image; sofa_add_subdirectory(plugin Registration Registration EXTERNAL GIT_REF v24.06) # Depends on image, SofaPython, SofaGui and SofaDistanceGrid; sofa_add_subdirectory(plugin BulletCollisionDetection BulletCollisionDetection) # Depends on Compliant and LMConstraint; sofa_add_subdirectory(plugin InvertibleFVM InvertibleFVM EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin MeshSTEPLoader MeshSTEPLoader EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin PluginExample PluginExample EXTERNAL GIT_REF v24.06); sofa_add_subdirectory(plugin ManifoldTopologies ManifoldTopologies EXTE",MatchSource.DOCS,applications/plugins/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:8279,Deployability,install,installation,8279,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:1080,Energy Efficiency,charge,charge,1080," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:4383,Energy Efficiency,charge,charge,4383,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:5086,Energy Efficiency,charge,charge,5086,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:7411,Energy Efficiency,charge,charge,7411,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:3911,Integrability,depend,depends,3911,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:8201,Integrability,interface,interface,8201,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:12233,Integrability,interface,interfaces,12233,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:6315,Modifiability,extend,extend,6315,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:7456,Performance,perform,performing,7456,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:2490,Safety,avoid,avoid,2490,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:15379,Safety,safe,safest,15379,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. {description}; Copyright (C) {year} {fullname}. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this; when it st",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:2435,Security,threat,threatened,2435," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:8699,Security,access,access,8699," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:8765,Security,access,access,8765," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:11573,Security,integrity,integrity,11573,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:2664,Usability,clear,clear,2664,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:12039,Usability,clear,clear,12039,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt:13626,Usability,guid,guided,13626,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,applications/projects/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:8279,Deployability,install,installation,8279,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:1080,Energy Efficiency,charge,charge,1080," 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA; Everyone is permitted to copy and distribute verbatim copies; of this license document, but changing it is not allowed. Preamble. The licenses for most software are designed to take away your; freedom to share and change it. By contrast, the GNU General Public; License is intended to guarantee your freedom to share and change free; software--to make sure the software is free for all its users. This; General Public License applies to most of the Free Software; Foundation's software and to any other program whose authors commit to; using it. (Some other Free Software Foundation software is covered by; the GNU Lesser General Public License instead.) You can apply it to; your programs, too. When we speak of free software, we are referring to freedom, not; price. Our General Public Licenses are designed to make sure that you; have the freedom to distribute copies of free software (and charge for; this service if you wish), that you receive source code or can get it; if you want it, that you can change the software or use pieces of it; in new free programs; and that you know you can do these things. To protect your rights, we need to make restrictions that forbid; anyone to deny you these rights or to ask you to surrender the rights.; These restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands th",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:4383,Energy Efficiency,charge,charge,4383,"nslation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, s",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:5086,Energy Efficiency,charge,charge,5086,"ou receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You must cause any work that you distribute or publish, that in; whole or in part contains or is derived from the Program or any; part thereof, to be licensed as a whole at no charge to all third; parties under the terms of this License. c) If the modified program normally reads commands interactively; when run, you must cause it, when started running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its ter",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:7411,Energy Efficiency,charge,charge,7411,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:3911,Integrability,depend,depends,3911,"MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; running the Program is not restricted, and the output from the Program; is covered only if its contents constitute a work based on the; Program (independent of having been made by running the Program).; Whether that is true depends on what the Program does. 1. You may copy and distribute verbatim copies of the Program's; source code as you receive it, in any medium, provided that you; conspicuously and appropriately publish on each copy an appropriate; copyright notice and disclaimer of warranty; keep intact all the; notices that refer to this License and to the absence of any warranty;; and give any other recipients of the Program a copy of this License; along with the Program. You may charge a fee for the physical act of transferring a copy, and; you may at your option offer warranty protection in exchange for a fee. 2. You may modify your copy or copies of the Program or any portion; of it, thus forming a work based on the Program, and copy and; distribute such modifications or work under the terms of Section 1; above, provided that you also meet all of these conditions:. a) You must cause the modified files to carry prominent notices; stating that you changed the files and the date of any change. b) You mu",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:8201,Integrability,interface,interface,8201,"distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your ",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:12233,Integrability,interface,interfaces,12233,"the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If y",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:6315,Modifiability,extend,extend,6315,"d running for such; interactive use in the most ordinary way, to print or display an; announcement including an appropriate copyright notice and a; notice that there is no warranty (or else, saying that you provide; a warranty) and that users may redistribute the program under; these conditions, and telling the user how to view a copy of this; License. (Exception: if the Program itself is interactive but; does not normally print such an announcement, your work based on; the Program is not required to print an announcement.). These requirements apply to the modified work as a whole. If; identifiable sections of that work are not derived from the Program,; and can be reasonably considered independent and separate works in; themselves, then this License, and its terms, do not apply to those; sections when you distribute them as separate works. But when you; distribute the same sections as part of a whole which is a work based; on the Program, the distribution of the whole must be on the terms of; this License, whose permissions for other licensees extend to the; entire whole, and thus to each and every part regardless of who wrote it. Thus, it is not the intent of this section to claim rights or contest; your rights to work written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a m",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:7456,Performance,perform,performing,7456,"rk written entirely by you; rather, the intent is to; exercise the right to control the distribution of derivative or; collective works based on the Program. In addition, mere aggregation of another work not based on the Program; with the Program (or with a work based on the Program) on a volume of; a storage or distribution medium does not bring the other work under; the scope of this License. 3. You may copy and distribute the Program (or a work based on it,; under Section 2) in object code or executable form under the terms of; Sections 1 and 2 above provided that you also do one of the following:. a) Accompany it with the complete corresponding machine-readable; source code, which must be distributed under the terms of Sections; 1 and 2 above on a medium customarily used for software interchange; or,. b) Accompany it with a written offer, valid for at least three; years, to give any third party, for a charge no more than your; cost of physically performing source distribution, a complete; machine-readable copy of the corresponding source code, to be; distributed under the terms of Sections 1 and 2 above on a medium; customarily used for software interchange; or,. c) Accompany it with the information you received as to the offer; to distribute corresponding source code. (This alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (co",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:2490,Safety,avoid,avoid,2490,"modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Ac",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:15379,Safety,safe,safest,15379,"ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING; OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED; TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY; YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER; PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE; POSSIBILITY OF SUCH DAMAGES. END OF TERMS AND CONDITIONS. How to Apply These Terms to Your New Programs. If you develop a new program, and you want it to be of the greatest; possible use to the public, the best way to achieve this is to make it; free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest; to attach them to the start of each source file to most effectively; convey the exclusion of warranty; and each file should have at least; the ""copyright"" line and a pointer to where the full notice is found. {description}; Copyright (C) {year} {fullname}. This program is free software; you can redistribute it and/or modify; it under the terms of the GNU General Public License as published by; the Free Software Foundation; either version 2 of the License, or; (at your option) any later version. This program is distributed in the hope that it will be useful,; but WITHOUT ANY WARRANTY; without even the implied warranty of; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; GNU General Public License for more details. You should have received a copy of the GNU General Public License along; with this program; if not, write to the Free Software Foundation, Inc.,; 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Also add information on how to contact you by electronic and paper mail. If the program is interactive, make it output a short notice like this; when it st",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:2435,Security,threat,threatened,2435," restrictions translate to certain responsibilities for you if you; distribute copies of the software, or if you modify it. For example, if you distribute copies of such a program, whether; gratis or for a fee, you must give the recipients all the rights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, ",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:8699,Security,access,access,8699," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:8765,Security,access,access,8765," alternative is; allowed only for noncommercial distribution and only if you; received the program in object code or executable form with such; an offer, in accord with Subsection b above.). The source code for a work means the preferred form of the work for; making modifications to it. For an executable work, complete source; code means all the source code for all modules it contains, plus any; associated interface definition files, plus the scripts used to; control compilation and installation of the executable. However, as a; special exception, the source code distributed need not include; anything that is normally distributed (in either source or binary; form) with the major components (compiler, kernel, and so on) of the; operating system on which the executable runs, unless that component; itself accompanies the executable. If distribution of executable or object code is made by offering; access to copy from a designated place, then offering equivalent; access to copy the source code from the same place counts as; distribution of the source code, even though third parties are not; compelled to copy the source along with the object code. 4. You may not copy, modify, sublicense, or distribute the Program; except as expressly provided under this License. Any attempt; otherwise to copy, modify, sublicense or distribute the Program is; void, and will automatically terminate your rights under this License.; However, parties who have received copies, or rights, from you under; this License will not have their licenses terminated so long as such; parties remain in full compliance. 5. You are not required to accept this License, since you have not; signed it. However, nothing else grants you permission to modify or; distribute the Program or its derivative works. These actions are; prohibited by law if you do not accept this License. Therefore, by; modifying or distributing the Program (or any work based on the; Program), you indicate your acceptance of this License to ",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:11573,Security,integrity,integrity,11573,"er, agreement or; otherwise) that contradict the conditions of this License, they do not; excuse you from the conditions of this License. If you cannot; distribute so as to satisfy simultaneously your obligations under this; License and any other pertinent obligations, then as a consequence you; may not distribute the Program at all. For example, if a patent; license would not permit royalty-free redistribution of the Program by; all those who receive copies directly or indirectly through you, then; the only way you could satisfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorpora",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:2664,Usability,clear,clear,2664,"ights that; you have. You must make sure that they, too, receive or can get the; source code. And you must show them these terms so they know their; rights. We protect your rights with two steps: (1) copyright the software, and; (2) offer you this license which gives you legal permission to copy,; distribute and/or modify the software. Also, for each author's protection and ours, we want to make certain; that everyone understands that there is no warranty for this free; software. If the software is modified by someone else and passed on, we; want its recipients to know that what they have is not the original, so; that any problems introduced by others will not reflect on the original; authors' reputations. Finally, any free program is threatened constantly by software; patents. We wish to avoid the danger that redistributors of a free; program will individually obtain patent licenses, in effect making the; program proprietary. To prevent this, we have made it clear that any; patent must be licensed for everyone's free use or not licensed at all. The precise terms and conditions for copying, distribution and; modification follow. GNU GENERAL PUBLIC LICENSE; TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION. 0. This License applies to any program or other work which contains; a notice placed by the copyright holder saying it may be distributed; under the terms of this General Public License. The ""Program"", below,; refers to any such program or work, and a ""work based on the Program""; means either the Program or any derivative work under copyright law:; that is to say, a work containing the Program or a portion of it,; either verbatim or with modifications and/or translated into another; language. (Hereinafter, translation is included without limitation in; the term ""modification"".) Each licensee is addressed as ""you"". Activities other than copying, distribution and modification are not; covered by this License; they are outside its scope. The act of; runn",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:12039,Usability,clear,clear,12039,"isfy both it and this License would be to; refrain entirely from distribution of the Program. If any portion of this section is held invalid or unenforceable under; any particular circumstance, the balance of the section is intended to; apply and the section as a whole is intended to apply in other; circumstances. It is not the purpose of this section to induce you to infringe any; patents or other property right claims or to contest validity of any; such claims; this section has the sole purpose of protecting the; integrity of the free software distribution system, which is; implemented by public license practices. Many people have made; generous contributions to the wide range of software distributed; through that system in reliance on consistent application of that; system; it is up to the author/donor to decide if he or she is willing; to distribute software through any other system and a licensee cannot; impose that choice. This section is intended to make thoroughly clear what is believed to; be a consequence of the rest of this License. 8. If the distribution and/or use of the Program is restricted in; certain countries either by patents or by copyrighted interfaces, the; original copyright holder who places the Program under this License; may add an explicit geographical distribution limitation excluding; those countries, so that distribution is permitted only in or among; countries not thus excluded. In such case, this License incorporates; the limitation as if written in the body of this License. 9. The Free Software Foundation may publish revised and/or new versions; of the General Public License from time to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditio",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt:13626,Usability,guid,guided,13626,"ime to time. Such new versions will; be similar in spirit to the present version, but may differ in detail to; address new problems or concerns. Each version is given a distinguishing version number. If the Program; specifies a version number of this License which applies to it and ""any; later version"", you have the option of following the terms and conditions; either of that version or of any later version published by the Free; Software Foundation. If the Program does not specify a version number of; this License, you may choose any version ever published by the Free Software; Foundation. 10. If you wish to incorporate parts of the Program into other free; programs whose distribution conditions are different, write to the author; to ask for permission. For software which is copyrighted by the Free; Software Foundation, write to the Free Software Foundation; we sometimes; make exceptions for this. Our decision will be guided by the two goals; of preserving the free status of all derivatives of our free software and; of promoting the sharing and reuse of software generally. NO WARRANTY. 11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY; FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN; OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES; PROVIDE THE PROGRAM ""AS IS"" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED; OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS; TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE; PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,; REPAIR OR CORRECTION. 12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING; WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR; REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,; INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARI",MatchSource.DOCS,applications/tutorials/LICENSE.GPL.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/tutorials/LICENSE.GPL.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/CMakeLists.txt:4262,Integrability,depend,depends,4262,"ry(collection modules/SofaGeneralTopology SofaGeneralTopology ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaTopologyMapping SofaTopologyMapping ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaUserInteraction SofaUserInteraction ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaConstraint SofaConstraint ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaGeneralLoader SofaGeneralLoader ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaExporter SofaExporter ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). sofa_add_subdirectory(collection modules/SofaSparseSolver SofaSparseSolver ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF) #; sofa_add_subdirectory(collection modules/SofaPreconditioner SofaPreconditioner ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF) # depends on SofaSparseSolver. sofa_add_subdirectory(collection modules/SofaDenseSolver SofaDenseSolver ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). sofa_add_subdirectory(collection modules/SofaNonUniformFem SofaNonUniformFem ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). sofa_find_package(Sofa.GL QUIET); sofa_add_subdirectory(collection modules/SofaOpenglVisual SofaOpenglVisual ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS AND Sofa.GL_FOUND"" VALUE_IF_HIDDEN OFF). ## Misc; sofa_add_subdirectory(collection modules/SofaMiscTopology SofaMiscTopology ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscExtra SofaMiscExtra ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscForceField SofaMiscForceF",MatchSource.DOCS,applications/collections/deprecated/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/CMakeLists.txt:6048,Modifiability,plugin,plugin,6048," modules/SofaNonUniformFem SofaNonUniformFem ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). sofa_find_package(Sofa.GL QUIET); sofa_add_subdirectory(collection modules/SofaOpenglVisual SofaOpenglVisual ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS AND Sofa.GL_FOUND"" VALUE_IF_HIDDEN OFF). ## Misc; sofa_add_subdirectory(collection modules/SofaMiscTopology SofaMiscTopology ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscExtra SofaMiscExtra ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscForceField SofaMiscForceField ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscEngine SofaMiscEngine ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscSolver SofaMiscSolver ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscFem SofaMiscFem ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscMapping SofaMiscMapping ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaMiscCollision SofaMiscCollision ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection modules/SofaHaptics SofaHaptics ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(plugin modules/SofaValidation SofaValidation ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). ## GUI; sofa_add_subdirectory(collection SofaGui SofaGui ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF). # meta-modules. sofa_add_subdirectory(collection SofaCommon SofaCommon ON WHEN_TO_SHOW ""SOFA_ENABLE_LEGACY_HEADERS"" VALUE_IF_HIDDEN OFF); sofa_add_subdirectory(collection SofaGener",MatchSource.DOCS,applications/collections/deprecated/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaAdvanced/CMakeLists.txt:449,Integrability,message,message,449,"cmake_minimum_required(VERSION 3.22); project(SofaAdvanced). ## Version; set(SOFAADVANCED_VERSION ${SofaFramework_VERSION}). ## Subdirectories; set(SOFAADVANCED_MODULES; SofaNonUniformFem; ). foreach(module ${SOFAADVANCED_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFAADVANCED_SRC src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAADVANCED_SRC}/config.h.in ; ${SOFAADVANCED_SRC}/initSofaAdvanced.h; ). set(SOURCE_FILES; ${SOFAADVANCED_SRC}/initSofaAdvanced.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAADVANCED_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaAdvanced/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaAdvanced/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaAdvanced/CMakeLists.txt:686,Modifiability,config,config,686,"cmake_minimum_required(VERSION 3.22); project(SofaAdvanced). ## Version; set(SOFAADVANCED_VERSION ${SofaFramework_VERSION}). ## Subdirectories; set(SOFAADVANCED_MODULES; SofaNonUniformFem; ). foreach(module ${SOFAADVANCED_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFAADVANCED_SRC src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAADVANCED_SRC}/config.h.in ; ${SOFAADVANCED_SRC}/initSofaAdvanced.h; ). set(SOURCE_FILES; ${SOFAADVANCED_SRC}/initSofaAdvanced.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAADVANCED_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaAdvanced/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaAdvanced/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaBase/CMakeLists.txt:1072,Availability,avail,available,1072,"cmake_minimum_required(VERSION 3.22); project(SofaBase). set(SOFABASE_MODULES; SofaBaseLinearSolver; SofaEigen2Solver; SofaBaseTopology; SofaBaseCollision; SofaBaseMechanics; SofaBaseVisual; SofaBaseUtils; ). foreach(TARGET ${SOFABASE_MODULES}); add_subdirectory(../modules/${TARGET} ${CMAKE_CURRENT_BINARY_DIR}/${TARGET}); set_target_properties(${TARGET} PROPERTIES FOLDER SofaBase); endforeach(). set(SOFABASE_SRC src/${PROJECT_NAME}); set(HEADER_FILES; ${SOFABASE_SRC}/config.h.in; ${SOFABASE_SRC}/initSofaBase.h; ); set(SOURCE_FILES; ${SOFABASE_SRC}/initSofaBase.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFABASE_MODULES}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER SofaBase). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; # RELOCATABLE ""collections"" # disabled because we need SofaBase to be directly available; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaBase/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaBase/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaBase/CMakeLists.txt:472,Modifiability,config,config,472,"cmake_minimum_required(VERSION 3.22); project(SofaBase). set(SOFABASE_MODULES; SofaBaseLinearSolver; SofaEigen2Solver; SofaBaseTopology; SofaBaseCollision; SofaBaseMechanics; SofaBaseVisual; SofaBaseUtils; ). foreach(TARGET ${SOFABASE_MODULES}); add_subdirectory(../modules/${TARGET} ${CMAKE_CURRENT_BINARY_DIR}/${TARGET}); set_target_properties(${TARGET} PROPERTIES FOLDER SofaBase); endforeach(). set(SOFABASE_SRC src/${PROJECT_NAME}); set(HEADER_FILES; ${SOFABASE_SRC}/config.h.in; ${SOFABASE_SRC}/initSofaBase.h; ); set(SOURCE_FILES; ${SOFABASE_SRC}/initSofaBase.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFABASE_MODULES}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER SofaBase). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; # RELOCATABLE ""collections"" # disabled because we need SofaBase to be directly available; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaBase/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaBase/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaCommon/CMakeLists.txt:487,Integrability,message,message,487,"cmake_minimum_required(VERSION 3.22); project(SofaCommon). # Modules; set(SOFACOMMON_MODULES; SofaSimpleFem; SofaRigid; SofaDeformable; SofaObjectInteraction; SofaEngine; SofaExplicitOdeSolver; SofaImplicitOdeSolver; SofaLoader; ). foreach(module ${SOFACOMMON_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFACOMMON_SRC src/${PROJECT_NAME}); set(HEADER_FILES; ${SOFACOMMON_SRC}/config.h.in; ${SOFACOMMON_SRC}/initSofaCommon.h; ); set(SOURCE_FILES; ${SOFACOMMON_SRC}/initSofaCommon.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMMON_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaCommon/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaCommon/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaCommon/CMakeLists.txt:720,Modifiability,config,config,720,"cmake_minimum_required(VERSION 3.22); project(SofaCommon). # Modules; set(SOFACOMMON_MODULES; SofaSimpleFem; SofaRigid; SofaDeformable; SofaObjectInteraction; SofaEngine; SofaExplicitOdeSolver; SofaImplicitOdeSolver; SofaLoader; ). foreach(module ${SOFACOMMON_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFACOMMON_SRC src/${PROJECT_NAME}); set(HEADER_FILES; ${SOFACOMMON_SRC}/config.h.in; ${SOFACOMMON_SRC}/initSofaCommon.h; ); set(SOURCE_FILES; ${SOFACOMMON_SRC}/initSofaCommon.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMMON_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaCommon/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaCommon/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt:2283,Deployability,configurat,configurations,2283,"ionLoop; SofaGeneralDeformable; SofaGeneralEngine; SofaGeneralExplicitOdeSolver; SofaGeneralImplicitOdeSolver; SofaGeneralLinearSolver; SofaGeneralLoader; SofaGeneralMeshCollision; SofaGeneralObjectInteraction; SofaGeneralRigid; SofaGeneralTopology; SofaGeneralVisual; SofaGraphComponent; SofaTopologyMapping; SofaUserInteraction. # SofaAdvanced; SofaNonUniformFem. # SofaMisc; SofaMiscCollision; SofaMiscEngine; SofaMiscExtra; SofaMiscFem; SofaMiscForceField; SofaMiscMapping; SofaMiscSolver; SofaMiscTopology. # Other (pluginized from SofaGeneral); SofaDenseSolver; SofaExporter; SofaHaptics; SofaOpenglVisual; SofaPreconditioner; SofaSparseSolver; SofaValidation; ). set(HEADER_FILES; config.h.in; components.h.in; initSofaComponentAll.h; ); set(SOURCE_FILES; initSofaComponentAll.cpp; ); set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}). set(SOFACOMPONENTALL_MODULES_INCLUDES """"); set(SOFACOMPONENTALL_MODULES_INITS """"); set(SOFACOMPONENTALL_MODULES_HAVES """"); foreach(module ${SOFACOMPONENTALL_MODULES}); string(TOUPPER ""${module}"" module_upper). sofa_find_package(${module} QUIET). if(${module}_FOUND); target_link_libraries(${PROJECT_NAME} ${module}); set(SOFACOMPONENTALL_MODULES_INCLUDES ""${SOFACOMPONENTALL_MODULES_INCLUDES}\n#include <${module}/init${module}.h>""); set(SOFACOMPONENTALL_MODULES_INITS ""${SOFACOMPONENTALL_MODULES_INITS} \\\n init${module}();""); else(); message(""${PROJECT_NAME}: ${module} will not be in the collection.""); endif(); set(SOFACOMPONENTALL_MODULES_HAVES ""${SOFACOMPONENTALL_MODULES_HAVES}\nset(SOFACOMPONENTALL_HAVE_${module_upper} ${SOFACOMPONENTALL_HAVE_${module_upper}})""); endforeach(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ""SofaComponentAll""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaComponentAll/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt:1972,Integrability,message,message,1972,"ionLoop; SofaGeneralDeformable; SofaGeneralEngine; SofaGeneralExplicitOdeSolver; SofaGeneralImplicitOdeSolver; SofaGeneralLinearSolver; SofaGeneralLoader; SofaGeneralMeshCollision; SofaGeneralObjectInteraction; SofaGeneralRigid; SofaGeneralTopology; SofaGeneralVisual; SofaGraphComponent; SofaTopologyMapping; SofaUserInteraction. # SofaAdvanced; SofaNonUniformFem. # SofaMisc; SofaMiscCollision; SofaMiscEngine; SofaMiscExtra; SofaMiscFem; SofaMiscForceField; SofaMiscMapping; SofaMiscSolver; SofaMiscTopology. # Other (pluginized from SofaGeneral); SofaDenseSolver; SofaExporter; SofaHaptics; SofaOpenglVisual; SofaPreconditioner; SofaSparseSolver; SofaValidation; ). set(HEADER_FILES; config.h.in; components.h.in; initSofaComponentAll.h; ); set(SOURCE_FILES; initSofaComponentAll.cpp; ); set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}). set(SOFACOMPONENTALL_MODULES_INCLUDES """"); set(SOFACOMPONENTALL_MODULES_INITS """"); set(SOFACOMPONENTALL_MODULES_HAVES """"); foreach(module ${SOFACOMPONENTALL_MODULES}); string(TOUPPER ""${module}"" module_upper). sofa_find_package(${module} QUIET). if(${module}_FOUND); target_link_libraries(${PROJECT_NAME} ${module}); set(SOFACOMPONENTALL_MODULES_INCLUDES ""${SOFACOMPONENTALL_MODULES_INCLUDES}\n#include <${module}/init${module}.h>""); set(SOFACOMPONENTALL_MODULES_INITS ""${SOFACOMPONENTALL_MODULES_INITS} \\\n init${module}();""); else(); message(""${PROJECT_NAME}: ${module} will not be in the collection.""); endif(); set(SOFACOMPONENTALL_MODULES_HAVES ""${SOFACOMPONENTALL_MODULES_HAVES}\nset(SOFACOMPONENTALL_HAVE_${module_upper} ${SOFACOMPONENTALL_HAVE_${module_upper}})""); endforeach(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ""SofaComponentAll""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaComponentAll/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt:1049,Modifiability,plugin,pluginized,1049," SofaBaseCollision; SofaBaseLinearSolver; SofaBaseMechanics; SofaBaseTopology; SofaBaseUtils; SofaBaseVisual. # SofaSimulation; SofaSimulationCommon; SofaSimulationGraph. # SofaCommon; SofaDeformable; SofaEngine; SofaExplicitOdeSolver; SofaImplicitOdeSolver; SofaLoader; SofaMeshCollision; SofaObjectInteraction; SofaRigid; SofaSimpleFem. # SofaGeneral; SofaBoundaryCondition; SofaConstraint; SofaGeneralAnimationLoop; SofaGeneralDeformable; SofaGeneralEngine; SofaGeneralExplicitOdeSolver; SofaGeneralImplicitOdeSolver; SofaGeneralLinearSolver; SofaGeneralLoader; SofaGeneralMeshCollision; SofaGeneralObjectInteraction; SofaGeneralRigid; SofaGeneralTopology; SofaGeneralVisual; SofaGraphComponent; SofaTopologyMapping; SofaUserInteraction. # SofaAdvanced; SofaNonUniformFem. # SofaMisc; SofaMiscCollision; SofaMiscEngine; SofaMiscExtra; SofaMiscFem; SofaMiscForceField; SofaMiscMapping; SofaMiscSolver; SofaMiscTopology. # Other (pluginized from SofaGeneral); SofaDenseSolver; SofaExporter; SofaHaptics; SofaOpenglVisual; SofaPreconditioner; SofaSparseSolver; SofaValidation; ). set(HEADER_FILES; config.h.in; components.h.in; initSofaComponentAll.h; ); set(SOURCE_FILES; initSofaComponentAll.cpp; ); set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}). set(SOFACOMPONENTALL_MODULES_INCLUDES """"); set(SOFACOMPONENTALL_MODULES_INITS """"); set(SOFACOMPONENTALL_MODULES_HAVES """"); foreach(module ${SOFACOMPONENTALL_MODULES}); string(TOUPPER ""${module}"" module_upper). sofa_find_package(${module} QUIET). if(${module}_FOUND); target_link_libraries(${PROJECT_NAME} ${module}); set(SOFACOMPONENTALL_MODULES_INCLUDES ""${SOFACOMPONENTALL_MODULES_INCLUDES}\n#include <${module}/init${module}.h>""); set(SOFACOMPONENTALL_MODULES_INITS ""${SOFACOMPONENTALL_MODULES_INITS} \\\n init${module}();""); else(); message(""${PROJECT_NAME}: ${module} will not be in the collection.""); endif(); set(SOFACOMPONENTALL_MODULES_HAVES ""${SOFACOMPONENTALL_MODULES_HAVE",MatchSource.DOCS,applications/collections/deprecated/SofaComponentAll/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt:1216,Modifiability,config,config,1216,"; SofaBaseVisual. # SofaSimulation; SofaSimulationCommon; SofaSimulationGraph. # SofaCommon; SofaDeformable; SofaEngine; SofaExplicitOdeSolver; SofaImplicitOdeSolver; SofaLoader; SofaMeshCollision; SofaObjectInteraction; SofaRigid; SofaSimpleFem. # SofaGeneral; SofaBoundaryCondition; SofaConstraint; SofaGeneralAnimationLoop; SofaGeneralDeformable; SofaGeneralEngine; SofaGeneralExplicitOdeSolver; SofaGeneralImplicitOdeSolver; SofaGeneralLinearSolver; SofaGeneralLoader; SofaGeneralMeshCollision; SofaGeneralObjectInteraction; SofaGeneralRigid; SofaGeneralTopology; SofaGeneralVisual; SofaGraphComponent; SofaTopologyMapping; SofaUserInteraction. # SofaAdvanced; SofaNonUniformFem. # SofaMisc; SofaMiscCollision; SofaMiscEngine; SofaMiscExtra; SofaMiscFem; SofaMiscForceField; SofaMiscMapping; SofaMiscSolver; SofaMiscTopology. # Other (pluginized from SofaGeneral); SofaDenseSolver; SofaExporter; SofaHaptics; SofaOpenglVisual; SofaPreconditioner; SofaSparseSolver; SofaValidation; ). set(HEADER_FILES; config.h.in; components.h.in; initSofaComponentAll.h; ); set(SOURCE_FILES; initSofaComponentAll.cpp; ); set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}). set(SOFACOMPONENTALL_MODULES_INCLUDES """"); set(SOFACOMPONENTALL_MODULES_INITS """"); set(SOFACOMPONENTALL_MODULES_HAVES """"); foreach(module ${SOFACOMPONENTALL_MODULES}); string(TOUPPER ""${module}"" module_upper). sofa_find_package(${module} QUIET). if(${module}_FOUND); target_link_libraries(${PROJECT_NAME} ${module}); set(SOFACOMPONENTALL_MODULES_INCLUDES ""${SOFACOMPONENTALL_MODULES_INCLUDES}\n#include <${module}/init${module}.h>""); set(SOFACOMPONENTALL_MODULES_INITS ""${SOFACOMPONENTALL_MODULES_INITS} \\\n init${module}();""); else(); message(""${PROJECT_NAME}: ${module} will not be in the collection.""); endif(); set(SOFACOMPONENTALL_MODULES_HAVES ""${SOFACOMPONENTALL_MODULES_HAVES}\nset(SOFACOMPONENTALL_HAVE_${module_upper} ${SOFACOMPONENTALL_HAVE_${module_upper}})""); e",MatchSource.DOCS,applications/collections/deprecated/SofaComponentAll/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt:2283,Modifiability,config,configurations,2283,"ionLoop; SofaGeneralDeformable; SofaGeneralEngine; SofaGeneralExplicitOdeSolver; SofaGeneralImplicitOdeSolver; SofaGeneralLinearSolver; SofaGeneralLoader; SofaGeneralMeshCollision; SofaGeneralObjectInteraction; SofaGeneralRigid; SofaGeneralTopology; SofaGeneralVisual; SofaGraphComponent; SofaTopologyMapping; SofaUserInteraction. # SofaAdvanced; SofaNonUniformFem. # SofaMisc; SofaMiscCollision; SofaMiscEngine; SofaMiscExtra; SofaMiscFem; SofaMiscForceField; SofaMiscMapping; SofaMiscSolver; SofaMiscTopology. # Other (pluginized from SofaGeneral); SofaDenseSolver; SofaExporter; SofaHaptics; SofaOpenglVisual; SofaPreconditioner; SofaSparseSolver; SofaValidation; ). set(HEADER_FILES; config.h.in; components.h.in; initSofaComponentAll.h; ); set(SOURCE_FILES; initSofaComponentAll.cpp; ); set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}). set(SOFACOMPONENTALL_MODULES_INCLUDES """"); set(SOFACOMPONENTALL_MODULES_INITS """"); set(SOFACOMPONENTALL_MODULES_HAVES """"); foreach(module ${SOFACOMPONENTALL_MODULES}); string(TOUPPER ""${module}"" module_upper). sofa_find_package(${module} QUIET). if(${module}_FOUND); target_link_libraries(${PROJECT_NAME} ${module}); set(SOFACOMPONENTALL_MODULES_INCLUDES ""${SOFACOMPONENTALL_MODULES_INCLUDES}\n#include <${module}/init${module}.h>""); set(SOFACOMPONENTALL_MODULES_INITS ""${SOFACOMPONENTALL_MODULES_INITS} \\\n init${module}();""); else(); message(""${PROJECT_NAME}: ${module} will not be in the collection.""); endif(); set(SOFACOMPONENTALL_MODULES_HAVES ""${SOFACOMPONENTALL_MODULES_HAVES}\nset(SOFACOMPONENTALL_HAVE_${module_upper} ${SOFACOMPONENTALL_HAVE_${module_upper}})""); endforeach(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ""SofaComponentAll""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaComponentAll/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaComponentAll/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaFramework/CMakeLists.txt:1415,Availability,avail,available,1415,"cmake_minimum_required(VERSION 3.22); project(SofaFramework). # Version; set(SOFAFRAMEWORK_VERSION ""${Sofa_VERSION}""). # Modules; set(SOFAFRAMEWORK_MODULES; Sofa.Type; Sofa.Topology; Sofa.Geometry ; Sofa.Helper; Sofa.LinearAlgebra; Sofa.DefaultType; Sofa.Core; Sofa.Simulation.Core; ). set(SOFAFRAMEWORK_LEGACYMODULES; SofaHelper ; SofaDefaultType; SofaCore ; Sofa.SimulationCore; ). # add subprojects into a IDE folder called SofaFramework; foreach(module ${SOFAFRAMEWORK_MODULES}); sofa_find_package(${module}); endforeach(). foreach(module ${SOFAFRAMEWORK_LEGACYMODULES}); add_subdirectory(../modules/${module} ${CMAKE_CURRENT_BINARY_DIR}/${module}); endforeach(). set(SOFAFRAMEWORK_SRC src/SofaFramework); set(HEADER_FILES; ${SOFAFRAMEWORK_SRC}/config.h.in; ${SOFAFRAMEWORK_SRC}/initSofaFramework.h; ); set(SOURCE_FILES; ${SOFAFRAMEWORK_SRC}/initSofaFramework.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAFRAMEWORK_MODULES} ${SOFAFRAMEWORK_LEGACYMODULES}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER SofaFramework). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; # RELOCATABLE ""collections"" # disabled because we need SofaFramework to be directly available; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaFramework/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaFramework/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaFramework/CMakeLists.txt:749,Modifiability,config,config,749,"cmake_minimum_required(VERSION 3.22); project(SofaFramework). # Version; set(SOFAFRAMEWORK_VERSION ""${Sofa_VERSION}""). # Modules; set(SOFAFRAMEWORK_MODULES; Sofa.Type; Sofa.Topology; Sofa.Geometry ; Sofa.Helper; Sofa.LinearAlgebra; Sofa.DefaultType; Sofa.Core; Sofa.Simulation.Core; ). set(SOFAFRAMEWORK_LEGACYMODULES; SofaHelper ; SofaDefaultType; SofaCore ; Sofa.SimulationCore; ). # add subprojects into a IDE folder called SofaFramework; foreach(module ${SOFAFRAMEWORK_MODULES}); sofa_find_package(${module}); endforeach(). foreach(module ${SOFAFRAMEWORK_LEGACYMODULES}); add_subdirectory(../modules/${module} ${CMAKE_CURRENT_BINARY_DIR}/${module}); endforeach(). set(SOFAFRAMEWORK_SRC src/SofaFramework); set(HEADER_FILES; ${SOFAFRAMEWORK_SRC}/config.h.in; ${SOFAFRAMEWORK_SRC}/initSofaFramework.h; ); set(SOURCE_FILES; ${SOFAFRAMEWORK_SRC}/initSofaFramework.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAFRAMEWORK_MODULES} ${SOFAFRAMEWORK_LEGACYMODULES}). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER SofaFramework). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; # RELOCATABLE ""collections"" # disabled because we need SofaFramework to be directly available; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaFramework/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaFramework/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGeneral/CMakeLists.txt:1642,Availability,avail,available,1642,"cmake_minimum_required(VERSION 3.22); project(SofaGeneral). # Send warnings when deprecated CMake project is activated; option(CMAKE_WARN_DEPRECATED ""Send warning when deprecated projects are found"" ON). # Modules; set(SOFAGENERAL_MODULES; SofaBoundaryCondition; SofaGeneralMeshCollision; SofaGeneralVisual; SofaGraphComponent; SofaGeneralAnimationLoop; SofaGeneralDeformable; SofaGeneralEngine; SofaGeneralExplicitOdeSolver; SofaGeneralImplicitOdeSolver; SofaGeneralLinearSolver; SofaGeneralRigid; SofaGeneralTopology; SofaTopologyMapping; SofaUserInteraction; SofaConstraint; SofaGeneralLoader; ). foreach(module ${SOFAGENERAL_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFAGENERAL_SRC src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAGENERAL_SRC}/config.h.in; ${SOFAGENERAL_SRC}/initSofaGeneral.h; ). set(SOURCE_FILES; ${SOFAGENERAL_SRC}/initSofaGeneral.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGENERAL_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; # RELOCATABLE ""collections"" # disabled because we need SofaGeneral to be directly available; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaGeneral/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGeneral/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGeneral/CMakeLists.txt:856,Integrability,message,message,856,"cmake_minimum_required(VERSION 3.22); project(SofaGeneral). # Send warnings when deprecated CMake project is activated; option(CMAKE_WARN_DEPRECATED ""Send warning when deprecated projects are found"" ON). # Modules; set(SOFAGENERAL_MODULES; SofaBoundaryCondition; SofaGeneralMeshCollision; SofaGeneralVisual; SofaGraphComponent; SofaGeneralAnimationLoop; SofaGeneralDeformable; SofaGeneralEngine; SofaGeneralExplicitOdeSolver; SofaGeneralImplicitOdeSolver; SofaGeneralLinearSolver; SofaGeneralRigid; SofaGeneralTopology; SofaTopologyMapping; SofaUserInteraction; SofaConstraint; SofaGeneralLoader; ). foreach(module ${SOFAGENERAL_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFAGENERAL_SRC src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAGENERAL_SRC}/config.h.in; ${SOFAGENERAL_SRC}/initSofaGeneral.h; ). set(SOURCE_FILES; ${SOFAGENERAL_SRC}/initSofaGeneral.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGENERAL_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; # RELOCATABLE ""collections"" # disabled because we need SofaGeneral to be directly available; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaGeneral/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGeneral/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGeneral/CMakeLists.txt:1091,Modifiability,config,config,1091,"cmake_minimum_required(VERSION 3.22); project(SofaGeneral). # Send warnings when deprecated CMake project is activated; option(CMAKE_WARN_DEPRECATED ""Send warning when deprecated projects are found"" ON). # Modules; set(SOFAGENERAL_MODULES; SofaBoundaryCondition; SofaGeneralMeshCollision; SofaGeneralVisual; SofaGraphComponent; SofaGeneralAnimationLoop; SofaGeneralDeformable; SofaGeneralEngine; SofaGeneralExplicitOdeSolver; SofaGeneralImplicitOdeSolver; SofaGeneralLinearSolver; SofaGeneralRigid; SofaGeneralTopology; SofaTopologyMapping; SofaUserInteraction; SofaConstraint; SofaGeneralLoader; ). foreach(module ${SOFAGENERAL_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFAGENERAL_SRC src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAGENERAL_SRC}/config.h.in; ${SOFAGENERAL_SRC}/initSofaGeneral.h; ). set(SOURCE_FILES; ${SOFAGENERAL_SRC}/initSofaGeneral.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGENERAL_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; # RELOCATABLE ""collections"" # disabled because we need SofaGeneral to be directly available; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaGeneral/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGeneral/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGui/CMakeLists.txt:2323,Deployability,install,installed,2323,"{SOFAGUI_SRC}/config.h.in; ${SOFAGUI_SRC}/initSofaGui.h; ); set(SOURCE_FILES; ${SOFAGUI_SRC}/initSofaGui.cpp; ). set(SOFAGUI_TARGETS Sofa.GUI.Component Sofa.GUI.Common Sofa.GUI.Batch); if(Sofa.GUI.Qt_FOUND); list(APPEND SOFAGUI_TARGETS Sofa.GUI.Qt); endif(); sofa_set_01(SOFAGUI_HAVE_SOFAGUIQT VALUE ${SOFAGUI_HAVE_SOFA_GUI_QT}). if(Sofa.GUI.HeadlessRecorder_FOUND); list(APPEND SOFAGUI_TARGETS Sofa.GUI.HeadlessRecorder); endif(); sofa_set_01(SOFAGUI_HAVE_SOFAHEADLESSRECORDER VALUE ${SOFAGUI_HAVE_SOFA_GUI_HEADLESSRECORDER}). # Keep legacy modules for compatibility; # they merely redirect to the new modules; # legacy (deprecated) module; sofa_add_subdirectory(collection ../modules/SofaGuiCommon SofaGuiCommon ON; BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/SofaGuiCommon""); if(TARGET SofaGuiCommon); list(APPEND SOFAGUI_TARGETS SofaGuiCommon); endif(); if(Sofa.GUI.Qt_FOUND); sofa_add_subdirectory(collection ../modules/SofaGuiQt SofaGuiQt ON; BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/SofaGuiQt""); if(TARGET SofaGuiQt); list(APPEND SOFAGUI_TARGETS SofaGuiQt); endif(); endif(); if(Sofa.GUI.HeadlessRecorder_FOUND); sofa_add_subdirectory(collection ../modules/SofaHeadlessRecorder SofaHeadlessRecorder ON; BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/SofaHeadlessRecorder""); if(TARGET SofaHeadlessRecorder); list(APPEND SOFAGUI_TARGETS SofaHeadlessRecorder); endif(); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGUI_TARGETS}). foreach(ui_target ${SOFAGUI_TARGETS}); set_target_properties(${ui_target} PROPERTIES FOLDER GUI); endforeach(); set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER GUI). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; # RELOCATABLE ""collections"" # disabled because we need SofaGui installed at root for backward compat; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaGui/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGui/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGui/CMakeLists.txt:379,Modifiability,config,config,379,"cmake_minimum_required(VERSION 3.22); project(SofaGui). set(SOFAGUI_TARGETS """"). sofa_find_package(Sofa.GUI.Component REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(Sofa.GUI.Batch REQUIRED); sofa_find_package(Sofa.GUI.Qt QUIET); sofa_find_package(Sofa.GUI.HeadlessRecorder QUIET). set(SOFAGUI_SRC src/${PROJECT_NAME}); set(HEADER_FILES; ${SOFAGUI_SRC}/config.h.in; ${SOFAGUI_SRC}/initSofaGui.h; ); set(SOURCE_FILES; ${SOFAGUI_SRC}/initSofaGui.cpp; ). set(SOFAGUI_TARGETS Sofa.GUI.Component Sofa.GUI.Common Sofa.GUI.Batch); if(Sofa.GUI.Qt_FOUND); list(APPEND SOFAGUI_TARGETS Sofa.GUI.Qt); endif(); sofa_set_01(SOFAGUI_HAVE_SOFAGUIQT VALUE ${SOFAGUI_HAVE_SOFA_GUI_QT}). if(Sofa.GUI.HeadlessRecorder_FOUND); list(APPEND SOFAGUI_TARGETS Sofa.GUI.HeadlessRecorder); endif(); sofa_set_01(SOFAGUI_HAVE_SOFAHEADLESSRECORDER VALUE ${SOFAGUI_HAVE_SOFA_GUI_HEADLESSRECORDER}). # Keep legacy modules for compatibility; # they merely redirect to the new modules; # legacy (deprecated) module; sofa_add_subdirectory(collection ../modules/SofaGuiCommon SofaGuiCommon ON; BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/SofaGuiCommon""); if(TARGET SofaGuiCommon); list(APPEND SOFAGUI_TARGETS SofaGuiCommon); endif(); if(Sofa.GUI.Qt_FOUND); sofa_add_subdirectory(collection ../modules/SofaGuiQt SofaGuiQt ON; BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/SofaGuiQt""); if(TARGET SofaGuiQt); list(APPEND SOFAGUI_TARGETS SofaGuiQt); endif(); endif(); if(Sofa.GUI.HeadlessRecorder_FOUND); sofa_add_subdirectory(collection ../modules/SofaHeadlessRecorder SofaHeadlessRecorder ON; BINARY_DIR ""${CMAKE_CURRENT_BINARY_DIR}/SofaHeadlessRecorder""); if(TARGET SofaHeadlessRecorder); list(APPEND SOFAGUI_TARGETS SofaHeadlessRecorder); endif(); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGUI_TARGETS}). foreach(ui_target ${SOFAGUI_TARGETS}); set_target_properties(${ui_target} PROPERTIES FOLDER GUI); endforeach(); set_target_propert",MatchSource.DOCS,applications/collections/deprecated/SofaGui/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaGui/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaMisc/CMakeLists.txt:529,Integrability,message,message,529,"cmake_minimum_required(VERSION 3.22); project(SofaMisc). ## Version; set(SOFAMISC_VERSION ${SofaFramework_VERSION}). ## Subdirectories; set(SOFAMISC_MODULES; SofaMiscExtra; SofaMiscEngine; SofaMiscFem; SofaMiscForceField; SofaMiscMapping; SofaMiscSolver; SofaMiscTopology; ). foreach(module ${SOFAMISC_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFAMISC_SRC src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAMISC_SRC}/config.h.in ; ${SOFAMISC_SRC}/initSofaMisc.h; ). set(SOURCE_FILES; ${SOFAMISC_SRC}/initSofaMisc.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAMISC_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaMisc/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaMisc/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaMisc/CMakeLists.txt:758,Modifiability,config,config,758,"cmake_minimum_required(VERSION 3.22); project(SofaMisc). ## Version; set(SOFAMISC_VERSION ${SofaFramework_VERSION}). ## Subdirectories; set(SOFAMISC_MODULES; SofaMiscExtra; SofaMiscEngine; SofaMiscFem; SofaMiscForceField; SofaMiscMapping; SofaMiscSolver; SofaMiscTopology; ). foreach(module ${SOFAMISC_MODULES}); sofa_find_package(${module} QUIET); if(NOT ${module}_FOUND); string(TOUPPER module_${module} MODULE_TO_CHECK); list(APPEND LIST_MODULES_TO_CHECK ${MODULE_TO_CHECK}); endif(); endforeach(); if(LIST_MODULES_TO_CHECK); message(FATAL_ERROR; "" If you still want to use ${PROJECT_NAME}, please enable the following CMake option(s): \n""; "" ${LIST_MODULES_TO_CHECK}""; ); endif(). set(SOFAMISC_SRC src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAMISC_SRC}/config.h.in ; ${SOFAMISC_SRC}/initSofaMisc.h; ). set(SOURCE_FILES; ${SOFAMISC_SRC}/initSofaMisc.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAMISC_MODULES}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/SofaMisc/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/SofaMisc/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/Sofa.SimulationCore/CMakeLists.txt:154,Integrability,message,message,154,"cmake_minimum_required(VERSION 3.22); project(Sofa.SimulationCore). set(SOURCE_FILES; empty.cpp; ). add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Simulation.Core instead.""). sofa_find_package(Sofa.Simulation.Core REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER SofaFramework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/Sofa.SimulationCore/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/Sofa.SimulationCore/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseCollision/CMakeLists.txt:503,Integrability,message,message,503,"cmake_minimum_required(VERSION 3.22); project(SofaBaseCollision LANGUAGES CXX). set(SOFABASECOLLISION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASECOLLISION_SRC}/config.h.in; ${SOFABASECOLLISION_SRC}/initSofaBaseCollision.h; ). set(SOURCE_FILES; ${SOFABASECOLLISION_SRC}/initSofaBaseCollision.cpp; ). sofa_find_package(SofaFramework REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core Sofa.Simulation.Core). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Model, Sofa.Component.Collision.Detection.Algorithm, Sofa.Component.Collision.Detection.Intersection, Sofa.Component.Collision.Response.Mapper and Sofa.Component.Collision.Response.Contact instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Mapper); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseCollision/CMakeLists.txt:173,Modifiability,config,config,173,"cmake_minimum_required(VERSION 3.22); project(SofaBaseCollision LANGUAGES CXX). set(SOFABASECOLLISION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASECOLLISION_SRC}/config.h.in; ${SOFABASECOLLISION_SRC}/initSofaBaseCollision.h; ). set(SOURCE_FILES; ${SOFABASECOLLISION_SRC}/initSofaBaseCollision.cpp; ). sofa_find_package(SofaFramework REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core Sofa.Simulation.Core). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Model, Sofa.Component.Collision.Detection.Algorithm, Sofa.Component.Collision.Detection.Intersection, Sofa.Component.Collision.Response.Mapper and Sofa.Component.Collision.Response.Contact instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Mapper REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Mapper); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseLinearSolver/CMakeLists.txt:403,Integrability,message,message,403,"cmake_minimum_required(VERSION 3.22); project(SofaBaseLinearSolver LANGUAGES CXX). set(SOFABASELINEARSOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASELINEARSOLVER_SRC}/config.h.in; ${SOFABASELINEARSOLVER_SRC}/initSofaBaseLinearSolver.h; ). set(SOURCE_FILES; ${SOFABASELINEARSOLVER_SRC}/initSofaBaseLinearSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Iterative instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Iterative). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseLinearSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseLinearSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseLinearSolver/CMakeLists.txt:182,Modifiability,config,config,182,"cmake_minimum_required(VERSION 3.22); project(SofaBaseLinearSolver LANGUAGES CXX). set(SOFABASELINEARSOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASELINEARSOLVER_SRC}/config.h.in; ${SOFABASELINEARSOLVER_SRC}/initSofaBaseLinearSolver.h; ). set(SOURCE_FILES; ${SOFABASELINEARSOLVER_SRC}/initSofaBaseLinearSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Iterative instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Iterative). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseLinearSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseLinearSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseMechanics/CMakeLists.txt:382,Integrability,message,message,382,"cmake_minimum_required(VERSION 3.22); project(SofaBaseMechanics LANGUAGES CXX). set(SOFABASEMECHANICS_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASEMECHANICS_SRC}/config.h.in; ${SOFABASEMECHANICS_SRC}/initSofaBaseMechanics.h; ). set(SOURCE_FILES; ${SOFABASEMECHANICS_SRC}/initSofaBaseMechanics.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mass, Sofa.Component.Mapping.Linear and Sofa.Component.StateContainer instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mass); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.StateContainer). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseMechanics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseMechanics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseMechanics/CMakeLists.txt:173,Modifiability,config,config,173,"cmake_minimum_required(VERSION 3.22); project(SofaBaseMechanics LANGUAGES CXX). set(SOFABASEMECHANICS_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASEMECHANICS_SRC}/config.h.in; ${SOFABASEMECHANICS_SRC}/initSofaBaseMechanics.h; ). set(SOURCE_FILES; ${SOFABASEMECHANICS_SRC}/initSofaBaseMechanics.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mass, Sofa.Component.Mapping.Linear and Sofa.Component.StateContainer instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mass); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.StateContainer). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseMechanics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseMechanics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseTopology/CMakeLists.txt:375,Integrability,message,message,375,"cmake_minimum_required(VERSION 3.22); project(SofaBaseTopology LANGUAGES CXX). set(SOFABASETOPOLOGY_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASETOPOLOGY_SRC}/config.h.in; ${SOFABASETOPOLOGY_SRC}/initSofaBaseTopology.h; ). set(SOURCE_FILES; ${SOFABASETOPOLOGY_SRC}/initSofaBaseTopology.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Container.Grid, Sofa.Component.Topology.Container.Constant and Sofa.Component.Topology.Container.Dynamic instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Container.Constant REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Constant Sofa.Component.Topology.Container.Grid Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseTopology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseTopology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseTopology/CMakeLists.txt:170,Modifiability,config,config,170,"cmake_minimum_required(VERSION 3.22); project(SofaBaseTopology LANGUAGES CXX). set(SOFABASETOPOLOGY_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASETOPOLOGY_SRC}/config.h.in; ${SOFABASETOPOLOGY_SRC}/initSofaBaseTopology.h; ). set(SOURCE_FILES; ${SOFABASETOPOLOGY_SRC}/initSofaBaseTopology.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Container.Grid, Sofa.Component.Topology.Container.Constant and Sofa.Component.Topology.Container.Dynamic instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Container.Constant REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Constant Sofa.Component.Topology.Container.Grid Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseTopology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseTopology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseUtils/CMakeLists.txt:354,Integrability,message,message,354,"cmake_minimum_required(VERSION 3.22); project(SofaBaseUtils LANGUAGES CXX). set(SOFABASEUTILS_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASEUTILS_SRC}/config.h.in; ${SOFABASEUTILS_SRC}/initSofaBaseUtils.h; ). set(SOURCE_FILES; ${SOFABASEUTILS_SRC}/initSofaBaseUtils.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SceneUtility instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SceneUtility REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SceneUtility). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseUtils/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseUtils/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseUtils/CMakeLists.txt:161,Modifiability,config,config,161,"cmake_minimum_required(VERSION 3.22); project(SofaBaseUtils LANGUAGES CXX). set(SOFABASEUTILS_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASEUTILS_SRC}/config.h.in; ${SOFABASEUTILS_SRC}/initSofaBaseUtils.h; ). set(SOURCE_FILES; ${SOFABASEUTILS_SRC}/initSofaBaseUtils.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SceneUtility instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SceneUtility REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SceneUtility). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseUtils/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseUtils/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseVisual/CMakeLists.txt:479,Integrability,message,message,479,"cmake_minimum_required(VERSION 3.22); project(SofaBaseVisual LANGUAGES CXX). set(SOFABASEVISUAL_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASEVISUAL_SRC}/config.h.in; ${SOFABASEVISUAL_SRC}/initSofaBaseVisual.h; ). set(SOURCE_FILES; ${SOFABASEVISUAL_SRC}/initSofaBaseVisual.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Visual and Sofa.Component.Setting instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseVisual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseVisual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseVisual/CMakeLists.txt:164,Modifiability,config,config,164,"cmake_minimum_required(VERSION 3.22); project(SofaBaseVisual LANGUAGES CXX). set(SOFABASEVISUAL_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABASEVISUAL_SRC}/config.h.in; ${SOFABASEVISUAL_SRC}/initSofaBaseVisual.h; ). set(SOURCE_FILES; ${SOFABASEVISUAL_SRC}/initSofaBaseVisual.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Visual and Sofa.Component.Setting instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBaseVisual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBaseVisual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBoundaryCondition/CMakeLists.txt:410,Integrability,message,message,410,"cmake_minimum_required(VERSION 3.22); project(SofaBoundaryCondition LANGUAGES CXX). set(SOFABOUNDARYCONDITION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABOUNDARYCONDITION_SRC}/config.h.in; ${SOFABOUNDARYCONDITION_SRC}/initSofaBoundaryCondition.h; ). set(SOURCE_FILES; ${SOFABOUNDARYCONDITION_SRC}/initSofaBoundaryCondition.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Constraint.Projective and Sofa.Component.MechanicalLoad instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.MechanicalLoad REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Projective); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.MechanicalLoad). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBoundaryCondition/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBoundaryCondition/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBoundaryCondition/CMakeLists.txt:185,Modifiability,config,config,185,"cmake_minimum_required(VERSION 3.22); project(SofaBoundaryCondition LANGUAGES CXX). set(SOFABOUNDARYCONDITION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFABOUNDARYCONDITION_SRC}/config.h.in; ${SOFABOUNDARYCONDITION_SRC}/initSofaBoundaryCondition.h; ). set(SOURCE_FILES; ${SOFABOUNDARYCONDITION_SRC}/initSofaBoundaryCondition.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Constraint.Projective and Sofa.Component.MechanicalLoad instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.MechanicalLoad REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Projective); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.MechanicalLoad). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaBoundaryCondition/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaBoundaryCondition/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaConstraint/CMakeLists.txt:619,Integrability,message,message,619,"cmake_minimum_required(VERSION 3.22); project(SofaConstraint). set(SOFACONSTRAINT_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFACONSTRAINT_SRC}/config.h.in; ${SOFACONSTRAINT_SRC}/initSofaConstraint.h; ). set(SOURCE_FILES; ${SOFACONSTRAINT_SRC}/initSofaConstraint.cpp; ). sofa_find_package(SofaBase REQUIRED) # SofaBaseLinearSolver; sofa_find_package(SofaImplicitOdeSolver REQUIRED) ; sofa_find_package(SofaUserInteraction REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaImplicitOdeSolver SofaUserInteraction SofaBaseLinearSolver). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping.MappedMatrix, Sofa.Component.Constraint.Lagrangian.Model, Sofa.Component.Constraint.Lagrangian.Correction, Sofa.Component.Constraint.Lagrangian.Solver, Sofa.Component.AnimationLoop, Sofa.Component.Collision.Detection.Intersection, Sofa.Component.Collision.Response.Contact and Sofa.GUI.Component instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping.MappedMatrix REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Correction REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Solver REQUIRED); sofa_find_package(Sofa.Component.AnimationLoop REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.MappedMatrix); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Model); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Correction); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Solver); target_link_libraries(${PR",MatchSource.DOCS,applications/collections/deprecated/modules/SofaConstraint/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaConstraint/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaConstraint/CMakeLists.txt:150,Modifiability,config,config,150,"cmake_minimum_required(VERSION 3.22); project(SofaConstraint). set(SOFACONSTRAINT_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFACONSTRAINT_SRC}/config.h.in; ${SOFACONSTRAINT_SRC}/initSofaConstraint.h; ). set(SOURCE_FILES; ${SOFACONSTRAINT_SRC}/initSofaConstraint.cpp; ). sofa_find_package(SofaBase REQUIRED) # SofaBaseLinearSolver; sofa_find_package(SofaImplicitOdeSolver REQUIRED) ; sofa_find_package(SofaUserInteraction REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaImplicitOdeSolver SofaUserInteraction SofaBaseLinearSolver). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping.MappedMatrix, Sofa.Component.Constraint.Lagrangian.Model, Sofa.Component.Constraint.Lagrangian.Correction, Sofa.Component.Constraint.Lagrangian.Solver, Sofa.Component.AnimationLoop, Sofa.Component.Collision.Detection.Intersection, Sofa.Component.Collision.Response.Contact and Sofa.GUI.Component instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping.MappedMatrix REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Model REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Correction REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Solver REQUIRED); sofa_find_package(Sofa.Component.AnimationLoop REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.MappedMatrix); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Model); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Correction); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Solver); target_link_libraries(${PR",MatchSource.DOCS,applications/collections/deprecated/modules/SofaConstraint/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaConstraint/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaCore/CMakeLists.txt:143,Integrability,message,message,143,"cmake_minimum_required(VERSION 3.22); project(SofaCore). set(SOURCE_FILES; empty.cpp; ). add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Core instead.""). sofa_find_package(Sofa.Core REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER SofaFramework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaCore/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaCore/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDefaultType/CMakeLists.txt:150,Integrability,message,message,150,"cmake_minimum_required(VERSION 3.22); project(SofaDefaultType). set(SOURCE_FILES; empty.cpp; ). add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES}); #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.DefaultType instead.""). sofa_find_package(Sofa.DefaultType REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.DefaultType). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER SofaFramework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaDefaultType/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDefaultType/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDeformable/CMakeLists.txt:361,Integrability,message,message,361,"cmake_minimum_required(VERSION 3.22); project(SofaDeformable LANGUAGES CXX). set(SOFADEFORMABLE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFADEFORMABLE_SRC}/config.h.in; ${SOFADEFORMABLE_SRC}/initSofaDeformable.h; ). set(SOURCE_FILES; ${SOFADEFORMABLE_SRC}/initSofaDeformable.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SolidMechanics.Spring instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaDeformable/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDeformable/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDeformable/CMakeLists.txt:164,Modifiability,config,config,164,"cmake_minimum_required(VERSION 3.22); project(SofaDeformable LANGUAGES CXX). set(SOFADEFORMABLE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFADEFORMABLE_SRC}/config.h.in; ${SOFADEFORMABLE_SRC}/initSofaDeformable.h; ). set(SOURCE_FILES; ${SOFADEFORMABLE_SRC}/initSofaDeformable.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SolidMechanics.Spring instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaDeformable/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDeformable/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDenseSolver/CMakeLists.txt:368,Integrability,message,message,368,"cmake_minimum_required(VERSION 3.22); project(SofaDenseSolver LANGUAGES CXX). set(SOFADENSESOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFADENSESOLVER_SRC}/config.h.in; ${SOFADENSESOLVER_SRC}/initSofaDenseSolver.h; ). set(SOURCE_FILES; ${SOFADENSESOLVER_SRC}/initSofaDenseSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Direct instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED) # SVDLinearSolver; target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaDenseSolver""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaDenseSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDenseSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDenseSolver/CMakeLists.txt:167,Modifiability,config,config,167,"cmake_minimum_required(VERSION 3.22); project(SofaDenseSolver LANGUAGES CXX). set(SOFADENSESOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFADENSESOLVER_SRC}/config.h.in; ${SOFADENSESOLVER_SRC}/initSofaDenseSolver.h; ). set(SOURCE_FILES; ${SOFADENSESOLVER_SRC}/initSofaDenseSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Direct instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED) # SVDLinearSolver; target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaDenseSolver""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaDenseSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaDenseSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaEigen2Solver/CMakeLists.txt:375,Integrability,message,message,375,"cmake_minimum_required(VERSION 3.22); project(SofaEigen2Solver LANGUAGES CXX). set(SOFAEIGEN2SOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAEIGEN2SOLVER_SRC}/config.h.in; ${SOFAEIGEN2SOLVER_SRC}/initSofaEigen2Solver.h; ). set(SOURCE_FILES; ${SOFAEIGEN2SOLVER_SRC}/initSofaEigen2Solver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.LinearAlgebra (Eigen classes) and Sofa.Component.LinearSolver.Direct (SVDLinearSolver) instead.""). # forward to the new sofang module; sofa_find_package(Sofa.LinearAlgebra REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.LinearAlgebra); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaEigen2Solver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaEigen2Solver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaEigen2Solver/CMakeLists.txt:170,Modifiability,config,config,170,"cmake_minimum_required(VERSION 3.22); project(SofaEigen2Solver LANGUAGES CXX). set(SOFAEIGEN2SOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAEIGEN2SOLVER_SRC}/config.h.in; ${SOFAEIGEN2SOLVER_SRC}/initSofaEigen2Solver.h; ). set(SOURCE_FILES; ${SOFAEIGEN2SOLVER_SRC}/initSofaEigen2Solver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.LinearAlgebra (Eigen classes) and Sofa.Component.LinearSolver.Direct (SVDLinearSolver) instead.""). # forward to the new sofang module; sofa_find_package(Sofa.LinearAlgebra REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.LinearAlgebra); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaEigen2Solver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaEigen2Solver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaEngine/CMakeLists.txt:333,Integrability,message,message,333,"cmake_minimum_required(VERSION 3.22); project(SofaEngine LANGUAGES CXX). set(SOFAENGINE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAENGINE_SRC}/config.h.in; ${SOFAENGINE_SRC}/initSofaEngine.h; ). set(SOURCE_FILES; ${SOFAENGINE_SRC}/initSofaEngine.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Select instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Select REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Select). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaEngine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaEngine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaEngine/CMakeLists.txt:152,Modifiability,config,config,152,"cmake_minimum_required(VERSION 3.22); project(SofaEngine LANGUAGES CXX). set(SOFAENGINE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAENGINE_SRC}/config.h.in; ${SOFAENGINE_SRC}/initSofaEngine.h; ). set(SOURCE_FILES; ${SOFAENGINE_SRC}/initSofaEngine.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Select instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Select REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Select). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaEngine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaEngine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExplicitOdeSolver/CMakeLists.txt:457,Integrability,message,message,457,"cmake_minimum_required(VERSION 3.22); project(SofaExplicitOdeSolver LANGUAGES CXX). set(SOFAEXPLICITEODESOLVER_SRC ""src/${PROJECT_NAME}""). sofa_find_package(SofaFramework REQUIRED). set(HEADER_FILES; ${SOFAEXPLICITEODESOLVER_SRC}/config.h.in; ${SOFAEXPLICITEODESOLVER_SRC}/initSofaExplicitOdeSolver.h; ). set(SOURCE_FILES; ${SOFAEXPLICITEODESOLVER_SRC}/initSofaExplicitOdeSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Forward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Forward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Forward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaExplicitOdeSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExplicitOdeSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExplicitOdeSolver/CMakeLists.txt:230,Modifiability,config,config,230,"cmake_minimum_required(VERSION 3.22); project(SofaExplicitOdeSolver LANGUAGES CXX). set(SOFAEXPLICITEODESOLVER_SRC ""src/${PROJECT_NAME}""). sofa_find_package(SofaFramework REQUIRED). set(HEADER_FILES; ${SOFAEXPLICITEODESOLVER_SRC}/config.h.in; ${SOFAEXPLICITEODESOLVER_SRC}/initSofaExplicitOdeSolver.h; ). set(SOURCE_FILES; ${SOFAEXPLICITEODESOLVER_SRC}/initSofaExplicitOdeSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Forward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Forward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Forward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaExplicitOdeSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExplicitOdeSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExporter/CMakeLists.txt:310,Integrability,message,message,310,"cmake_minimum_required(VERSION 3.22); project(SofaExporter LANGUAGES CXX). set(SRC_ROOT src/SofaExporter). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/initSofaExporter.h; ). set(SOURCE_FILES; ${SRC_ROOT}/initSofaExporter.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.IO.Mesh and Sofa.Component.Playback instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.Playback REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.IO.Mesh); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Playback). sofa_create_package_with_targets(; PACKAGE_NAME SofaExporter; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaExporter""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaExporter/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExporter/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExporter/CMakeLists.txt:137,Modifiability,config,config,137,"cmake_minimum_required(VERSION 3.22); project(SofaExporter LANGUAGES CXX). set(SRC_ROOT src/SofaExporter). set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/initSofaExporter.h; ). set(SOURCE_FILES; ${SRC_ROOT}/initSofaExporter.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.IO.Mesh and Sofa.Component.Playback instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.Playback REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.IO.Mesh); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Playback). sofa_create_package_with_targets(; PACKAGE_NAME SofaExporter; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaExporter""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaExporter/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaExporter/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralAnimationLoop/CMakeLists.txt:431,Integrability,message,message,431,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralAnimationLoop LANGUAGES CXX). set(SOFAGENERALANIMATIONLOOP_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALANIMATIONLOOP_SRC}/config.h.in; ${SOFAGENERALANIMATIONLOOP_SRC}/initSofaGeneralAnimationLoop.h; ). set(SOURCE_FILES; ${SOFAGENERALANIMATIONLOOP_SRC}/initSofaGeneralAnimationLoop.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping.MappedMatrix and Sofa.Component.AnimationLoop instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping.MappedMatrix REQUIRED); sofa_find_package(Sofa.Component.AnimationLoop REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.MappedMatrix); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.AnimationLoop). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralAnimationLoop/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralAnimationLoop/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralAnimationLoop/CMakeLists.txt:194,Modifiability,config,config,194,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralAnimationLoop LANGUAGES CXX). set(SOFAGENERALANIMATIONLOOP_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALANIMATIONLOOP_SRC}/config.h.in; ${SOFAGENERALANIMATIONLOOP_SRC}/initSofaGeneralAnimationLoop.h; ). set(SOURCE_FILES; ${SOFAGENERALANIMATIONLOOP_SRC}/initSofaGeneralAnimationLoop.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping.MappedMatrix and Sofa.Component.AnimationLoop instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping.MappedMatrix REQUIRED); sofa_find_package(Sofa.Component.AnimationLoop REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping.MappedMatrix); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.AnimationLoop). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralAnimationLoop/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralAnimationLoop/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralDeformable/CMakeLists.txt:410,Integrability,message,message,410,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralDeformable LANGUAGES CXX). set(SOFAGENERALDEFORMABLE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALDEFORMABLE_SRC}/config.h.in; ${SOFAGENERALDEFORMABLE_SRC}/initSofaGeneralDeformable.h; ). set(SOURCE_FILES; ${SOFAGENERALDEFORMABLE_SRC}/initSofaGeneralDeformable.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SolidMechanics.Spring and Sofa.Component.SolidMechanics.TensorMass instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.TensorMass REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.TensorMass). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralDeformable/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralDeformable/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralDeformable/CMakeLists.txt:185,Modifiability,config,config,185,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralDeformable LANGUAGES CXX). set(SOFAGENERALDEFORMABLE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALDEFORMABLE_SRC}/config.h.in; ${SOFAGENERALDEFORMABLE_SRC}/initSofaGeneralDeformable.h; ). set(SOURCE_FILES; ${SOFAGENERALDEFORMABLE_SRC}/initSofaGeneralDeformable.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SolidMechanics.Spring and Sofa.Component.SolidMechanics.TensorMass instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.TensorMass REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.TensorMass). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralDeformable/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralDeformable/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt:382,Integrability,message,message,382,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralEngine LANGUAGES CXX). set(SOFAGENERALENGINE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALENGINE_SRC}/config.h.in; ${SOFAGENERALENGINE_SRC}/initSofaGeneralEngine.h; ). set(SOURCE_FILES; ${SOFAGENERALENGINE_SRC}/initSofaGeneralEngine.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Analyze, Sofa.Component.Engine.Generate, Sofa.Component.Engine.Select and Sofa.Component.Engine.Transform instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Analyze REQUIRED); sofa_find_package(Sofa.Component.Engine.Generate REQUIRED); sofa_find_package(Sofa.Component.Engine.Select REQUIRED); sofa_find_package(Sofa.Component.Engine.Transform REQUIRED). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Analyze); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Generate); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Select); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Transform). sofa_find_package(Sofa.GL.Component.Engine QUIET); if(Sofa.GL.Component.Engine_FOUND); # message(WARNING ""Moreover, use Sofa.GL.Component.Engine if you need TextureInterpolation.""); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Engine) ; endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt:1284,Integrability,message,message,1284,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralEngine LANGUAGES CXX). set(SOFAGENERALENGINE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALENGINE_SRC}/config.h.in; ${SOFAGENERALENGINE_SRC}/initSofaGeneralEngine.h; ). set(SOURCE_FILES; ${SOFAGENERALENGINE_SRC}/initSofaGeneralEngine.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Analyze, Sofa.Component.Engine.Generate, Sofa.Component.Engine.Select and Sofa.Component.Engine.Transform instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Analyze REQUIRED); sofa_find_package(Sofa.Component.Engine.Generate REQUIRED); sofa_find_package(Sofa.Component.Engine.Select REQUIRED); sofa_find_package(Sofa.Component.Engine.Transform REQUIRED). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Analyze); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Generate); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Select); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Transform). sofa_find_package(Sofa.GL.Component.Engine QUIET); if(Sofa.GL.Component.Engine_FOUND); # message(WARNING ""Moreover, use Sofa.GL.Component.Engine if you need TextureInterpolation.""); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Engine) ; endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt:173,Modifiability,config,config,173,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralEngine LANGUAGES CXX). set(SOFAGENERALENGINE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALENGINE_SRC}/config.h.in; ${SOFAGENERALENGINE_SRC}/initSofaGeneralEngine.h; ). set(SOURCE_FILES; ${SOFAGENERALENGINE_SRC}/initSofaGeneralEngine.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Analyze, Sofa.Component.Engine.Generate, Sofa.Component.Engine.Select and Sofa.Component.Engine.Transform instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Analyze REQUIRED); sofa_find_package(Sofa.Component.Engine.Generate REQUIRED); sofa_find_package(Sofa.Component.Engine.Select REQUIRED); sofa_find_package(Sofa.Component.Engine.Transform REQUIRED). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Analyze); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Generate); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Select); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Transform). sofa_find_package(Sofa.GL.Component.Engine QUIET); if(Sofa.GL.Component.Engine_FOUND); # message(WARNING ""Moreover, use Sofa.GL.Component.Engine if you need TextureInterpolation.""); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Engine) ; endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralEngine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralExplicitOdeSolver/CMakeLists.txt:459,Integrability,message,message,459,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralExplicitOdeSolver LANGUAGES CXX). set(SOFAGENERALEXPLICITODESOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALEXPLICITODESOLVER_SRC}/config.h.in; ${SOFAGENERALEXPLICITODESOLVER_SRC}/initSofaGeneralExplicitOdeSolver.h; ). set(SOURCE_FILES; ${SOFAGENERALEXPLICITODESOLVER_SRC}/initSofaGeneralExplicitOdeSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Forward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Forward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Forward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralExplicitOdeSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralExplicitOdeSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralExplicitOdeSolver/CMakeLists.txt:206,Modifiability,config,config,206,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralExplicitOdeSolver LANGUAGES CXX). set(SOFAGENERALEXPLICITODESOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALEXPLICITODESOLVER_SRC}/config.h.in; ${SOFAGENERALEXPLICITODESOLVER_SRC}/initSofaGeneralExplicitOdeSolver.h; ). set(SOURCE_FILES; ${SOFAGENERALEXPLICITODESOLVER_SRC}/initSofaGeneralExplicitOdeSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Forward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Forward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Forward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralExplicitOdeSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralExplicitOdeSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralImplicitOdeSolver/CMakeLists.txt:459,Integrability,message,message,459,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralImplicitOdeSolver LANGUAGES CXX). set(SOFAGENERALIMPLICITODESOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALIMPLICITODESOLVER_SRC}/config.h.in; ${SOFAGENERALIMPLICITODESOLVER_SRC}/initSofaGeneralImplicitOdeSolver.h; ). set(SOURCE_FILES; ${SOFAGENERALIMPLICITODESOLVER_SRC}/initSofaGeneralImplicitOdeSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Backward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Backward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Backward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralImplicitOdeSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralImplicitOdeSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralImplicitOdeSolver/CMakeLists.txt:206,Modifiability,config,config,206,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralImplicitOdeSolver LANGUAGES CXX). set(SOFAGENERALIMPLICITODESOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALIMPLICITODESOLVER_SRC}/config.h.in; ${SOFAGENERALIMPLICITODESOLVER_SRC}/initSofaGeneralImplicitOdeSolver.h; ). set(SOURCE_FILES; ${SOFAGENERALIMPLICITODESOLVER_SRC}/initSofaGeneralImplicitOdeSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Backward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Backward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Backward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralImplicitOdeSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralImplicitOdeSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralLinearSolver/CMakeLists.txt:424,Integrability,message,message,424,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralLinearSolver LANGUAGES CXX). set(SOFAGENERALLINEARSOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALLINEARSOLVER_SRC}/config.h.in; ${SOFAGENERALLINEARSOLVER_SRC}/initSofaGeneralLinearSolver.h; ). set(SOURCE_FILES; ${SOFAGENERALLINEARSOLVER_SRC}/initSofaGeneralLinearSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Iterative and Sofa.Component.LinearSolver.Direct instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Iterative); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralLinearSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralLinearSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralLinearSolver/CMakeLists.txt:191,Modifiability,config,config,191,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralLinearSolver LANGUAGES CXX). set(SOFAGENERALLINEARSOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALLINEARSOLVER_SRC}/config.h.in; ${SOFAGENERALLINEARSOLVER_SRC}/initSofaGeneralLinearSolver.h; ). set(SOURCE_FILES; ${SOFAGENERALLINEARSOLVER_SRC}/initSofaGeneralLinearSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Iterative and Sofa.Component.LinearSolver.Direct instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Iterative); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralLinearSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralLinearSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralLoader/CMakeLists.txt:382,Integrability,message,message,382,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralLoader LANGUAGES CXX). set(SOFAGENERALLOADER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALLOADER_SRC}/config.h.in; ${SOFAGENERALLOADER_SRC}/initSofaGeneralLoader.h; ). set(SOURCE_FILES; ${SOFAGENERALLOADER_SRC}/initSofaGeneralLoader.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.IO.Mesh and Sofa.Component.Playback instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.Playback REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.IO.Mesh); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Playback). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralLoader/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralLoader/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralLoader/CMakeLists.txt:173,Modifiability,config,config,173,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralLoader LANGUAGES CXX). set(SOFAGENERALLOADER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALLOADER_SRC}/config.h.in; ${SOFAGENERALLOADER_SRC}/initSofaGeneralLoader.h; ). set(SOURCE_FILES; ${SOFAGENERALLOADER_SRC}/initSofaGeneralLoader.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.IO.Mesh and Sofa.Component.Playback instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.Playback REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.IO.Mesh); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Playback). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralLoader/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralLoader/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralMeshCollision/CMakeLists.txt:431,Integrability,message,message,431,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralMeshCollision LANGUAGES CXX). set(SOFAGENERALMESHCOLLISION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALMESHCOLLISION_SRC}/config.h.in; ${SOFAGENERALMESHCOLLISION_SRC}/initSofaGeneralMeshCollision.h; ). set(SOURCE_FILES; ${SOFAGENERALMESHCOLLISION_SRC}/initSofaGeneralMeshCollision.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Algorithm and Sofa.Component.Collision.Detection.Intersection instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralMeshCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralMeshCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralMeshCollision/CMakeLists.txt:194,Modifiability,config,config,194,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralMeshCollision LANGUAGES CXX). set(SOFAGENERALMESHCOLLISION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALMESHCOLLISION_SRC}/config.h.in; ${SOFAGENERALMESHCOLLISION_SRC}/initSofaGeneralMeshCollision.h; ). set(SOURCE_FILES; ${SOFAGENERALMESHCOLLISION_SRC}/initSofaGeneralMeshCollision.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Algorithm and Sofa.Component.Collision.Detection.Intersection instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralMeshCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralMeshCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralRigid/CMakeLists.txt:487,Integrability,message,message,487,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralRigid LANGUAGES CXX). set(SOFAGENERALRIGID_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALRIGID_SRC}/config.h.in; ${SOFAGENERALRIGID_SRC}/initSofaGeneralRigid.h; ). set(SOURCE_FILES; ${SOFAGENERALRIGID_SRC}/initSofaGeneralRigid.cpp; ). sofa_find_package(SofaBaseMechanics REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseMechanics). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralRigid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralRigid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralRigid/CMakeLists.txt:170,Modifiability,config,config,170,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralRigid LANGUAGES CXX). set(SOFAGENERALRIGID_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALRIGID_SRC}/config.h.in; ${SOFAGENERALRIGID_SRC}/initSofaGeneralRigid.h; ). set(SOURCE_FILES; ${SOFAGENERALRIGID_SRC}/initSofaGeneralRigid.cpp; ). sofa_find_package(SofaBaseMechanics REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseMechanics). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralRigid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralRigid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralTopology/CMakeLists.txt:396,Integrability,message,message,396,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralTopology LANGUAGES CXX). set(SOFAGENERALTOPOLOGY_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALTOPOLOGY_SRC}/config.h.in; ${SOFAGENERALTOPOLOGY_SRC}/initSofaGeneralTopology.h; ). set(SOURCE_FILES; ${SOFAGENERALTOPOLOGY_SRC}/initSofaGeneralTopology.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Container.Grid and Sofa.Component.Topology.Container.Constant instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Container.Constant REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Constant Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralTopology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralTopology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralTopology/CMakeLists.txt:179,Modifiability,config,config,179,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralTopology LANGUAGES CXX). set(SOFAGENERALTOPOLOGY_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALTOPOLOGY_SRC}/config.h.in; ${SOFAGENERALTOPOLOGY_SRC}/initSofaGeneralTopology.h; ). set(SOURCE_FILES; ${SOFAGENERALTOPOLOGY_SRC}/initSofaGeneralTopology.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Container.Grid and Sofa.Component.Topology.Container.Constant instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Container.Constant REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Constant Sofa.Component.Topology.Container.Grid). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralTopology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralTopology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralVisual/CMakeLists.txt:382,Integrability,message,message,382,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralVisual LANGUAGES CXX). set(SOFAGENERALVISUAL_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALVISUAL_SRC}/config.h.in; ${SOFAGENERALVISUAL_SRC}/initSofaGeneralVisual.h; ). set(SOURCE_FILES; ${SOFAGENERALVISUAL_SRC}/initSofaGeneralVisual.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Visual instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Visual REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralVisual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralVisual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralVisual/CMakeLists.txt:173,Modifiability,config,config,173,"cmake_minimum_required(VERSION 3.22); project(SofaGeneralVisual LANGUAGES CXX). set(SOFAGENERALVISUAL_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGENERALVISUAL_SRC}/config.h.in; ${SOFAGENERALVISUAL_SRC}/initSofaGeneralVisual.h; ). set(SOURCE_FILES; ${SOFAGENERALVISUAL_SRC}/initSofaGeneralVisual.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Visual instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Visual REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Visual). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGeneralVisual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGeneralVisual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt:727,Integrability,message,message,727,"cmake_minimum_required(VERSION 3.22); project(SofaGraphComponent LANGUAGES CXX). sofa_find_package(SofaBase REQUIRED). set(SOFAGRAPHCOMPONENT_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGRAPHCOMPONENT_SRC}/config.h.in; ${SOFAGRAPHCOMPONENT_SRC}/initSofaGraphComponent.h; ). set(SOURCE_FILES; ${SOFAGRAPHCOMPONENT_SRC}/initSofaGraphComponent.cpp; ). list(APPEND HEADER_FILES; ${SOFAGRAPHCOMPONENT_SRC}/Gravity.h; ${SOFAGRAPHCOMPONENT_SRC}/InteractingBehaviorModel.h; ); list(APPEND SOURCE_FILES; ${SOFAGRAPHCOMPONENT_SRC}/Gravity.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Simulation.Core SofaBaseUtils SofaBaseCollision). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SceneUtility, Sofa.Component.Setting,; #Sofa.GUI.Component and the plugin SceneChecking instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SceneUtility REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Component). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt:214,Modifiability,config,config,214,"cmake_minimum_required(VERSION 3.22); project(SofaGraphComponent LANGUAGES CXX). sofa_find_package(SofaBase REQUIRED). set(SOFAGRAPHCOMPONENT_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGRAPHCOMPONENT_SRC}/config.h.in; ${SOFAGRAPHCOMPONENT_SRC}/initSofaGraphComponent.h; ). set(SOURCE_FILES; ${SOFAGRAPHCOMPONENT_SRC}/initSofaGraphComponent.cpp; ). list(APPEND HEADER_FILES; ${SOFAGRAPHCOMPONENT_SRC}/Gravity.h; ${SOFAGRAPHCOMPONENT_SRC}/InteractingBehaviorModel.h; ); list(APPEND SOURCE_FILES; ${SOFAGRAPHCOMPONENT_SRC}/Gravity.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Simulation.Core SofaBaseUtils SofaBaseCollision). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SceneUtility, Sofa.Component.Setting,; #Sofa.GUI.Component and the plugin SceneChecking instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SceneUtility REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Component). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt:898,Modifiability,plugin,plugin,898,"cmake_minimum_required(VERSION 3.22); project(SofaGraphComponent LANGUAGES CXX). sofa_find_package(SofaBase REQUIRED). set(SOFAGRAPHCOMPONENT_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAGRAPHCOMPONENT_SRC}/config.h.in; ${SOFAGRAPHCOMPONENT_SRC}/initSofaGraphComponent.h; ). set(SOURCE_FILES; ${SOFAGRAPHCOMPONENT_SRC}/initSofaGraphComponent.cpp; ). list(APPEND HEADER_FILES; ${SOFAGRAPHCOMPONENT_SRC}/Gravity.h; ${SOFAGRAPHCOMPONENT_SRC}/InteractingBehaviorModel.h; ); list(APPEND SOURCE_FILES; ${SOFAGRAPHCOMPONENT_SRC}/Gravity.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.Simulation.Core SofaBaseUtils SofaBaseCollision). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SceneUtility, Sofa.Component.Setting,; #Sofa.GUI.Component and the plugin SceneChecking instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SceneUtility REQUIRED); sofa_find_package(Sofa.Component.Setting REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SceneUtility); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Setting); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Component). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGraphComponent/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGuiCommon/CMakeLists.txt:148,Integrability,message,message,148,"cmake_minimum_required(VERSION 3.22); project(SofaGuiCommon). set(SOURCE_FILES; empty.cpp; ). add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.GUI.Common and Sofa.GUI.Batch instead.""). # forward to the new sofang module; sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(Sofa.GUI.Batch REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Batch). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGuiCommon/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGuiCommon/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGuiQt/CMakeLists.txt:158,Integrability,message,message,158,"cmake_minimum_required(VERSION 3.22); project(SofaGuiQt LANGUAGES CXX). set(SOURCE_FILES; empty.cpp; ). add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.GUI.Qt instead.""). # forward to the new sofang module; sofa_find_package(Sofa.GUI.Qt REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.Qt). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaGuiQt/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaGuiQt/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaHaptics/CMakeLists.txt:330,Integrability,message,message,330,"cmake_minimum_required(VERSION 3.22); project(SofaHaptics LANGUAGES CXX). set(HEADER_FILES; src/SofaHaptics/config.h; src/SofaHaptics/initSofaHaptics.h; ). set(SOURCE_FILES; src/SofaHaptics/initSofaHaptics.cpp; ). set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Haptics instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Haptics REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Haptics). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaHaptics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaHaptics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaHaptics/CMakeLists.txt:108,Modifiability,config,config,108,"cmake_minimum_required(VERSION 3.22); project(SofaHaptics LANGUAGES CXX). set(HEADER_FILES; src/SofaHaptics/config.h; src/SofaHaptics/initSofaHaptics.h; ). set(SOURCE_FILES; src/SofaHaptics/initSofaHaptics.cpp; ). set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Haptics instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Haptics REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Haptics). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaHaptics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaHaptics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaHeadlessRecorder/CMakeLists.txt:155,Integrability,message,message,155,"cmake_minimum_required(VERSION 3.22); project(SofaHeadlessRecorder). set(SOURCE_FILES; empty.cpp; ). add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.GUI.HeadlessRecorder instead.""). # forward to the new sofang module; sofa_find_package(Sofa.GUI.HeadlessRecorder REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GUI.HeadlessRecorder). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaHeadlessRecorder/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaHeadlessRecorder/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaHelper/CMakeLists.txt:145,Integrability,message,message,145,"cmake_minimum_required(VERSION 3.22); project(SofaHelper). set(SOURCE_FILES; empty.cpp; ). add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES}); #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Helper instead.""). sofa_find_package(Sofa.Helper REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper). set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER SofaFramework) # IDE folder. sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaHelper/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaHelper/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaImplicitOdeSolver/CMakeLists.txt:457,Integrability,message,message,457,"cmake_minimum_required(VERSION 3.22); project(SofaImplicitOdeSolver LANGUAGES CXX). set(SOFAIMPLICITEODESOLVER_SRC ""src/${PROJECT_NAME}""). sofa_find_package(SofaFramework REQUIRED). set(HEADER_FILES; ${SOFAIMPLICITEODESOLVER_SRC}/config.h.in; ${SOFAIMPLICITEODESOLVER_SRC}/initSofaImplicitOdeSolver.h; ). set(SOURCE_FILES; ${SOFAIMPLICITEODESOLVER_SRC}/initSofaImplicitOdeSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Backward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Backward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Backward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaImplicitOdeSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaImplicitOdeSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaImplicitOdeSolver/CMakeLists.txt:230,Modifiability,config,config,230,"cmake_minimum_required(VERSION 3.22); project(SofaImplicitOdeSolver LANGUAGES CXX). set(SOFAIMPLICITEODESOLVER_SRC ""src/${PROJECT_NAME}""). sofa_find_package(SofaFramework REQUIRED). set(HEADER_FILES; ${SOFAIMPLICITEODESOLVER_SRC}/config.h.in; ${SOFAIMPLICITEODESOLVER_SRC}/initSofaImplicitOdeSolver.h; ). set(SOURCE_FILES; ${SOFAIMPLICITEODESOLVER_SRC}/initSofaImplicitOdeSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Backward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Backward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Backward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaImplicitOdeSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaImplicitOdeSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaLoader/CMakeLists.txt:333,Integrability,message,message,333,"cmake_minimum_required(VERSION 3.22); project(SofaLoader LANGUAGES CXX). set(SOFALOADER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFALOADER_SRC}/config.h.in; ${SOFALOADER_SRC}/initSofaLoader.h; ). set(SOURCE_FILES; ${SOFALOADER_SRC}/initSofaLoader.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.IO.Mesh instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.IO.Mesh). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaLoader/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaLoader/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaLoader/CMakeLists.txt:152,Modifiability,config,config,152,"cmake_minimum_required(VERSION 3.22); project(SofaLoader LANGUAGES CXX). set(SOFALOADER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFALOADER_SRC}/config.h.in; ${SOFALOADER_SRC}/initSofaLoader.h; ). set(SOURCE_FILES; ${SOFALOADER_SRC}/initSofaLoader.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.IO.Mesh instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.IO.Mesh). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaLoader/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaLoader/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt:1489,Integrability,message,message,1489," REQUIRED). set(SOFAMISCCOLLISION_SRC src/SofaMiscCollision). set(HEADER_FILES; ${SOFAMISCCOLLISION_SRC}/config.h.in; ${SOFAMISCCOLLISION_SRC}/initSofaMiscCollision.h; ). set(SOURCE_FILES; ${SOFAMISCCOLLISION_SRC}/initSofaMiscCollision.cpp; ). set(EXTRA_FILES; ${SOFAMISCCOLLISION_SRC}/README.md; ). list(APPEND HEADER_FILES; ${SOFAMISCCOLLISION_SRC}/DefaultCollisionGroupManager.h; ${SOFAMISCCOLLISION_SRC}/RayTriangleVisitor.h; ${SOFAMISCCOLLISION_SRC}/SolverMerger.h; ). list(APPEND SOURCE_FILES. ${SOFAMISCCOLLISION_SRC}/DefaultCollisionGroupManager.cpp; ${SOFAMISCCOLLISION_SRC}/RayTriangleVisitor.cpp; ${SOFAMISCCOLLISION_SRC}/SolverMerger.cpp. ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseTopology SofaGeneralMeshCollision SofaGeneralDeformable SofaConstraint SofaExplicitOdeSolver SofaGeneralExplicitOdeSolver SofaImplicitOdeSolver SofaBaseCollision SofaBaseMechanics). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Intersection and Sofa.Component.Collision.Response.Contact instead.; # Moreover, OBB and Capsule-related components have been moved into the external plugin CollisionOBBCapsule.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""s",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt:620,Modifiability,config,config,620,"cmake_minimum_required(VERSION 3.22); project(SofaMiscCollision VERSION 1.0). sofa_find_package(SofaBaseCollision REQUIRED); sofa_find_package(SofaBaseMechanics REQUIRED); sofa_find_package(SofaBaseTopology REQUIRED); sofa_find_package(SofaGeneralMeshCollision REQUIRED); sofa_find_package(SofaGeneralDeformable REQUIRED); sofa_find_package(SofaConstraint REQUIRED); sofa_find_package(SofaExplicitOdeSolver REQUIRED); sofa_find_package(SofaGeneralExplicitOdeSolver REQUIRED); sofa_find_package(SofaImplicitOdeSolver REQUIRED). set(SOFAMISCCOLLISION_SRC src/SofaMiscCollision). set(HEADER_FILES; ${SOFAMISCCOLLISION_SRC}/config.h.in; ${SOFAMISCCOLLISION_SRC}/initSofaMiscCollision.h; ). set(SOURCE_FILES; ${SOFAMISCCOLLISION_SRC}/initSofaMiscCollision.cpp; ). set(EXTRA_FILES; ${SOFAMISCCOLLISION_SRC}/README.md; ). list(APPEND HEADER_FILES; ${SOFAMISCCOLLISION_SRC}/DefaultCollisionGroupManager.h; ${SOFAMISCCOLLISION_SRC}/RayTriangleVisitor.h; ${SOFAMISCCOLLISION_SRC}/SolverMerger.h; ). list(APPEND SOURCE_FILES. ${SOFAMISCCOLLISION_SRC}/DefaultCollisionGroupManager.cpp; ${SOFAMISCCOLLISION_SRC}/RayTriangleVisitor.cpp; ${SOFAMISCCOLLISION_SRC}/SolverMerger.cpp. ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseTopology SofaGeneralMeshCollision SofaGeneralDeformable SofaConstraint SofaExplicitOdeSolver SofaGeneralExplicitOdeSolver SofaImplicitOdeSolver SofaBaseCollision SofaBaseMechanics). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Intersection and Sofa.Component.Collision.Response.Contact instead.; # Moreover, OBB and Capsule-related components have been moved into the external plugin CollisionOBBCapsule.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRE",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt:1798,Modifiability,plugin,plugin,1798,"ILES; ${SOFAMISCCOLLISION_SRC}/README.md; ). list(APPEND HEADER_FILES; ${SOFAMISCCOLLISION_SRC}/DefaultCollisionGroupManager.h; ${SOFAMISCCOLLISION_SRC}/RayTriangleVisitor.h; ${SOFAMISCCOLLISION_SRC}/SolverMerger.h; ). list(APPEND SOURCE_FILES. ${SOFAMISCCOLLISION_SRC}/DefaultCollisionGroupManager.cpp; ${SOFAMISCCOLLISION_SRC}/RayTriangleVisitor.cpp; ${SOFAMISCCOLLISION_SRC}/SolverMerger.cpp. ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseTopology SofaGeneralMeshCollision SofaGeneralDeformable SofaConstraint SofaExplicitOdeSolver SofaGeneralExplicitOdeSolver SofaImplicitOdeSolver SofaBaseCollision SofaBaseMechanics). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Intersection and Sofa.Component.Collision.Response.Contact instead.; # Moreover, OBB and Capsule-related components have been moved into the external plugin CollisionOBBCapsule.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""collections""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFAMISCCOLLISION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_B",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt:2648,Testability,test,tests,2648,"ayTriangleVisitor.h; ${SOFAMISCCOLLISION_SRC}/SolverMerger.h; ). list(APPEND SOURCE_FILES. ${SOFAMISCCOLLISION_SRC}/DefaultCollisionGroupManager.cpp; ${SOFAMISCCOLLISION_SRC}/RayTriangleVisitor.cpp; ${SOFAMISCCOLLISION_SRC}/SolverMerger.cpp. ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseTopology SofaGeneralMeshCollision SofaGeneralDeformable SofaConstraint SofaExplicitOdeSolver SofaGeneralExplicitOdeSolver SofaImplicitOdeSolver SofaBaseCollision SofaBaseMechanics). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Intersection and Sofa.Component.Collision.Response.Contact instead.; # Moreover, OBB and Capsule-related components have been moved into the external plugin CollisionOBBCapsule.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""collections""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFAMISCCOLLISION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFAMISCCOLLISION_BUILD_TESTS); enable_testing(); add_subdirectory(SofaMiscCollision_test); endif(); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt:2753,Testability,test,tests,2753,"ayTriangleVisitor.h; ${SOFAMISCCOLLISION_SRC}/SolverMerger.h; ). list(APPEND SOURCE_FILES. ${SOFAMISCCOLLISION_SRC}/DefaultCollisionGroupManager.cpp; ${SOFAMISCCOLLISION_SRC}/RayTriangleVisitor.cpp; ${SOFAMISCCOLLISION_SRC}/SolverMerger.cpp. ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseTopology SofaGeneralMeshCollision SofaGeneralDeformable SofaConstraint SofaExplicitOdeSolver SofaGeneralExplicitOdeSolver SofaImplicitOdeSolver SofaBaseCollision SofaBaseMechanics). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Intersection and Sofa.Component.Collision.Response.Contact instead.; # Moreover, OBB and Capsule-related components have been moved into the external plugin CollisionOBBCapsule.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""collections""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFAMISCCOLLISION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFAMISCCOLLISION_BUILD_TESTS); enable_testing(); add_subdirectory(SofaMiscCollision_test); endif(); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscCollision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscEngine/CMakeLists.txt:408,Integrability,message,message,408,"cmake_minimum_required(VERSION 3.22); project(SofaMiscEngine LANGUAGES CXX). sofa_find_package(SofaNonUniformFem REQUIRED). set(SOFAMISCENGINE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCENGINE_SRC}/config.h.in; ${SOFAMISCENGINE_SRC}/initSofaMiscEngine.h; ). set(SOURCE_FILES; ${SOFAMISCENGINE_SRC}/initSofaMiscEngine.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Analyze and Sofa.Component.Engine.Transform instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Analyze REQUIRED); sofa_find_package(Sofa.Component.Engine.Transform REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Analyze); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Transform). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscEngine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscEngine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscEngine/CMakeLists.txt:211,Modifiability,config,config,211,"cmake_minimum_required(VERSION 3.22); project(SofaMiscEngine LANGUAGES CXX). sofa_find_package(SofaNonUniformFem REQUIRED). set(SOFAMISCENGINE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCENGINE_SRC}/config.h.in; ${SOFAMISCENGINE_SRC}/initSofaMiscEngine.h; ). set(SOURCE_FILES; ${SOFAMISCENGINE_SRC}/initSofaMiscEngine.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Analyze and Sofa.Component.Engine.Transform instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Analyze REQUIRED); sofa_find_package(Sofa.Component.Engine.Transform REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Analyze); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Transform). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscEngine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscEngine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscExtra/CMakeLists.txt:354,Integrability,message,message,354,"cmake_minimum_required(VERSION 3.22); project(SofaMiscExtra LANGUAGES CXX). set(SOFAMISCEXTRA_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCEXTRA_SRC}/initSofaMiscExtra.h; ${SOFAMISCEXTRA_SRC}/config.h.in; ). set(SOURCE_FILES; ${SOFAMISCEXTRA_SRC}/initSofaMiscExtra.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Generate instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Generate REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Generate). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscExtra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscExtra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscExtra/CMakeLists.txt:203,Modifiability,config,config,203,"cmake_minimum_required(VERSION 3.22); project(SofaMiscExtra LANGUAGES CXX). set(SOFAMISCEXTRA_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCEXTRA_SRC}/initSofaMiscExtra.h; ${SOFAMISCEXTRA_SRC}/config.h.in; ). set(SOURCE_FILES; ${SOFAMISCEXTRA_SRC}/initSofaMiscExtra.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Engine.Generate instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Engine.Generate REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Engine.Generate). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscExtra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscExtra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscFem/CMakeLists.txt:342,Integrability,message,message,342,"cmake_minimum_required(VERSION 3.22); project(SofaMiscFem LANGUAGES CXX). set(SOFAMISCFEM_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCFEM_SRC}/config.h.in; ${SOFAMISCFEM_SRC}/initSofaMiscFem.h; ). set(SOURCE_FILES; ${SOFAMISCFEM_SRC}/initSofaMiscFem.cpp; ); ; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SolidMechanics.FEM.Elastic, Sofa.Component.SolidMechanics.FEM.HyperElastic and Sofa.Component.SolidMechanics.TensorMass instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.HyperElastic REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.TensorMass REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.Elastic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.HyperElastic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.TensorMass). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscFem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscFem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscFem/CMakeLists.txt:155,Modifiability,config,config,155,"cmake_minimum_required(VERSION 3.22); project(SofaMiscFem LANGUAGES CXX). set(SOFAMISCFEM_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCFEM_SRC}/config.h.in; ${SOFAMISCFEM_SRC}/initSofaMiscFem.h; ). set(SOURCE_FILES; ${SOFAMISCFEM_SRC}/initSofaMiscFem.cpp; ); ; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.SolidMechanics.FEM.Elastic, Sofa.Component.SolidMechanics.FEM.HyperElastic and Sofa.Component.SolidMechanics.TensorMass instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.HyperElastic REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.TensorMass REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.Elastic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.HyperElastic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.TensorMass). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscFem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscFem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscForceField/CMakeLists.txt:389,Integrability,message,message,389,"cmake_minimum_required(VERSION 3.22); project(SofaMiscForceField LANGUAGES CXX). set(SOFAMISCFORCEFIELD_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCFORCEFIELD_SRC}/config.h.in; ${SOFAMISCFORCEFIELD_SRC}/initSofaMiscForceField.h; ). set(SOURCE_FILES; ${SOFAMISCFORCEFIELD_SRC}/initSofaMiscForceField.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mass and Sofa.Component.SolidMechanics.Spring instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mass); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.Elastic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscForceField/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscForceField/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscForceField/CMakeLists.txt:176,Modifiability,config,config,176,"cmake_minimum_required(VERSION 3.22); project(SofaMiscForceField LANGUAGES CXX). set(SOFAMISCFORCEFIELD_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCFORCEFIELD_SRC}/config.h.in; ${SOFAMISCFORCEFIELD_SRC}/initSofaMiscForceField.h; ). set(SOURCE_FILES; ${SOFAMISCFORCEFIELD_SRC}/initSofaMiscForceField.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mass and Sofa.Component.SolidMechanics.Spring instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mass); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.Elastic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscForceField/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscForceField/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscMapping/CMakeLists.txt:368,Integrability,message,message,368,"cmake_minimum_required(VERSION 3.22); project(SofaMiscMapping LANGUAGES CXX). set(SOFAMISCMAPPING_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCMAPPING_SRC}/config.h.in; ${SOFAMISCMAPPING_SRC}/initSofaMiscMapping.h; ). set(SOURCE_FILES; ${SOFAMISCMAPPING_SRC}/initSofaMiscMapping.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscMapping/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscMapping/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscMapping/CMakeLists.txt:167,Modifiability,config,config,167,"cmake_minimum_required(VERSION 3.22); project(SofaMiscMapping LANGUAGES CXX). set(SOFAMISCMAPPING_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCMAPPING_SRC}/config.h.in; ${SOFAMISCMAPPING_SRC}/initSofaMiscMapping.h; ). set(SOURCE_FILES; ${SOFAMISCMAPPING_SRC}/initSofaMiscMapping.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscMapping/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscMapping/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscSolver/CMakeLists.txt:439,Integrability,message,message,439,"cmake_minimum_required(VERSION 3.22); project(SofaMiscSolver LANGUAGES CXX). set(SOFAMISCSOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCSOLVER_SRC}/config.h.in; ${SOFAMISCSOLVER_SRC}/initSofaMiscSolver.h; ). set(SOURCE_FILES; ${SOFAMISCSOLVER_SRC}/initSofaMiscSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core Sofa.Simulation.Core). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Backward and Sofa.Component.ODESolver.Forward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Backward REQUIRED); sofa_find_package(Sofa.Component.ODESolver.Forward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Backward Sofa.Component.ODESolver.Forward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscSolver/CMakeLists.txt:164,Modifiability,config,config,164,"cmake_minimum_required(VERSION 3.22); project(SofaMiscSolver LANGUAGES CXX). set(SOFAMISCSOLVER_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAMISCSOLVER_SRC}/config.h.in; ${SOFAMISCSOLVER_SRC}/initSofaMiscSolver.h; ). set(SOURCE_FILES; ${SOFAMISCSOLVER_SRC}/initSofaMiscSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core Sofa.Simulation.Core). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.ODESolver.Backward and Sofa.Component.ODESolver.Forward instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.ODESolver.Backward REQUIRED); sofa_find_package(Sofa.Component.ODESolver.Forward REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.ODESolver.Backward Sofa.Component.ODESolver.Forward). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscTopology/CMakeLists.txt:378,Integrability,message,message,378,"cmake_minimum_required(VERSION 3.22); project(SofaMiscTopology LANGUAGES CXX). set(SOFAMISCTOPOLOGY_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; 	${SOFAMISCTOPOLOGY_SRC}/config.h.in; 	${SOFAMISCTOPOLOGY_SRC}/initSofaMiscTopology.h; ). set(SOURCE_FILES; 	${SOFAMISCTOPOLOGY_SRC}/initSofaMiscTopology.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Utility instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Utility REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Utility). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscTopology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscTopology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscTopology/CMakeLists.txt:171,Modifiability,config,config,171,"cmake_minimum_required(VERSION 3.22); project(SofaMiscTopology LANGUAGES CXX). set(SOFAMISCTOPOLOGY_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; 	${SOFAMISCTOPOLOGY_SRC}/config.h.in; 	${SOFAMISCTOPOLOGY_SRC}/initSofaMiscTopology.h; ). set(SOURCE_FILES; 	${SOFAMISCTOPOLOGY_SRC}/initSofaMiscTopology.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Utility instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Utility REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Utility). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaMiscTopology/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaMiscTopology/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaNonUniformFem/CMakeLists.txt:313,Integrability,message,message,313,"cmake_minimum_required(VERSION 3.22); project(SofaNonUniformFem LANGUAGES CXX). set(SOFANONUNIFORMFEM_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFANONUNIFORMFEM_SRC}/config.h.in; ${SOFANONUNIFORMFEM_SRC}/initSofaNonUniformFem.h; ). set(SOURCE_FILES; ${SOFANONUNIFORMFEM_SRC}/initSofaNonUniformFem.cpp; ). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Container.Grid, Sofa.Component.Topology.Container.Dynamic and Sofa.Component.SolidMechanics.FEM.NonUniform instead.""). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.NonUniform REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.NonUniform). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaNonUniformFem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaNonUniformFem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaNonUniformFem/CMakeLists.txt:173,Modifiability,config,config,173,"cmake_minimum_required(VERSION 3.22); project(SofaNonUniformFem LANGUAGES CXX). set(SOFANONUNIFORMFEM_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFANONUNIFORMFEM_SRC}/config.h.in; ${SOFANONUNIFORMFEM_SRC}/initSofaNonUniformFem.h; ). set(SOURCE_FILES; ${SOFANONUNIFORMFEM_SRC}/initSofaNonUniformFem.cpp; ). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Container.Grid, Sofa.Component.Topology.Container.Dynamic and Sofa.Component.SolidMechanics.FEM.NonUniform instead.""). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Container.Grid REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.NonUniform REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Grid); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.NonUniform). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaNonUniformFem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaNonUniformFem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaObjectInteraction/CMakeLists.txt:410,Integrability,message,message,410,"cmake_minimum_required(VERSION 3.22); project(SofaObjectInteraction LANGUAGES CXX). set(SOFAOBJECTINTERACTION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAOBJECTINTERACTION_SRC}/config.h.in; ${SOFAOBJECTINTERACTION_SRC}/initSofaObjectInteraction.h; ). set(SOURCE_FILES; ${SOFAOBJECTINTERACTION_SRC}/initSofaObjectInteraction.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Response.Contact instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaObjectInteraction/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaObjectInteraction/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaObjectInteraction/CMakeLists.txt:185,Modifiability,config,config,185,"cmake_minimum_required(VERSION 3.22); project(SofaObjectInteraction LANGUAGES CXX). set(SOFAOBJECTINTERACTION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAOBJECTINTERACTION_SRC}/config.h.in; ${SOFAOBJECTINTERACTION_SRC}/initSofaObjectInteraction.h; ). set(SOURCE_FILES; ${SOFAOBJECTINTERACTION_SRC}/initSofaObjectInteraction.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Response.Contact instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaObjectInteraction/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaObjectInteraction/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaOpenglVisual/CMakeLists.txt:345,Integrability,message,message,345,"cmake_minimum_required(VERSION 3.22); project(SofaOpenglVisual LANGUAGES CXX). set(HEADER_FILES; src/SofaOpenglVisual/config.h; src/SofaOpenglVisual/initSofaOpenglVisual.h; ); set(SOURCE_FILES; src/SofaOpenglVisual/initSofaOpenglVisual.cpp; ); set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.GL.Component.Rendering2D, Sofa.GL.Component.Rendering3D and Sofa.GL.Component.Shader instead.""). # forward to the new sofang module; sofa_find_package(Sofa.GL.Component.Rendering2D REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.GL.Component.Shader REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Rendering2D); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Rendering3D); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Shader). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaOpenglVisual""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaOpenglVisual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaOpenglVisual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaOpenglVisual/CMakeLists.txt:118,Modifiability,config,config,118,"cmake_minimum_required(VERSION 3.22); project(SofaOpenglVisual LANGUAGES CXX). set(HEADER_FILES; src/SofaOpenglVisual/config.h; src/SofaOpenglVisual/initSofaOpenglVisual.h; ); set(SOURCE_FILES; src/SofaOpenglVisual/initSofaOpenglVisual.cpp; ); set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.GL.Component.Rendering2D, Sofa.GL.Component.Rendering3D and Sofa.GL.Component.Shader instead.""). # forward to the new sofang module; sofa_find_package(Sofa.GL.Component.Rendering2D REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.GL.Component.Shader REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Rendering2D); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Rendering3D); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL.Component.Shader). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaOpenglVisual""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaOpenglVisual/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaOpenglVisual/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaPreconditioner/CMakeLists.txt:330,Integrability,message,message,330,"cmake_minimum_required(VERSION 3.22); project(SofaPreconditioner). set(SRC_ROOT src/SofaPreconditioner). # Config; set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/initSofaPreconditioner.h; ); set(SOURCE_FILES; ${SRC_ROOT}/initSofaPreconditioner.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Iterative and Sofa.Component.LinearSolver.Preconditioner instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Preconditioner REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Preconditioner). sofa_create_package_with_targets(; PACKAGE_NAME SofaPreconditioner; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS SofaPreconditioner AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaPreconditioner""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaPreconditioner/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaPreconditioner/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaPreconditioner/CMakeLists.txt:145,Modifiability,config,config,145,"cmake_minimum_required(VERSION 3.22); project(SofaPreconditioner). set(SRC_ROOT src/SofaPreconditioner). # Config; set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/initSofaPreconditioner.h; ); set(SOURCE_FILES; ${SRC_ROOT}/initSofaPreconditioner.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Iterative and Sofa.Component.LinearSolver.Preconditioner instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Preconditioner REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Preconditioner). sofa_create_package_with_targets(; PACKAGE_NAME SofaPreconditioner; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS SofaPreconditioner AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaPreconditioner""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaPreconditioner/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaPreconditioner/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaRigid/CMakeLists.txt:326,Integrability,message,message,326,"cmake_minimum_required(VERSION 3.22); project(SofaRigid LANGUAGES CXX). set(SOFARIGID_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFARIGID_SRC}/config.h.in; ${SOFARIGID_SRC}/initSofaRigid.h; ). set(SOURCE_FILES; ${SOFARIGID_SRC}/initSofaRigid.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping and Sofa.Component.SolidMechanics.Spring instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaRigid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaRigid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaRigid/CMakeLists.txt:149,Modifiability,config,config,149,"cmake_minimum_required(VERSION 3.22); project(SofaRigid LANGUAGES CXX). set(SOFARIGID_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFARIGID_SRC}/config.h.in; ${SOFARIGID_SRC}/initSofaRigid.h; ). set(SOURCE_FILES; ${SOFARIGID_SRC}/initSofaRigid.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Mapping and Sofa.Component.SolidMechanics.Spring instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Mapping REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.Spring). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaRigid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaRigid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSimpleFem/CMakeLists.txt:535,Integrability,message,message,535,"cmake_minimum_required(VERSION 3.22); project(SofaSimpleFem LANGUAGES CXX). set(SOFASIMPLEFEM_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFASIMPLEFEM_SRC}/config.h.in; ${SOFASIMPLEFEM_SRC}/initSofaSimpleFem.h; ). set(SOURCE_FILES; ${SOFASIMPLEFEM_SRC}/initSofaSimpleFem.cpp; ). sofa_find_package(SofaBaseTopology REQUIRED); sofa_find_package(SofaBaseLinearSolver REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseTopology SofaBaseLinearSolver). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Diffusion and Sofa.Component.SolidMechanics.FEM.Elastic instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Diffusion REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Diffusion); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.Elastic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaSimpleFem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSimpleFem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSimpleFem/CMakeLists.txt:161,Modifiability,config,config,161,"cmake_minimum_required(VERSION 3.22); project(SofaSimpleFem LANGUAGES CXX). set(SOFASIMPLEFEM_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFASIMPLEFEM_SRC}/config.h.in; ${SOFASIMPLEFEM_SRC}/initSofaSimpleFem.h; ). set(SOURCE_FILES; ${SOFASIMPLEFEM_SRC}/initSofaSimpleFem.cpp; ). sofa_find_package(SofaBaseTopology REQUIRED); sofa_find_package(SofaBaseLinearSolver REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaBaseTopology SofaBaseLinearSolver). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Diffusion and Sofa.Component.SolidMechanics.FEM.Elastic instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Diffusion REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Diffusion); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.SolidMechanics.FEM.Elastic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaSimpleFem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSimpleFem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSimulationCore/CMakeLists.txt:38,Integrability,message,message,38,"cmake_minimum_required(VERSION 3.22). message(FATAL_ERROR ""SofaSimulationCore module has been deprecated since v21.06 and has been removed since v22.06. Use Sofa.Simulation.Core instead.""); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaSimulationCore/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSimulationCore/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSimulationTree/CMakeLists.txt:176,Modifiability,config,config,176,"cmake_minimum_required(VERSION 3.22); project(SofaSimulationTree LANGUAGES CXX). set(SOFASIMULATIONTREE_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFASIMULATIONTREE_SRC}/config.h.in; ${SOFASIMULATIONTREE_SRC}/init.h; ${SOFASIMULATIONTREE_SRC}/ExportDotVisitor.h; ${SOFASIMULATIONTREE_SRC}/GNode.h; ${SOFASIMULATIONTREE_SRC}/GNodeMultiMappingElement.h; ${SOFASIMULATIONTREE_SRC}/GNodeVisitor.h; ${SOFASIMULATIONTREE_SRC}/TreeSimulation.h; ). set(SOURCE_FILES; ${SOFASIMULATIONTREE_SRC}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; )",MatchSource.DOCS,applications/collections/deprecated/modules/SofaSimulationTree/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSimulationTree/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSparseSolver/CMakeLists.txt:337,Integrability,message,message,337,"cmake_minimum_required(VERSION 3.22); project(SofaSparseSolver LANGUAGES CXX). set(SRC_ROOT src/SofaSparseSolver). # Sources; set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/initSofaSparseSolver.h; ); set(SOURCE_FILES; ${SRC_ROOT}/initSofaSparseSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Iterative and Sofa.Component.LinearSolver.Direct instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME SofaSparseSolver; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS SofaSparseSolver AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaSparseSolver""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaSparseSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSparseSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSparseSolver/CMakeLists.txt:156,Modifiability,config,config,156,"cmake_minimum_required(VERSION 3.22); project(SofaSparseSolver LANGUAGES CXX). set(SRC_ROOT src/SofaSparseSolver). # Sources; set(HEADER_FILES; ${SRC_ROOT}/config.h.in; ${SRC_ROOT}/initSofaSparseSolver.h; ); set(SOURCE_FILES; ${SRC_ROOT}/initSofaSparseSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.LinearSolver.Iterative and Sofa.Component.LinearSolver.Direct instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME SofaSparseSolver; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS SofaSparseSolver AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaSparseSolver""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaSparseSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaSparseSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaTopologyMapping/CMakeLists.txt:396,Integrability,message,message,396,"cmake_minimum_required(VERSION 3.22); project(SofaTopologyMapping LANGUAGES CXX). set(SOFATOPOLOGYMAPPING_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFATOPOLOGYMAPPING_SRC}/config.h.in; ${SOFATOPOLOGYMAPPING_SRC}/initSofaTopologyMapping.h; ). set(SOURCE_FILES; ${SOFATOPOLOGYMAPPING_SRC}/initSofaTopologyMapping.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Mapping and Sofa.Component.Mapping instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Mapping REQUIRED); sofa_find_package(Sofa.Component.Mapping REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Mapping); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaTopologyMapping/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaTopologyMapping/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaTopologyMapping/CMakeLists.txt:179,Modifiability,config,config,179,"cmake_minimum_required(VERSION 3.22); project(SofaTopologyMapping LANGUAGES CXX). set(SOFATOPOLOGYMAPPING_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFATOPOLOGYMAPPING_SRC}/config.h.in; ${SOFATOPOLOGYMAPPING_SRC}/initSofaTopologyMapping.h; ). set(SOURCE_FILES; ${SOFATOPOLOGYMAPPING_SRC}/initSofaTopologyMapping.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Topology.Mapping and Sofa.Component.Mapping instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Topology.Mapping REQUIRED); sofa_find_package(Sofa.Component.Mapping REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Mapping); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Mapping). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""collections""; ); ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaTopologyMapping/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaTopologyMapping/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaUserInteraction/CMakeLists.txt:1007,Integrability,message,message,1007,"22); project(SofaUserInteraction LANGUAGES CXX). set(SOFAUSERINTERACTION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAUSERINTERACTION_SRC}/config.h.in; ${SOFAUSERINTERACTION_SRC}/initSofaUserInteraction.h; ). set(SOURCE_FILES; ${SOFAUSERINTERACTION_SRC}/initSofaUserInteraction.cpp; ). list(APPEND HEADER_FILES; ${SOFAUSERINTERACTION_SRC}/SleepController.h; ). list(APPEND SOURCE_FILES; ${SOFAUSERINTERACTION_SRC}/SleepController.cpp; ). sofa_find_package(SofaDeformable REQUIRED); sofa_find_package(SofaGeneralMeshCollision REQUIRED); sofa_find_package(SofaGeneralVisual REQUIRED); sofa_find_package(SofaTopologyMapping REQUIRED); sofa_find_package(SofaBoundaryCondition REQUIRED); sofa_find_package(SofaGraphComponent REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaGeneralMeshCollision SofaGeneralVisual SofaTopologyMapping SofaDeformable SofaBoundaryCondition SofaGraphComponent). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Algorithm, Sofa.Component.Collision.Detection.Intersection, Sofa.Component.Collision.Response.Contact and Sofa.Component.Controller and Sofa.GUI.Component instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Intersection); target_l",MatchSource.DOCS,applications/collections/deprecated/modules/SofaUserInteraction/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaUserInteraction/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaUserInteraction/CMakeLists.txt:179,Modifiability,config,config,179,"cmake_minimum_required(VERSION 3.22); project(SofaUserInteraction LANGUAGES CXX). set(SOFAUSERINTERACTION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAUSERINTERACTION_SRC}/config.h.in; ${SOFAUSERINTERACTION_SRC}/initSofaUserInteraction.h; ). set(SOURCE_FILES; ${SOFAUSERINTERACTION_SRC}/initSofaUserInteraction.cpp; ). list(APPEND HEADER_FILES; ${SOFAUSERINTERACTION_SRC}/SleepController.h; ). list(APPEND SOURCE_FILES; ${SOFAUSERINTERACTION_SRC}/SleepController.cpp; ). sofa_find_package(SofaDeformable REQUIRED); sofa_find_package(SofaGeneralMeshCollision REQUIRED); sofa_find_package(SofaGeneralVisual REQUIRED); sofa_find_package(SofaTopologyMapping REQUIRED); sofa_find_package(SofaBoundaryCondition REQUIRED); sofa_find_package(SofaGraphComponent REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaGeneralMeshCollision SofaGeneralVisual SofaTopologyMapping SofaDeformable SofaBoundaryCondition SofaGraphComponent). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. Use Sofa.Component.Collision.Geometry, Sofa.Component.Collision.Detection.Algorithm, Sofa.Component.Collision.Detection.Intersection, Sofa.Component.Collision.Response.Contact and Sofa.Component.Controller and Sofa.GUI.Component instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Geometry); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision.D",MatchSource.DOCS,applications/collections/deprecated/modules/SofaUserInteraction/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaUserInteraction/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt:1622,Integrability,message,message,1622,"; ${SOFAVALIDATION_SRC}/DevMonitorManager.h; ${SOFAVALIDATION_SRC}/DevTensionMonitor.h; ${SOFAVALIDATION_SRC}/DevTensionMonitor.inl; ${SOFAVALIDATION_SRC}/EvalPointsDistance.h; ${SOFAVALIDATION_SRC}/EvalPointsDistance.inl; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.h; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.inl; ${SOFAVALIDATION_SRC}/ExtraMonitor.h; ${SOFAVALIDATION_SRC}/ExtraMonitor.inl; ${SOFAVALIDATION_SRC}/Monitor.h; ${SOFAVALIDATION_SRC}/Monitor.inl; ). set(SOURCE_FILES; ${SOFAVALIDATION_SRC}/initSofaValidation.cpp; ${SOFAVALIDATION_SRC}/DataController.cpp; ${SOFAVALIDATION_SRC}/DataMonitor.cpp; ${SOFAVALIDATION_SRC}/DevAngleCollisionMonitor.cpp; ${SOFAVALIDATION_SRC}/DevMonitorManager.cpp; ${SOFAVALIDATION_SRC}/DevTensionMonitor.cpp; ${SOFAVALIDATION_SRC}/EvalPointsDistance.cpp; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.cpp; ${SOFAVALIDATION_SRC}/ExtraMonitor.cpp; ${SOFAVALIDATION_SRC}/Monitor.cpp; ). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common Sofa.Component.Collision). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Playback REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Playback). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ). ## Tests; cmake_dependent_option(SOFAVALIDATION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFAVALIDATION_BUILD_TESTS); enable_testing(); add_subdirectory(SofaValidation_test); endif(). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt:164,Modifiability,config,config,164,"cmake_minimum_required(VERSION 3.22); project(SofaValidation LANGUAGES CXX). set(SOFAVALIDATION_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFAVALIDATION_SRC}/config.h.in; ${SOFAVALIDATION_SRC}/initSofaValidation.h; ${SOFAVALIDATION_SRC}/DataController.h; ${SOFAVALIDATION_SRC}/DataMonitor.h; ${SOFAVALIDATION_SRC}/DevAngleCollisionMonitor.h; ${SOFAVALIDATION_SRC}/DevAngleCollisionMonitor.inl; ${SOFAVALIDATION_SRC}/DevMonitor.h; ${SOFAVALIDATION_SRC}/DevMonitorManager.h; ${SOFAVALIDATION_SRC}/DevTensionMonitor.h; ${SOFAVALIDATION_SRC}/DevTensionMonitor.inl; ${SOFAVALIDATION_SRC}/EvalPointsDistance.h; ${SOFAVALIDATION_SRC}/EvalPointsDistance.inl; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.h; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.inl; ${SOFAVALIDATION_SRC}/ExtraMonitor.h; ${SOFAVALIDATION_SRC}/ExtraMonitor.inl; ${SOFAVALIDATION_SRC}/Monitor.h; ${SOFAVALIDATION_SRC}/Monitor.inl; ). set(SOURCE_FILES; ${SOFAVALIDATION_SRC}/initSofaValidation.cpp; ${SOFAVALIDATION_SRC}/DataController.cpp; ${SOFAVALIDATION_SRC}/DataMonitor.cpp; ${SOFAVALIDATION_SRC}/DevAngleCollisionMonitor.cpp; ${SOFAVALIDATION_SRC}/DevMonitorManager.cpp; ${SOFAVALIDATION_SRC}/DevTensionMonitor.cpp; ${SOFAVALIDATION_SRC}/EvalPointsDistance.cpp; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.cpp; ${SOFAVALIDATION_SRC}/ExtraMonitor.cpp; ${SOFAVALIDATION_SRC}/Monitor.cpp; ). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common Sofa.Component.Collision). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Playback REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Playback). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJEC",MatchSource.DOCS,applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt:2173,Modifiability,plugin,plugins,2173,"; ${SOFAVALIDATION_SRC}/DevMonitorManager.h; ${SOFAVALIDATION_SRC}/DevTensionMonitor.h; ${SOFAVALIDATION_SRC}/DevTensionMonitor.inl; ${SOFAVALIDATION_SRC}/EvalPointsDistance.h; ${SOFAVALIDATION_SRC}/EvalPointsDistance.inl; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.h; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.inl; ${SOFAVALIDATION_SRC}/ExtraMonitor.h; ${SOFAVALIDATION_SRC}/ExtraMonitor.inl; ${SOFAVALIDATION_SRC}/Monitor.h; ${SOFAVALIDATION_SRC}/Monitor.inl; ). set(SOURCE_FILES; ${SOFAVALIDATION_SRC}/initSofaValidation.cpp; ${SOFAVALIDATION_SRC}/DataController.cpp; ${SOFAVALIDATION_SRC}/DataMonitor.cpp; ${SOFAVALIDATION_SRC}/DevAngleCollisionMonitor.cpp; ${SOFAVALIDATION_SRC}/DevMonitorManager.cpp; ${SOFAVALIDATION_SRC}/DevTensionMonitor.cpp; ${SOFAVALIDATION_SRC}/EvalPointsDistance.cpp; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.cpp; ${SOFAVALIDATION_SRC}/ExtraMonitor.cpp; ${SOFAVALIDATION_SRC}/Monitor.cpp; ). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common Sofa.Component.Collision). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Playback REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Playback). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ). ## Tests; cmake_dependent_option(SOFAVALIDATION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFAVALIDATION_BUILD_TESTS); enable_testing(); add_subdirectory(SofaValidation_test); endif(). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt:2269,Testability,test,tests,2269,"; ${SOFAVALIDATION_SRC}/DevMonitorManager.h; ${SOFAVALIDATION_SRC}/DevTensionMonitor.h; ${SOFAVALIDATION_SRC}/DevTensionMonitor.inl; ${SOFAVALIDATION_SRC}/EvalPointsDistance.h; ${SOFAVALIDATION_SRC}/EvalPointsDistance.inl; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.h; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.inl; ${SOFAVALIDATION_SRC}/ExtraMonitor.h; ${SOFAVALIDATION_SRC}/ExtraMonitor.inl; ${SOFAVALIDATION_SRC}/Monitor.h; ${SOFAVALIDATION_SRC}/Monitor.inl; ). set(SOURCE_FILES; ${SOFAVALIDATION_SRC}/initSofaValidation.cpp; ${SOFAVALIDATION_SRC}/DataController.cpp; ${SOFAVALIDATION_SRC}/DataMonitor.cpp; ${SOFAVALIDATION_SRC}/DevAngleCollisionMonitor.cpp; ${SOFAVALIDATION_SRC}/DevMonitorManager.cpp; ${SOFAVALIDATION_SRC}/DevTensionMonitor.cpp; ${SOFAVALIDATION_SRC}/EvalPointsDistance.cpp; ${SOFAVALIDATION_SRC}/EvalSurfaceDistance.cpp; ${SOFAVALIDATION_SRC}/ExtraMonitor.cpp; ${SOFAVALIDATION_SRC}/Monitor.cpp; ). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common Sofa.Component.Collision). #message(WARNING ""${PROJECT_NAME} module is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.""). # forward to the new sofang module; sofa_find_package(Sofa.Component.Playback REQUIRED); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Playback). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ). ## Tests; cmake_dependent_option(SOFAVALIDATION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFAVALIDATION_BUILD_TESTS); enable_testing(); add_subdirectory(SofaValidation_test); endif(). ",MatchSource.DOCS,applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/collections/deprecated/modules/SofaValidation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt:217,Modifiability,config,config,217,"cmake_minimum_required(VERSION 3.22); project(ArticulatedSystemPlugin VERSION 1.0 LANGUAGES CXX). set(ARTICULATEDSYSTEMPLUGIN_SRC_DIR src/ArticulatedSystemPlugin); set(HEADER_FILES; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/config.h.in; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/init.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.inl; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.inl; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyController.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyBVHController.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHChannels.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHJoint.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHLoader.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHMotion.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHOffset.h; ); set(SOURCE_FILES; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/init.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyController.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyBVHController.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHJoint.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHLoader.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHMotion.cpp; ). find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Core Sofa.Component.Controller). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt:1564,Modifiability,plugin,plugin,1564,"cmake_minimum_required(VERSION 3.22); project(ArticulatedSystemPlugin VERSION 1.0 LANGUAGES CXX). set(ARTICULATEDSYSTEMPLUGIN_SRC_DIR src/ArticulatedSystemPlugin); set(HEADER_FILES; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/config.h.in; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/init.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.inl; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.inl; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyController.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyBVHController.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHChannels.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHJoint.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHLoader.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHMotion.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHOffset.h; ); set(SOURCE_FILES; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/init.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyController.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyBVHController.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHJoint.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHLoader.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHMotion.cpp; ). find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Core Sofa.Component.Controller). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt:1966,Modifiability,plugin,plugins,1966,"cmake_minimum_required(VERSION 3.22); project(ArticulatedSystemPlugin VERSION 1.0 LANGUAGES CXX). set(ARTICULATEDSYSTEMPLUGIN_SRC_DIR src/ArticulatedSystemPlugin); set(HEADER_FILES; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/config.h.in; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/init.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.inl; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.inl; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyController.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyBVHController.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHChannels.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHJoint.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHLoader.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHMotion.h; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHOffset.h; ); set(SOURCE_FILES; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/init.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyContainer.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedSystemMapping.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyController.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/ArticulatedHierarchyBVHController.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHJoint.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHLoader.cpp; ${ARTICULATEDSYSTEMPLUGIN_SRC_DIR}/bvh/BVHMotion.cpp; ). find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Core Sofa.Component.Controller). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/ArticulatedSystemPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt:478,Integrability,interface,interface,478,"; ************************************; * BulletCollisionDetection.txt *; ************************************. AUTHOR :; Moreno TRLIN. LICENCE :; - Private. OTHER COMMENTS :. UTILISATION DU PLUGIN :; Tout d'abord il faut le mettre dans le dossier des plugins et le renommer en BulletCollisionDetection si ce n'est pas; le cas. Dans la scène construite il faut mettre les composants BulletCollisionDetection et BulletIntersection pour pouvoir; traiter les BulletCollisionModel (interface entre les collision model de bullet et sofa). BulletCollisionDetection fait office de broad et narrow phase (d'ailleurs il est possible de choisir la broad phase,; les champs useSAP et useSimpleBroadPhase... proposent cette possibilité). Il ne faut donc mettre aucune; autre broad ou narrow phase dans la scène. BulletIntersection sert à insérer les contacts de bullet dans sofa; grâce à l'intermédiaire du BtInterManager en les triant selon leur type. Le champ contactDistance de BulletIntersection; spécifie la distance à partir de laquelle un contact sofa est créé. BulletIntersection hérite d'Intersection et BaseIntersector,; il ne faut en aucun cas mettre d'autres composants héritant d'Intersection dans la scène sofa. Les BulletCollisionModel sont l'interface entre les collision model de bullet et sofa. BulletCollisionModel est une classe; abstraite. Toute classe qui en hérite doit aussi hériter du collision model de sofa lui corresondant. Ainsi, BulletTriangleModel; hérite à la fois de TriangleModel (sofa) et de BulletCollisionModel, et, contient les objets bullet nécessaires à la construction; d'un mesh. Des exemples de scènes sont fournies dans le dossier examples. ",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt:1246,Integrability,interface,interface,1246,"; ************************************; * BulletCollisionDetection.txt *; ************************************. AUTHOR :; Moreno TRLIN. LICENCE :; - Private. OTHER COMMENTS :. UTILISATION DU PLUGIN :; Tout d'abord il faut le mettre dans le dossier des plugins et le renommer en BulletCollisionDetection si ce n'est pas; le cas. Dans la scène construite il faut mettre les composants BulletCollisionDetection et BulletIntersection pour pouvoir; traiter les BulletCollisionModel (interface entre les collision model de bullet et sofa). BulletCollisionDetection fait office de broad et narrow phase (d'ailleurs il est possible de choisir la broad phase,; les champs useSAP et useSimpleBroadPhase... proposent cette possibilité). Il ne faut donc mettre aucune; autre broad ou narrow phase dans la scène. BulletIntersection sert à insérer les contacts de bullet dans sofa; grâce à l'intermédiaire du BtInterManager en les triant selon leur type. Le champ contactDistance de BulletIntersection; spécifie la distance à partir de laquelle un contact sofa est créé. BulletIntersection hérite d'Intersection et BaseIntersector,; il ne faut en aucun cas mettre d'autres composants héritant d'Intersection dans la scène sofa. Les BulletCollisionModel sont l'interface entre les collision model de bullet et sofa. BulletCollisionModel est une classe; abstraite. Toute classe qui en hérite doit aussi hériter du collision model de sofa lui corresondant. Ainsi, BulletTriangleModel; hérite à la fois de TriangleModel (sofa) et de BulletCollisionModel, et, contient les objets bullet nécessaires à la construction; d'un mesh. Des exemples de scènes sont fournies dans le dossier examples. ",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt:252,Modifiability,plugin,plugins,252,"; ************************************; * BulletCollisionDetection.txt *; ************************************. AUTHOR :; Moreno TRLIN. LICENCE :; - Private. OTHER COMMENTS :. UTILISATION DU PLUGIN :; Tout d'abord il faut le mettre dans le dossier des plugins et le renommer en BulletCollisionDetection si ce n'est pas; le cas. Dans la scène construite il faut mettre les composants BulletCollisionDetection et BulletIntersection pour pouvoir; traiter les BulletCollisionModel (interface entre les collision model de bullet et sofa). BulletCollisionDetection fait office de broad et narrow phase (d'ailleurs il est possible de choisir la broad phase,; les champs useSAP et useSimpleBroadPhase... proposent cette possibilité). Il ne faut donc mettre aucune; autre broad ou narrow phase dans la scène. BulletIntersection sert à insérer les contacts de bullet dans sofa; grâce à l'intermédiaire du BtInterManager en les triant selon leur type. Le champ contactDistance de BulletIntersection; spécifie la distance à partir de laquelle un contact sofa est créé. BulletIntersection hérite d'Intersection et BaseIntersector,; il ne faut en aucun cas mettre d'autres composants héritant d'Intersection dans la scène sofa. Les BulletCollisionModel sont l'interface entre les collision model de bullet et sofa. BulletCollisionModel est une classe; abstraite. Toute classe qui en hérite doit aussi hériter du collision model de sofa lui corresondant. Ainsi, BulletTriangleModel; hérite à la fois de TriangleModel (sofa) et de BulletCollisionModel, et, contient les objets bullet nécessaires à la construction; d'un mesh. Des exemples de scènes sont fournies dans le dossier examples. ",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/BulletCollisionDetection.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:114,Deployability,install,installing,114,"cmake_minimum_required(VERSION 3.22); project(BulletCollisionDetection LANGUAGES CXX VERSION 0.1). #WARNING, when installing bullet write in the bullet CMakeLists.txt the line add_definitions(-DBULLET_TRIANGLE_COLLISION); # todo: is it possible to do a platform check for BULLET_TRIANGLE_COLLISION?. set(BULLETCOLLISIONDETECTION_SRC src/BulletCollisionDetection); set(HEADER_FILES; ${BULLETCOLLISIONDETECTION_SRC}/config.h.in; ${BULLETCOLLISIONDETECTION_SRC}/init.h; ${BULLETCOLLISIONDETECTION_SRC}/BtDynamicMesh.h; ${BULLETCOLLISIONDETECTION_SRC}/BtInterManager.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletCapsuleModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletCapsuleModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletCollisionDetection.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletCollisionModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContactMapper.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletCylinderModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletCylinderModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletOBBModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletOBBModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletSphereModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletSphereModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletTriangleModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletTriangleModel.inl; ). set(SOURCE_FILES; ${BULLETCOLLISIONDETECTION_SRC}/init.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletCapsuleModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletCollisionDetection.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContactMapper.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletCylinderModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletOBBModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletSphereModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletTriangleModel.cpp; ). s",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:3014,Deployability,install,installed,3014,"ollisionDetection.txt). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(CollisionOBBCapsule REQUIRED); sofa_find_package(Sofa.GL REQUIRED); # sofa_find_package(SofaVolumetricData REQUIRED); find_package(Compliant QUIET); find_package(LMConstraint QUIET). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(Bullet REQUIRED); include_directories(${BULLET_INCLUDE_DIRS}); link_directories(${BULLET_LIBRARY_DIRS}). message(STATUS ""BULLET_INCLUDE_DIRS: ${BULLET_INCLUDE_DIRS}""); message(STATUS ""BULLET_LIBRARIES: ${BULLET_LIBRARIES}""). # HACD (present in the lib dir of bullet) is not set by FindBullet; # this should set the correct path; set(HACD_LIB """"); if(BULLET_LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); list(APPEND HEADER_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find LMConstraint, won't build BulletConvexHullContacts""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collisio",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:2517,Integrability,message,message,2517,"ection.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContactMapper.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletCylinderModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletOBBModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletSphereModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletTriangleModel.cpp; ). set(README_FILES BulletCollisionDetection.txt). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(CollisionOBBCapsule REQUIRED); sofa_find_package(Sofa.GL REQUIRED); # sofa_find_package(SofaVolumetricData REQUIRED); find_package(Compliant QUIET); find_package(LMConstraint QUIET). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(Bullet REQUIRED); include_directories(${BULLET_INCLUDE_DIRS}); link_directories(${BULLET_LIBRARY_DIRS}). message(STATUS ""BULLET_INCLUDE_DIRS: ${BULLET_INCLUDE_DIRS}""); message(STATUS ""BULLET_LIBRARIES: ${BULLET_LIBRARIES}""). # HACD (present in the lib dir of bullet) is not set by FindBullet; # this should set the correct path; set(HACD_LIB """"); if(BULLET_LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); l",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:2580,Integrability,message,message,2580,"ection.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContactMapper.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletCylinderModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletOBBModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletSphereModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletTriangleModel.cpp; ). set(README_FILES BulletCollisionDetection.txt). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(CollisionOBBCapsule REQUIRED); sofa_find_package(Sofa.GL REQUIRED); # sofa_find_package(SofaVolumetricData REQUIRED); find_package(Compliant QUIET); find_package(LMConstraint QUIET). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(Bullet REQUIRED); include_directories(${BULLET_INCLUDE_DIRS}); link_directories(${BULLET_LIBRARY_DIRS}). message(STATUS ""BULLET_INCLUDE_DIRS: ${BULLET_INCLUDE_DIRS}""); message(STATUS ""BULLET_LIBRARIES: ${BULLET_LIBRARIES}""). # HACD (present in the lib dir of bullet) is not set by FindBullet; # this should set the correct path; set(HACD_LIB """"); if(BULLET_LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); l",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:3165,Integrability,message,message,3165,"L REQUIRED); # sofa_find_package(SofaVolumetricData REQUIRED); find_package(Compliant QUIET); find_package(LMConstraint QUIET). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(Bullet REQUIRED); include_directories(${BULLET_INCLUDE_DIRS}); link_directories(${BULLET_LIBRARY_DIRS}). message(STATUS ""BULLET_INCLUDE_DIRS: ${BULLET_INCLUDE_DIRS}""); message(STATUS ""BULLET_LIBRARIES: ${BULLET_LIBRARIES}""). # HACD (present in the lib dir of bullet) is not set by FindBullet; # this should set the correct path; set(HACD_LIB """"); if(BULLET_LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); list(APPEND HEADER_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find LMConstraint, won't build BulletConvexHullContacts""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision ${BULLET_LIBRARIES} ${HACD_LIB} CollisionOBBCapsule Sofa.GL). if(Compliant_FOUND); target_link_libraries(${PROJECT_NAME} Compliant); endif(). sofa_create_package_with_targets(; PACKAGE_",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:3214,Integrability,message,message,3214,"L REQUIRED); # sofa_find_package(SofaVolumetricData REQUIRED); find_package(Compliant QUIET); find_package(LMConstraint QUIET). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(Bullet REQUIRED); include_directories(${BULLET_INCLUDE_DIRS}); link_directories(${BULLET_LIBRARY_DIRS}). message(STATUS ""BULLET_INCLUDE_DIRS: ${BULLET_INCLUDE_DIRS}""); message(STATUS ""BULLET_LIBRARIES: ${BULLET_LIBRARIES}""). # HACD (present in the lib dir of bullet) is not set by FindBullet; # this should set the correct path; set(HACD_LIB """"); if(BULLET_LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); list(APPEND HEADER_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find LMConstraint, won't build BulletConvexHullContacts""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision ${BULLET_LIBRARIES} ${HACD_LIB} CollisionOBBCapsule Sofa.GL). if(Compliant_FOUND); target_link_libraries(${PROJECT_NAME} Compliant); endif(). sofa_create_package_with_targets(; PACKAGE_",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:3425,Integrability,message,message,3425,"directories(${BULLET_LIBRARY_DIRS}). message(STATUS ""BULLET_INCLUDE_DIRS: ${BULLET_INCLUDE_DIRS}""); message(STATUS ""BULLET_LIBRARIES: ${BULLET_LIBRARIES}""). # HACD (present in the lib dir of bullet) is not set by FindBullet; # this should set the correct path; set(HACD_LIB """"); if(BULLET_LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); list(APPEND HEADER_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find LMConstraint, won't build BulletConvexHullContacts""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision ${BULLET_LIBRARIES} ${HACD_LIB} CollisionOBBCapsule Sofa.GL). if(Compliant_FOUND); target_link_libraries(${PROJECT_NAME} Compliant); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests wil",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:3759,Integrability,message,message,3759,"LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); list(APPEND HEADER_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find LMConstraint, won't build BulletConvexHullContacts""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision ${BULLET_LIBRARIES} ${HACD_LIB} CollisionOBBCapsule Sofa.GL). if(Compliant_FOUND); target_link_libraries(${PROJECT_NAME} Compliant); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(BULLETCOLLISIONDETECTION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(BULLETCOLLISIONDETECTION_BUILD_TESTS); enable_testing(); add_subdirectory(BulletCollisionDetection_test); endif(); ",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:414,Modifiability,config,config,414,"cmake_minimum_required(VERSION 3.22); project(BulletCollisionDetection LANGUAGES CXX VERSION 0.1). #WARNING, when installing bullet write in the bullet CMakeLists.txt the line add_definitions(-DBULLET_TRIANGLE_COLLISION); # todo: is it possible to do a platform check for BULLET_TRIANGLE_COLLISION?. set(BULLETCOLLISIONDETECTION_SRC src/BulletCollisionDetection); set(HEADER_FILES; ${BULLETCOLLISIONDETECTION_SRC}/config.h.in; ${BULLETCOLLISIONDETECTION_SRC}/init.h; ${BULLETCOLLISIONDETECTION_SRC}/BtDynamicMesh.h; ${BULLETCOLLISIONDETECTION_SRC}/BtInterManager.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletCapsuleModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletCapsuleModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletCollisionDetection.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletCollisionModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContactMapper.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletCylinderModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletCylinderModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletOBBModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletOBBModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletSphereModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletSphereModel.inl; ${BULLETCOLLISIONDETECTION_SRC}/BulletTriangleModel.h; ${BULLETCOLLISIONDETECTION_SRC}/BulletTriangleModel.inl; ). set(SOURCE_FILES; ${BULLETCOLLISIONDETECTION_SRC}/init.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletCapsuleModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletCollisionDetection.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContactMapper.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletCylinderModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletOBBModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletSphereModel.cpp; ${BULLETCOLLISIONDETECTION_SRC}/BulletTriangleModel.cpp; ). s",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:4398,Modifiability,plugin,plugins,4398,"LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); list(APPEND HEADER_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find LMConstraint, won't build BulletConvexHullContacts""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision ${BULLET_LIBRARIES} ${HACD_LIB} CollisionOBBCapsule Sofa.GL). if(Compliant_FOUND); target_link_libraries(${PROJECT_NAME} Compliant); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(BULLETCOLLISIONDETECTION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(BULLETCOLLISIONDETECTION_BUILD_TESTS); enable_testing(); add_subdirectory(BulletCollisionDetection_test); endif(); ",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:4472,Testability,test,tests,4472,"LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); list(APPEND HEADER_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find LMConstraint, won't build BulletConvexHullContacts""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision ${BULLET_LIBRARIES} ${HACD_LIB} CollisionOBBCapsule Sofa.GL). if(Compliant_FOUND); target_link_libraries(${PROJECT_NAME} Compliant); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(BULLETCOLLISIONDETECTION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(BULLETCOLLISIONDETECTION_BUILD_TESTS); enable_testing(); add_subdirectory(BulletCollisionDetection_test); endif(); ",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt:4584,Testability,test,tests,4584,"LIBRARIES); list(GET BULLET_LIBRARIES 0 first_bullet_lib_path); get_filename_component(bullet_lib_dir ""${first_bullet_lib_path}"" DIRECTORY); if(WIN32); set(HACD_LIB ""${bullet_lib_dir}/HACD.lib""); elseif(UNIX AND NOT APPLE); # on Ubuntu, this is installed with libbullet-extras-dev; set(HACD_LIB ""${bullet_lib_dir}/libHACD.so""); else(); # MacOS ? todo; endif(); endif(). if(EXISTS ""${HACD_LIB}""); message(STATUS ""HACD_LIB: ${HACD_LIB}""); else(); message(SEND_ERROR ""Could not find HACD, necessary to build ConvexHull."" ); endif(). if(Compliant_FOUND); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullCompliantContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find Compliant, won't build BulletConvexHullCompliantContacts""); endif(). if(LMConstraint_FOUND); list(APPEND HEADER_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); list(APPEND SOURCE_FILES ${BULLETCOLLISIONDETECTION_SRC}/BulletConvexHullContacts.cpp); else(); message(STATUS ""BulletCollisionDetection: could not find LMConstraint, won't build BulletConvexHullContacts""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision ${BULLET_LIBRARIES} ${HACD_LIB} CollisionOBBCapsule Sofa.GL). if(Compliant_FOUND); target_link_libraries(${PROJECT_NAME} Compliant); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(BULLETCOLLISIONDETECTION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(BULLETCOLLISIONDETECTION_BUILD_TESTS); enable_testing(); add_subdirectory(BulletCollisionDetection_test); endif(); ",MatchSource.DOCS,applications/plugins/BulletCollisionDetection/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/BulletCollisionDetection/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:2693,Availability,error,error,2693,"orks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); en",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:560,Deployability,install,install,560,"cmake_minimum_required(VERSION 3.22); project(CImgPlugin VERSION 0.1). set(HEADER_FILES; src/CImgPlugin/ImageCImg.h; src/CImgPlugin/CImgPlugin.h.in; src/CImgPlugin/SOFACImg.h; ). set(SOURCE_FILES; src/CImgPlugin/ImageCImg.cpp; src/CImgPlugin/initCImgPlugin.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED). # add FindCImg.cmake; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake ${CMAKE_BINARY_DIR}/lib/cmake/FindCImg.cmake COPYONLY); install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers). sofa_find_package(CImg QUIET). if(NOT CImg_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching CImg...""). include(FetchContent); FetchContent_Declare(CImg; GIT_REPOSITORY https://github.com/GreycLab/CImg; GIT_TAG v.3.3.2; ). FetchContent_GetProperties(CImg); if(NOT CImg_POPULATED); FetchContent_Populate(CImg). set(CIMG_H_DIR ${cimg_SOURCE_DIR}); sofa_find_package(CImg REQUIRED); endif(); elseif (NOT CImg_FOUND); message(FATAL_ERROR ""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install cimg-dev, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),; # it will allow to use those instead of those present in XCode's frameworks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format ena",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:1420,Deployability,install,installed,1420,"CImg.cmake ${CMAKE_BINARY_DIR}/lib/cmake/FindCImg.cmake COPYONLY); install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers). sofa_find_package(CImg QUIET). if(NOT CImg_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching CImg...""). include(FetchContent); FetchContent_Declare(CImg; GIT_REPOSITORY https://github.com/GreycLab/CImg; GIT_TAG v.3.3.2; ). FetchContent_GetProperties(CImg); if(NOT CImg_POPULATED); FetchContent_Populate(CImg). set(CIMG_H_DIR ${cimg_SOURCE_DIR}); sofa_find_package(CImg REQUIRED); endif(); elseif (NOT CImg_FOUND); message(FATAL_ERROR ""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install cimg-dev, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),; # it will allow to use those instead of those present in XCode's frameworks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:3723,Deployability,configurat,configurations,3723,"D_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); endif(). if(MSVC); target_link_options(${PROJECT_NAME} PRIVATE ""/DEF:${CMAKE_CURRENT_SOURCE_DIR}/exports.def""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} CImg AUTO_SET_TARGET_PROPERTIES ; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""CImgPlugin""; RELOCATABLE ""plugins""; ). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(CIMGPLUGIN_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(CIMGPLUGIN_BUILD_TESTS); enable_testing(); add_subdirectory(CImgPlugin_test); endif(); ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:3990,Deployability,install,install,3990,"D_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); endif(). if(MSVC); target_link_options(${PROJECT_NAME} PRIVATE ""/DEF:${CMAKE_CURRENT_SOURCE_DIR}/exports.def""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} CImg AUTO_SET_TARGET_PROPERTIES ; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""CImgPlugin""; RELOCATABLE ""plugins""; ). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(CIMGPLUGIN_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(CIMGPLUGIN_BUILD_TESTS); enable_testing(); add_subdirectory(CImgPlugin_test); endif(); ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:766,Integrability,message,message,766,"cmake_minimum_required(VERSION 3.22); project(CImgPlugin VERSION 0.1). set(HEADER_FILES; src/CImgPlugin/ImageCImg.h; src/CImgPlugin/CImgPlugin.h.in; src/CImgPlugin/SOFACImg.h; ). set(SOURCE_FILES; src/CImgPlugin/ImageCImg.cpp; src/CImgPlugin/initCImgPlugin.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED). # add FindCImg.cmake; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake ${CMAKE_BINARY_DIR}/lib/cmake/FindCImg.cmake COPYONLY); install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers). sofa_find_package(CImg QUIET). if(NOT CImg_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching CImg...""). include(FetchContent); FetchContent_Declare(CImg; GIT_REPOSITORY https://github.com/GreycLab/CImg; GIT_TAG v.3.3.2; ). FetchContent_GetProperties(CImg); if(NOT CImg_POPULATED); FetchContent_Populate(CImg). set(CIMG_H_DIR ${cimg_SOURCE_DIR}); sofa_find_package(CImg REQUIRED); endif(); elseif (NOT CImg_FOUND); message(FATAL_ERROR ""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install cimg-dev, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),; # it will allow to use those instead of those present in XCode's frameworks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format ena",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:1181,Integrability,message,message,1181,"lugin/SOFACImg.h; ). set(SOURCE_FILES; src/CImgPlugin/ImageCImg.cpp; src/CImgPlugin/initCImgPlugin.cpp; ). sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED). # add FindCImg.cmake; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake ${CMAKE_BINARY_DIR}/lib/cmake/FindCImg.cmake COPYONLY); install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake DESTINATION lib/cmake/${PROJECT_NAME} COMPONENT headers). sofa_find_package(CImg QUIET). if(NOT CImg_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching CImg...""). include(FetchContent); FetchContent_Declare(CImg; GIT_REPOSITORY https://github.com/GreycLab/CImg; GIT_TAG v.3.3.2; ). FetchContent_GetProperties(CImg); if(NOT CImg_POPULATED); FetchContent_Populate(CImg). set(CIMG_H_DIR ${cimg_SOURCE_DIR}); sofa_find_package(CImg REQUIRED); endif(); elseif (NOT CImg_FOUND); message(FATAL_ERROR ""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install cimg-dev, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),; # it will allow to use those instead of those present in XCode's frameworks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STA",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:1952,Integrability,message,message,1952,"CImg). set(CIMG_H_DIR ${cimg_SOURCE_DIR}); sofa_find_package(CImg REQUIRED); endif(); elseif (NOT CImg_FOUND); message(FATAL_ERROR ""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install cimg-dev, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),; # it will allow to use those instead of those present in XCode's frameworks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). targ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:2147,Integrability,message,message,2147,"CImg). set(CIMG_H_DIR ${cimg_SOURCE_DIR}); sofa_find_package(CImg REQUIRED); endif(); elseif (NOT CImg_FOUND); message(FATAL_ERROR ""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install cimg-dev, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),; # it will allow to use those instead of those present in XCode's frameworks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). targ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:2230,Integrability,message,message,2230,"CImg). set(CIMG_H_DIR ${cimg_SOURCE_DIR}); sofa_find_package(CImg REQUIRED); endif(); elseif (NOT CImg_FOUND); message(FATAL_ERROR ""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install cimg-dev, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),; # it will allow to use those instead of those present in XCode's frameworks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). targ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:2486,Integrability,message,message,2486,"orks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); en",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:2568,Integrability,message,message,2568,"orks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); en",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:2869,Integrability,message,message,2869,"emove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); endif(). if(MSVC); target_link_options(${PROJECT_NAME} PRIVATE ""/DEF:${CMAKE_CURRENT_SOURCE_DIR}/exports.def""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJEC",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:3723,Modifiability,config,configurations,3723,"D_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); endif(). if(MSVC); target_link_options(${PROJECT_NAME} PRIVATE ""/DEF:${CMAKE_CURRENT_SOURCE_DIR}/exports.def""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} CImg AUTO_SET_TARGET_PROPERTIES ; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""CImgPlugin""; RELOCATABLE ""plugins""; ). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(CIMGPLUGIN_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(CIMGPLUGIN_BUILD_TESTS); enable_testing(); add_subdirectory(CImgPlugin_test); endif(); ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:3977,Modifiability,plugin,plugins,3977,"D_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); endif(). if(MSVC); target_link_options(${PROJECT_NAME} PRIVATE ""/DEF:${CMAKE_CURRENT_SOURCE_DIR}/exports.def""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} CImg AUTO_SET_TARGET_PROPERTIES ; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""CImgPlugin""; RELOCATABLE ""plugins""; ). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(CIMGPLUGIN_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(CIMGPLUGIN_BUILD_TESTS); enable_testing(); add_subdirectory(CImgPlugin_test); endif(); ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:1778,Safety,detect,detected,1778,"CImg). set(CIMG_H_DIR ${cimg_SOURCE_DIR}); sofa_find_package(CImg REQUIRED); endif(); elseif (NOT CImg_FOUND); message(FATAL_ERROR ""CImgPlugin: DEPENDENCY CImg NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install cimg-dev, or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). # OS X only: if the user installed its own JPEG/PNG lib (typically with homebrew/port),; # it will allow to use those instead of those present in XCode's frameworks; set(CMAKE_FIND_FRAMEWORK LAST). sofa_find_package(TIFF QUIET); sofa_find_package(ZSTD QUIET); sofa_find_package(JPEG QUIET); sofa_find_package(PNG QUIET); sofa_find_package(ZLIB QUIET). # Configure Paths according to detected packages; set(DEP_TARGETS """"); set(CIMG_CFLAGS -Dcimg_no_system_calls) # Remove CImg sys calls; if(TIFF_FOUND AND ( NOT(SOFA_BUILD_RELEASE_PACKAGE) OR ZSTD_FOUND)); message(STATUS ""CImgPlugin: TIFF Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_tiff); list(APPEND DEP_TARGETS TIFF::TIFF); if(ZSTD_FOUND); set(DEP_ZSTD ZSTD::ZSTD); endif(); else(); message(STATUS ""CImgPlugin: TIFF Image Format disabled""); endif(); if(JPEG_FOUND); message(STATUS ""CImgPlugin: JPEG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_jpeg); if(WIN32); # prevent INT32 redefinition on Windows (see jmorecfg.h); list(APPEND CIMG_CFLAGS -DXMD_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). targ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:4171,Testability,test,tests,4171,"D_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); endif(). if(MSVC); target_link_options(${PROJECT_NAME} PRIVATE ""/DEF:${CMAKE_CURRENT_SOURCE_DIR}/exports.def""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} CImg AUTO_SET_TARGET_PROPERTIES ; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""CImgPlugin""; RELOCATABLE ""plugins""; ). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(CIMGPLUGIN_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(CIMGPLUGIN_BUILD_TESTS); enable_testing(); add_subdirectory(CImgPlugin_test); endif(); ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt:4269,Testability,test,tests,4269,"D_H); endif(); list(APPEND DEP_TARGETS JPEG::JPEG); else(); message(STATUS ""CImgPlugin: JPEG Image Format disabled""); endif(); if(PNG_FOUND); message(STATUS ""CImgPlugin: PNG Image Format enabled""); list(APPEND CIMG_CFLAGS -Dcimg_use_png); if(UNIX); # Prevent pngconf error (see https://bugs.launchpad.net/ubuntu/+source/libpng/+bug/218409); list(APPEND CIMG_CFLAGS -DPNG_SKIP_SETJMP_CHECK); endif(); list(APPEND DEP_TARGETS PNG::PNG); else(); message(STATUS ""CImgPlugin: PNG Image Format disabled""); endif(); if(ZLIB_FOUND); list(APPEND DEP_TARGETS ZLIB::ZLIB); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ""$<BUILD_INTERFACE:${CImg_INCLUDE_DIRS}>""); target_compile_options(${PROJECT_NAME} PUBLIC ${CIMG_CFLAGS}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType ); target_link_libraries(${PROJECT_NAME} INTERFACE CImg); target_link_libraries(${PROJECT_NAME} PUBLIC ${DEP_TARGETS}). if(SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ${DEP_TARGETS} ${DEP_ZSTD}); endif(). if(MSVC); target_link_options(${PROJECT_NAME} PRIVATE ""/DEF:${CMAKE_CURRENT_SOURCE_DIR}/exports.def""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} CImg AUTO_SET_TARGET_PROPERTIES ; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""CImgPlugin""; RELOCATABLE ""plugins""; ). install(FILES; ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCImg.cmake""; DESTINATION lib/cmake/Modules; COMPONENT headers; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(CIMGPLUGIN_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(CIMGPLUGIN_BUILD_TESTS); enable_testing(); add_subdirectory(CImgPlugin_test); endif(); ",MatchSource.DOCS,applications/plugins/CImgPlugin/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CImgPlugin/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:219,Modifiability,config,config,219,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:4416,Modifiability,plugin,plugins,4416,"pp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED) # for performers. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision Sofa.GUI.Component). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(COLLISIONOBBCAPSULE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(COLLISIONOBBCAPSULE_BUILD_TESTS); enable_testing(); add_subdirectory(CollisionOBBCapsule_test); endif(); ",MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:4015,Performance,perform,performers,4015,"pp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED) # for performers. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision Sofa.GUI.Component). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(COLLISIONOBBCAPSULE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(COLLISIONOBBCAPSULE_BUILD_TESTS); enable_testing(); add_subdirectory(CollisionOBBCapsule_test); endif(); ",MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:302,Safety,detect,detection,302,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:371,Safety,detect,detection,371,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:443,Safety,detect,detection,443,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:517,Safety,detect,detection,517,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:594,Safety,detect,detection,594,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:663,Safety,detect,detection,663,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:735,Safety,detect,detection,735,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:809,Safety,detect,detection,809,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:882,Safety,detect,detection,882,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:957,Safety,detect,detection,957,cmake_minimum_required(VERSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1025,Safety,detect,detection,1025,RSION 3.22); project(CollisionOBBCapsule VERSION 1.0 LANGUAGES CXX). # List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1095,Safety,detect,detection,1095, List all files; set(COLLISIONOBBCAPSULE_SRC_DIR src/CollisionOBBCapsule); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geome,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1166,Safety,detect,detection,1166,); set(HEADER_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/config.h.in; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mappe,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1239,Safety,detect,detection,1239,IONOBBCAPSULE_SRC_DIR}/init.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1312,Safety,detect,detection,1312,tersection/BaseIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/in,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1387,Safety,detect,detection,1387,ection/CapsuleIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTo,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1457,Safety,detect,detection,1457,section/CapsuleIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIn,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1529,Safety,detect,detection,1529,ntersection/CapsuleIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/Capsul,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1598,Safety,detect,detection,1598,ction/intersection/Intersector.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersecti,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1669,Safety,detect,detection,1669,tion/intersection/IntrCapsuleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:1737,Safety,detect,detection,1737,ction/intersection/IntrCapsuleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detectio,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2355,Safety,detect,detection,2355,; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBB,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2426,Safety,detect,detection,2426,{COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/ge,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2500,Safety,detect,detection,2500,LISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2579,Safety,detect,detection,2579,APSULE_SRC_DIR}/detection/intersection/MeshIntTool.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2658,Safety,detect,detection,2658,_SRC_DIR}/detection/intersection/OBBIntTool.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cp,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2732,Safety,detect,detection,2732,IR}/detection/intersection/OBBIntersection.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; $,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2807,Safety,detect,detection,2807,IR}/geometry/CapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${CO,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2877,Safety,detect,detection,2877,psuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_p,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:2950,Safety,detect,detection,2950,ISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision R,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:3025,Safety,detect,detection,3025,DIR}/geometry/RigidCapsuleModel.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED) # for performers,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:3097,Safety,detect,detection,3097,try/RigidCapsuleModel.inl; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED) # for performers. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). t,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:3168,Safety,detect,detection,3168,er/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED) # for performers. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision S,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:3238,Safety,detect,detection,3238,r/OBBContactMapper.h; ). set(SOURCE_FILES; ${COLLISIONOBBCAPSULE_SRC_DIR}/init.cpp ; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/BaseIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/CapsuleIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrCapsuleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrMeshUtility.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED) # for performers. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision Sofa.GUI.Component). sofa_create_package_with_targets(; PACKAGE_NAME ${PRO,MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:4490,Testability,test,tests,4490,"pp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED) # for performers. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision Sofa.GUI.Component). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(COLLISIONOBBCAPSULE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(COLLISIONOBBCAPSULE_BUILD_TESTS); enable_testing(); add_subdirectory(CollisionOBBCapsule_test); endif(); ",MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt:4597,Testability,test,tests,4597,"pp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrOBBOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrSphereOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrTriangleOBB.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/IntrUtility3.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/MeshIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntTool.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/detection/intersection/OBBIntersection.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/CapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/OBBModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/geometry/RigidCapsuleModel.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/CapsuleContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/contact/OBBContact.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/CapsuleContactMapper.h; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.cpp; ${COLLISIONOBBCAPSULE_SRC_DIR}/response/mapper/OBBContactMapper.h; ). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GUI.Component REQUIRED) # for performers. add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision Sofa.GUI.Component). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(COLLISIONOBBCAPSULE_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(COLLISIONOBBCAPSULE_BUILD_TESTS); enable_testing(); add_subdirectory(CollisionOBBCapsule_test); endif(); ",MatchSource.DOCS,applications/plugins/CollisionOBBCapsule/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/CollisionOBBCapsule/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/DiffusionSolver/CMakeLists.txt:672,Integrability,message,message,672,"cmake_minimum_required(VERSION 3.22); project(DiffusionSolver VERSION 0.1). find_package(CImgPlugin REQUIRED). set(HEADER_FILES; config.h; DiffusionSolver.h; ). set(SOURCE_FILES; initDiffusionSolver.cpp; DiffusionSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(""${CMAKE_BUILD_TYPE}"" MATCHES ""^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$"") # no need for openmp in debug; find_package(OpenMP QUIET); if (OPENMP_FOUND); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}""); if(WIN32); set(CMAKE_CXX_LINK_FLAGS ""${CMAKE_CXX_LINK_FLAGS} ${OpenMP_CXX_FLAGS}""); else(); target_link_libraries(${PROJECT_NAME} -lm ${OpenMP_CXX_FLAGS}); endif(); message(STATUS ""DiffusionSolver: forcing OpenMP""); else(); message(WARNING ""DiffusionSolver: your compiler does not implement OpenMP, it will be single-threaded and very inefficient...""); endif(). if(NOT WIN32); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-O3""); endif(); endif(). target_compile_options(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_DIFFUSIONSOLVER""); target_link_libraries(${PROJECT_NAME} CImgPlugin). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/DiffusionSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/DiffusionSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/DiffusionSolver/CMakeLists.txt:731,Integrability,message,message,731,"cmake_minimum_required(VERSION 3.22); project(DiffusionSolver VERSION 0.1). find_package(CImgPlugin REQUIRED). set(HEADER_FILES; config.h; DiffusionSolver.h; ). set(SOURCE_FILES; initDiffusionSolver.cpp; DiffusionSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(""${CMAKE_BUILD_TYPE}"" MATCHES ""^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$"") # no need for openmp in debug; find_package(OpenMP QUIET); if (OPENMP_FOUND); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}""); if(WIN32); set(CMAKE_CXX_LINK_FLAGS ""${CMAKE_CXX_LINK_FLAGS} ${OpenMP_CXX_FLAGS}""); else(); target_link_libraries(${PROJECT_NAME} -lm ${OpenMP_CXX_FLAGS}); endif(); message(STATUS ""DiffusionSolver: forcing OpenMP""); else(); message(WARNING ""DiffusionSolver: your compiler does not implement OpenMP, it will be single-threaded and very inefficient...""); endif(). if(NOT WIN32); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-O3""); endif(); endif(). target_compile_options(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_DIFFUSIONSOLVER""); target_link_libraries(${PROJECT_NAME} CImgPlugin). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/DiffusionSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/DiffusionSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/DiffusionSolver/CMakeLists.txt:129,Modifiability,config,config,129,"cmake_minimum_required(VERSION 3.22); project(DiffusionSolver VERSION 0.1). find_package(CImgPlugin REQUIRED). set(HEADER_FILES; config.h; DiffusionSolver.h; ). set(SOURCE_FILES; initDiffusionSolver.cpp; DiffusionSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(""${CMAKE_BUILD_TYPE}"" MATCHES ""^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$"") # no need for openmp in debug; find_package(OpenMP QUIET); if (OPENMP_FOUND); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}""); if(WIN32); set(CMAKE_CXX_LINK_FLAGS ""${CMAKE_CXX_LINK_FLAGS} ${OpenMP_CXX_FLAGS}""); else(); target_link_libraries(${PROJECT_NAME} -lm ${OpenMP_CXX_FLAGS}); endif(); message(STATUS ""DiffusionSolver: forcing OpenMP""); else(); message(WARNING ""DiffusionSolver: your compiler does not implement OpenMP, it will be single-threaded and very inefficient...""); endif(). if(NOT WIN32); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-O3""); endif(); endif(). target_compile_options(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_DIFFUSIONSOLVER""); target_link_libraries(${PROJECT_NAME} CImgPlugin). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/DiffusionSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/DiffusionSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/DiffusionSolver/CMakeLists.txt:1270,Modifiability,plugin,plugins,1270,"cmake_minimum_required(VERSION 3.22); project(DiffusionSolver VERSION 0.1). find_package(CImgPlugin REQUIRED). set(HEADER_FILES; config.h; DiffusionSolver.h; ). set(SOURCE_FILES; initDiffusionSolver.cpp; DiffusionSolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). if(""${CMAKE_BUILD_TYPE}"" MATCHES ""^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$"") # no need for openmp in debug; find_package(OpenMP QUIET); if (OPENMP_FOUND); set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}""); if(WIN32); set(CMAKE_CXX_LINK_FLAGS ""${CMAKE_CXX_LINK_FLAGS} ${OpenMP_CXX_FLAGS}""); else(); target_link_libraries(${PROJECT_NAME} -lm ${OpenMP_CXX_FLAGS}); endif(); message(STATUS ""DiffusionSolver: forcing OpenMP""); else(); message(WARNING ""DiffusionSolver: your compiler does not implement OpenMP, it will be single-threaded and very inefficient...""); endif(). if(NOT WIN32); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-O3""); endif(); endif(). target_compile_options(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_DIFFUSIONSOLVER""); target_link_libraries(${PROJECT_NAME} CImgPlugin). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/DiffusionSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/DiffusionSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:1673,Deployability,configurat,configurations,1673,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:511,Integrability,message,message,511,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:540,Integrability,depend,dependency,540,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:1189,Integrability,depend,dependencies,1189,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:688,Modifiability,config,config,688,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:1054,Modifiability,plugin,plugin,1054,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:1167,Modifiability,plugin,plugin,1167,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:1673,Modifiability,config,configurations,1673,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt:1924,Modifiability,plugin,plugins,1924,"cmake_minimum_required(VERSION 3.22); project(Geomagic VERSION 0.1). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.IO.Mesh REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED). sofa_find_package(OpenHaptics QUIET); if( NOT OPENHAPTICS_FOUND ); message(WARNING ""OpenHaptics dependency not found, Geomagic will miss all haptic features.""); endif(). set(GEOMAGIC_SRC_DIR src/Geomagic). set(HEADER_FILES; ${GEOMAGIC_SRC_DIR}/config.h.in; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.h; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.h; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.h; ); set(SOURCE_FILES	 ; ${GEOMAGIC_SRC_DIR}/GeomagicDriver.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicEmulator.cpp; ${GEOMAGIC_SRC_DIR}/GeomagicVisualModel.cpp; ${GEOMAGIC_SRC_DIR}/initPlugin.cpp; ); set(README_FILES README.txt). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). # Link the plugin library to its dependencies (other libraries).; target_link_libraries(${PROJECT_NAME} Sofa.Component.Controller Sofa.Component.IO.Mesh Sofa.Component.StateContainer Sofa.Component.Mapping.NonLinear Sofa.Component.Haptics Sofa.GL.Component.Rendering3D); if(OPENHAPTICS_FOUND); target_link_libraries(${PROJECT_NAME} ${OPENHAPTICS_LIBRARIES}) ; target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${OPENHAPTICS_INCLUDE_DIR}>""); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/Geomagic/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt:78,Availability,down,download,78,To install this plugin you need:. - to register on the Geomagic website; - to download and install the Geomagic driver (following the documentation and the instructions of INSTALL); - activate the plugin in cmake-gui; - compile it; - enjoy the power of the Geomagic haptic interfaces with SOFA and give a try to the example scene (examples/DemoGeomagic.scn). And let us know about your Geomagic simulations!,MatchSource.DOCS,applications/plugins/Geomagic/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt:3,Deployability,install,install,3,To install this plugin you need:. - to register on the Geomagic website; - to download and install the Geomagic driver (following the documentation and the instructions of INSTALL); - activate the plugin in cmake-gui; - compile it; - enjoy the power of the Geomagic haptic interfaces with SOFA and give a try to the example scene (examples/DemoGeomagic.scn). And let us know about your Geomagic simulations!,MatchSource.DOCS,applications/plugins/Geomagic/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt:91,Deployability,install,install,91,To install this plugin you need:. - to register on the Geomagic website; - to download and install the Geomagic driver (following the documentation and the instructions of INSTALL); - activate the plugin in cmake-gui; - compile it; - enjoy the power of the Geomagic haptic interfaces with SOFA and give a try to the example scene (examples/DemoGeomagic.scn). And let us know about your Geomagic simulations!,MatchSource.DOCS,applications/plugins/Geomagic/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt:244,Energy Efficiency,power,power,244,To install this plugin you need:. - to register on the Geomagic website; - to download and install the Geomagic driver (following the documentation and the instructions of INSTALL); - activate the plugin in cmake-gui; - compile it; - enjoy the power of the Geomagic haptic interfaces with SOFA and give a try to the example scene (examples/DemoGeomagic.scn). And let us know about your Geomagic simulations!,MatchSource.DOCS,applications/plugins/Geomagic/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt:273,Integrability,interface,interfaces,273,To install this plugin you need:. - to register on the Geomagic website; - to download and install the Geomagic driver (following the documentation and the instructions of INSTALL); - activate the plugin in cmake-gui; - compile it; - enjoy the power of the Geomagic haptic interfaces with SOFA and give a try to the example scene (examples/DemoGeomagic.scn). And let us know about your Geomagic simulations!,MatchSource.DOCS,applications/plugins/Geomagic/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt:16,Modifiability,plugin,plugin,16,To install this plugin you need:. - to register on the Geomagic website; - to download and install the Geomagic driver (following the documentation and the instructions of INSTALL); - activate the plugin in cmake-gui; - compile it; - enjoy the power of the Geomagic haptic interfaces with SOFA and give a try to the example scene (examples/DemoGeomagic.scn). And let us know about your Geomagic simulations!,MatchSource.DOCS,applications/plugins/Geomagic/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt:197,Modifiability,plugin,plugin,197,To install this plugin you need:. - to register on the Geomagic website; - to download and install the Geomagic driver (following the documentation and the instructions of INSTALL); - activate the plugin in cmake-gui; - compile it; - enjoy the power of the Geomagic haptic interfaces with SOFA and give a try to the example scene (examples/DemoGeomagic.scn). And let us know about your Geomagic simulations!,MatchSource.DOCS,applications/plugins/Geomagic/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Geomagic/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/CMakeLists.txt:966,Deployability,install,install,966,"cmake_minimum_required(VERSION 3.22); project(Haption). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED). set(HEADER_FILES; HaptionDriver.h; ). set(SOURCE_FILES; initHaption.cpp ; HaptionDriver.cpp; initHaption.cpp; ). set(README_FILES; README.md; PluginHaption.txt; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_HAPTIONPLUGIN""); target_link_libraries(${PROJECT_NAME}; Sofa.Component.Haptics; Sofa.GL.Component.Rendering3D; Sofa.Component.Mapping.NonLinear; Sofa.Component.Controller; Sofa.Component.StateContainer; ); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT Haption_libraries; EXPORT HaptionTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY exemple/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Haption/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/CMakeLists.txt:1127,Deployability,install,install,1127,"cmake_minimum_required(VERSION 3.22); project(Haption). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED). set(HEADER_FILES; HaptionDriver.h; ). set(SOURCE_FILES; initHaption.cpp ; HaptionDriver.cpp; initHaption.cpp; ). set(README_FILES; README.md; PluginHaption.txt; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_HAPTIONPLUGIN""); target_link_libraries(${PROJECT_NAME}; Sofa.Component.Haptics; Sofa.GL.Component.Rendering3D; Sofa.Component.Mapping.NonLinear; Sofa.Component.Controller; Sofa.Component.StateContainer; ); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT Haption_libraries; EXPORT HaptionTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY exemple/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Haption/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/CMakeLists.txt:1177,Modifiability,plugin,plugins,1177,"cmake_minimum_required(VERSION 3.22); project(Haption). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED). set(HEADER_FILES; HaptionDriver.h; ). set(SOURCE_FILES; initHaption.cpp ; HaptionDriver.cpp; initHaption.cpp; ). set(README_FILES; README.md; PluginHaption.txt; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_HAPTIONPLUGIN""); target_link_libraries(${PROJECT_NAME}; Sofa.Component.Haptics; Sofa.GL.Component.Rendering3D; Sofa.Component.Mapping.NonLinear; Sofa.Component.Controller; Sofa.Component.StateContainer; ); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT Haption_libraries; EXPORT HaptionTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY exemple/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Haption/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Haption/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt:2128,Deployability,install,install,2128,"ToMeshEngine.h; ImageViewer.h; ). set(SOURCE_FILES; initImage.cpp; ). if(NOT PLUGIN_IMAGE_COMPILE_SET STREQUAL ""none""); list(APPEND SOURCE_FILES; CollisionToCarvingEngine.cpp; ImageAccumulator.cpp; ImageContainer.cpp; GenerateImage.cpp; ImageDataDisplay.cpp; ImageExporter.cpp; ImageFilter.cpp; ImageOperation.cpp; ImageSampler.cpp; ImageToRigidMassEngine.cpp; ImageTransform.cpp; ImageTransformEngine.cpp; ImageTypes.cpp; ImageValuesFromPositions.cpp; ImageCoordValuesFromPositions.cpp; MarchingCubesEngine.cpp; MergeImages.cpp; MeshToImageEngine.cpp; TransferFunction.cpp; VoronoiToMeshEngine.cpp; DepthMapToMeshEngine.cpp; ImageViewer.cpp; ); endif(). set(README_FILES; image.txt; ). if(SofaPython_FOUND); set(PYTHON_FILES; python/SofaImage/API.py; python/SofaImage/__init__.py; ); list(APPEND SOURCE_FILES python/Binding_ImageData.cpp); list(APPEND HEADER_FILES python/Binding_ImageData.h python/Binding_ImageData.inl). # Config files and install rules for pythons scripts; sofa_install_pythonscripts(PLUGIN_NAME ${PROJECT_NAME} PYTHONSCRIPTS_SOURCE_DIR ""python""); endif(). if(Sofa.GL_FOUND); if(FREENECT_FOUND); list(APPEND HEADER_FILES Kinect.h); list(APPEND SOURCE_FILES Kinect.cpp); message(STATUS ""image: found the freenect library""); else(); message(STATUS ""image: could not find the freenect library, won't build the Kinect component""); endif(); endif(). # OpenMP is bugged in image, forcing it to be single threaded for now; if(SOFA_OPENMP); message( WARNING ""image: deactivating OpenMP"" ); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}); endif(). set(PLUGIN_IMAGE_COMPILE_SET_VALUE 0) # none; if(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""standard""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 1); elseif(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""full""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${PYTHON",MatchSource.DOCS,applications/plugins/image/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt:4123,Deployability,configurat,configurations,4123,"ES Kinect.h); list(APPEND SOURCE_FILES Kinect.cpp); message(STATUS ""image: found the freenect library""); else(); message(STATUS ""image: could not find the freenect library, won't build the Kinect component""); endif(); endif(). # OpenMP is bugged in image, forcing it to be single threaded for now; if(SOFA_OPENMP); message( WARNING ""image: deactivating OpenMP"" ); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}); endif(). set(PLUGIN_IMAGE_COMPILE_SET_VALUE 0) # none; if(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""standard""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 1); elseif(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""full""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${PYTHON_FILES}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_IMAGE""); target_link_libraries(${PROJECT_NAME} Sofa.Core CImgPlugin Sofa.Component.Visual). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL) ; endif(). if(FREENECT_FOUND); target_link_libraries(${PROJECT_NAME} freenect freenect_sync); target_include_directories(${PROJECT_NAME} PUBLIC ""${FREENECT_INCLUDE_DIR}""); endif(). if(ZLIB_FOUND); target_link_libraries(${PROJECT_NAME} ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(); endif(). if(SofaPython_FOUND); target_link_libraries(${PROJECT_NAME} SofaPython) ; endif(). if(MultiThreading_FOUND); target_link_libraries(${PROJECT_NAME} MultiThreading); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(image_test); endif(). if(Sofa.GUI.Qt_FOUND); add_subdirectory(image_gui); endif(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; PACKAGE_VERSION ${PROJECT_VERSION}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/image/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt:2376,Integrability,message,message,2376,"p; ImageFilter.cpp; ImageOperation.cpp; ImageSampler.cpp; ImageToRigidMassEngine.cpp; ImageTransform.cpp; ImageTransformEngine.cpp; ImageTypes.cpp; ImageValuesFromPositions.cpp; ImageCoordValuesFromPositions.cpp; MarchingCubesEngine.cpp; MergeImages.cpp; MeshToImageEngine.cpp; TransferFunction.cpp; VoronoiToMeshEngine.cpp; DepthMapToMeshEngine.cpp; ImageViewer.cpp; ); endif(). set(README_FILES; image.txt; ). if(SofaPython_FOUND); set(PYTHON_FILES; python/SofaImage/API.py; python/SofaImage/__init__.py; ); list(APPEND SOURCE_FILES python/Binding_ImageData.cpp); list(APPEND HEADER_FILES python/Binding_ImageData.h python/Binding_ImageData.inl). # Config files and install rules for pythons scripts; sofa_install_pythonscripts(PLUGIN_NAME ${PROJECT_NAME} PYTHONSCRIPTS_SOURCE_DIR ""python""); endif(). if(Sofa.GL_FOUND); if(FREENECT_FOUND); list(APPEND HEADER_FILES Kinect.h); list(APPEND SOURCE_FILES Kinect.cpp); message(STATUS ""image: found the freenect library""); else(); message(STATUS ""image: could not find the freenect library, won't build the Kinect component""); endif(); endif(). # OpenMP is bugged in image, forcing it to be single threaded for now; if(SOFA_OPENMP); message( WARNING ""image: deactivating OpenMP"" ); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}); endif(). set(PLUGIN_IMAGE_COMPILE_SET_VALUE 0) # none; if(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""standard""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 1); elseif(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""full""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${PYTHON_FILES}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_IMAGE""); target_link_libraries(${PROJECT_NAME} Sofa.Core CImgPlugin Sofa.Component.Visual). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL) ; endif(). if(FREENECT_FOUND); target_link",MatchSource.DOCS,applications/plugins/image/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt:2437,Integrability,message,message,2437,"p; ImageFilter.cpp; ImageOperation.cpp; ImageSampler.cpp; ImageToRigidMassEngine.cpp; ImageTransform.cpp; ImageTransformEngine.cpp; ImageTypes.cpp; ImageValuesFromPositions.cpp; ImageCoordValuesFromPositions.cpp; MarchingCubesEngine.cpp; MergeImages.cpp; MeshToImageEngine.cpp; TransferFunction.cpp; VoronoiToMeshEngine.cpp; DepthMapToMeshEngine.cpp; ImageViewer.cpp; ); endif(). set(README_FILES; image.txt; ). if(SofaPython_FOUND); set(PYTHON_FILES; python/SofaImage/API.py; python/SofaImage/__init__.py; ); list(APPEND SOURCE_FILES python/Binding_ImageData.cpp); list(APPEND HEADER_FILES python/Binding_ImageData.h python/Binding_ImageData.inl). # Config files and install rules for pythons scripts; sofa_install_pythonscripts(PLUGIN_NAME ${PROJECT_NAME} PYTHONSCRIPTS_SOURCE_DIR ""python""); endif(). if(Sofa.GL_FOUND); if(FREENECT_FOUND); list(APPEND HEADER_FILES Kinect.h); list(APPEND SOURCE_FILES Kinect.cpp); message(STATUS ""image: found the freenect library""); else(); message(STATUS ""image: could not find the freenect library, won't build the Kinect component""); endif(); endif(). # OpenMP is bugged in image, forcing it to be single threaded for now; if(SOFA_OPENMP); message( WARNING ""image: deactivating OpenMP"" ); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}); endif(). set(PLUGIN_IMAGE_COMPILE_SET_VALUE 0) # none; if(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""standard""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 1); elseif(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""full""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${PYTHON_FILES}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_IMAGE""); target_link_libraries(${PROJECT_NAME} Sofa.Core CImgPlugin Sofa.Component.Visual). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL) ; endif(). if(FREENECT_FOUND); target_link",MatchSource.DOCS,applications/plugins/image/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt:2639,Integrability,message,message,2639,"ages.cpp; MeshToImageEngine.cpp; TransferFunction.cpp; VoronoiToMeshEngine.cpp; DepthMapToMeshEngine.cpp; ImageViewer.cpp; ); endif(). set(README_FILES; image.txt; ). if(SofaPython_FOUND); set(PYTHON_FILES; python/SofaImage/API.py; python/SofaImage/__init__.py; ); list(APPEND SOURCE_FILES python/Binding_ImageData.cpp); list(APPEND HEADER_FILES python/Binding_ImageData.h python/Binding_ImageData.inl). # Config files and install rules for pythons scripts; sofa_install_pythonscripts(PLUGIN_NAME ${PROJECT_NAME} PYTHONSCRIPTS_SOURCE_DIR ""python""); endif(). if(Sofa.GL_FOUND); if(FREENECT_FOUND); list(APPEND HEADER_FILES Kinect.h); list(APPEND SOURCE_FILES Kinect.cpp); message(STATUS ""image: found the freenect library""); else(); message(STATUS ""image: could not find the freenect library, won't build the Kinect component""); endif(); endif(). # OpenMP is bugged in image, forcing it to be single threaded for now; if(SOFA_OPENMP); message( WARNING ""image: deactivating OpenMP"" ); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}); endif(). set(PLUGIN_IMAGE_COMPILE_SET_VALUE 0) # none; if(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""standard""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 1); elseif(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""full""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${PYTHON_FILES}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_IMAGE""); target_link_libraries(${PROJECT_NAME} Sofa.Core CImgPlugin Sofa.Component.Visual). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL) ; endif(). if(FREENECT_FOUND); target_link_libraries(${PROJECT_NAME} freenect freenect_sync); target_include_directories(${PROJECT_NAME} PUBLIC ""${FREENECT_INCLUDE_DIR}""); endif(). if(ZLIB_FOUND); target_link_libraries(${PROJECT_NAME} ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows);",MatchSource.DOCS,applications/plugins/image/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt:692,Modifiability,config,config,692,"cmake_minimum_required(VERSION 3.22); project(image VERSION 0.1). set(PLUGIN_IMAGE_COMPILE_SET ""standard"" CACHE STRING ""Set of image type to compile. Values are: none, standard (default), full.""); set_property(CACHE PLUGIN_IMAGE_COMPILE_SET PROPERTY STRINGS none standard full). find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Component.Visual REQUIRED); sofa_find_package(CImgPlugin REQUIRED). sofa_find_package(Sofa.GL QUIET); sofa_find_package(Sofa.GUI.Qt QUIET); sofa_find_package(SofaPython QUIET); sofa_find_package(MultiThreading QUIET); sofa_find_package(ZLIB); sofa_find_package(Freenect QUIET). list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}). set(HEADER_FILES; config.h.in; CImgData.h; CollisionToCarvingEngine.h; Containers.h; ImageAccumulator.h; ImageAlgorithms.h; ImageContainer.h; GenerateImage.h; ImageDataDisplay.h; ImageExporter.h; ImageFilter.h; ImageOperation.h; ImageSampler.h; ImageToRigidMassEngine.h; ImageTransform.h; ImageTransformEngine.h; ImageTypes.h; ImageValuesFromPositions.h; ImageCoordValuesFromPositions.h; MarchingCubesEngine.h; MergeImages.h; MeshToImageEngine.h; TransferFunction.h; VectorVis.h; VoronoiToMeshEngine.h; DepthMapToMeshEngine.h; ImageViewer.h; ). set(SOURCE_FILES; initImage.cpp; ). if(NOT PLUGIN_IMAGE_COMPILE_SET STREQUAL ""none""); list(APPEND SOURCE_FILES; CollisionToCarvingEngine.cpp; ImageAccumulator.cpp; ImageContainer.cpp; GenerateImage.cpp; ImageDataDisplay.cpp; ImageExporter.cpp; ImageFilter.cpp; ImageOperation.cpp; ImageSampler.cpp; ImageToRigidMassEngine.cpp; ImageTransform.cpp; ImageTransformEngine.cpp; ImageTypes.cpp; ImageValuesFromPositions.cpp; ImageCoordValuesFromPositions.cpp; MarchingCubesEngine.cpp; MergeImages.cpp; MeshToImageEngine.cpp; TransferFunction.cpp; VoronoiToMeshEngine.cpp; DepthMapToMeshEngine.cpp; ImageViewer.cpp; ); endif(). set(README_FILES; image.txt; ). if(SofaPython_FOUND); set(PYTHON_FILES; python/SofaImage/API.py; python/SofaImage/__init__.py; ); list(APPEND SOURCE_FILES python",MatchSource.DOCS,applications/plugins/image/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt:4123,Modifiability,config,configurations,4123,"ES Kinect.h); list(APPEND SOURCE_FILES Kinect.cpp); message(STATUS ""image: found the freenect library""); else(); message(STATUS ""image: could not find the freenect library, won't build the Kinect component""); endif(); endif(). # OpenMP is bugged in image, forcing it to be single threaded for now; if(SOFA_OPENMP); message( WARNING ""image: deactivating OpenMP"" ); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}); endif(). set(PLUGIN_IMAGE_COMPILE_SET_VALUE 0) # none; if(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""standard""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 1); elseif(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""full""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${PYTHON_FILES}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_IMAGE""); target_link_libraries(${PROJECT_NAME} Sofa.Core CImgPlugin Sofa.Component.Visual). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL) ; endif(). if(FREENECT_FOUND); target_link_libraries(${PROJECT_NAME} freenect freenect_sync); target_include_directories(${PROJECT_NAME} PUBLIC ""${FREENECT_INCLUDE_DIR}""); endif(). if(ZLIB_FOUND); target_link_libraries(${PROJECT_NAME} ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(); endif(). if(SofaPython_FOUND); target_link_libraries(${PROJECT_NAME} SofaPython) ; endif(). if(MultiThreading_FOUND); target_link_libraries(${PROJECT_NAME} MultiThreading); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(image_test); endif(). if(Sofa.GUI.Qt_FOUND); add_subdirectory(image_gui); endif(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; PACKAGE_VERSION ${PROJECT_VERSION}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/image/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt:4311,Modifiability,plugin,plugins,4311,"ES Kinect.h); list(APPEND SOURCE_FILES Kinect.cpp); message(STATUS ""image: found the freenect library""); else(); message(STATUS ""image: could not find the freenect library, won't build the Kinect component""); endif(); endif(). # OpenMP is bugged in image, forcing it to be single threaded for now; if(SOFA_OPENMP); message( WARNING ""image: deactivating OpenMP"" ); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS}); string(REPLACE ""${OpenMP_CXX_FLAGS}"" """" CMAKE_CXX_LINK_FLAGS ${CMAKE_CXX_LINK_FLAGS}); endif(). set(PLUGIN_IMAGE_COMPILE_SET_VALUE 0) # none; if(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""standard""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 1); elseif(PLUGIN_IMAGE_COMPILE_SET STREQUAL ""full""); set(PLUGIN_IMAGE_COMPILE_SET_VALUE 2); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${PYTHON_FILES}); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_IMAGE""); target_link_libraries(${PROJECT_NAME} Sofa.Core CImgPlugin Sofa.Component.Visual). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL) ; endif(). if(FREENECT_FOUND); target_link_libraries(${PROJECT_NAME} freenect freenect_sync); target_include_directories(${PROJECT_NAME} PUBLIC ""${FREENECT_INCLUDE_DIR}""); endif(). if(ZLIB_FOUND); target_link_libraries(${PROJECT_NAME} ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(); endif(). if(SofaPython_FOUND); target_link_libraries(${PROJECT_NAME} SofaPython) ; endif(). if(MultiThreading_FOUND); target_link_libraries(${PROJECT_NAME} MultiThreading); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(image_test); endif(). if(Sofa.GUI.Qt_FOUND); add_subdirectory(image_gui); endif(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; PACKAGE_VERSION ${PROJECT_VERSION}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/image/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/README_image.txt:14,Modifiability,plugin,plugin,14,"Image: a Sofa plugin for 1d, 2d and 3d image manipulation.; Authors: Benjamin Gilles, Matthieu Nesme; License: Same as the core os Sofa; Documentation: see doc/image_2013-1.pdf ; ",MatchSource.DOCS,applications/plugins/image/README_image.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/README_image.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/CMakeLists.txt:1372,Deployability,configurat,configurations,1372,"cmake_minimum_required(VERSION 3.22); project(LeapMotion). set(LEAPMOTION_MAJOR_VERSION 0); set(LEAPMOTION_MINOR_VERSION 1); set(LEAPMOTION_VERSION ${LEAPMOTION_MAJOR_VERSION}.${LEAPMOTION_MINOR_VERSION}). set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""). find_package(SofaFramework REQUIRED); find_package(SofaBase REQUIRED); find_package(SofaGeneral REQUIRED); find_package(SofaOpenglVisual REQUIRED); find_package(Leap REQUIRED). include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src); set(LEAPMOTION_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/src). set(HEADER_FILES; initLeapMotion.h; src/LeapMotionDriver.h; src/MyListener.h; ). set(SOURCE_FILES; initLeapMotion.cpp; src/LeapMotionDriver.cpp; src/MyListener.cpp; ). add_library(${PROJECT_NAME} SHARED ${MOC_FILES} ${SOURCE_FILES} ${README_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${LEAPMOTION_INCLUDE_DIRS}>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${LEAPMOTION_INCLUDE_DIRS}/..>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${LEAP_INCLUDE_DIR}>""). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${LEAPMOTION_VERSION}). target_link_libraries(${PROJECT_NAME} Sofa.Helper SofaOpenglVisual SofaUserInteraction ${LEAP_LIBRARY}). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR src; ). ",MatchSource.DOCS,applications/plugins/LeapMotion/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/CMakeLists.txt:1372,Modifiability,config,configurations,1372,"cmake_minimum_required(VERSION 3.22); project(LeapMotion). set(LEAPMOTION_MAJOR_VERSION 0); set(LEAPMOTION_MINOR_VERSION 1); set(LEAPMOTION_VERSION ${LEAPMOTION_MAJOR_VERSION}.${LEAPMOTION_MINOR_VERSION}). set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""). find_package(SofaFramework REQUIRED); find_package(SofaBase REQUIRED); find_package(SofaGeneral REQUIRED); find_package(SofaOpenglVisual REQUIRED); find_package(Leap REQUIRED). include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src); set(LEAPMOTION_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/src). set(HEADER_FILES; initLeapMotion.h; src/LeapMotionDriver.h; src/MyListener.h; ). set(SOURCE_FILES; initLeapMotion.cpp; src/LeapMotionDriver.cpp; src/MyListener.cpp; ). add_library(${PROJECT_NAME} SHARED ${MOC_FILES} ${SOURCE_FILES} ${README_FILES}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${LEAPMOTION_INCLUDE_DIRS}>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${LEAPMOTION_INCLUDE_DIRS}/..>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${LEAP_INCLUDE_DIR}>""). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${LEAPMOTION_VERSION}). target_link_libraries(${PROJECT_NAME} Sofa.Helper SofaOpenglVisual SofaUserInteraction ${LEAP_LIBRARY}). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR src; ). ",MatchSource.DOCS,applications/plugins/LeapMotion/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt:3,Deployability,install,install,3,To install this plugin you need:. - to install the driver LeapMotion: https://www.leapmotion.com/setup (SDK); - activate the plugin in cmake-gui; - enjoy the power of the LeapMotion with SOFA and give a try to the example scene (examples/buffon.scn). And let us know about your Leap simulations!,MatchSource.DOCS,applications/plugins/LeapMotion/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt:39,Deployability,install,install,39,To install this plugin you need:. - to install the driver LeapMotion: https://www.leapmotion.com/setup (SDK); - activate the plugin in cmake-gui; - enjoy the power of the LeapMotion with SOFA and give a try to the example scene (examples/buffon.scn). And let us know about your Leap simulations!,MatchSource.DOCS,applications/plugins/LeapMotion/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt:158,Energy Efficiency,power,power,158,To install this plugin you need:. - to install the driver LeapMotion: https://www.leapmotion.com/setup (SDK); - activate the plugin in cmake-gui; - enjoy the power of the LeapMotion with SOFA and give a try to the example scene (examples/buffon.scn). And let us know about your Leap simulations!,MatchSource.DOCS,applications/plugins/LeapMotion/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt:16,Modifiability,plugin,plugin,16,To install this plugin you need:. - to install the driver LeapMotion: https://www.leapmotion.com/setup (SDK); - activate the plugin in cmake-gui; - enjoy the power of the LeapMotion with SOFA and give a try to the example scene (examples/buffon.scn). And let us know about your Leap simulations!,MatchSource.DOCS,applications/plugins/LeapMotion/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt:125,Modifiability,plugin,plugin,125,To install this plugin you need:. - to install the driver LeapMotion: https://www.leapmotion.com/setup (SDK); - activate the plugin in cmake-gui; - enjoy the power of the LeapMotion with SOFA and give a try to the example scene (examples/buffon.scn). And let us know about your Leap simulations!,MatchSource.DOCS,applications/plugins/LeapMotion/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/LeapMotion/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:4638,Deployability,configurat,configurations,4638,"Tasks.h; src/MultiThreading/BeamLinearMapping_mt.h; src/MultiThreading/BeamLinearMapping_mt.inl; src/MultiThreading/BeamLinearMapping_tasks.inl; src/MultiThreading/ParallelBVHNarrowPhase.h; src/MultiThreading/ParallelBruteForceBroadPhase.h; src/MultiThreading/ParallelHexahedronFEMForceField.h; src/MultiThreading/ParallelHexahedronFEMForceField.inl; ); endif(). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.FEM.Elastic); target_link_libraries(${PROJECT_NAME} Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.Spring); target_link_libraries(${PROJECT_NAME} Sofa.Component.LinearSolver.Iterative). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(MULTITHREADING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(MULTITHREADING_BUILD_TESTS); enable_testing(); add_subdirectory(test); endif(); ",MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:112,Modifiability,config,config,112,cmake_minimum_required(VERSION 3.22); project(MultiThreading VERSION 0.1). set(HEADER_FILES; src/MultiThreading/config.h.in; src/MultiThreading/initMultiThreading.h; src/MultiThreading/DataExchange.h; src/MultiThreading/DataExchange.inl; src/MultiThreading/MeanComputation.h; src/MultiThreading/MeanComputation.inl; src/MultiThreading/component/animationloop/AnimationLoopParallelScheduler.h; src/MultiThreading/component/animationloop/StepTask.h; src/MultiThreading/component/collision/detection/algorithm/ParallelBVHNarrowPhase.h; src/MultiThreading/component/collision/detection/algorithm/ParallelBruteForceBroadPhase.h; src/MultiThreading/component/linearsolver/iterative/ParallelCGLinearSolver.h; src/MultiThreading/component/linearsolver/iterative/ParallelCGLinearSolver.inl; src/MultiThreading/component/linearsolver/iterative/ParallelCompressedRowSparseMatrixMechanical.h; src/MultiThreading/component/mapping/linear/BeamLinearMapping_mt.h; src/MultiThreading/component/mapping/linear/BeamLinearMapping_mt.inl; src/MultiThreading/component/mapping/linear/BeamLinearMapping_tasks.inl; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.h; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.h; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.inl; src/MultiThreading/SceneCheckMultithreading.h; src/MultiThreading/ParallelImplementationsRegistry.h; src/MultiThreading/TaskSchedulerUser.h; ). set(SOURCE_FILES; src/MultiThreading/initMultiThreading.c,MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:4638,Modifiability,config,configurations,4638,"Tasks.h; src/MultiThreading/BeamLinearMapping_mt.h; src/MultiThreading/BeamLinearMapping_mt.inl; src/MultiThreading/BeamLinearMapping_tasks.inl; src/MultiThreading/ParallelBVHNarrowPhase.h; src/MultiThreading/ParallelBruteForceBroadPhase.h; src/MultiThreading/ParallelHexahedronFEMForceField.h; src/MultiThreading/ParallelHexahedronFEMForceField.inl; ); endif(). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.FEM.Elastic); target_link_libraries(${PROJECT_NAME} Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.Spring); target_link_libraries(${PROJECT_NAME} Sofa.Component.LinearSolver.Iterative). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(MULTITHREADING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(MULTITHREADING_BUILD_TESTS); enable_testing(); add_subdirectory(test); endif(); ",MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:4852,Modifiability,plugin,plugins,4852,"Tasks.h; src/MultiThreading/BeamLinearMapping_mt.h; src/MultiThreading/BeamLinearMapping_mt.inl; src/MultiThreading/BeamLinearMapping_tasks.inl; src/MultiThreading/ParallelBVHNarrowPhase.h; src/MultiThreading/ParallelBruteForceBroadPhase.h; src/MultiThreading/ParallelHexahedronFEMForceField.h; src/MultiThreading/ParallelHexahedronFEMForceField.inl; ); endif(). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.FEM.Elastic); target_link_libraries(${PROJECT_NAME} Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.Spring); target_link_libraries(${PROJECT_NAME} Sofa.Component.LinearSolver.Iterative). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(MULTITHREADING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(MULTITHREADING_BUILD_TESTS); enable_testing(); add_subdirectory(test); endif(); ",MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:487,Safety,detect,detection,487,cmake_minimum_required(VERSION 3.22); project(MultiThreading VERSION 0.1). set(HEADER_FILES; src/MultiThreading/config.h.in; src/MultiThreading/initMultiThreading.h; src/MultiThreading/DataExchange.h; src/MultiThreading/DataExchange.inl; src/MultiThreading/MeanComputation.h; src/MultiThreading/MeanComputation.inl; src/MultiThreading/component/animationloop/AnimationLoopParallelScheduler.h; src/MultiThreading/component/animationloop/StepTask.h; src/MultiThreading/component/collision/detection/algorithm/ParallelBVHNarrowPhase.h; src/MultiThreading/component/collision/detection/algorithm/ParallelBruteForceBroadPhase.h; src/MultiThreading/component/linearsolver/iterative/ParallelCGLinearSolver.h; src/MultiThreading/component/linearsolver/iterative/ParallelCGLinearSolver.inl; src/MultiThreading/component/linearsolver/iterative/ParallelCompressedRowSparseMatrixMechanical.h; src/MultiThreading/component/mapping/linear/BeamLinearMapping_mt.h; src/MultiThreading/component/mapping/linear/BeamLinearMapping_mt.inl; src/MultiThreading/component/mapping/linear/BeamLinearMapping_tasks.inl; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.h; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.h; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.inl; src/MultiThreading/SceneCheckMultithreading.h; src/MultiThreading/ParallelImplementationsRegistry.h; src/MultiThreading/TaskSchedulerUser.h; ). set(SOURCE_FILES; src/MultiThreading/initMultiThreading.c,MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:572,Safety,detect,detection,572,cmake_minimum_required(VERSION 3.22); project(MultiThreading VERSION 0.1). set(HEADER_FILES; src/MultiThreading/config.h.in; src/MultiThreading/initMultiThreading.h; src/MultiThreading/DataExchange.h; src/MultiThreading/DataExchange.inl; src/MultiThreading/MeanComputation.h; src/MultiThreading/MeanComputation.inl; src/MultiThreading/component/animationloop/AnimationLoopParallelScheduler.h; src/MultiThreading/component/animationloop/StepTask.h; src/MultiThreading/component/collision/detection/algorithm/ParallelBVHNarrowPhase.h; src/MultiThreading/component/collision/detection/algorithm/ParallelBruteForceBroadPhase.h; src/MultiThreading/component/linearsolver/iterative/ParallelCGLinearSolver.h; src/MultiThreading/component/linearsolver/iterative/ParallelCGLinearSolver.inl; src/MultiThreading/component/linearsolver/iterative/ParallelCompressedRowSparseMatrixMechanical.h; src/MultiThreading/component/mapping/linear/BeamLinearMapping_mt.h; src/MultiThreading/component/mapping/linear/BeamLinearMapping_mt.inl; src/MultiThreading/component/mapping/linear/BeamLinearMapping_tasks.inl; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.h; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.h; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.inl; src/MultiThreading/SceneCheckMultithreading.h; src/MultiThreading/ParallelImplementationsRegistry.h; src/MultiThreading/TaskSchedulerUser.h; ). set(SOURCE_FILES; src/MultiThreading/initMultiThreading.c,MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:2200,Safety,detect,detection,2200,ng/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.h; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.inl; src/MultiThreading/SceneCheckMultithreading.h; src/MultiThreading/ParallelImplementationsRegistry.h; src/MultiThreading/TaskSchedulerUser.h; ). set(SOURCE_FILES; src/MultiThreading/initMultiThreading.cpp; src/MultiThreading/DataExchange.cpp; src/MultiThreading/MeanComputation.cpp; src/MultiThreading/component/animationloop/AnimationLoopParallelScheduler.cpp; src/MultiThreading/component/collision/detection/algorithm/ParallelBVHNarrowPhase.cpp; src/MultiThreading/component/collision/detection/algorithm/ParallelBruteForceBroadPhase.cpp; src/MultiThreading/component/linearsolver/iterative/ParallelCGLinearSolver.cpp; src/MultiThreading/component/mapping/linear/BeamLinearMapping_mt.cpp; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.cpp; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.cpp; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.cpp; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.cpp; src/MultiThreading/SceneCheckMultithreading.cpp; src/MultiThreading/ParallelImplementationsRegistry.cpp; src/MultiThreading/TaskSchedulerUser.cpp; ). find_package(Sofa.Config REQUIRED); if(SOFA_ENABLE_LEGACY_HEADERS); list(APPEND HEADER_FILES; src/MultiThreading/AnimationLoopParallelScheduler.h; src/MultiThreading/AnimationLoopTasks.h; src/MultiThre,MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:2287,Safety,detect,detection,2287,ading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.h; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.inl; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.h; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.inl; src/MultiThreading/SceneCheckMultithreading.h; src/MultiThreading/ParallelImplementationsRegistry.h; src/MultiThreading/TaskSchedulerUser.h; ). set(SOURCE_FILES; src/MultiThreading/initMultiThreading.cpp; src/MultiThreading/DataExchange.cpp; src/MultiThreading/MeanComputation.cpp; src/MultiThreading/component/animationloop/AnimationLoopParallelScheduler.cpp; src/MultiThreading/component/collision/detection/algorithm/ParallelBVHNarrowPhase.cpp; src/MultiThreading/component/collision/detection/algorithm/ParallelBruteForceBroadPhase.cpp; src/MultiThreading/component/linearsolver/iterative/ParallelCGLinearSolver.cpp; src/MultiThreading/component/mapping/linear/BeamLinearMapping_mt.cpp; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelHexahedronFEMForceField.cpp; src/MultiThreading/component/solidmechanics/fem/elastic/ParallelTetrahedronFEMForceField.cpp; src/MultiThreading/component/solidmechanics/spring/ParallelStiffSpringForceField.cpp; src/MultiThreading/component/solidmechanics/spring/ParallelMeshSpringForceField.cpp; src/MultiThreading/SceneCheckMultithreading.cpp; src/MultiThreading/ParallelImplementationsRegistry.cpp; src/MultiThreading/TaskSchedulerUser.cpp; ). find_package(Sofa.Config REQUIRED); if(SOFA_ENABLE_LEGACY_HEADERS); list(APPEND HEADER_FILES; src/MultiThreading/AnimationLoopParallelScheduler.h; src/MultiThreading/AnimationLoopTasks.h; src/MultiThreading/BeamLinearMapping_mt.h; src/MultiThreading/BeamLinearMapping_mt.inl; src/MultiThread,MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:4926,Testability,test,tests,4926,"Tasks.h; src/MultiThreading/BeamLinearMapping_mt.h; src/MultiThreading/BeamLinearMapping_mt.inl; src/MultiThreading/BeamLinearMapping_tasks.inl; src/MultiThreading/ParallelBVHNarrowPhase.h; src/MultiThreading/ParallelBruteForceBroadPhase.h; src/MultiThreading/ParallelHexahedronFEMForceField.h; src/MultiThreading/ParallelHexahedronFEMForceField.inl; ); endif(). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.FEM.Elastic); target_link_libraries(${PROJECT_NAME} Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.Spring); target_link_libraries(${PROJECT_NAME} Sofa.Component.LinearSolver.Iterative). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(MULTITHREADING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(MULTITHREADING_BUILD_TESTS); enable_testing(); add_subdirectory(test); endif(); ",MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:5028,Testability,test,tests,5028,"Tasks.h; src/MultiThreading/BeamLinearMapping_mt.h; src/MultiThreading/BeamLinearMapping_mt.inl; src/MultiThreading/BeamLinearMapping_tasks.inl; src/MultiThreading/ParallelBVHNarrowPhase.h; src/MultiThreading/ParallelBruteForceBroadPhase.h; src/MultiThreading/ParallelHexahedronFEMForceField.h; src/MultiThreading/ParallelHexahedronFEMForceField.inl; ); endif(). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.FEM.Elastic); target_link_libraries(${PROJECT_NAME} Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.Spring); target_link_libraries(${PROJECT_NAME} Sofa.Component.LinearSolver.Iterative). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(MULTITHREADING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(MULTITHREADING_BUILD_TESTS); enable_testing(); add_subdirectory(test); endif(); ",MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt:5162,Testability,test,test,5162,"Tasks.h; src/MultiThreading/BeamLinearMapping_mt.h; src/MultiThreading/BeamLinearMapping_mt.inl; src/MultiThreading/BeamLinearMapping_tasks.inl; src/MultiThreading/ParallelBVHNarrowPhase.h; src/MultiThreading/ParallelBruteForceBroadPhase.h; src/MultiThreading/ParallelHexahedronFEMForceField.h; src/MultiThreading/ParallelHexahedronFEMForceField.inl; ); endif(). find_package(Sofa.Simulation.Common REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.FEM.Elastic REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.SolidMechanics.Spring REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Iterative REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} Sofa.Component.Collision.Detection.Algorithm); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.FEM.Elastic); target_link_libraries(${PROJECT_NAME} Sofa.Component.Mapping.Linear); target_link_libraries(${PROJECT_NAME} Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} Sofa.Component.SolidMechanics.Spring); target_link_libraries(${PROJECT_NAME} Sofa.Component.LinearSolver.Iterative). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(MULTITHREADING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(MULTITHREADING_BUILD_TESTS); enable_testing(); add_subdirectory(test); endif(); ",MatchSource.DOCS,applications/plugins/MultiThreading/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/MultiThreading/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PersistentContact/CMakeLists.txt:1177,Deployability,install,install,1177,"cmake_minimum_required(VERSION 3.22); project(PersistentContact). set(HEADER_FILES; config.h; PersistentContactBarycentricMapping.h; PersistentContactBarycentricMapping.inl; PersistentContactMapping.h; PersistentContactRigidMapping.h; PersistentContactRigidMapping.inl; PersistentFrictionContact.h; PersistentFrictionContact.inl; PersistentUnilateralInteractionConstraint.h; PersistentUnilateralInteractionConstraint.inl; ). set(SOURCE_FILES; PersistentContactBarycentricMapping.cpp; PersistentContactMapping.cpp; PersistentContactRigidMapping.cpp; PersistentFrictionContact.cpp; PersistentUnilateralInteractionConstraint.cpp; initPersistentContact.cpp; ). set(README_FILES PersistentContact.txt). set(README_FILES; 	PersistentContact.txt). find_package(SofaBaseMechanics REQUIRED); find_package(SofaRigid REQUIRED); find_package(SofaConstraint REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_PERSISTENTCONTACT""); target_link_libraries(${PROJECT_NAME} SofaBaseMechanics SofaRigid SofaConstraint); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT PersistentContact_libraries; EXPORT PersistentContactTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib; PUBLIC_HEADER DESTINATION ""include/${PROJECT_NAME}""). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/PersistentContact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PersistentContact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PersistentContact/CMakeLists.txt:1411,Deployability,install,install,1411,"cmake_minimum_required(VERSION 3.22); project(PersistentContact). set(HEADER_FILES; config.h; PersistentContactBarycentricMapping.h; PersistentContactBarycentricMapping.inl; PersistentContactMapping.h; PersistentContactRigidMapping.h; PersistentContactRigidMapping.inl; PersistentFrictionContact.h; PersistentFrictionContact.inl; PersistentUnilateralInteractionConstraint.h; PersistentUnilateralInteractionConstraint.inl; ). set(SOURCE_FILES; PersistentContactBarycentricMapping.cpp; PersistentContactMapping.cpp; PersistentContactRigidMapping.cpp; PersistentFrictionContact.cpp; PersistentUnilateralInteractionConstraint.cpp; initPersistentContact.cpp; ). set(README_FILES PersistentContact.txt). set(README_FILES; 	PersistentContact.txt). find_package(SofaBaseMechanics REQUIRED); find_package(SofaRigid REQUIRED); find_package(SofaConstraint REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_PERSISTENTCONTACT""); target_link_libraries(${PROJECT_NAME} SofaBaseMechanics SofaRigid SofaConstraint); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT PersistentContact_libraries; EXPORT PersistentContactTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib; PUBLIC_HEADER DESTINATION ""include/${PROJECT_NAME}""). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/PersistentContact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PersistentContact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PersistentContact/CMakeLists.txt:84,Modifiability,config,config,84,"cmake_minimum_required(VERSION 3.22); project(PersistentContact). set(HEADER_FILES; config.h; PersistentContactBarycentricMapping.h; PersistentContactBarycentricMapping.inl; PersistentContactMapping.h; PersistentContactRigidMapping.h; PersistentContactRigidMapping.inl; PersistentFrictionContact.h; PersistentFrictionContact.inl; PersistentUnilateralInteractionConstraint.h; PersistentUnilateralInteractionConstraint.inl; ). set(SOURCE_FILES; PersistentContactBarycentricMapping.cpp; PersistentContactMapping.cpp; PersistentContactRigidMapping.cpp; PersistentFrictionContact.cpp; PersistentUnilateralInteractionConstraint.cpp; initPersistentContact.cpp; ). set(README_FILES PersistentContact.txt). set(README_FILES; 	PersistentContact.txt). find_package(SofaBaseMechanics REQUIRED); find_package(SofaRigid REQUIRED); find_package(SofaConstraint REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_PERSISTENTCONTACT""); target_link_libraries(${PROJECT_NAME} SofaBaseMechanics SofaRigid SofaConstraint); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT PersistentContact_libraries; EXPORT PersistentContactTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib; PUBLIC_HEADER DESTINATION ""include/${PROJECT_NAME}""). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/PersistentContact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PersistentContact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PersistentContact/CMakeLists.txt:1462,Modifiability,plugin,plugins,1462,"cmake_minimum_required(VERSION 3.22); project(PersistentContact). set(HEADER_FILES; config.h; PersistentContactBarycentricMapping.h; PersistentContactBarycentricMapping.inl; PersistentContactMapping.h; PersistentContactRigidMapping.h; PersistentContactRigidMapping.inl; PersistentFrictionContact.h; PersistentFrictionContact.inl; PersistentUnilateralInteractionConstraint.h; PersistentUnilateralInteractionConstraint.inl; ). set(SOURCE_FILES; PersistentContactBarycentricMapping.cpp; PersistentContactMapping.cpp; PersistentContactRigidMapping.cpp; PersistentFrictionContact.cpp; PersistentUnilateralInteractionConstraint.cpp; initPersistentContact.cpp; ). set(README_FILES PersistentContact.txt). set(README_FILES; 	PersistentContact.txt). find_package(SofaBaseMechanics REQUIRED); find_package(SofaRigid REQUIRED); find_package(SofaConstraint REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_PERSISTENTCONTACT""); target_link_libraries(${PROJECT_NAME} SofaBaseMechanics SofaRigid SofaConstraint); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT PersistentContact_libraries; EXPORT PersistentContactTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib; PUBLIC_HEADER DESTINATION ""include/${PROJECT_NAME}""). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/PersistentContact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/PersistentContact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt:1045,Deployability,configurat,configurations,1045,"cmake_minimum_required(VERSION 3.22); project(SceneCreator VERSION 0.1). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Eigen3 REQUIRED). set(HEADER_FILES; src/SceneCreator/config.h.in; src/SceneCreator/GetAssembledSizeVisitor.h; src/SceneCreator/GetVectorVisitor.h; src/SceneCreator/SceneCreator.h; src/SceneCreator/SceneUtils.h; ); set(SOURCE_FILES; src/SceneCreator/GetAssembledSizeVisitor.cpp; src/SceneCreator/GetVectorVisitor.cpp; src/SceneCreator/SceneCreator.cpp; src/SceneCreator/SceneUtils.cpp; src/SceneCreator/initSceneCreator.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.SimpleApi Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SCENECREATOR""). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SceneCreator""; RELOCATABLE ""plugins""; ). ## Add example project to use sceneCreator; sofa_find_package(Sofa.GUI.Common QUIET); if(Sofa.GUI.Common_FOUND); add_subdirectory(sceneCreatorExamples); else(); message(STATUS ""${PROJECT_NAME}: Sofa.GUI.Common not found, sceneCreatorExamples will not be built.""); endif(). ## Add test project; if(SOFA_BUILD_TESTS); add_subdirectory(SceneCreator_test); endif(); ",MatchSource.DOCS,applications/plugins/SceneCreator/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt:1469,Integrability,message,message,1469,"cmake_minimum_required(VERSION 3.22); project(SceneCreator VERSION 0.1). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Eigen3 REQUIRED). set(HEADER_FILES; src/SceneCreator/config.h.in; src/SceneCreator/GetAssembledSizeVisitor.h; src/SceneCreator/GetVectorVisitor.h; src/SceneCreator/SceneCreator.h; src/SceneCreator/SceneUtils.h; ); set(SOURCE_FILES; src/SceneCreator/GetAssembledSizeVisitor.cpp; src/SceneCreator/GetVectorVisitor.cpp; src/SceneCreator/SceneCreator.cpp; src/SceneCreator/SceneUtils.cpp; src/SceneCreator/initSceneCreator.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.SimpleApi Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SCENECREATOR""). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SceneCreator""; RELOCATABLE ""plugins""; ). ## Add example project to use sceneCreator; sofa_find_package(Sofa.GUI.Common QUIET); if(Sofa.GUI.Common_FOUND); add_subdirectory(sceneCreatorExamples); else(); message(STATUS ""${PROJECT_NAME}: Sofa.GUI.Common not found, sceneCreatorExamples will not be built.""); endif(). ## Add test project; if(SOFA_BUILD_TESTS); add_subdirectory(SceneCreator_test); endif(); ",MatchSource.DOCS,applications/plugins/SceneCreator/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt:298,Modifiability,config,config,298,"cmake_minimum_required(VERSION 3.22); project(SceneCreator VERSION 0.1). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Eigen3 REQUIRED). set(HEADER_FILES; src/SceneCreator/config.h.in; src/SceneCreator/GetAssembledSizeVisitor.h; src/SceneCreator/GetVectorVisitor.h; src/SceneCreator/SceneCreator.h; src/SceneCreator/SceneUtils.h; ); set(SOURCE_FILES; src/SceneCreator/GetAssembledSizeVisitor.cpp; src/SceneCreator/GetVectorVisitor.cpp; src/SceneCreator/SceneCreator.cpp; src/SceneCreator/SceneUtils.cpp; src/SceneCreator/initSceneCreator.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.SimpleApi Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SCENECREATOR""). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SceneCreator""; RELOCATABLE ""plugins""; ). ## Add example project to use sceneCreator; sofa_find_package(Sofa.GUI.Common QUIET); if(Sofa.GUI.Common_FOUND); add_subdirectory(sceneCreatorExamples); else(); message(STATUS ""${PROJECT_NAME}: Sofa.GUI.Common not found, sceneCreatorExamples will not be built.""); endif(). ## Add test project; if(SOFA_BUILD_TESTS); add_subdirectory(SceneCreator_test); endif(); ",MatchSource.DOCS,applications/plugins/SceneCreator/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt:1045,Modifiability,config,configurations,1045,"cmake_minimum_required(VERSION 3.22); project(SceneCreator VERSION 0.1). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Eigen3 REQUIRED). set(HEADER_FILES; src/SceneCreator/config.h.in; src/SceneCreator/GetAssembledSizeVisitor.h; src/SceneCreator/GetVectorVisitor.h; src/SceneCreator/SceneCreator.h; src/SceneCreator/SceneUtils.h; ); set(SOURCE_FILES; src/SceneCreator/GetAssembledSizeVisitor.cpp; src/SceneCreator/GetVectorVisitor.cpp; src/SceneCreator/SceneCreator.cpp; src/SceneCreator/SceneUtils.cpp; src/SceneCreator/initSceneCreator.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.SimpleApi Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SCENECREATOR""). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SceneCreator""; RELOCATABLE ""plugins""; ). ## Add example project to use sceneCreator; sofa_find_package(Sofa.GUI.Common QUIET); if(Sofa.GUI.Common_FOUND); add_subdirectory(sceneCreatorExamples); else(); message(STATUS ""${PROJECT_NAME}: Sofa.GUI.Common not found, sceneCreatorExamples will not be built.""); endif(). ## Add test project; if(SOFA_BUILD_TESTS); add_subdirectory(SceneCreator_test); endif(); ",MatchSource.DOCS,applications/plugins/SceneCreator/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt:1295,Modifiability,plugin,plugins,1295,"cmake_minimum_required(VERSION 3.22); project(SceneCreator VERSION 0.1). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Eigen3 REQUIRED). set(HEADER_FILES; src/SceneCreator/config.h.in; src/SceneCreator/GetAssembledSizeVisitor.h; src/SceneCreator/GetVectorVisitor.h; src/SceneCreator/SceneCreator.h; src/SceneCreator/SceneUtils.h; ); set(SOURCE_FILES; src/SceneCreator/GetAssembledSizeVisitor.cpp; src/SceneCreator/GetVectorVisitor.cpp; src/SceneCreator/SceneCreator.cpp; src/SceneCreator/SceneUtils.cpp; src/SceneCreator/initSceneCreator.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.SimpleApi Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SCENECREATOR""). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SceneCreator""; RELOCATABLE ""plugins""; ). ## Add example project to use sceneCreator; sofa_find_package(Sofa.GUI.Common QUIET); if(Sofa.GUI.Common_FOUND); add_subdirectory(sceneCreatorExamples); else(); message(STATUS ""${PROJECT_NAME}: Sofa.GUI.Common not found, sceneCreatorExamples will not be built.""); endif(). ## Add test project; if(SOFA_BUILD_TESTS); add_subdirectory(SceneCreator_test); endif(); ",MatchSource.DOCS,applications/plugins/SceneCreator/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt:1588,Testability,test,test,1588,"cmake_minimum_required(VERSION 3.22); project(SceneCreator VERSION 0.1). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Eigen3 REQUIRED). set(HEADER_FILES; src/SceneCreator/config.h.in; src/SceneCreator/GetAssembledSizeVisitor.h; src/SceneCreator/GetVectorVisitor.h; src/SceneCreator/SceneCreator.h; src/SceneCreator/SceneUtils.h; ); set(SOURCE_FILES; src/SceneCreator/GetAssembledSizeVisitor.cpp; src/SceneCreator/GetVectorVisitor.cpp; src/SceneCreator/SceneCreator.cpp; src/SceneCreator/SceneUtils.cpp; src/SceneCreator/initSceneCreator.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.SimpleApi Sofa.Component.StateContainer); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen); target_compile_definitions(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SCENECREATOR""). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SceneCreator""; RELOCATABLE ""plugins""; ). ## Add example project to use sceneCreator; sofa_find_package(Sofa.GUI.Common QUIET); if(Sofa.GUI.Common_FOUND); add_subdirectory(sceneCreatorExamples); else(); message(STATUS ""${PROJECT_NAME}: Sofa.GUI.Common not found, sceneCreatorExamples will not be built.""); endif(). ## Add test project; if(SOFA_BUILD_TESTS); add_subdirectory(SceneCreator_test); endif(); ",MatchSource.DOCS,applications/plugins/SceneCreator/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SceneCreator/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Sensable/CMakeLists.txt:886,Deployability,install,install,886,"cmake_minimum_required(VERSION 3.22); project(Sensable). find_package(SofaHaptics REQUIRED); find_package(SofaOpenglVisual REQUIRED); find_package(SofaGeneral REQUIRED). set(HEADER_FILES; EnslavementForceFeedback.h; NewOmniDriver.h; OmniDriver.h; ). set(SOURCE_FILES; EnslavementForceFeedback.cpp; NewOmniDriver.cpp; OmniDriver.cpp; initSensable.cpp; ). set(README_FILES PluginSensable.txt). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}""); include_directories(${OPENHAPTICS_INCLUDE_DIR}); include_directories(${OPENHAPTICS_UTIL_INCLUDE_DIR}); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SENSABLEPLUGIN""); target_link_libraries(${PROJECT_NAME} SofaHaptics SofaOpenglVisual ${OPENHAPTICS_LIBRARIES}). install(TARGETS ${PROJECT_NAME}; COMPONENT Sensable_libraries; EXPORT SensableTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Sensable/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Sensable/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Sensable/CMakeLists.txt:1049,Deployability,install,install,1049,"cmake_minimum_required(VERSION 3.22); project(Sensable). find_package(SofaHaptics REQUIRED); find_package(SofaOpenglVisual REQUIRED); find_package(SofaGeneral REQUIRED). set(HEADER_FILES; EnslavementForceFeedback.h; NewOmniDriver.h; OmniDriver.h; ). set(SOURCE_FILES; EnslavementForceFeedback.cpp; NewOmniDriver.cpp; OmniDriver.cpp; initSensable.cpp; ). set(README_FILES PluginSensable.txt). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}""); include_directories(${OPENHAPTICS_INCLUDE_DIR}); include_directories(${OPENHAPTICS_UTIL_INCLUDE_DIR}); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SENSABLEPLUGIN""); target_link_libraries(${PROJECT_NAME} SofaHaptics SofaOpenglVisual ${OPENHAPTICS_LIBRARIES}). install(TARGETS ${PROJECT_NAME}; COMPONENT Sensable_libraries; EXPORT SensableTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Sensable/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Sensable/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Sensable/CMakeLists.txt:1100,Modifiability,plugin,plugins,1100,"cmake_minimum_required(VERSION 3.22); project(Sensable). find_package(SofaHaptics REQUIRED); find_package(SofaOpenglVisual REQUIRED); find_package(SofaGeneral REQUIRED). set(HEADER_FILES; EnslavementForceFeedback.h; NewOmniDriver.h; OmniDriver.h; ). set(SOURCE_FILES; EnslavementForceFeedback.cpp; NewOmniDriver.cpp; OmniDriver.cpp; initSensable.cpp; ). set(README_FILES PluginSensable.txt). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}""); include_directories(${OPENHAPTICS_INCLUDE_DIR}); include_directories(${OPENHAPTICS_UTIL_INCLUDE_DIR}); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SENSABLEPLUGIN""); target_link_libraries(${PROJECT_NAME} SofaHaptics SofaOpenglVisual ${OPENHAPTICS_LIBRARIES}). install(TARGETS ${PROJECT_NAME}; COMPONENT Sensable_libraries; EXPORT SensableTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Sensable/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Sensable/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SensableEmulation/CMakeLists.txt:1010,Deployability,install,install,1010,"cmake_minimum_required(VERSION 3.22); project(SensableEmulation). set(HEADER_FILES; OmniDriverEmu.h; config.h; ). set(SOURCE_FILES; OmniDriverEmu.cpp; initSensableEmulation.cpp; ). set(README_FILES PluginSensableEmulation.txt). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Boost COMPONENTS thread REQUIRED). include_directories(${Boost_INCLUDE_DIRS}). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SENSABLEEMULATIONPLUGIN""); target_link_libraries(${PROJECT_NAME} Sofa.Component.Haptics Sofa.Component.Controller Sofa.GL.Component.Rendering3D Boost::thread). include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). # Seems to be required by boost::asio; if(UNIX); target_link_libraries(${PROJECT_NAME} pthread); endif(). install(TARGETS ${PROJECT_NAME}; COMPONENT SensableEmulation_libraries; EXPORT SensableEmulationTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/SensableEmulation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SensableEmulation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SensableEmulation/CMakeLists.txt:1191,Deployability,install,install,1191,"cmake_minimum_required(VERSION 3.22); project(SensableEmulation). set(HEADER_FILES; OmniDriverEmu.h; config.h; ). set(SOURCE_FILES; OmniDriverEmu.cpp; initSensableEmulation.cpp; ). set(README_FILES PluginSensableEmulation.txt). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Boost COMPONENTS thread REQUIRED). include_directories(${Boost_INCLUDE_DIRS}). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SENSABLEEMULATIONPLUGIN""); target_link_libraries(${PROJECT_NAME} Sofa.Component.Haptics Sofa.Component.Controller Sofa.GL.Component.Rendering3D Boost::thread). include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). # Seems to be required by boost::asio; if(UNIX); target_link_libraries(${PROJECT_NAME} pthread); endif(). install(TARGETS ${PROJECT_NAME}; COMPONENT SensableEmulation_libraries; EXPORT SensableEmulationTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/SensableEmulation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SensableEmulation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SensableEmulation/CMakeLists.txt:101,Modifiability,config,config,101,"cmake_minimum_required(VERSION 3.22); project(SensableEmulation). set(HEADER_FILES; OmniDriverEmu.h; config.h; ). set(SOURCE_FILES; OmniDriverEmu.cpp; initSensableEmulation.cpp; ). set(README_FILES PluginSensableEmulation.txt). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Boost COMPONENTS thread REQUIRED). include_directories(${Boost_INCLUDE_DIRS}). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SENSABLEEMULATIONPLUGIN""); target_link_libraries(${PROJECT_NAME} Sofa.Component.Haptics Sofa.Component.Controller Sofa.GL.Component.Rendering3D Boost::thread). include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). # Seems to be required by boost::asio; if(UNIX); target_link_libraries(${PROJECT_NAME} pthread); endif(). install(TARGETS ${PROJECT_NAME}; COMPONENT SensableEmulation_libraries; EXPORT SensableEmulationTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/SensableEmulation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SensableEmulation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SensableEmulation/CMakeLists.txt:1242,Modifiability,plugin,plugins,1242,"cmake_minimum_required(VERSION 3.22); project(SensableEmulation). set(HEADER_FILES; OmniDriverEmu.h; config.h; ). set(SOURCE_FILES; OmniDriverEmu.cpp; initSensableEmulation.cpp; ). set(README_FILES PluginSensableEmulation.txt). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.Haptics REQUIRED); sofa_find_package(Sofa.Component.Controller REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Boost COMPONENTS thread REQUIRED). include_directories(${Boost_INCLUDE_DIRS}). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SENSABLEEMULATIONPLUGIN""); target_link_libraries(${PROJECT_NAME} Sofa.Component.Haptics Sofa.Component.Controller Sofa.GL.Component.Rendering3D Boost::thread). include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). # Seems to be required by boost::asio; if(UNIX); target_link_libraries(${PROJECT_NAME} pthread); endif(). install(TARGETS ${PROJECT_NAME}; COMPONENT SensableEmulation_libraries; EXPORT SensableEmulationTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/SensableEmulation/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SensableEmulation/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SixenseHydra/CMakeLists.txt:864,Deployability,install,install,864,"cmake_minimum_required(VERSION 3.22); project(SixenseHydra). set(HEADER_FILES; RazerHydraDriver.h; config.h; ). set(SOURCE_FILES; RazerHydraDriver.cpp; initSixenseHydra.cpp; ). find_package(SofaGeneral REQUIRED); find_package(SofaOpenglVisual REQUIRED). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); find_package(Sixense REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SIXENSE_HYDRA""); target_link_libraries(${PROJECT_NAME} SofaBaseLinearSolver SofaBaseTopology SofaOpenglVisual; SofaMeshCollision SofaSimpleFem SofaConstraint SofaUserInteraction); include_directories(${SIXENSE_INCLUDE_DIR}); target_link_libraries(${PROJECT_NAME} ${SIXENSE_LIBRARY} ${SIXENSE_UTILS_LIBRARY}); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT SixenseHydra_libraries; EXPORT SixenseHydraTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY Scenes/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/SixenseHydra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SixenseHydra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SixenseHydra/CMakeLists.txt:1035,Deployability,install,install,1035,"cmake_minimum_required(VERSION 3.22); project(SixenseHydra). set(HEADER_FILES; RazerHydraDriver.h; config.h; ). set(SOURCE_FILES; RazerHydraDriver.cpp; initSixenseHydra.cpp; ). find_package(SofaGeneral REQUIRED); find_package(SofaOpenglVisual REQUIRED). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); find_package(Sixense REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SIXENSE_HYDRA""); target_link_libraries(${PROJECT_NAME} SofaBaseLinearSolver SofaBaseTopology SofaOpenglVisual; SofaMeshCollision SofaSimpleFem SofaConstraint SofaUserInteraction); include_directories(${SIXENSE_INCLUDE_DIR}); target_link_libraries(${PROJECT_NAME} ${SIXENSE_LIBRARY} ${SIXENSE_UTILS_LIBRARY}); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT SixenseHydra_libraries; EXPORT SixenseHydraTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY Scenes/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/SixenseHydra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SixenseHydra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SixenseHydra/CMakeLists.txt:99,Modifiability,config,config,99,"cmake_minimum_required(VERSION 3.22); project(SixenseHydra). set(HEADER_FILES; RazerHydraDriver.h; config.h; ). set(SOURCE_FILES; RazerHydraDriver.cpp; initSixenseHydra.cpp; ). find_package(SofaGeneral REQUIRED); find_package(SofaOpenglVisual REQUIRED). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); find_package(Sixense REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SIXENSE_HYDRA""); target_link_libraries(${PROJECT_NAME} SofaBaseLinearSolver SofaBaseTopology SofaOpenglVisual; SofaMeshCollision SofaSimpleFem SofaConstraint SofaUserInteraction); include_directories(${SIXENSE_INCLUDE_DIR}); target_link_libraries(${PROJECT_NAME} ${SIXENSE_LIBRARY} ${SIXENSE_UTILS_LIBRARY}); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT SixenseHydra_libraries; EXPORT SixenseHydraTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY Scenes/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/SixenseHydra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SixenseHydra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SixenseHydra/CMakeLists.txt:1084,Modifiability,plugin,plugins,1084,"cmake_minimum_required(VERSION 3.22); project(SixenseHydra). set(HEADER_FILES; RazerHydraDriver.h; config.h; ). set(SOURCE_FILES; RazerHydraDriver.cpp; initSixenseHydra.cpp; ). find_package(SofaGeneral REQUIRED); find_package(SofaOpenglVisual REQUIRED). list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""); find_package(Sixense REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SIXENSE_HYDRA""); target_link_libraries(${PROJECT_NAME} SofaBaseLinearSolver SofaBaseTopology SofaOpenglVisual; SofaMeshCollision SofaSimpleFem SofaConstraint SofaUserInteraction); include_directories(${SIXENSE_INCLUDE_DIR}); target_link_libraries(${PROJECT_NAME} ${SIXENSE_LIBRARY} ${SIXENSE_UTILS_LIBRARY}); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT SixenseHydra_libraries; EXPORT SixenseHydraTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY Scenes/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/SixenseHydra/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SixenseHydra/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt:1978,Deployability,configurat,configurations,1978,"cpp; SceneColladaLoader.cpp; ). set(README_FILES README_AssimpPlugin.txt). ## Assimp dependencies; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/""). ### Dependencies; find_package(Sofa.Core REQUIRED); sofa_find_package(assimp REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.Mapping REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(image QUIET); sofa_find_package(Flexible QUIET). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SOFAASSIMP""); target_link_libraries(${PROJECT_NAME} PUBLIC ${ASSIMP_LIBRARIES} Sofa.Core Sofa.Component.Constraint.Projective Sofa.Component.Mass Sofa.Component.Mapping Sofa.GL.Component.Rendering3D Sofa.Component.StateContainer Sofa.Component.Collision.Geometry). if(image_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC image); endif(); if(Flexible_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Flexible); endif(). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/..""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${ASSIMP_INCLUDE_DIR}>""). if(ASSIMP_DLL); sofa_install_libraries(PATHS ${ASSIMP_DLL}); endif(). #TODO; if(SOFA_BUILD_TESTS); # add_subdirectory(CGALPlugin_test); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/plugins/SofaAssimp/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt:278,Integrability,depend,dependencies,278,"cmake_minimum_required(VERSION 3.22); project(SofaAssimp VERSION 0.2). set(HEADER_FILES; config.h; AssimpLoader.h; SceneColladaLoader.h; ). set(SOURCE_FILES; initAssimpPlugin.cpp; AssimpLoader.cpp; SceneColladaLoader.cpp; ). set(README_FILES README_AssimpPlugin.txt). ## Assimp dependencies; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/""). ### Dependencies; find_package(Sofa.Core REQUIRED); sofa_find_package(assimp REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.Mapping REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(image QUIET); sofa_find_package(Flexible QUIET). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SOFAASSIMP""); target_link_libraries(${PROJECT_NAME} PUBLIC ${ASSIMP_LIBRARIES} Sofa.Core Sofa.Component.Constraint.Projective Sofa.Component.Mass Sofa.Component.Mapping Sofa.GL.Component.Rendering3D Sofa.Component.StateContainer Sofa.Component.Collision.Geometry). if(image_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC image); endif(); if(Flexible_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Flexible); endif(). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/..""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${ASSIMP_INCLUDE_DIR}>""). if(ASSIMP_DLL); sofa_install_libraries(PATHS ${ASSIMP_DLL}); endif(). #TODO; if(SOFA_BUILD_TESTS); # add_subdirectory(CGALPlugin_test); endif(). ## Install rules for the library; CMake package configurations files; s",MatchSource.DOCS,applications/plugins/SofaAssimp/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt:89,Modifiability,config,config,89,"cmake_minimum_required(VERSION 3.22); project(SofaAssimp VERSION 0.2). set(HEADER_FILES; config.h; AssimpLoader.h; SceneColladaLoader.h; ). set(SOURCE_FILES; initAssimpPlugin.cpp; AssimpLoader.cpp; SceneColladaLoader.cpp; ). set(README_FILES README_AssimpPlugin.txt). ## Assimp dependencies; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/""). ### Dependencies; find_package(Sofa.Core REQUIRED); sofa_find_package(assimp REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.Mapping REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(image QUIET); sofa_find_package(Flexible QUIET). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SOFAASSIMP""); target_link_libraries(${PROJECT_NAME} PUBLIC ${ASSIMP_LIBRARIES} Sofa.Core Sofa.Component.Constraint.Projective Sofa.Component.Mass Sofa.Component.Mapping Sofa.GL.Component.Rendering3D Sofa.Component.StateContainer Sofa.Component.Collision.Geometry). if(image_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC image); endif(); if(Flexible_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Flexible); endif(). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/..""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${ASSIMP_INCLUDE_DIR}>""). if(ASSIMP_DLL); sofa_install_libraries(PATHS ${ASSIMP_DLL}); endif(). #TODO; if(SOFA_BUILD_TESTS); # add_subdirectory(CGALPlugin_test); endif(). ## Install rules for the library; CMake package configurations files; s",MatchSource.DOCS,applications/plugins/SofaAssimp/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt:877,Modifiability,plugin,plugin,877,"cmake_minimum_required(VERSION 3.22); project(SofaAssimp VERSION 0.2). set(HEADER_FILES; config.h; AssimpLoader.h; SceneColladaLoader.h; ). set(SOURCE_FILES; initAssimpPlugin.cpp; AssimpLoader.cpp; SceneColladaLoader.cpp; ). set(README_FILES README_AssimpPlugin.txt). ## Assimp dependencies; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/""). ### Dependencies; find_package(Sofa.Core REQUIRED); sofa_find_package(assimp REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.Mapping REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(image QUIET); sofa_find_package(Flexible QUIET). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SOFAASSIMP""); target_link_libraries(${PROJECT_NAME} PUBLIC ${ASSIMP_LIBRARIES} Sofa.Core Sofa.Component.Constraint.Projective Sofa.Component.Mass Sofa.Component.Mapping Sofa.GL.Component.Rendering3D Sofa.Component.StateContainer Sofa.Component.Collision.Geometry). if(image_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC image); endif(); if(Flexible_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Flexible); endif(). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/..""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${ASSIMP_INCLUDE_DIR}>""). if(ASSIMP_DLL); sofa_install_libraries(PATHS ${ASSIMP_DLL}); endif(). #TODO; if(SOFA_BUILD_TESTS); # add_subdirectory(CGALPlugin_test); endif(). ## Install rules for the library; CMake package configurations files; s",MatchSource.DOCS,applications/plugins/SofaAssimp/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt:1978,Modifiability,config,configurations,1978,"cpp; SceneColladaLoader.cpp; ). set(README_FILES README_AssimpPlugin.txt). ## Assimp dependencies; list(APPEND CMAKE_MODULE_PATH ""${CMAKE_CURRENT_SOURCE_DIR}/cmake/""). ### Dependencies; find_package(Sofa.Core REQUIRED); sofa_find_package(assimp REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Mass REQUIRED); sofa_find_package(Sofa.Component.Mapping REQUIRED); sofa_find_package(Sofa.GL.Component.Rendering3D REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Collision.Geometry REQUIRED); sofa_find_package(image QUIET); sofa_find_package(Flexible QUIET). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_SOFAASSIMP""); target_link_libraries(${PROJECT_NAME} PUBLIC ${ASSIMP_LIBRARIES} Sofa.Core Sofa.Component.Constraint.Projective Sofa.Component.Mass Sofa.Component.Mapping Sofa.GL.Component.Rendering3D Sofa.Component.StateContainer Sofa.Component.Collision.Geometry). if(image_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC image); endif(); if(Flexible_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Flexible); endif(). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/..""); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${ASSIMP_INCLUDE_DIR}>""). if(ASSIMP_DLL); sofa_install_libraries(PATHS ${ASSIMP_DLL}); endif(). #TODO; if(SOFA_BUILD_TESTS); # add_subdirectory(CGALPlugin_test); endif(). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/plugins/SofaAssimp/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt:217,Deployability,release,released,217,"; **********************************************; * Assimp plugin.txt *; **********************************************. AUTHOR :; - epernod (Erik Pernod); ; CONTACT:; - erik.pernod@gmail.com . LICENSE :; - Assimp is released as Open Source under the terms of a 3-clause BSD license.; - License of this Plugin: LGPL. OTHER COMMENTS :. Open Asset Import Library (short name: Assimp) is a portable Open Source library to import various well-known 3D model formats in a uniform manner. ; The most recent version also knows how to export 3D files and is therefore suitable as a general-purpose 3D model converter. ; See the feature list. - Library web page: http://www.assimp.org/; - Source code on github: https://github.com/assimp/assimp; - Release version: https://github.com/assimp/assimp/releases; - Library version tested: 4.1.0. Important: For the moment only single Mesh is handle. That is to say, if a multi mesh is loaded, only one Sofa Mesh will be created by merging all sub meshes.; ",MatchSource.DOCS,applications/plugins/SofaAssimp/README_AssimpPlugin.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt:789,Deployability,release,releases,789,"; **********************************************; * Assimp plugin.txt *; **********************************************. AUTHOR :; - epernod (Erik Pernod); ; CONTACT:; - erik.pernod@gmail.com . LICENSE :; - Assimp is released as Open Source under the terms of a 3-clause BSD license.; - License of this Plugin: LGPL. OTHER COMMENTS :. Open Asset Import Library (short name: Assimp) is a portable Open Source library to import various well-known 3D model formats in a uniform manner. ; The most recent version also knows how to export 3D files and is therefore suitable as a general-purpose 3D model converter. ; See the feature list. - Library web page: http://www.assimp.org/; - Source code on github: https://github.com/assimp/assimp; - Release version: https://github.com/assimp/assimp/releases; - Library version tested: 4.1.0. Important: For the moment only single Mesh is handle. That is to say, if a multi mesh is loaded, only one Sofa Mesh will be created by merging all sub meshes.; ",MatchSource.DOCS,applications/plugins/SofaAssimp/README_AssimpPlugin.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt:59,Modifiability,plugin,plugin,59,"; **********************************************; * Assimp plugin.txt *; **********************************************. AUTHOR :; - epernod (Erik Pernod); ; CONTACT:; - erik.pernod@gmail.com . LICENSE :; - Assimp is released as Open Source under the terms of a 3-clause BSD license.; - License of this Plugin: LGPL. OTHER COMMENTS :. Open Asset Import Library (short name: Assimp) is a portable Open Source library to import various well-known 3D model formats in a uniform manner. ; The most recent version also knows how to export 3D files and is therefore suitable as a general-purpose 3D model converter. ; See the feature list. - Library web page: http://www.assimp.org/; - Source code on github: https://github.com/assimp/assimp; - Release version: https://github.com/assimp/assimp/releases; - Library version tested: 4.1.0. Important: For the moment only single Mesh is handle. That is to say, if a multi mesh is loaded, only one Sofa Mesh will be created by merging all sub meshes.; ",MatchSource.DOCS,applications/plugins/SofaAssimp/README_AssimpPlugin.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt:387,Modifiability,portab,portable,387,"; **********************************************; * Assimp plugin.txt *; **********************************************. AUTHOR :; - epernod (Erik Pernod); ; CONTACT:; - erik.pernod@gmail.com . LICENSE :; - Assimp is released as Open Source under the terms of a 3-clause BSD license.; - License of this Plugin: LGPL. OTHER COMMENTS :. Open Asset Import Library (short name: Assimp) is a portable Open Source library to import various well-known 3D model formats in a uniform manner. ; The most recent version also knows how to export 3D files and is therefore suitable as a general-purpose 3D model converter. ; See the feature list. - Library web page: http://www.assimp.org/; - Source code on github: https://github.com/assimp/assimp; - Release version: https://github.com/assimp/assimp/releases; - Library version tested: 4.1.0. Important: For the moment only single Mesh is handle. That is to say, if a multi mesh is loaded, only one Sofa Mesh will be created by merging all sub meshes.; ",MatchSource.DOCS,applications/plugins/SofaAssimp/README_AssimpPlugin.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt:921,Performance,load,loaded,921,"; **********************************************; * Assimp plugin.txt *; **********************************************. AUTHOR :; - epernod (Erik Pernod); ; CONTACT:; - erik.pernod@gmail.com . LICENSE :; - Assimp is released as Open Source under the terms of a 3-clause BSD license.; - License of this Plugin: LGPL. OTHER COMMENTS :. Open Asset Import Library (short name: Assimp) is a portable Open Source library to import various well-known 3D model formats in a uniform manner. ; The most recent version also knows how to export 3D files and is therefore suitable as a general-purpose 3D model converter. ; See the feature list. - Library web page: http://www.assimp.org/; - Source code on github: https://github.com/assimp/assimp; - Release version: https://github.com/assimp/assimp/releases; - Library version tested: 4.1.0. Important: For the moment only single Mesh is handle. That is to say, if a multi mesh is loaded, only one Sofa Mesh will be created by merging all sub meshes.; ",MatchSource.DOCS,applications/plugins/SofaAssimp/README_AssimpPlugin.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt:817,Testability,test,tested,817,"; **********************************************; * Assimp plugin.txt *; **********************************************. AUTHOR :; - epernod (Erik Pernod); ; CONTACT:; - erik.pernod@gmail.com . LICENSE :; - Assimp is released as Open Source under the terms of a 3-clause BSD license.; - License of this Plugin: LGPL. OTHER COMMENTS :. Open Asset Import Library (short name: Assimp) is a portable Open Source library to import various well-known 3D model formats in a uniform manner. ; The most recent version also knows how to export 3D files and is therefore suitable as a general-purpose 3D model converter. ; See the feature list. - Library web page: http://www.assimp.org/; - Source code on github: https://github.com/assimp/assimp; - Release version: https://github.com/assimp/assimp/releases; - Library version tested: 4.1.0. Important: For the moment only single Mesh is handle. That is to say, if a multi mesh is loaded, only one Sofa Mesh will be created by merging all sub meshes.; ",MatchSource.DOCS,applications/plugins/SofaAssimp/README_AssimpPlugin.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaAssimp/README_AssimpPlugin.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/CMakeLists.txt:612,Deployability,configurat,configurations,612,"cmake_minimum_required(VERSION 3.22); project(SofaCarving VERSION 0.1 LANGUAGES CXX). set(SOFACARVING_SRC src/SofaCarving). set(HEADER_FILES; ${SOFACARVING_SRC}/config.h.in; ${SOFACARVING_SRC}/init.h; ${SOFACARVING_SRC}/CarvingManager.h; ). set(SOURCE_FILES; ${SOFACARVING_SRC}/init.cpp; ${SOFACARVING_SRC}/CarvingManager.cpp; ). set(README_FILES SofaCarving.txt). find_package(Sofa.GUI.Component REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.GUI.Component). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). if(SOFA_BUILD_TESTS); add_subdirectory(SofaCarving_test); endif(); ",MatchSource.DOCS,applications/plugins/SofaCarving/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/CMakeLists.txt:161,Modifiability,config,config,161,"cmake_minimum_required(VERSION 3.22); project(SofaCarving VERSION 0.1 LANGUAGES CXX). set(SOFACARVING_SRC src/SofaCarving). set(HEADER_FILES; ${SOFACARVING_SRC}/config.h.in; ${SOFACARVING_SRC}/init.h; ${SOFACARVING_SRC}/CarvingManager.h; ). set(SOURCE_FILES; ${SOFACARVING_SRC}/init.cpp; ${SOFACARVING_SRC}/CarvingManager.cpp; ). set(README_FILES SofaCarving.txt). find_package(Sofa.GUI.Component REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.GUI.Component). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). if(SOFA_BUILD_TESTS); add_subdirectory(SofaCarving_test); endif(); ",MatchSource.DOCS,applications/plugins/SofaCarving/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/CMakeLists.txt:612,Modifiability,config,configurations,612,"cmake_minimum_required(VERSION 3.22); project(SofaCarving VERSION 0.1 LANGUAGES CXX). set(SOFACARVING_SRC src/SofaCarving). set(HEADER_FILES; ${SOFACARVING_SRC}/config.h.in; ${SOFACARVING_SRC}/init.h; ${SOFACARVING_SRC}/CarvingManager.h; ). set(SOURCE_FILES; ${SOFACARVING_SRC}/init.cpp; ${SOFACARVING_SRC}/CarvingManager.cpp; ). set(README_FILES SofaCarving.txt). find_package(Sofa.GUI.Component REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.GUI.Component). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). if(SOFA_BUILD_TESTS); add_subdirectory(SofaCarving_test); endif(); ",MatchSource.DOCS,applications/plugins/SofaCarving/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/CMakeLists.txt:863,Modifiability,plugin,plugins,863,"cmake_minimum_required(VERSION 3.22); project(SofaCarving VERSION 0.1 LANGUAGES CXX). set(SOFACARVING_SRC src/SofaCarving). set(HEADER_FILES; ${SOFACARVING_SRC}/config.h.in; ${SOFACARVING_SRC}/init.h; ${SOFACARVING_SRC}/CarvingManager.h; ). set(SOURCE_FILES; ${SOFACARVING_SRC}/init.cpp; ${SOFACARVING_SRC}/CarvingManager.cpp; ). set(README_FILES SofaCarving.txt). find_package(Sofa.GUI.Component REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.GUI.Component). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). if(SOFA_BUILD_TESTS); add_subdirectory(SofaCarving_test); endif(); ",MatchSource.DOCS,applications/plugins/SofaCarving/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt:624,Deployability,pipeline,pipeline,624,; ************************************; * SofaCarving.txt *; ************************************. AUTHOR :; - Brina Goyette; - Erik Pernod (Version 0.3 - 2018-07-12). . LICENCE :; - LGPL. OTHER COMMENTS :. The plugin include:; - CarvingManager handling carving operations between a tool and an object. ; The CarvingManager class will perform topological resection on a triangle surface (could be on top of tetrahedron topology); The tool performing the carving as well as the object to carved need to be represented by collision models; Detecting the collision is done using the scene Intersection and NarrowPhaseDetection pipeline.; - 2 simples scenes showing a sphere carving a cylinder volume with different parameters; - A scene showing how to use the carving Manager on a tool object model. ,MatchSource.DOCS,applications/plugins/SofaCarving/SofaCarving.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt:211,Modifiability,plugin,plugin,211,; ************************************; * SofaCarving.txt *; ************************************. AUTHOR :; - Brina Goyette; - Erik Pernod (Version 0.3 - 2018-07-12). . LICENCE :; - LGPL. OTHER COMMENTS :. The plugin include:; - CarvingManager handling carving operations between a tool and an object. ; The CarvingManager class will perform topological resection on a triangle surface (could be on top of tetrahedron topology); The tool performing the carving as well as the object to carved need to be represented by collision models; Detecting the collision is done using the scene Intersection and NarrowPhaseDetection pipeline.; - 2 simples scenes showing a sphere carving a cylinder volume with different parameters; - A scene showing how to use the carving Manager on a tool object model. ,MatchSource.DOCS,applications/plugins/SofaCarving/SofaCarving.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt:335,Performance,perform,perform,335,; ************************************; * SofaCarving.txt *; ************************************. AUTHOR :; - Brina Goyette; - Erik Pernod (Version 0.3 - 2018-07-12). . LICENCE :; - LGPL. OTHER COMMENTS :. The plugin include:; - CarvingManager handling carving operations between a tool and an object. ; The CarvingManager class will perform topological resection on a triangle surface (could be on top of tetrahedron topology); The tool performing the carving as well as the object to carved need to be represented by collision models; Detecting the collision is done using the scene Intersection and NarrowPhaseDetection pipeline.; - 2 simples scenes showing a sphere carving a cylinder volume with different parameters; - A scene showing how to use the carving Manager on a tool object model. ,MatchSource.DOCS,applications/plugins/SofaCarving/SofaCarving.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt:439,Performance,perform,performing,439,; ************************************; * SofaCarving.txt *; ************************************. AUTHOR :; - Brina Goyette; - Erik Pernod (Version 0.3 - 2018-07-12). . LICENCE :; - LGPL. OTHER COMMENTS :. The plugin include:; - CarvingManager handling carving operations between a tool and an object. ; The CarvingManager class will perform topological resection on a triangle surface (could be on top of tetrahedron topology); The tool performing the carving as well as the object to carved need to be represented by collision models; Detecting the collision is done using the scene Intersection and NarrowPhaseDetection pipeline.; - 2 simples scenes showing a sphere carving a cylinder volume with different parameters; - A scene showing how to use the carving Manager on a tool object model. ,MatchSource.DOCS,applications/plugins/SofaCarving/SofaCarving.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt:639,Usability,simpl,simples,639,; ************************************; * SofaCarving.txt *; ************************************. AUTHOR :; - Brina Goyette; - Erik Pernod (Version 0.3 - 2018-07-12). . LICENCE :; - LGPL. OTHER COMMENTS :. The plugin include:; - CarvingManager handling carving operations between a tool and an object. ; The CarvingManager class will perform topological resection on a triangle surface (could be on top of tetrahedron topology); The tool performing the carving as well as the object to carved need to be represented by collision models; Detecting the collision is done using the scene Intersection and NarrowPhaseDetection pipeline.; - 2 simples scenes showing a sphere carving a cylinder volume with different parameters; - A scene showing how to use the carving Manager on a tool object model. ,MatchSource.DOCS,applications/plugins/SofaCarving/SofaCarving.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCarving/SofaCarving.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:17584,Availability,avail,available,17584,": optional dependency to SofaSphFluid found. ""); else(); message(STATUS ""SofaCUDA: optional dependency SofaSphFluid not found. ""); endif(). sofa_find_package(SofaValidation QUIET); if(SofaValidation_FOUND); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaExtraMonitor.cpp; ); message(STATUS ""SofaCUDA: found SofaValidation, enabling CudaExtraMonitor (Warning: this component is being deprecated). ""); endif(). option(SOFACUDA_VERBOSE_PTXAS ""???"" OFF); if(SOFACUDA_VERBOSE_PTXAS); set(VERBOSE_PTXAS --ptxas-options=-v); endif(). option(SOFACUDA_CUBLAS ""Activate cublas support in CUDA (requires SOFACUDA_DOUBLE)."" OFF); if(SOFACUDA_CUBLAS); set(SOFA_GPU_CUBLAS 1) # #cmakedefine; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(CUDASparse REQUIRED); endif(). option(SOFACUDA_CUDPP ""Activate CUDPP (for RadixSort)."" OFF); if(SOFACUDA_CUDPP); set(SOFA_GPU_CUDPP 1) # #cmakedefine; endif(). # Note: THRUST is included in CUDA SDK 4.0+, it is recommended to use it if available; option(SOFACUDA_THRUST ""Activate THRUST (for RadixSort)."" ON); if(SOFACUDA_THRUST); set(SOFA_GPU_THRUST 1) # #cmakedefine; endif(). option(SOFACUDA_DOUBLE ""Activate double-precision support in CUDA (requires GT200+ GPU and -arch sm_13 flag."" OFF); if(SOFACUDA_DOUBLE); set(SOFA_GPU_CUDA_DOUBLE 1) # #cmakedefine; endif(). option(SOFACUDA_DOUBLE_PRECISE ""Enable double-precision for sqrt/div... (requires compute capability; >= 2 and CUDA_VERSION > 3.0)"" OFF); # Note: with SOFA_GPU_CUDA_PRECISE and SOFA_GPU_CUDA_DOUBLE you get IEEE; # 754-compliant floating point operations for addition and multiplication only.; if(SOFACUDA_DOUBLE_PRECISE); set(SOFA_GPU_CUDA_DOUBLE_PRECISE 1) # #cmakedefine; endif(). option(SOFACUDA_PRECISE ""Use IEEE 754-compliant floating point operations."" OFF). include(SofaCUDANvccFlags.cmake). # nvcc uses a ""host code compiler"" to compile CPU code, specified by CUDA_HOST_COMPILER.; # With some versions of CMake, CUDA_HOST_COMPILER defaults to CMAKE_C_COMPILER,; # but few hos",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:19108,Availability,avail,available,19108," floating point operations for addition and multiplication only.; if(SOFACUDA_DOUBLE_PRECISE); set(SOFA_GPU_CUDA_DOUBLE_PRECISE 1) # #cmakedefine; endif(). option(SOFACUDA_PRECISE ""Use IEEE 754-compliant floating point operations."" OFF). include(SofaCUDANvccFlags.cmake). # nvcc uses a ""host code compiler"" to compile CPU code, specified by CUDA_HOST_COMPILER.; # With some versions of CMake, CUDA_HOST_COMPILER defaults to CMAKE_C_COMPILER,; # but few host compilers are actually supported. Workarounds should go here.; if (${CUDA_HOST_COMPILER} MATCHES ""ccache$""); message(STATUS ""SofaCUDA: CUDA host compiler was set to ccache, changing to g++""); set(CUDA_HOST_COMPILER ""g++"" CACHE STRING ""Host side compiler used by NVCC"" FORCE); endif(). # quick and dirty fix for nvcc compatibility with -fno-partial-inlining flag; set(CUDA_PROPAGATE_HOST_FLAGS OFF). if(WIN32); add_definitions(""-DWIN32""); set(WINDOWSOPTIONS ""/MD""); endif(). # Make the compiler definitions available to nvcc; add_definitions(""-DSOFA_BUILD_SOFACUDA""); # Give include directories to nvcc compiler.; # Note: keep cuda_include_directories() before cuda_add_library().; cuda_include_directories(""${CMAKE_CURRENT_SOURCE_DIR}""); cuda_include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/src""); cuda_include_directories(""${CMAKE_BINARY_DIR}/include""); cuda_add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${CUDA_SOURCES} ${README_FILES} OPTIONS ${VERBOSE_PTXAS} ${WINDOWSOPTIONS}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_SOURCE_DIR}/src>""); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${SOFACUDA_COMPILE_DEFINITIONS}""); target_link_libraries(${PROJECT_NAME}; Sofa.Component.Mass; Sofa.Component.SolidMechanics.FEM.Elastic; Sofa.Component.SolidMechanics.FEM.HyperElastic; Sofa.Component.SolidMechanics.TensorMass; Sofa.Component.MechanicalLoad; Sofa.Component.Collision.Response.Contact; Sofa.Component.Collision.Detection.Alg",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:21457,Deployability,install,install,21457,"TIONS}""); target_link_libraries(${PROJECT_NAME}; Sofa.Component.Mass; Sofa.Component.SolidMechanics.FEM.Elastic; Sofa.Component.SolidMechanics.FEM.HyperElastic; Sofa.Component.SolidMechanics.TensorMass; Sofa.Component.MechanicalLoad; Sofa.Component.Collision.Response.Contact; Sofa.Component.Collision.Detection.Algorithm; Sofa.Component.Collision.Detection.Intersection; Sofa.Component.StateContainer; Sofa.Component.Constraint.Projective; Sofa.Component.Mapping.Linear; Sofa.Component.Mapping.NonLinear; Sofa.Component.Engine.Select; Sofa.Component.Engine.Transform; Sofa.Component.MechanicalLoad; ). target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL); endif(). if(SofaDistanceGrid_FOUND); target_link_libraries(${PROJECT_NAME} SofaDistanceGrid); if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} miniFlowVR); endif(); endif(). if(Sofa.GUI_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GUI); endif(). if(Sofa.GUI.Qt_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Qt); endif(). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} SofaValidation); endif(). if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid); endif(). if(SOFACUDA_CUBLAS); cuda_add_cublas_to_target(${PROJECT_NAME}); target_link_libraries(${PROJECT_NAME} ${CUDA_SPARSE_LIBRARY}); endif(); if(SOFACUDA_CUDPP); target_link_libraries(${PROJECT_NAME} cudpp); endif(). ## SofaCUDANvccFlags.cmake; # Build tree; configure_file(SofaCUDANvccFlags.cmake ${CMAKE_BINARY_DIR}/lib/cmake/SofaCUDANvccFlags.cmake COPYONLY); # Install tree; install(FILES SofaCUDANvccFlags.cmake DESTINATION lib/cmake/SofaCUDA). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFACUDA_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:21588,Deployability,configurat,configurations,21588,"TIONS}""); target_link_libraries(${PROJECT_NAME}; Sofa.Component.Mass; Sofa.Component.SolidMechanics.FEM.Elastic; Sofa.Component.SolidMechanics.FEM.HyperElastic; Sofa.Component.SolidMechanics.TensorMass; Sofa.Component.MechanicalLoad; Sofa.Component.Collision.Response.Contact; Sofa.Component.Collision.Detection.Algorithm; Sofa.Component.Collision.Detection.Intersection; Sofa.Component.StateContainer; Sofa.Component.Constraint.Projective; Sofa.Component.Mapping.Linear; Sofa.Component.Mapping.NonLinear; Sofa.Component.Engine.Select; Sofa.Component.Engine.Transform; Sofa.Component.MechanicalLoad; ). target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL); endif(). if(SofaDistanceGrid_FOUND); target_link_libraries(${PROJECT_NAME} SofaDistanceGrid); if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} miniFlowVR); endif(); endif(). if(Sofa.GUI_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GUI); endif(). if(Sofa.GUI.Qt_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Qt); endif(). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} SofaValidation); endif(). if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid); endif(). if(SOFACUDA_CUBLAS); cuda_add_cublas_to_target(${PROJECT_NAME}); target_link_libraries(${PROJECT_NAME} ${CUDA_SPARSE_LIBRARY}); endif(); if(SOFACUDA_CUDPP); target_link_libraries(${PROJECT_NAME} cudpp); endif(). ## SofaCUDANvccFlags.cmake; # Build tree; configure_file(SofaCUDANvccFlags.cmake ${CMAKE_BINARY_DIR}/lib/cmake/SofaCUDANvccFlags.cmake COPYONLY); # Install tree; install(FILES SofaCUDANvccFlags.cmake DESTINATION lib/cmake/SofaCUDA). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFACUDA_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:11210,Integrability,message,message,11210,"RCE_DIR}/component/solidmechanics/fem/elastic/CudaTetrahedronFEMForceField.cu; sofa/gpu/cuda/CudaTetrahedronTLEDForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/solidmechanics/fem/elastic/CudaTriangularFEMForceFieldOptim.cu. ### ForceFields; ${SOFACUDA_SOURCE_DIR}/component/mechanicalload/CudaEllipsoidForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/mechanicalload/CudaLinearForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/collision/response/contact/CudaPenalityContactForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/mechanicalload/CudaPlaneForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/mechanicalload/CudaSphereForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/solidmechanics/spring/CudaSpringForceField.cu. ### Collisions; ; ### Constraints; ${SOFACUDA_SOURCE_DIR}/component/constraint/projective/CudaFixedProjectiveConstraint.cu; ${SOFACUDA_SOURCE_DIR}/component/constraint/projective/CudaLinearMovementProjectiveConstraint.cu; ; ; ). sofa_find_package(Sofa.GL QUIET); if(NOT Sofa.GL_FOUND); message(WARNING ""Sofa.GL is not active.""); message(""OpenGL-related code wont be enabled (Sharing OpenGL buffers with CUDA)""); else(); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaVisualModel.h; sofa/gpu/cuda/CudaVisualModel.inl; ); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaVisualModel.cpp; ); list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaVisualModel.cu; ); endif(). #Compatibility; if(SOFA_ENABLE_LEGACY_HEADERS); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaBarycentricMapping.h; sofa/gpu/cuda/CudaBarycentricMapping.inl; sofa/gpu/cuda/CudaBarycentricMappingRigid.h; sofa/gpu/cuda/CudaRigidMapping.h; sofa/gpu/cuda/CudaRigidMapping.inl; sofa/gpu/cuda/CudaIdentityMapping.h; sofa/gpu/cuda/CudaIdentityMapping.inl; sofa/gpu/cuda/CudaSubsetMapping.h; sofa/gpu/cuda/CudaSubsetMapping.inl. sofa/gpu/cuda/CudaDiagonalMass.h; sofa/gpu/cuda/CudaDiagonalMass.inl. sofa/gpu/cuda/CudaMeshMatrixMass.h; sofa/gpu/cuda/CudaMeshMatrixMass.inl. sofa/gpu/cuda/CudaUniformMass.h; sofa/gpu/cuda/CudaUniformMass.inl. sofa/gpu",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:11253,Integrability,message,message,11253,"LEDForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/solidmechanics/fem/elastic/CudaTriangularFEMForceFieldOptim.cu. ### ForceFields; ${SOFACUDA_SOURCE_DIR}/component/mechanicalload/CudaEllipsoidForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/mechanicalload/CudaLinearForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/collision/response/contact/CudaPenalityContactForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/mechanicalload/CudaPlaneForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/mechanicalload/CudaSphereForceField.cu; ${SOFACUDA_SOURCE_DIR}/component/solidmechanics/spring/CudaSpringForceField.cu. ### Collisions; ; ### Constraints; ${SOFACUDA_SOURCE_DIR}/component/constraint/projective/CudaFixedProjectiveConstraint.cu; ${SOFACUDA_SOURCE_DIR}/component/constraint/projective/CudaLinearMovementProjectiveConstraint.cu; ; ; ). sofa_find_package(Sofa.GL QUIET); if(NOT Sofa.GL_FOUND); message(WARNING ""Sofa.GL is not active.""); message(""OpenGL-related code wont be enabled (Sharing OpenGL buffers with CUDA)""); else(); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaVisualModel.h; sofa/gpu/cuda/CudaVisualModel.inl; ); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaVisualModel.cpp; ); list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaVisualModel.cu; ); endif(). #Compatibility; if(SOFA_ENABLE_LEGACY_HEADERS); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaBarycentricMapping.h; sofa/gpu/cuda/CudaBarycentricMapping.inl; sofa/gpu/cuda/CudaBarycentricMappingRigid.h; sofa/gpu/cuda/CudaRigidMapping.h; sofa/gpu/cuda/CudaRigidMapping.inl; sofa/gpu/cuda/CudaIdentityMapping.h; sofa/gpu/cuda/CudaIdentityMapping.inl; sofa/gpu/cuda/CudaSubsetMapping.h; sofa/gpu/cuda/CudaSubsetMapping.inl. sofa/gpu/cuda/CudaDiagonalMass.h; sofa/gpu/cuda/CudaDiagonalMass.inl. sofa/gpu/cuda/CudaMeshMatrixMass.h; sofa/gpu/cuda/CudaMeshMatrixMass.inl. sofa/gpu/cuda/CudaUniformMass.h; sofa/gpu/cuda/CudaUniformMass.inl. sofa/gpu/cuda/CudaHexahedronFEMForceField.h; sofa/gpu/cuda/CudaHexahedronFEMForceField.inl; sofa/gpu/cuda/CudaStandar",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:14976,Integrability,message,message,14976,"sponse.Contact REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Algorithm REQUIRED); sofa_find_package(Sofa.Component.Collision.Detection.Intersection REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.Engine.Select REQUIRED); sofa_find_package(Sofa.Component.Engine.Transform REQUIRED); sofa_find_package(Sofa.Component.MechanicalLoad REQUIRED). sofa_find_package(Sofa.GUI QUIET); if(Sofa.GUI_FOUND); list(APPEND SOURCE_FILES sofa/gpu/gui/CudaMouseInteraction.cpp); endif(). sofa_find_package(Sofa.GUI.Qt QUIET); if(Sofa.GUI.Qt_FOUND); list(APPEND HEADER_FILES sofa/gpu/gui/CudaDataWidget.h); list(APPEND SOURCE_FILES sofa/gpu/gui/CudaDataWidget.cpp); endif(). find_package(SofaDistanceGrid QUIET); if(SofaDistanceGrid_FOUND); sofa_find_package(MiniFlowVR QUIET); if(MiniFlowVR_FOUND); message(STATUS ""SofaCUDA: MiniFlowVR enabled.""); else(); message(STATUS ""SofaCUDA: MiniFlowVR was not enabled, therefore some feature of CudaDistanceGridCollisionModel will not be compiled.""); endif(). list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaDistanceGridCollisionModel.h; sofa/gpu/cuda/CudaContactMapper.h; sofa/gpu/cuda/CudaCollisionDetection.h). list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaDistanceGridCollisionModel.cpp; sofa/gpu/cuda/CudaCollisionDistanceGrid.cpp; sofa/gpu/cuda/CudaCollisionDetection.cpp). list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaContactMapper.cu; sofa/gpu/cuda/CudaCollisionDetection.cu); else(); message(STATUS ""SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.""); endif(). find_package(SofaSphFluid QUIET); if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaParticleSource.h; sofa/gpu/cuda/CudaParticleSource.inl; sofa/gpu/cuda/CudaSPHFluidForceField.h;",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:15033,Integrability,message,message,15033,"section REQUIRED); sofa_find_package(Sofa.Component.StateContainer REQUIRED); sofa_find_package(Sofa.Component.Constraint.Projective REQUIRED); sofa_find_package(Sofa.Component.Mapping.Linear REQUIRED); sofa_find_package(Sofa.Component.Mapping.NonLinear REQUIRED); sofa_find_package(Sofa.Component.Engine.Select REQUIRED); sofa_find_package(Sofa.Component.Engine.Transform REQUIRED); sofa_find_package(Sofa.Component.MechanicalLoad REQUIRED). sofa_find_package(Sofa.GUI QUIET); if(Sofa.GUI_FOUND); list(APPEND SOURCE_FILES sofa/gpu/gui/CudaMouseInteraction.cpp); endif(). sofa_find_package(Sofa.GUI.Qt QUIET); if(Sofa.GUI.Qt_FOUND); list(APPEND HEADER_FILES sofa/gpu/gui/CudaDataWidget.h); list(APPEND SOURCE_FILES sofa/gpu/gui/CudaDataWidget.cpp); endif(). find_package(SofaDistanceGrid QUIET); if(SofaDistanceGrid_FOUND); sofa_find_package(MiniFlowVR QUIET); if(MiniFlowVR_FOUND); message(STATUS ""SofaCUDA: MiniFlowVR enabled.""); else(); message(STATUS ""SofaCUDA: MiniFlowVR was not enabled, therefore some feature of CudaDistanceGridCollisionModel will not be compiled.""); endif(). list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaDistanceGridCollisionModel.h; sofa/gpu/cuda/CudaContactMapper.h; sofa/gpu/cuda/CudaCollisionDetection.h). list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaDistanceGridCollisionModel.cpp; sofa/gpu/cuda/CudaCollisionDistanceGrid.cpp; sofa/gpu/cuda/CudaCollisionDetection.cpp). list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaContactMapper.cu; sofa/gpu/cuda/CudaCollisionDetection.cu); else(); message(STATUS ""SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.""); endif(). find_package(SofaSphFluid QUIET); if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaParticleSource.h; sofa/gpu/cuda/CudaParticleSource.inl; sofa/gpu/cuda/CudaSPHFluidForceField.h; sofa/gpu/cuda/CudaSPHFluidForceField.inl; sofa/gpu/cuda/CudaParticlesRepulsionForceField.h; sofa/gpu/cuda/CudaParticlesRepulsionForceField.inl; sofa/gpu/cud",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:15604,Integrability,message,message,15604,"dif(). sofa_find_package(Sofa.GUI.Qt QUIET); if(Sofa.GUI.Qt_FOUND); list(APPEND HEADER_FILES sofa/gpu/gui/CudaDataWidget.h); list(APPEND SOURCE_FILES sofa/gpu/gui/CudaDataWidget.cpp); endif(). find_package(SofaDistanceGrid QUIET); if(SofaDistanceGrid_FOUND); sofa_find_package(MiniFlowVR QUIET); if(MiniFlowVR_FOUND); message(STATUS ""SofaCUDA: MiniFlowVR enabled.""); else(); message(STATUS ""SofaCUDA: MiniFlowVR was not enabled, therefore some feature of CudaDistanceGridCollisionModel will not be compiled.""); endif(). list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaDistanceGridCollisionModel.h; sofa/gpu/cuda/CudaContactMapper.h; sofa/gpu/cuda/CudaCollisionDetection.h). list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaDistanceGridCollisionModel.cpp; sofa/gpu/cuda/CudaCollisionDistanceGrid.cpp; sofa/gpu/cuda/CudaCollisionDetection.cpp). list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaContactMapper.cu; sofa/gpu/cuda/CudaCollisionDetection.cu); else(); message(STATUS ""SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.""); endif(). find_package(SofaSphFluid QUIET); if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaParticleSource.h; sofa/gpu/cuda/CudaParticleSource.inl; sofa/gpu/cuda/CudaSPHFluidForceField.h; sofa/gpu/cuda/CudaSPHFluidForceField.inl; sofa/gpu/cuda/CudaParticlesRepulsionForceField.h; sofa/gpu/cuda/CudaParticlesRepulsionForceField.inl; sofa/gpu/cuda/CudaSpatialGridContainer.h; sofa/gpu/cuda/CudaSpatialGridContainer.inl; ); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaParticleSource.cpp; sofa/gpu/cuda/CudaSPHFluidForceField.cpp; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cpp; sofa/gpu/cuda/CudaSpatialGridContainer.cpp; ); list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaParticleSource.cu; sofa/gpu/cuda/CudaSPHFluidForceField.cu; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cu; sofa/gpu/cuda/CudaSpatialGridContainer.cu; ); message(STATUS ""SofaCUDA: optional dependency to SofaSphFluid found. ""); else(); me",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:16576,Integrability,message,message,16576,"ssage(STATUS ""SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.""); endif(). find_package(SofaSphFluid QUIET); if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaParticleSource.h; sofa/gpu/cuda/CudaParticleSource.inl; sofa/gpu/cuda/CudaSPHFluidForceField.h; sofa/gpu/cuda/CudaSPHFluidForceField.inl; sofa/gpu/cuda/CudaParticlesRepulsionForceField.h; sofa/gpu/cuda/CudaParticlesRepulsionForceField.inl; sofa/gpu/cuda/CudaSpatialGridContainer.h; sofa/gpu/cuda/CudaSpatialGridContainer.inl; ); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaParticleSource.cpp; sofa/gpu/cuda/CudaSPHFluidForceField.cpp; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cpp; sofa/gpu/cuda/CudaSpatialGridContainer.cpp; ); list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaParticleSource.cu; sofa/gpu/cuda/CudaSPHFluidForceField.cu; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cu; sofa/gpu/cuda/CudaSpatialGridContainer.cu; ); message(STATUS ""SofaCUDA: optional dependency to SofaSphFluid found. ""); else(); message(STATUS ""SofaCUDA: optional dependency SofaSphFluid not found. ""); endif(). sofa_find_package(SofaValidation QUIET); if(SofaValidation_FOUND); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaExtraMonitor.cpp; ); message(STATUS ""SofaCUDA: found SofaValidation, enabling CudaExtraMonitor (Warning: this component is being deprecated). ""); endif(). option(SOFACUDA_VERBOSE_PTXAS ""???"" OFF); if(SOFACUDA_VERBOSE_PTXAS); set(VERBOSE_PTXAS --ptxas-options=-v); endif(). option(SOFACUDA_CUBLAS ""Activate cublas support in CUDA (requires SOFACUDA_DOUBLE)."" OFF); if(SOFACUDA_CUBLAS); set(SOFA_GPU_CUBLAS 1) # #cmakedefine; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(CUDASparse REQUIRED); endif(). option(SOFACUDA_CUDPP ""Activate CUDPP (for RadixSort)."" OFF); if(SOFACUDA_CUDPP); set(SOFA_GPU_CUDPP 1) # #cmakedefine; endif(). # Note: THRUST is included in CUDA SDK 4.0+, it is recommended to use it if available; option(SOFAC",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:16611,Integrability,depend,dependency,16611,"ssage(STATUS ""SofaCUDA: SofaDistanceGrid was not enabled, therefore CudaDistanceGridCollisionModel will not be compiled.""); endif(). find_package(SofaSphFluid QUIET); if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaParticleSource.h; sofa/gpu/cuda/CudaParticleSource.inl; sofa/gpu/cuda/CudaSPHFluidForceField.h; sofa/gpu/cuda/CudaSPHFluidForceField.inl; sofa/gpu/cuda/CudaParticlesRepulsionForceField.h; sofa/gpu/cuda/CudaParticlesRepulsionForceField.inl; sofa/gpu/cuda/CudaSpatialGridContainer.h; sofa/gpu/cuda/CudaSpatialGridContainer.inl; ); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaParticleSource.cpp; sofa/gpu/cuda/CudaSPHFluidForceField.cpp; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cpp; sofa/gpu/cuda/CudaSpatialGridContainer.cpp; ); list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaParticleSource.cu; sofa/gpu/cuda/CudaSPHFluidForceField.cu; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cu; sofa/gpu/cuda/CudaSpatialGridContainer.cu; ); message(STATUS ""SofaCUDA: optional dependency to SofaSphFluid found. ""); else(); message(STATUS ""SofaCUDA: optional dependency SofaSphFluid not found. ""); endif(). sofa_find_package(SofaValidation QUIET); if(SofaValidation_FOUND); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaExtraMonitor.cpp; ); message(STATUS ""SofaCUDA: found SofaValidation, enabling CudaExtraMonitor (Warning: this component is being deprecated). ""); endif(). option(SOFACUDA_VERBOSE_PTXAS ""???"" OFF); if(SOFACUDA_VERBOSE_PTXAS); set(VERBOSE_PTXAS --ptxas-options=-v); endif(). option(SOFACUDA_CUBLAS ""Activate cublas support in CUDA (requires SOFACUDA_DOUBLE)."" OFF); if(SOFACUDA_CUBLAS); set(SOFA_GPU_CUBLAS 1) # #cmakedefine; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(CUDASparse REQUIRED); endif(). option(SOFACUDA_CUDPP ""Activate CUDPP (for RadixSort)."" OFF); if(SOFACUDA_CUDPP); set(SOFA_GPU_CUDPP 1) # #cmakedefine; endif(). # Note: THRUST is included in CUDA SDK 4.0+, it is recommended to use it if available; option(SOFAC",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:16657,Integrability,message,message,16657,"eGridCollisionModel will not be compiled.""); endif(). find_package(SofaSphFluid QUIET); if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaParticleSource.h; sofa/gpu/cuda/CudaParticleSource.inl; sofa/gpu/cuda/CudaSPHFluidForceField.h; sofa/gpu/cuda/CudaSPHFluidForceField.inl; sofa/gpu/cuda/CudaParticlesRepulsionForceField.h; sofa/gpu/cuda/CudaParticlesRepulsionForceField.inl; sofa/gpu/cuda/CudaSpatialGridContainer.h; sofa/gpu/cuda/CudaSpatialGridContainer.inl; ); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaParticleSource.cpp; sofa/gpu/cuda/CudaSPHFluidForceField.cpp; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cpp; sofa/gpu/cuda/CudaSpatialGridContainer.cpp; ); list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaParticleSource.cu; sofa/gpu/cuda/CudaSPHFluidForceField.cu; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cu; sofa/gpu/cuda/CudaSpatialGridContainer.cu; ); message(STATUS ""SofaCUDA: optional dependency to SofaSphFluid found. ""); else(); message(STATUS ""SofaCUDA: optional dependency SofaSphFluid not found. ""); endif(). sofa_find_package(SofaValidation QUIET); if(SofaValidation_FOUND); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaExtraMonitor.cpp; ); message(STATUS ""SofaCUDA: found SofaValidation, enabling CudaExtraMonitor (Warning: this component is being deprecated). ""); endif(). option(SOFACUDA_VERBOSE_PTXAS ""???"" OFF); if(SOFACUDA_VERBOSE_PTXAS); set(VERBOSE_PTXAS --ptxas-options=-v); endif(). option(SOFACUDA_CUBLAS ""Activate cublas support in CUDA (requires SOFACUDA_DOUBLE)."" OFF); if(SOFACUDA_CUBLAS); set(SOFA_GPU_CUBLAS 1) # #cmakedefine; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(CUDASparse REQUIRED); endif(). option(SOFACUDA_CUDPP ""Activate CUDPP (for RadixSort)."" OFF); if(SOFACUDA_CUDPP); set(SOFA_GPU_CUDPP 1) # #cmakedefine; endif(). # Note: THRUST is included in CUDA SDK 4.0+, it is recommended to use it if available; option(SOFACUDA_THRUST ""Activate THRUST (for RadixSort)."" ON); if(SOFACUDA_THRUST); set(SO",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:16692,Integrability,depend,dependency,16692,"eGridCollisionModel will not be compiled.""); endif(). find_package(SofaSphFluid QUIET); if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; sofa/gpu/cuda/CudaParticleSource.h; sofa/gpu/cuda/CudaParticleSource.inl; sofa/gpu/cuda/CudaSPHFluidForceField.h; sofa/gpu/cuda/CudaSPHFluidForceField.inl; sofa/gpu/cuda/CudaParticlesRepulsionForceField.h; sofa/gpu/cuda/CudaParticlesRepulsionForceField.inl; sofa/gpu/cuda/CudaSpatialGridContainer.h; sofa/gpu/cuda/CudaSpatialGridContainer.inl; ); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaParticleSource.cpp; sofa/gpu/cuda/CudaSPHFluidForceField.cpp; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cpp; sofa/gpu/cuda/CudaSpatialGridContainer.cpp; ); list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaParticleSource.cu; sofa/gpu/cuda/CudaSPHFluidForceField.cu; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cu; sofa/gpu/cuda/CudaSpatialGridContainer.cu; ); message(STATUS ""SofaCUDA: optional dependency to SofaSphFluid found. ""); else(); message(STATUS ""SofaCUDA: optional dependency SofaSphFluid not found. ""); endif(). sofa_find_package(SofaValidation QUIET); if(SofaValidation_FOUND); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaExtraMonitor.cpp; ); message(STATUS ""SofaCUDA: found SofaValidation, enabling CudaExtraMonitor (Warning: this component is being deprecated). ""); endif(). option(SOFACUDA_VERBOSE_PTXAS ""???"" OFF); if(SOFACUDA_VERBOSE_PTXAS); set(VERBOSE_PTXAS --ptxas-options=-v); endif(). option(SOFACUDA_CUBLAS ""Activate cublas support in CUDA (requires SOFACUDA_DOUBLE)."" OFF); if(SOFACUDA_CUBLAS); set(SOFA_GPU_CUBLAS 1) # #cmakedefine; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(CUDASparse REQUIRED); endif(). option(SOFACUDA_CUDPP ""Activate CUDPP (for RadixSort)."" OFF); if(SOFACUDA_CUDPP); set(SOFA_GPU_CUDPP 1) # #cmakedefine; endif(). # Note: THRUST is included in CUDA SDK 4.0+, it is recommended to use it if available; option(SOFACUDA_THRUST ""Activate THRUST (for RadixSort)."" ON); if(SOFACUDA_THRUST); set(SO",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:16872,Integrability,message,message,16872,"Field.h; sofa/gpu/cuda/CudaSPHFluidForceField.inl; sofa/gpu/cuda/CudaParticlesRepulsionForceField.h; sofa/gpu/cuda/CudaParticlesRepulsionForceField.inl; sofa/gpu/cuda/CudaSpatialGridContainer.h; sofa/gpu/cuda/CudaSpatialGridContainer.inl; ); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaParticleSource.cpp; sofa/gpu/cuda/CudaSPHFluidForceField.cpp; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cpp; sofa/gpu/cuda/CudaSpatialGridContainer.cpp; ); list(APPEND CUDA_SOURCES; sofa/gpu/cuda/CudaParticleSource.cu; sofa/gpu/cuda/CudaSPHFluidForceField.cu; sofa/gpu/cuda/CudaParticlesRepulsionForceField.cu; sofa/gpu/cuda/CudaSpatialGridContainer.cu; ); message(STATUS ""SofaCUDA: optional dependency to SofaSphFluid found. ""); else(); message(STATUS ""SofaCUDA: optional dependency SofaSphFluid not found. ""); endif(). sofa_find_package(SofaValidation QUIET); if(SofaValidation_FOUND); list(APPEND SOURCE_FILES; sofa/gpu/cuda/CudaExtraMonitor.cpp; ); message(STATUS ""SofaCUDA: found SofaValidation, enabling CudaExtraMonitor (Warning: this component is being deprecated). ""); endif(). option(SOFACUDA_VERBOSE_PTXAS ""???"" OFF); if(SOFACUDA_VERBOSE_PTXAS); set(VERBOSE_PTXAS --ptxas-options=-v); endif(). option(SOFACUDA_CUBLAS ""Activate cublas support in CUDA (requires SOFACUDA_DOUBLE)."" OFF); if(SOFACUDA_CUBLAS); set(SOFA_GPU_CUBLAS 1) # #cmakedefine; list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}); find_package(CUDASparse REQUIRED); endif(). option(SOFACUDA_CUDPP ""Activate CUDPP (for RadixSort)."" OFF); if(SOFACUDA_CUDPP); set(SOFA_GPU_CUDPP 1) # #cmakedefine; endif(). # Note: THRUST is included in CUDA SDK 4.0+, it is recommended to use it if available; option(SOFACUDA_THRUST ""Activate THRUST (for RadixSort)."" ON); if(SOFACUDA_THRUST); set(SOFA_GPU_THRUST 1) # #cmakedefine; endif(). option(SOFACUDA_DOUBLE ""Activate double-precision support in CUDA (requires GT200+ GPU and -arch sm_13 flag."" OFF); if(SOFACUDA_DOUBLE); set(SOFA_GPU_CUDA_DOUBLE 1) # #cmakedefine; endif(). option(SOFA",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:18711,Integrability,message,message,18711,"on support in CUDA (requires GT200+ GPU and -arch sm_13 flag."" OFF); if(SOFACUDA_DOUBLE); set(SOFA_GPU_CUDA_DOUBLE 1) # #cmakedefine; endif(). option(SOFACUDA_DOUBLE_PRECISE ""Enable double-precision for sqrt/div... (requires compute capability; >= 2 and CUDA_VERSION > 3.0)"" OFF); # Note: with SOFA_GPU_CUDA_PRECISE and SOFA_GPU_CUDA_DOUBLE you get IEEE; # 754-compliant floating point operations for addition and multiplication only.; if(SOFACUDA_DOUBLE_PRECISE); set(SOFA_GPU_CUDA_DOUBLE_PRECISE 1) # #cmakedefine; endif(). option(SOFACUDA_PRECISE ""Use IEEE 754-compliant floating point operations."" OFF). include(SofaCUDANvccFlags.cmake). # nvcc uses a ""host code compiler"" to compile CPU code, specified by CUDA_HOST_COMPILER.; # With some versions of CMake, CUDA_HOST_COMPILER defaults to CMAKE_C_COMPILER,; # but few host compilers are actually supported. Workarounds should go here.; if (${CUDA_HOST_COMPILER} MATCHES ""ccache$""); message(STATUS ""SofaCUDA: CUDA host compiler was set to ccache, changing to g++""); set(CUDA_HOST_COMPILER ""g++"" CACHE STRING ""Host side compiler used by NVCC"" FORCE); endif(). # quick and dirty fix for nvcc compatibility with -fno-partial-inlining flag; set(CUDA_PROPAGATE_HOST_FLAGS OFF). if(WIN32); add_definitions(""-DWIN32""); set(WINDOWSOPTIONS ""/MD""); endif(). # Make the compiler definitions available to nvcc; add_definitions(""-DSOFA_BUILD_SOFACUDA""); # Give include directories to nvcc compiler.; # Note: keep cuda_include_directories() before cuda_add_library().; cuda_include_directories(""${CMAKE_CURRENT_SOURCE_DIR}""); cuda_include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/src""); cuda_include_directories(""${CMAKE_BINARY_DIR}/include""); cuda_add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${CUDA_SOURCES} ${README_FILES} OPTIONS ${VERBOSE_PTXAS} ${WINDOWSOPTIONS}). target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR};${CMAKE_CURRENT_SOURCE_DIR}/src>""); set_target_properties(${PROJECT_NAM",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:438,Modifiability,config,config,438,"cmake_minimum_required(VERSION 3.22); project(SofaCUDA LANGUAGES CUDA CXX). set(SOFACUDA_MAJOR_VERSION 0); set(SOFACUDA_MINOR_VERSION 1); set(SOFACUDA_VERSION ${SOFACUDA_MAJOR_VERSION}.${SOFACUDA_MINOR_VERSION}). # quick and dirty fix for nvcc compatibility with -fno-partial-inlining flag; if(NOT WIN32); set(CUDA_PROPAGATE_HOST_FLAGS OFF); endif(). set(SOFACUDA_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/src/SofaCUDA""). set(HEADER_FILES; config.h.in; init.h; ; ### Common; sofa/gpu/cuda/CudaBaseVector.h; sofa/gpu/cuda/CudaCommon.h; sofa/gpu/cuda/CudaMath.h; sofa/gpu/cuda/CudaMath.inl; sofa/gpu/cuda/CudaMathRigid.h; sofa/gpu/cuda/CudaMathRigid.inl; sofa/gpu/cuda/CudaMatrix.h; sofa/gpu/cuda/CudaMemoryManager.h; sofa/gpu/cuda/CudaScan.h; sofa/gpu/cuda/CudaSort.h; sofa/gpu/cuda/CudaTexture.h; sofa/gpu/cuda/CudaTypes.h; sofa/gpu/cuda/mycuda.h. ### Mechanical; ${SOFACUDA_SOURCE_DIR}/component/statecontainer/CudaMechanicalObject.h; ${SOFACUDA_SOURCE_DIR}/component/statecontainer/CudaMechanicalObject.inl. ### Mappings; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaBarycentricMapping.h; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaBarycentricMapping.inl; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaBarycentricMappingRigid.h; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaBeamLinearMapping.h; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaIdentityMapping.h; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaIdentityMapping.inl; ${SOFACUDA_SOURCE_DIR}/component/mapping/nonlinear/CudaRigidMapping.h; ${SOFACUDA_SOURCE_DIR}/component/mapping/nonlinear/CudaRigidMapping.inl; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaSubsetMapping.h; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaSubsetMapping.inl; ${SOFACUDA_SOURCE_DIR}/component/mapping/linear/CudaSubsetMultiMapping.h. ### Mass; ${SOFACUDA_SOURCE_DIR}/component/mass/CudaDiagonalMass.h; ${SOFACUDA_SOURCE_DIR}/component/mass/CudaDiagonalMass.inl; ${SOFACUDA_SOURCE_DIR}/component/mass/CudaMeshM",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:21588,Modifiability,config,configurations,21588,"TIONS}""); target_link_libraries(${PROJECT_NAME}; Sofa.Component.Mass; Sofa.Component.SolidMechanics.FEM.Elastic; Sofa.Component.SolidMechanics.FEM.HyperElastic; Sofa.Component.SolidMechanics.TensorMass; Sofa.Component.MechanicalLoad; Sofa.Component.Collision.Response.Contact; Sofa.Component.Collision.Detection.Algorithm; Sofa.Component.Collision.Detection.Intersection; Sofa.Component.StateContainer; Sofa.Component.Constraint.Projective; Sofa.Component.Mapping.Linear; Sofa.Component.Mapping.NonLinear; Sofa.Component.Engine.Select; Sofa.Component.Engine.Transform; Sofa.Component.MechanicalLoad; ). target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL); endif(). if(SofaDistanceGrid_FOUND); target_link_libraries(${PROJECT_NAME} SofaDistanceGrid); if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} miniFlowVR); endif(); endif(). if(Sofa.GUI_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GUI); endif(). if(Sofa.GUI.Qt_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Qt); endif(). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} SofaValidation); endif(). if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid); endif(). if(SOFACUDA_CUBLAS); cuda_add_cublas_to_target(${PROJECT_NAME}); target_link_libraries(${PROJECT_NAME} ${CUDA_SPARSE_LIBRARY}); endif(); if(SOFACUDA_CUDPP); target_link_libraries(${PROJECT_NAME} cudpp); endif(). ## SofaCUDANvccFlags.cmake; # Build tree; configure_file(SofaCUDANvccFlags.cmake ${CMAKE_BINARY_DIR}/lib/cmake/SofaCUDANvccFlags.cmake COPYONLY); # Install tree; install(FILES SofaCUDANvccFlags.cmake DESTINATION lib/cmake/SofaCUDA). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFACUDA_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt:21816,Modifiability,plugin,plugins,21816,"TIONS}""); target_link_libraries(${PROJECT_NAME}; Sofa.Component.Mass; Sofa.Component.SolidMechanics.FEM.Elastic; Sofa.Component.SolidMechanics.FEM.HyperElastic; Sofa.Component.SolidMechanics.TensorMass; Sofa.Component.MechanicalLoad; Sofa.Component.Collision.Response.Contact; Sofa.Component.Collision.Detection.Algorithm; Sofa.Component.Collision.Detection.Intersection; Sofa.Component.StateContainer; Sofa.Component.Constraint.Projective; Sofa.Component.Mapping.Linear; Sofa.Component.Mapping.NonLinear; Sofa.Component.Engine.Select; Sofa.Component.Engine.Transform; Sofa.Component.MechanicalLoad; ). target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GL); endif(). if(SofaDistanceGrid_FOUND); target_link_libraries(${PROJECT_NAME} SofaDistanceGrid); if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} miniFlowVR); endif(); endif(). if(Sofa.GUI_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GUI); endif(). if(Sofa.GUI.Qt_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Qt); endif(). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} SofaValidation); endif(). if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid); endif(). if(SOFACUDA_CUBLAS); cuda_add_cublas_to_target(${PROJECT_NAME}); target_link_libraries(${PROJECT_NAME} ${CUDA_SPARSE_LIBRARY}); endif(); if(SOFACUDA_CUDPP); target_link_libraries(${PROJECT_NAME} cudpp); endif(). ## SofaCUDANvccFlags.cmake; # Build tree; configure_file(SofaCUDANvccFlags.cmake ${CMAKE_BINARY_DIR}/lib/cmake/SofaCUDANvccFlags.cmake COPYONLY); # Install tree; install(FILES SofaCUDANvccFlags.cmake DESTINATION lib/cmake/SofaCUDA). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFACUDA_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaCUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaCUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt:3232,Deployability,configurat,configurations,3232,"GridForceField.inl; ). set(SOURCE_FILES; ${SOFADISTANCEGRID_SRC}/initSofaDistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/DistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/RegisterModelToCollisionFactory.cpp; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RayDistanceGridContact.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/DistanceGridCollisionModel.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/BarycentricPenalityContact_DistanceGrid.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; examples/DistanceGridCollisionModel.scn; examples/FFDDistanceGridCollisionModel.scn; examples/DistanceGridForceField-liver.scn; ). find_package(MiniFlowVR QUIET); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GL QUIET). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} PRIVATE miniFlowVR) # Private because not exported in API; message(STATUS ""SofaDistanceGrid: MiniFlowVR found.""); else(); message(STATUS ""SofaDistanceGrid: MiniFlowVR not found, some features will not be compiled.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(SofaDistanceGrid_test); endif(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaDistanceGrid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt:689,Integrability,message,message,689,"cmake_minimum_required(VERSION 3.22); project(SofaDistanceGrid LANGUAGES CXX). option(SOFADISTANCEGRID_USE_MINIFLOWVR ""Build and use the miniFlowVR library with DistanceGrid."" OFF); if(SOFADISTANCEGRID_USE_MINIFLOWVR); add_subdirectory(extlibs/miniFlowVR); set_target_properties(miniFlowVR PROPERTIES DEBUG_POSTFIX ""_d""); #set_target_properties(miniFlowVR PROPERTIES FOLDER ""SofaExtlibs""); endif(). option(SOFADISTANCEGRID_USE_MESHCONV ""Build meshconv, mainly used to generate DistanceGrid file. Needs miniFlowVR."" OFF); if(SOFADISTANCEGRID_USE_MESHCONV); find_package(MiniFlowVR QUIET); if(MiniFlowVR_FOUND); sofa_add_subdirectory(application applications/meshconv meshconv OFF); else(); message(WARNING ""meshconv needs miniFlowVR; enable SOFADISTANCEGRID_USE_MINIFLOWVR to build it.""); endif(); endif(). set(SOFADISTANCEGRID_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFADISTANCEGRID_SRC}/config.h.in; ${SOFADISTANCEGRID_SRC}/DistanceGrid.h; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.h; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.inl; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.h; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.inl; ${SOFADISTANCEGRID_SRC}/components/collision/DistanceGridCollisionModel.h; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.h; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.inl; ). set(SOURCE_FILES; ${SOFADISTANCEGRID_SRC}/initSofaDistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/DistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/RegisterModelToCollisionFactory.cpp; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RayDistanceGridContact.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersect",MatchSource.DOCS,applications/plugins/SofaDistanceGrid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt:2933,Integrability,message,message,2933,"GridForceField.inl; ). set(SOURCE_FILES; ${SOFADISTANCEGRID_SRC}/initSofaDistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/DistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/RegisterModelToCollisionFactory.cpp; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RayDistanceGridContact.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/DistanceGridCollisionModel.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/BarycentricPenalityContact_DistanceGrid.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; examples/DistanceGridCollisionModel.scn; examples/FFDDistanceGridCollisionModel.scn; examples/DistanceGridForceField-liver.scn; ). find_package(MiniFlowVR QUIET); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GL QUIET). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} PRIVATE miniFlowVR) # Private because not exported in API; message(STATUS ""SofaDistanceGrid: MiniFlowVR found.""); else(); message(STATUS ""SofaDistanceGrid: MiniFlowVR not found, some features will not be compiled.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(SofaDistanceGrid_test); endif(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaDistanceGrid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt:2996,Integrability,message,message,2996,"GridForceField.inl; ). set(SOURCE_FILES; ${SOFADISTANCEGRID_SRC}/initSofaDistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/DistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/RegisterModelToCollisionFactory.cpp; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RayDistanceGridContact.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/DistanceGridCollisionModel.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/BarycentricPenalityContact_DistanceGrid.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; examples/DistanceGridCollisionModel.scn; examples/FFDDistanceGridCollisionModel.scn; examples/DistanceGridForceField-liver.scn; ). find_package(MiniFlowVR QUIET); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GL QUIET). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} PRIVATE miniFlowVR) # Private because not exported in API; message(STATUS ""SofaDistanceGrid: MiniFlowVR found.""); else(); message(STATUS ""SofaDistanceGrid: MiniFlowVR not found, some features will not be compiled.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(SofaDistanceGrid_test); endif(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaDistanceGrid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt:897,Modifiability,config,config,897,"cmake_minimum_required(VERSION 3.22); project(SofaDistanceGrid LANGUAGES CXX). option(SOFADISTANCEGRID_USE_MINIFLOWVR ""Build and use the miniFlowVR library with DistanceGrid."" OFF); if(SOFADISTANCEGRID_USE_MINIFLOWVR); add_subdirectory(extlibs/miniFlowVR); set_target_properties(miniFlowVR PROPERTIES DEBUG_POSTFIX ""_d""); #set_target_properties(miniFlowVR PROPERTIES FOLDER ""SofaExtlibs""); endif(). option(SOFADISTANCEGRID_USE_MESHCONV ""Build meshconv, mainly used to generate DistanceGrid file. Needs miniFlowVR."" OFF); if(SOFADISTANCEGRID_USE_MESHCONV); find_package(MiniFlowVR QUIET); if(MiniFlowVR_FOUND); sofa_add_subdirectory(application applications/meshconv meshconv OFF); else(); message(WARNING ""meshconv needs miniFlowVR; enable SOFADISTANCEGRID_USE_MINIFLOWVR to build it.""); endif(); endif(). set(SOFADISTANCEGRID_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFADISTANCEGRID_SRC}/config.h.in; ${SOFADISTANCEGRID_SRC}/DistanceGrid.h; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.h; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.inl; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.h; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.inl; ${SOFADISTANCEGRID_SRC}/components/collision/DistanceGridCollisionModel.h; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.h; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.inl; ). set(SOURCE_FILES; ${SOFADISTANCEGRID_SRC}/initSofaDistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/DistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/RegisterModelToCollisionFactory.cpp; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RayDistanceGridContact.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersect",MatchSource.DOCS,applications/plugins/SofaDistanceGrid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt:3232,Modifiability,config,configurations,3232,"GridForceField.inl; ). set(SOURCE_FILES; ${SOFADISTANCEGRID_SRC}/initSofaDistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/DistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/RegisterModelToCollisionFactory.cpp; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RayDistanceGridContact.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/DistanceGridCollisionModel.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/BarycentricPenalityContact_DistanceGrid.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; examples/DistanceGridCollisionModel.scn; examples/FFDDistanceGridCollisionModel.scn; examples/DistanceGridForceField-liver.scn; ). find_package(MiniFlowVR QUIET); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GL QUIET). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} PRIVATE miniFlowVR) # Private because not exported in API; message(STATUS ""SofaDistanceGrid: MiniFlowVR found.""); else(); message(STATUS ""SofaDistanceGrid: MiniFlowVR not found, some features will not be compiled.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(SofaDistanceGrid_test); endif(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaDistanceGrid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt:3482,Modifiability,plugin,plugins,3482,"GridForceField.inl; ). set(SOURCE_FILES; ${SOFADISTANCEGRID_SRC}/initSofaDistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/DistanceGrid.cpp; ${SOFADISTANCEGRID_SRC}/RegisterModelToCollisionFactory.cpp; ${SOFADISTANCEGRID_SRC}/components/forcefield/DistanceGridForceField.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/FFDDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RayDistanceGridContact.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/RigidDistanceGridDiscreteIntersection.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/DistanceGridCollisionModel.cpp; ${SOFADISTANCEGRID_SRC}/components/collision/BarycentricPenalityContact_DistanceGrid.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; examples/DistanceGridCollisionModel.scn; examples/FFDDistanceGridCollisionModel.scn; examples/DistanceGridForceField-liver.scn; ). find_package(MiniFlowVR QUIET); sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Component.Collision REQUIRED); sofa_find_package(Sofa.GL QUIET). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Collision). if(Sofa.GL_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL); endif(). if(MiniFlowVR_FOUND); target_link_libraries(${PROJECT_NAME} PRIVATE miniFlowVR) # Private because not exported in API; message(STATUS ""SofaDistanceGrid: MiniFlowVR found.""); else(); message(STATUS ""SofaDistanceGrid: MiniFlowVR not found, some features will not be compiled.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(SofaDistanceGrid_test); endif(). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaDistanceGrid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaEulerianFluid/CMakeLists.txt:565,Deployability,configurat,configurations,565,"cmake_minimum_required(VERSION 3.22); project(SofaEulerianFluid VERSION 1.0). find_package(Sofa.Core REQUIRED); find_package(Sofa.GL REQUIRED). set(HEADER_FILES; Fluid2D.h; Fluid3D.h; Grid2D.h; Grid3D.h; config.h; initEulerianFluid.h; ). set(SOURCE_FILES; Fluid2D.cpp; Fluid3D.cpp; Grid2D.cpp; Grid3D.cpp; initEulerianFluid.cpp; ). set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Core Sofa.GL). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaEulerianFluid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaEulerianFluid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaEulerianFluid/CMakeLists.txt:204,Modifiability,config,config,204,"cmake_minimum_required(VERSION 3.22); project(SofaEulerianFluid VERSION 1.0). find_package(Sofa.Core REQUIRED); find_package(Sofa.GL REQUIRED). set(HEADER_FILES; Fluid2D.h; Fluid3D.h; Grid2D.h; Grid3D.h; config.h; initEulerianFluid.h; ). set(SOURCE_FILES; Fluid2D.cpp; Fluid3D.cpp; Grid2D.cpp; Grid3D.cpp; initEulerianFluid.cpp; ). set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Core Sofa.GL). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaEulerianFluid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaEulerianFluid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaEulerianFluid/CMakeLists.txt:565,Modifiability,config,configurations,565,"cmake_minimum_required(VERSION 3.22); project(SofaEulerianFluid VERSION 1.0). find_package(Sofa.Core REQUIRED); find_package(Sofa.GL REQUIRED). set(HEADER_FILES; Fluid2D.h; Fluid3D.h; Grid2D.h; Grid3D.h; config.h; initEulerianFluid.h; ). set(SOURCE_FILES; Fluid2D.cpp; Fluid3D.cpp; Grid2D.cpp; Grid3D.cpp; initEulerianFluid.cpp; ). set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Core Sofa.GL). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaEulerianFluid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaEulerianFluid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaEulerianFluid/CMakeLists.txt:753,Modifiability,plugin,plugins,753,"cmake_minimum_required(VERSION 3.22); project(SofaEulerianFluid VERSION 1.0). find_package(Sofa.Core REQUIRED); find_package(Sofa.GL REQUIRED). set(HEADER_FILES; Fluid2D.h; Fluid3D.h; Grid2D.h; Grid3D.h; config.h; initEulerianFluid.h; ). set(SOURCE_FILES; Fluid2D.cpp; Fluid3D.cpp; Grid2D.cpp; Grid3D.cpp; initEulerianFluid.cpp; ). set(EXTRA_FILES; README.md; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_link_libraries(${PROJECT_NAME} Sofa.Core Sofa.GL). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaEulerianFluid/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaEulerianFluid/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/CMakeLists.txt:2016,Deployability,configurat,configurations,2016,"_VERSION ${SOFAHAPI_MAJOR_VERSION}.${SOFAHAPI_MINOR_VERSION}). set(HEADER_FILES; SofaHAPIForceFeedbackEffect.h; SofaHAPIHapticsDevice.h; config.h.in; ). set(SOURCE_FILES; SofaHAPIForceFeedbackEffect.cpp; SofaHAPIHapticsDevice.cpp; initSofaHAPI.cpp; ). if(NOT TARGET H3DUtil); find_package(H3DUtil REQUIRED); if(WIN32); file(GLOB sharedObjects ""${HAPI_DIR}/bin/H3DUtil_*.dll""); foreach(sharedObject ${sharedObjects}); file(COPY ${sharedObject} DESTINATION ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endforeach(); endif(); else(); set(H3DUTIL_LIBRARIES H3DUtil); endif(). if(NOT TARGET HAPI); find_package(HAPI REQUIRED); if(WIN32); # Copy HAPI DLLs; file(GLOB sharedObjects ""${HAPI_DIR}/bin/HAPI_*.dll""). foreach(sharedObject ${sharedObjects}); file(COPY ${sharedObject} DESTINATION ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endforeach(); endif(); else(); set(HAPI_LIBRARIES HAPI); endif(). if(WIN32); if(CMAKE_CL_64); set(H3D_EXTERNAL_BIN_DIR ${H3D_EXTERNAL_ROOT}/bin64); else(); set(H3D_EXTERNAL_BIN_DIR ${H3D_EXTERNAL_ROOT}/bin32); endif(). file(COPY ""${H3D_EXTERNAL_BIN_DIR}/pthreadVC2.dll"" DESTINATION; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); file(COPY ""${H3D_EXTERNAL_BIN_DIR}/FreeImage.dll"" DESTINATION; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endif(). set(SOFAHAPI_DEPENDENCY_INCLUDE_DIR ${HAPI_INCLUDE_DIR}; ${H3DUTIL_INCLUDE_DIR}). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaUserInteraction SofaHaptics ${HAPI_LIBRARIES} ${H3DUTIL_LIBRARIES}); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${SOFAHAPI_DEPENDENCY_INCLUDE_DIR}>""). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFAHAPI_VERSION}). ## Install rules for the library and the header; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME SofaHAPI; PACKAGE_VERSION ${SOFAHAPI_VERSION}; TARGETS SofaHAPI AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR SofaHAPI; ); ",MatchSource.DOCS,applications/plugins/SofaHAPI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/CMakeLists.txt:348,Modifiability,config,config,348,"cmake_minimum_required(VERSION 3.22); project(SofaHAPI). find_package(SofaUserInteraction REQUIRED); find_package(SofaHaptics REQUIRED). set(SOFAHAPI_MAJOR_VERSION 0); set(SOFAHAPI_MINOR_VERSION 1); set(SOFAHAPI_VERSION ${SOFAHAPI_MAJOR_VERSION}.${SOFAHAPI_MINOR_VERSION}). set(HEADER_FILES; SofaHAPIForceFeedbackEffect.h; SofaHAPIHapticsDevice.h; config.h.in; ). set(SOURCE_FILES; SofaHAPIForceFeedbackEffect.cpp; SofaHAPIHapticsDevice.cpp; initSofaHAPI.cpp; ). if(NOT TARGET H3DUtil); find_package(H3DUtil REQUIRED); if(WIN32); file(GLOB sharedObjects ""${HAPI_DIR}/bin/H3DUtil_*.dll""); foreach(sharedObject ${sharedObjects}); file(COPY ${sharedObject} DESTINATION ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endforeach(); endif(); else(); set(H3DUTIL_LIBRARIES H3DUtil); endif(). if(NOT TARGET HAPI); find_package(HAPI REQUIRED); if(WIN32); # Copy HAPI DLLs; file(GLOB sharedObjects ""${HAPI_DIR}/bin/HAPI_*.dll""). foreach(sharedObject ${sharedObjects}); file(COPY ${sharedObject} DESTINATION ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endforeach(); endif(); else(); set(HAPI_LIBRARIES HAPI); endif(). if(WIN32); if(CMAKE_CL_64); set(H3D_EXTERNAL_BIN_DIR ${H3D_EXTERNAL_ROOT}/bin64); else(); set(H3D_EXTERNAL_BIN_DIR ${H3D_EXTERNAL_ROOT}/bin32); endif(). file(COPY ""${H3D_EXTERNAL_BIN_DIR}/pthreadVC2.dll"" DESTINATION; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); file(COPY ""${H3D_EXTERNAL_BIN_DIR}/FreeImage.dll"" DESTINATION; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endif(). set(SOFAHAPI_DEPENDENCY_INCLUDE_DIR ${HAPI_INCLUDE_DIR}; ${H3DUTIL_INCLUDE_DIR}). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaUserInteraction SofaHaptics ${HAPI_LIBRARIES} ${H3DUTIL_LIBRARIES}); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${SOFAHAPI_DEPENDENCY_INCLUDE_DIR}>""). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFAHAPI_VERSION}). ## Install rules for the library and the header;",MatchSource.DOCS,applications/plugins/SofaHAPI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/CMakeLists.txt:2016,Modifiability,config,configurations,2016,"_VERSION ${SOFAHAPI_MAJOR_VERSION}.${SOFAHAPI_MINOR_VERSION}). set(HEADER_FILES; SofaHAPIForceFeedbackEffect.h; SofaHAPIHapticsDevice.h; config.h.in; ). set(SOURCE_FILES; SofaHAPIForceFeedbackEffect.cpp; SofaHAPIHapticsDevice.cpp; initSofaHAPI.cpp; ). if(NOT TARGET H3DUtil); find_package(H3DUtil REQUIRED); if(WIN32); file(GLOB sharedObjects ""${HAPI_DIR}/bin/H3DUtil_*.dll""); foreach(sharedObject ${sharedObjects}); file(COPY ${sharedObject} DESTINATION ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endforeach(); endif(); else(); set(H3DUTIL_LIBRARIES H3DUtil); endif(). if(NOT TARGET HAPI); find_package(HAPI REQUIRED); if(WIN32); # Copy HAPI DLLs; file(GLOB sharedObjects ""${HAPI_DIR}/bin/HAPI_*.dll""). foreach(sharedObject ${sharedObjects}); file(COPY ${sharedObject} DESTINATION ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endforeach(); endif(); else(); set(HAPI_LIBRARIES HAPI); endif(). if(WIN32); if(CMAKE_CL_64); set(H3D_EXTERNAL_BIN_DIR ${H3D_EXTERNAL_ROOT}/bin64); else(); set(H3D_EXTERNAL_BIN_DIR ${H3D_EXTERNAL_ROOT}/bin32); endif(). file(COPY ""${H3D_EXTERNAL_BIN_DIR}/pthreadVC2.dll"" DESTINATION; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); file(COPY ""${H3D_EXTERNAL_BIN_DIR}/FreeImage.dll"" DESTINATION; ""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${CONFIG}""); endif(). set(SOFAHAPI_DEPENDENCY_INCLUDE_DIR ${HAPI_INCLUDE_DIR}; ${H3DUTIL_INCLUDE_DIR}). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC SofaUserInteraction SofaHaptics ${HAPI_LIBRARIES} ${H3DUTIL_LIBRARIES}); target_include_directories(${PROJECT_NAME} PUBLIC ""$<BUILD_INTERFACE:${SOFAHAPI_DEPENDENCY_INCLUDE_DIR}>""). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFAHAPI_VERSION}). ## Install rules for the library and the header; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME SofaHAPI; PACKAGE_VERSION ${SOFAHAPI_VERSION}; TARGETS SofaHAPI AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR SofaHAPI; ); ",MatchSource.DOCS,applications/plugins/SofaHAPI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaHAPI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/CMakeLists.txt:1594,Deployability,configurat,configurations,1594,"cmake_minimum_required(VERSION 3.22); project(SofaImplicitField VERSION 1.0). sofa_find_package(Sofa.Framework REQUIRED); sofa_find_package(SofaDistanceGrid REQUIRED). set(HEADER_FILES; config.h.in; initSofaImplicitField.h. # This is backward compatibility; deprecated/SphereSurface.h; deprecated/ImplicitSurfaceContainer.h # This is a backward compatibility file toward ScalarField; deprecated/InterpolatedImplicitSurface.h # This is a backward compatibility file toward DiscreteridField. components/geometry/BottleField.h; components/geometry/DiscreteGridField.h; components/geometry/SphericalField.h; components/geometry/ScalarField.h; components/geometry/StarShapedField.h; components/mapping/ImplicitSurfaceMapping.h; components/mapping/ImplicitSurfaceMapping.inl; ). set(SOURCE_FILES; initSofaImplicitField.cpp. ## This is a backward compatibility..; deprecated/SphereSurface.cpp; deprecated/InterpolatedImplicitSurface.cpp. components/geometry/BottleField.cpp; components/geometry/ScalarField.cpp; components/geometry/DiscreteGridField.cpp; components/geometry/SphericalField.cpp; components/geometry/StarShapedField.cpp; components/mapping/ImplicitSurfaceMapping.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; ). if(SOFA_BUILD_TESTS); add_subdirectory(SofaImplicitField_test); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_compile_options(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SOFAIMPLICITFIELD""); target_link_libraries(${PROJECT_NAME} PRIVATE SofaDistanceGrid). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaImplicitField/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/CMakeLists.txt:186,Modifiability,config,config,186,"cmake_minimum_required(VERSION 3.22); project(SofaImplicitField VERSION 1.0). sofa_find_package(Sofa.Framework REQUIRED); sofa_find_package(SofaDistanceGrid REQUIRED). set(HEADER_FILES; config.h.in; initSofaImplicitField.h. # This is backward compatibility; deprecated/SphereSurface.h; deprecated/ImplicitSurfaceContainer.h # This is a backward compatibility file toward ScalarField; deprecated/InterpolatedImplicitSurface.h # This is a backward compatibility file toward DiscreteridField. components/geometry/BottleField.h; components/geometry/DiscreteGridField.h; components/geometry/SphericalField.h; components/geometry/ScalarField.h; components/geometry/StarShapedField.h; components/mapping/ImplicitSurfaceMapping.h; components/mapping/ImplicitSurfaceMapping.inl; ). set(SOURCE_FILES; initSofaImplicitField.cpp. ## This is a backward compatibility..; deprecated/SphereSurface.cpp; deprecated/InterpolatedImplicitSurface.cpp. components/geometry/BottleField.cpp; components/geometry/ScalarField.cpp; components/geometry/DiscreteGridField.cpp; components/geometry/SphericalField.cpp; components/geometry/StarShapedField.cpp; components/mapping/ImplicitSurfaceMapping.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; ). if(SOFA_BUILD_TESTS); add_subdirectory(SofaImplicitField_test); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_compile_options(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SOFAIMPLICITFIELD""); target_link_libraries(${PROJECT_NAME} PRIVATE SofaDistanceGrid). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaImplicitField/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/CMakeLists.txt:1594,Modifiability,config,configurations,1594,"cmake_minimum_required(VERSION 3.22); project(SofaImplicitField VERSION 1.0). sofa_find_package(Sofa.Framework REQUIRED); sofa_find_package(SofaDistanceGrid REQUIRED). set(HEADER_FILES; config.h.in; initSofaImplicitField.h. # This is backward compatibility; deprecated/SphereSurface.h; deprecated/ImplicitSurfaceContainer.h # This is a backward compatibility file toward ScalarField; deprecated/InterpolatedImplicitSurface.h # This is a backward compatibility file toward DiscreteridField. components/geometry/BottleField.h; components/geometry/DiscreteGridField.h; components/geometry/SphericalField.h; components/geometry/ScalarField.h; components/geometry/StarShapedField.h; components/mapping/ImplicitSurfaceMapping.h; components/mapping/ImplicitSurfaceMapping.inl; ). set(SOURCE_FILES; initSofaImplicitField.cpp. ## This is a backward compatibility..; deprecated/SphereSurface.cpp; deprecated/InterpolatedImplicitSurface.cpp. components/geometry/BottleField.cpp; components/geometry/ScalarField.cpp; components/geometry/DiscreteGridField.cpp; components/geometry/SphericalField.cpp; components/geometry/StarShapedField.cpp; components/mapping/ImplicitSurfaceMapping.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; ). if(SOFA_BUILD_TESTS); add_subdirectory(SofaImplicitField_test); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_compile_options(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SOFAIMPLICITFIELD""); target_link_libraries(${PROJECT_NAME} PRIVATE SofaDistanceGrid). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaImplicitField/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/CMakeLists.txt:1782,Modifiability,plugin,plugins,1782,"cmake_minimum_required(VERSION 3.22); project(SofaImplicitField VERSION 1.0). sofa_find_package(Sofa.Framework REQUIRED); sofa_find_package(SofaDistanceGrid REQUIRED). set(HEADER_FILES; config.h.in; initSofaImplicitField.h. # This is backward compatibility; deprecated/SphereSurface.h; deprecated/ImplicitSurfaceContainer.h # This is a backward compatibility file toward ScalarField; deprecated/InterpolatedImplicitSurface.h # This is a backward compatibility file toward DiscreteridField. components/geometry/BottleField.h; components/geometry/DiscreteGridField.h; components/geometry/SphericalField.h; components/geometry/ScalarField.h; components/geometry/StarShapedField.h; components/mapping/ImplicitSurfaceMapping.h; components/mapping/ImplicitSurfaceMapping.inl; ). set(SOURCE_FILES; initSofaImplicitField.cpp. ## This is a backward compatibility..; deprecated/SphereSurface.cpp; deprecated/InterpolatedImplicitSurface.cpp. components/geometry/BottleField.cpp; components/geometry/ScalarField.cpp; components/geometry/DiscreteGridField.cpp; components/geometry/SphericalField.cpp; components/geometry/StarShapedField.cpp; components/mapping/ImplicitSurfaceMapping.cpp; ). set(EXTRA_FILES; README.md; examples/README.md; ). if(SOFA_BUILD_TESTS); add_subdirectory(SofaImplicitField_test); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${EXTRA_FILES}); target_compile_options(${PROJECT_NAME} PRIVATE ""-DSOFA_BUILD_SOFAIMPLICITFIELD""); target_link_libraries(${PROJECT_NAME} PRIVATE SofaDistanceGrid). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaImplicitField/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaImplicitField/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:429,Integrability,message,message,429,"cmake_minimum_required(VERSION 3.22); project(SofaMatrix VERSION 1.0 LANGUAGES CXX). sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Solver REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); sofa_find_package(Eigen3 REQUIRED); sofa_find_package(Sofa.GUI.Qt QUIET). find_package(metis 5.1.0 EXACT QUIET); if(NOT metis_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""SofaMatrix: DEPENDENCY metis NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching metis...""); include(FetchContent); FetchContent_Declare(metis; GIT_REPOSITORY https://github.com/sofa-framework/METIS; GIT_TAG v5.1.0-ModernInstall; ); FetchContent_MakeAvailable(metis); elseif (NOT metis_FOUND); message(FATAL_ERROR ""SofaMatrix: DEPENDENCY metis NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install metis (version=5.1.0), or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). set(SOFA_MODULES; Sofa.Component.Constraint.Lagrangian.Solver; Sofa.Component.LinearSolver.Direct; Sofa.Core; Eigen3::Eigen; ). set(SOFAMATRIX_SRC_DIR src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/config.h.in; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixExporter.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixExporter.h; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.h; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.h; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.inl; ); set(SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/initSofaMatrix.cpp; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatr",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:737,Integrability,message,message,737,"cmake_minimum_required(VERSION 3.22); project(SofaMatrix VERSION 1.0 LANGUAGES CXX). sofa_find_package(Sofa.Core REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Solver REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); sofa_find_package(Eigen3 REQUIRED); sofa_find_package(Sofa.GUI.Qt QUIET). find_package(metis 5.1.0 EXACT QUIET); if(NOT metis_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""SofaMatrix: DEPENDENCY metis NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching metis...""); include(FetchContent); FetchContent_Declare(metis; GIT_REPOSITORY https://github.com/sofa-framework/METIS; GIT_TAG v5.1.0-ModernInstall; ); FetchContent_MakeAvailable(metis); elseif (NOT metis_FOUND); message(FATAL_ERROR ""SofaMatrix: DEPENDENCY metis NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install metis (version=5.1.0), or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). set(SOFA_MODULES; Sofa.Component.Constraint.Lagrangian.Solver; Sofa.Component.LinearSolver.Direct; Sofa.Core; Eigen3::Eigen; ). set(SOFAMATRIX_SRC_DIR src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/config.h.in; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixExporter.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixExporter.h; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.h; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.h; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.inl; ); set(SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/initSofaMatrix.cpp; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatr",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:1806,Integrability,message,message,1806,"ENCIES is OFF and thus cannot be fetched. Install metis (version=5.1.0), or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). set(SOFA_MODULES; Sofa.Component.Constraint.Lagrangian.Solver; Sofa.Component.LinearSolver.Direct; Sofa.Core; Eigen3::Eigen; ). set(SOFAMATRIX_SRC_DIR src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/config.h.in; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixExporter.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixExporter.h; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.h; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.h; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.inl; ); set(SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/initSofaMatrix.cpp; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageProxy.h; ); list(APPEND SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.cpp; ); list(APPEND MOC_HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.h; ); list(APPEND SOFA_MODULES; Sofa.GUI.Qt; ). find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(); if(Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); endif(). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${MOC_HEAD",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:2879,Integrability,depend,dependency,2879,"MatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageProxy.h; ); list(APPEND SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.cpp; ); list(APPEND MOC_HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.h; ); list(APPEND SOFA_MODULES; Sofa.GUI.Qt; ). find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(); if(Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); endif(). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${MOC_HEADER_FILES} ${MOC_FILES}). # Link the plugin library to its dependency(ies).; target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_MODULES}); target_link_libraries(${PROJECT_NAME} PRIVATE metis). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; # cmake_dependent_option(SOFAMATRIX_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); #if(SOFAMATRIX_BUILD_TESTS); # enable_testing(); # add_subdirectory(SofaMatrix_test); # endif(); ",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:1178,Modifiability,config,config,1178,"traint.Lagrangian.Solver REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED); sofa_find_package(Eigen3 REQUIRED); sofa_find_package(Sofa.GUI.Qt QUIET). find_package(metis 5.1.0 EXACT QUIET); if(NOT metis_FOUND AND SOFA_ALLOW_FETCH_DEPENDENCIES); message(""SofaMatrix: DEPENDENCY metis NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is ON, fetching metis...""); include(FetchContent); FetchContent_Declare(metis; GIT_REPOSITORY https://github.com/sofa-framework/METIS; GIT_TAG v5.1.0-ModernInstall; ); FetchContent_MakeAvailable(metis); elseif (NOT metis_FOUND); message(FATAL_ERROR ""SofaMatrix: DEPENDENCY metis NOT FOUND. SOFA_ALLOW_FETCH_DEPENDENCIES is OFF and thus cannot be fetched. Install metis (version=5.1.0), or enable SOFA_ALLOW_FETCH_DEPENDENCIES to fix this issue.""); endif(). set(SOFA_MODULES; Sofa.Component.Constraint.Lagrangian.Solver; Sofa.Component.LinearSolver.Direct; Sofa.Core; Eigen3::Eigen; ). set(SOFAMATRIX_SRC_DIR src/${PROJECT_NAME}). set(HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/config.h.in; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixExporter.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixExporter.h; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.h; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.h; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.inl; ); set(SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/initSofaMatrix.cpp; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageProxy.h; ); list(APPEND SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/Com",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:2711,Modifiability,plugin,plugin,2711,"MatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageProxy.h; ); list(APPEND SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.cpp; ); list(APPEND MOC_HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.h; ); list(APPEND SOFA_MODULES; Sofa.GUI.Qt; ). find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(); if(Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); endif(). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${MOC_HEADER_FILES} ${MOC_FILES}). # Link the plugin library to its dependency(ies).; target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_MODULES}); target_link_libraries(${PROJECT_NAME} PRIVATE metis). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; # cmake_dependent_option(SOFAMATRIX_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); #if(SOFAMATRIX_BUILD_TESTS); # enable_testing(); # add_subdirectory(SofaMatrix_test); # endif(); ",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:2857,Modifiability,plugin,plugin,2857,"MatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageProxy.h; ); list(APPEND SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.cpp; ); list(APPEND MOC_HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.h; ); list(APPEND SOFA_MODULES; Sofa.GUI.Qt; ). find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(); if(Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); endif(). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${MOC_HEADER_FILES} ${MOC_FILES}). # Link the plugin library to its dependency(ies).; target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_MODULES}); target_link_libraries(${PROJECT_NAME} PRIVATE metis). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; # cmake_dependent_option(SOFAMATRIX_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); #if(SOFAMATRIX_BUILD_TESTS); # enable_testing(); # add_subdirectory(SofaMatrix_test); # endif(); ",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:3243,Modifiability,plugin,plugins,3243,"MatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageProxy.h; ); list(APPEND SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.cpp; ); list(APPEND MOC_HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.h; ); list(APPEND SOFA_MODULES; Sofa.GUI.Qt; ). find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(); if(Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); endif(). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${MOC_HEADER_FILES} ${MOC_FILES}). # Link the plugin library to its dependency(ies).; target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_MODULES}); target_link_libraries(${PROJECT_NAME} PRIVATE metis). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; # cmake_dependent_option(SOFAMATRIX_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); #if(SOFAMATRIX_BUILD_TESTS); # enable_testing(); # add_subdirectory(SofaMatrix_test); # endif(); ",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:3317,Testability,test,tests,3317,"MatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageProxy.h; ); list(APPEND SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.cpp; ); list(APPEND MOC_HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.h; ); list(APPEND SOFA_MODULES; Sofa.GUI.Qt; ). find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(); if(Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); endif(). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${MOC_HEADER_FILES} ${MOC_FILES}). # Link the plugin library to its dependency(ies).; target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_MODULES}); target_link_libraries(${PROJECT_NAME} PRIVATE metis). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; # cmake_dependent_option(SOFAMATRIX_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); #if(SOFAMATRIX_BUILD_TESTS); # enable_testing(); # add_subdirectory(SofaMatrix_test); # endif(); ",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt:3417,Testability,test,tests,3417,"MatrixExporter.cpp; ${SOFAMATRIX_SRC_DIR}/MatrixImageExporter.cpp; ${SOFAMATRIX_SRC_DIR}/FillReducingOrdering.cpp; ); set(README_FILES; SofaMatrix.md; ); set(MOC_FILES; ); set(MOC_HEADER_FILES; ). if (NOT Sofa.GUI.Qt_FOUND); message(NOTICE ""[SofaMatrix] Module Sofa.GUI.Qt not found: some components (GlobalSystemMatrixImage) will not be compiled""); else(); list(APPEND HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.h; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageProxy.h; ); list(APPEND SOURCE_FILES; ${SOFAMATRIX_SRC_DIR}/ComplianceMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/GlobalSystemMatrixImage.cpp; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.cpp; ); list(APPEND MOC_HEADER_FILES; ${SOFAMATRIX_SRC_DIR}/BaseMatrixImageViewerWidget.h; ); list(APPEND SOFA_MODULES; Sofa.GUI.Qt; ). find_package(Qt6 COMPONENTS Core CoreTools QUIET); if (NOT Qt6Core_FOUND); find_package(Qt5 COMPONENTS Core QUIET); endif(); if(Qt5Core_FOUND); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); elseif (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); endif(). # Create the plugin library.; add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES} ${MOC_HEADER_FILES} ${MOC_FILES}). # Link the plugin library to its dependency(ies).; target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFA_MODULES}); target_link_libraries(${PROJECT_NAME} PRIVATE metis). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${PROJECT_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; # cmake_dependent_option(SOFAMATRIX_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); #if(SOFAMATRIX_BUILD_TESTS); # enable_testing(); # add_subdirectory(SofaMatrix_test); # endif(); ",MatchSource.DOCS,applications/plugins/SofaMatrix/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaMatrix/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/CMakeLists.txt:506,Modifiability,config,config,506,"cmake_minimum_required(VERSION 3.22); project(SofaNewmat LANGUAGES CXX). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED). # Newmat; #sofa_find_package(Newmat QUIET) # useless IMO; if(NOT Newmat_FOUND); add_subdirectory(extlibs/newmat newmat); endif(); set_target_properties(newmat PROPERTIES DEBUG_POSTFIX ""_d""); set_target_properties(newmat PROPERTIES FOLDER ""SofaExtlibs""). set(SOFANEWMAT_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFANEWMAT_SRC}/config.h.in; ${SOFANEWMAT_SRC}/initSofaNewmat.h; ${SOFANEWMAT_SRC}/LULinearSolver.h; ${SOFANEWMAT_SRC}/NewMatMatrix.h; ${SOFANEWMAT_SRC}/NewMatVector.h; ). set(SOURCE_FILES; ${SOFANEWMAT_SRC}/initSofaNewmat.cpp; ${SOFANEWMAT_SRC}/LULinearSolver.cpp; ${SOFANEWMAT_SRC}/NewMatCGLinearSolver.cpp; ${SOFANEWMAT_SRC}/NewMatCholeskySolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC newmat Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ). cmake_dependent_option(SOFANEWMAT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFANEWMAT_BUILD_TESTS); add_subdirectory(${PROJECT_NAME}_test); endif(); ",MatchSource.DOCS,applications/plugins/SofaNewmat/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/CMakeLists.txt:1233,Modifiability,plugin,plugins,1233,"cmake_minimum_required(VERSION 3.22); project(SofaNewmat LANGUAGES CXX). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED). # Newmat; #sofa_find_package(Newmat QUIET) # useless IMO; if(NOT Newmat_FOUND); add_subdirectory(extlibs/newmat newmat); endif(); set_target_properties(newmat PROPERTIES DEBUG_POSTFIX ""_d""); set_target_properties(newmat PROPERTIES FOLDER ""SofaExtlibs""). set(SOFANEWMAT_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFANEWMAT_SRC}/config.h.in; ${SOFANEWMAT_SRC}/initSofaNewmat.h; ${SOFANEWMAT_SRC}/LULinearSolver.h; ${SOFANEWMAT_SRC}/NewMatMatrix.h; ${SOFANEWMAT_SRC}/NewMatVector.h; ). set(SOURCE_FILES; ${SOFANEWMAT_SRC}/initSofaNewmat.cpp; ${SOFANEWMAT_SRC}/LULinearSolver.cpp; ${SOFANEWMAT_SRC}/NewMatCGLinearSolver.cpp; ${SOFANEWMAT_SRC}/NewMatCholeskySolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC newmat Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ). cmake_dependent_option(SOFANEWMAT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFANEWMAT_BUILD_TESTS); add_subdirectory(${PROJECT_NAME}_test); endif(); ",MatchSource.DOCS,applications/plugins/SofaNewmat/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/CMakeLists.txt:1315,Testability,test,tests,1315,"cmake_minimum_required(VERSION 3.22); project(SofaNewmat LANGUAGES CXX). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Component.LinearSolver.Direct REQUIRED). # Newmat; #sofa_find_package(Newmat QUIET) # useless IMO; if(NOT Newmat_FOUND); add_subdirectory(extlibs/newmat newmat); endif(); set_target_properties(newmat PROPERTIES DEBUG_POSTFIX ""_d""); set_target_properties(newmat PROPERTIES FOLDER ""SofaExtlibs""). set(SOFANEWMAT_SRC ""src/${PROJECT_NAME}""). set(HEADER_FILES; ${SOFANEWMAT_SRC}/config.h.in; ${SOFANEWMAT_SRC}/initSofaNewmat.h; ${SOFANEWMAT_SRC}/LULinearSolver.h; ${SOFANEWMAT_SRC}/NewMatMatrix.h; ${SOFANEWMAT_SRC}/NewMatVector.h; ). set(SOURCE_FILES; ${SOFANEWMAT_SRC}/initSofaNewmat.cpp; ${SOFANEWMAT_SRC}/LULinearSolver.cpp; ${SOFANEWMAT_SRC}/NewMatCGLinearSolver.cpp; ${SOFANEWMAT_SRC}/NewMatCholeskySolver.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC newmat Sofa.Component.LinearSolver.Direct). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ). cmake_dependent_option(SOFANEWMAT_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFANEWMAT_BUILD_TESTS); add_subdirectory(${PROJECT_NAME}_test); endif(); ",MatchSource.DOCS,applications/plugins/SofaNewmat/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt:2364,Integrability,message,message,2364,"rceField.cpp; OpenCLUniformMass.cpp; initSofaOpenCL.cpp; myopencl.cpp; oclRadixSort/RadixSort.cpp; oclRadixSort/Scan.cpp; tools/showvector.cpp; tools/top.cpp; ). set(OTHER_FILES; kernels/OpenCLFixedConstraint.cl; kernels/OpenCLGenericParticleForceField.cl; kernels/OpenCLGenericParticleForceField_Plane.macrocl; kernels/OpenCLGenericParticleForceField_Sphere.macrocl; kernels/OpenCLMechanicalObject.cl; kernels/OpenCLMemoryManager.cl; kernels/OpenCLSpatialGridForce.cl; kernels/OpenCLSpringForceField.cl; kernels/OpenCLUniformMass.cl; kernels/oclRadixSort/RadixSort.cl; kernels/oclRadixSort/Scan_b.cl; ). if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; OpenCLSPHFluidForceField.h; OpenCLSPHFluidForceField.inl; OpenCLSpatialGridContainer.h; OpenCLSpatialGridContainer.inl); list(APPEND SOURCE_FILES; OpenCLSPHFluidForceField.cpp; OpenCLSpatialGridContainer.cpp); list(APPEND OTHER_FILES; kernels/OpenCLSPHFluidForceField.cl; kernels/OpenCLSpatialGridContainer.cl; ); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid found. Activing <OpenCLSPHFluidForceField>.""); else(); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid not found. De-activing <OpenCLSPHFluidForceField>""); endif(). message(WARNING ""SofaOpenCL: TODO: don't use absolute path (SOFA_SRC_DIR)""). include_directories(${OPENCL_INCLUDE_DIRS}); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${OTHER_FILES}); add_definitions(""-DSOFA_SRC_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/../../..\""""). add_definitions(""-DSOFA_BUILD_GPU_OPENCL""); target_link_libraries(${PROJECT_NAME} ${OPENCL_LIBRARIES} Sofa.Helper SofaEngine SofaUserInteraction csparse SofaGeneralObjectInteraction SofaGeneralDeformable Sofa.GL) # taucs taucs_mt system-taucs); if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid) # taucs taucs_mt system-taucs); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAOPENCL_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET",MatchSource.DOCS,applications/plugins/SofaOpenCL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt:2401,Integrability,depend,dependency,2401,"rceField.cpp; OpenCLUniformMass.cpp; initSofaOpenCL.cpp; myopencl.cpp; oclRadixSort/RadixSort.cpp; oclRadixSort/Scan.cpp; tools/showvector.cpp; tools/top.cpp; ). set(OTHER_FILES; kernels/OpenCLFixedConstraint.cl; kernels/OpenCLGenericParticleForceField.cl; kernels/OpenCLGenericParticleForceField_Plane.macrocl; kernels/OpenCLGenericParticleForceField_Sphere.macrocl; kernels/OpenCLMechanicalObject.cl; kernels/OpenCLMemoryManager.cl; kernels/OpenCLSpatialGridForce.cl; kernels/OpenCLSpringForceField.cl; kernels/OpenCLUniformMass.cl; kernels/oclRadixSort/RadixSort.cl; kernels/oclRadixSort/Scan_b.cl; ). if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; OpenCLSPHFluidForceField.h; OpenCLSPHFluidForceField.inl; OpenCLSpatialGridContainer.h; OpenCLSpatialGridContainer.inl); list(APPEND SOURCE_FILES; OpenCLSPHFluidForceField.cpp; OpenCLSpatialGridContainer.cpp); list(APPEND OTHER_FILES; kernels/OpenCLSPHFluidForceField.cl; kernels/OpenCLSpatialGridContainer.cl; ); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid found. Activing <OpenCLSPHFluidForceField>.""); else(); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid not found. De-activing <OpenCLSPHFluidForceField>""); endif(). message(WARNING ""SofaOpenCL: TODO: don't use absolute path (SOFA_SRC_DIR)""). include_directories(${OPENCL_INCLUDE_DIRS}); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${OTHER_FILES}); add_definitions(""-DSOFA_SRC_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/../../..\""""). add_definitions(""-DSOFA_BUILD_GPU_OPENCL""); target_link_libraries(${PROJECT_NAME} ${OPENCL_LIBRARIES} Sofa.Helper SofaEngine SofaUserInteraction csparse SofaGeneralObjectInteraction SofaGeneralDeformable Sofa.GL) # taucs taucs_mt system-taucs); if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid) # taucs taucs_mt system-taucs); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAOPENCL_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET",MatchSource.DOCS,applications/plugins/SofaOpenCL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt:2483,Integrability,message,message,2483,"ixSort/RadixSort.cpp; oclRadixSort/Scan.cpp; tools/showvector.cpp; tools/top.cpp; ). set(OTHER_FILES; kernels/OpenCLFixedConstraint.cl; kernels/OpenCLGenericParticleForceField.cl; kernels/OpenCLGenericParticleForceField_Plane.macrocl; kernels/OpenCLGenericParticleForceField_Sphere.macrocl; kernels/OpenCLMechanicalObject.cl; kernels/OpenCLMemoryManager.cl; kernels/OpenCLSpatialGridForce.cl; kernels/OpenCLSpringForceField.cl; kernels/OpenCLUniformMass.cl; kernels/oclRadixSort/RadixSort.cl; kernels/oclRadixSort/Scan_b.cl; ). if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; OpenCLSPHFluidForceField.h; OpenCLSPHFluidForceField.inl; OpenCLSpatialGridContainer.h; OpenCLSpatialGridContainer.inl); list(APPEND SOURCE_FILES; OpenCLSPHFluidForceField.cpp; OpenCLSpatialGridContainer.cpp); list(APPEND OTHER_FILES; kernels/OpenCLSPHFluidForceField.cl; kernels/OpenCLSpatialGridContainer.cl; ); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid found. Activing <OpenCLSPHFluidForceField>.""); else(); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid not found. De-activing <OpenCLSPHFluidForceField>""); endif(). message(WARNING ""SofaOpenCL: TODO: don't use absolute path (SOFA_SRC_DIR)""). include_directories(${OPENCL_INCLUDE_DIRS}); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${OTHER_FILES}); add_definitions(""-DSOFA_SRC_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/../../..\""""). add_definitions(""-DSOFA_BUILD_GPU_OPENCL""); target_link_libraries(${PROJECT_NAME} ${OPENCL_LIBRARIES} Sofa.Helper SofaEngine SofaUserInteraction csparse SofaGeneralObjectInteraction SofaGeneralDeformable Sofa.GL) # taucs taucs_mt system-taucs); if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid) # taucs taucs_mt system-taucs); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAOPENCL_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaOpenCL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt:2520,Integrability,depend,dependency,2520,"ixSort/RadixSort.cpp; oclRadixSort/Scan.cpp; tools/showvector.cpp; tools/top.cpp; ). set(OTHER_FILES; kernels/OpenCLFixedConstraint.cl; kernels/OpenCLGenericParticleForceField.cl; kernels/OpenCLGenericParticleForceField_Plane.macrocl; kernels/OpenCLGenericParticleForceField_Sphere.macrocl; kernels/OpenCLMechanicalObject.cl; kernels/OpenCLMemoryManager.cl; kernels/OpenCLSpatialGridForce.cl; kernels/OpenCLSpringForceField.cl; kernels/OpenCLUniformMass.cl; kernels/oclRadixSort/RadixSort.cl; kernels/oclRadixSort/Scan_b.cl; ). if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; OpenCLSPHFluidForceField.h; OpenCLSPHFluidForceField.inl; OpenCLSpatialGridContainer.h; OpenCLSpatialGridContainer.inl); list(APPEND SOURCE_FILES; OpenCLSPHFluidForceField.cpp; OpenCLSpatialGridContainer.cpp); list(APPEND OTHER_FILES; kernels/OpenCLSPHFluidForceField.cl; kernels/OpenCLSpatialGridContainer.cl; ); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid found. Activing <OpenCLSPHFluidForceField>.""); else(); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid not found. De-activing <OpenCLSPHFluidForceField>""); endif(). message(WARNING ""SofaOpenCL: TODO: don't use absolute path (SOFA_SRC_DIR)""). include_directories(${OPENCL_INCLUDE_DIRS}); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${OTHER_FILES}); add_definitions(""-DSOFA_SRC_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/../../..\""""). add_definitions(""-DSOFA_BUILD_GPU_OPENCL""); target_link_libraries(${PROJECT_NAME} ${OPENCL_LIBRARIES} Sofa.Helper SofaEngine SofaUserInteraction csparse SofaGeneralObjectInteraction SofaGeneralDeformable Sofa.GL) # taucs taucs_mt system-taucs); if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid) # taucs taucs_mt system-taucs); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAOPENCL_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaOpenCL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt:2609,Integrability,message,message,2609,"ixSort/RadixSort.cpp; oclRadixSort/Scan.cpp; tools/showvector.cpp; tools/top.cpp; ). set(OTHER_FILES; kernels/OpenCLFixedConstraint.cl; kernels/OpenCLGenericParticleForceField.cl; kernels/OpenCLGenericParticleForceField_Plane.macrocl; kernels/OpenCLGenericParticleForceField_Sphere.macrocl; kernels/OpenCLMechanicalObject.cl; kernels/OpenCLMemoryManager.cl; kernels/OpenCLSpatialGridForce.cl; kernels/OpenCLSpringForceField.cl; kernels/OpenCLUniformMass.cl; kernels/oclRadixSort/RadixSort.cl; kernels/oclRadixSort/Scan_b.cl; ). if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; OpenCLSPHFluidForceField.h; OpenCLSPHFluidForceField.inl; OpenCLSpatialGridContainer.h; OpenCLSpatialGridContainer.inl); list(APPEND SOURCE_FILES; OpenCLSPHFluidForceField.cpp; OpenCLSpatialGridContainer.cpp); list(APPEND OTHER_FILES; kernels/OpenCLSPHFluidForceField.cl; kernels/OpenCLSpatialGridContainer.cl; ); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid found. Activing <OpenCLSPHFluidForceField>.""); else(); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid not found. De-activing <OpenCLSPHFluidForceField>""); endif(). message(WARNING ""SofaOpenCL: TODO: don't use absolute path (SOFA_SRC_DIR)""). include_directories(${OPENCL_INCLUDE_DIRS}); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${OTHER_FILES}); add_definitions(""-DSOFA_SRC_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/../../..\""""). add_definitions(""-DSOFA_BUILD_GPU_OPENCL""); target_link_libraries(${PROJECT_NAME} ${OPENCL_LIBRARIES} Sofa.Helper SofaEngine SofaUserInteraction csparse SofaGeneralObjectInteraction SofaGeneralDeformable Sofa.GL) # taucs taucs_mt system-taucs); if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid) # taucs taucs_mt system-taucs); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAOPENCL_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaOpenCL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt:883,Modifiability,config,config,883,cmake_minimum_required(VERSION 3.22); project(SofaOpenCL). set(SOFAOPENCL_VERSION 0.1). find_package(OpenCL REQUIRED); find_package(SofaGeneralObjectInteraction REQUIRED); find_package(SofaGeneralDeformable REQUIRED); find_package(SofaUserInteraction REQUIRED); find_package(Sofa.GL REQUIRED); sofa_find_package(SofaSphFluid QUIET). set(HEADER_FILES; CPUSPHFluidForceField.h; CPUSPHFluidForceFieldWithOpenCL.h; OpenCLCommon.h; OpenCLFixedConstraint.h; OpenCLFixedConstraint.inl; OpenCLIdentityMapping.h; OpenCLIdentityMapping.inl; OpenCLKernel.h; OpenCLMechanicalObject.h; OpenCLMechanicalObject.inl; OpenCLMemoryManager.h; OpenCLPlaneForceField.h; OpenCLPlaneForceField.inl; OpenCLProgram.h; OpenCLProgramParser.h; OpenCLSphereForceField.h; OpenCLSphereForceField.inl; OpenCLSpringForceField.h; OpenCLSpringForceField.inl; OpenCLTypes.h; OpenCLUniformMass.h; OpenCLUniformMass.inl; config.h; myopencl.h; oclRadixSort/CPUSortWithCuda.h; oclRadixSort/CPUSortWithOpenCL.h; oclRadixSort/RadixSort.h; oclRadixSort/Scan.h; tools/showvector.h; tools/top.h; ). set(SOURCE_FILES; CPUSPHFluidForceField.cpp; CPUSPHFluidForceFieldWithOpenCL.cpp; OpenCLBoxROI.cpp; OpenCLCommon.cpp; OpenCLFixedConstraint.cpp; OpenCLIdentityMapping.cpp; OpenCLMechanicalObject.cpp; OpenCLMemoryManager.cpp; OpenCLMouseInteraction.cpp; OpenCLPlaneForceField.cpp; OpenCLProgram.cpp; OpenCLSphereForceField.cpp; OpenCLSpringForceField.cpp; OpenCLUniformMass.cpp; initSofaOpenCL.cpp; myopencl.cpp; oclRadixSort/RadixSort.cpp; oclRadixSort/Scan.cpp; tools/showvector.cpp; tools/top.cpp; ). set(OTHER_FILES; kernels/OpenCLFixedConstraint.cl; kernels/OpenCLGenericParticleForceField.cl; kernels/OpenCLGenericParticleForceField_Plane.macrocl; kernels/OpenCLGenericParticleForceField_Sphere.macrocl; kernels/OpenCLMechanicalObject.cl; kernels/OpenCLMemoryManager.cl; kernels/OpenCLSpatialGridForce.cl; kernels/OpenCLSpringForceField.cl; kernels/OpenCLUniformMass.cl; kernels/oclRadixSort/RadixSort.cl; kernels/oclRadixSort/Scan_b.cl; ). i,MatchSource.DOCS,applications/plugins/SofaOpenCL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt:3459,Modifiability,plugin,plugins,3459,"ixSort/RadixSort.cpp; oclRadixSort/Scan.cpp; tools/showvector.cpp; tools/top.cpp; ). set(OTHER_FILES; kernels/OpenCLFixedConstraint.cl; kernels/OpenCLGenericParticleForceField.cl; kernels/OpenCLGenericParticleForceField_Plane.macrocl; kernels/OpenCLGenericParticleForceField_Sphere.macrocl; kernels/OpenCLMechanicalObject.cl; kernels/OpenCLMemoryManager.cl; kernels/OpenCLSpatialGridForce.cl; kernels/OpenCLSpringForceField.cl; kernels/OpenCLUniformMass.cl; kernels/oclRadixSort/RadixSort.cl; kernels/oclRadixSort/Scan_b.cl; ). if(SofaSphFluid_FOUND); list(APPEND HEADER_FILES; OpenCLSPHFluidForceField.h; OpenCLSPHFluidForceField.inl; OpenCLSpatialGridContainer.h; OpenCLSpatialGridContainer.inl); list(APPEND SOURCE_FILES; OpenCLSPHFluidForceField.cpp; OpenCLSpatialGridContainer.cpp); list(APPEND OTHER_FILES; kernels/OpenCLSPHFluidForceField.cl; kernels/OpenCLSpatialGridContainer.cl; ); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid found. Activing <OpenCLSPHFluidForceField>.""); else(); message(STATUS ""SofaOpenCL: optional dependency to SofaSphFluid not found. De-activing <OpenCLSPHFluidForceField>""); endif(). message(WARNING ""SofaOpenCL: TODO: don't use absolute path (SOFA_SRC_DIR)""). include_directories(${OPENCL_INCLUDE_DIRS}); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${OTHER_FILES}); add_definitions(""-DSOFA_SRC_DIR=\""${CMAKE_CURRENT_SOURCE_DIR}/../../..\""""). add_definitions(""-DSOFA_BUILD_GPU_OPENCL""); target_link_libraries(${PROJECT_NAME} ${OPENCL_LIBRARIES} Sofa.Helper SofaEngine SofaUserInteraction csparse SofaGeneralObjectInteraction SofaGeneralDeformable Sofa.GL) # taucs taucs_mt system-taucs); if(SofaSphFluid_FOUND); target_link_libraries(${PROJECT_NAME} SofaSphFluid) # taucs taucs_mt system-taucs); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAOPENCL_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaOpenCL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaOpenCL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/CMakeLists.txt:834,Availability,down,downloaded,834,"cmake_minimum_required(VERSION 3.22); project(SofaPardisoSolver). set(SOFAPARDISOSOLVER_MAJOR_VERSION 0); set(SOFAPARDISOSOLVER_MINOR_VERSION 1); set(SOFAPARDISOSOLVER_VERSION ${SOFAPARDISOSOLVER_MAJOR_VERSION}.${SOFAPARDISOSOLVER_MINOR_VERSION}). set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""). find_package(SofaFramework REQUIRED); find_package(SofaBase REQUIRED). link_directories(""${CMAKE_CURRENT_SOURCE_DIR}/extlibs""); set(SOFAPARDISOSOLVER_LINK_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/extlibs""). find_package(GFortran REQUIRED); find_package(BLAS REQUIRED); find_package(LAPACK REQUIRED); find_package(OpenMP REQUIRED). set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} SofaBase SofaGeneral); set(COMPILATION_FLAGS -DSOFA_BUILD_SOFAPARDISOSOLVER ). set ( PARDISO_LIB """" CACHE FILE ""set to Pardiso library downloaded from the web"" ). set(HEADER_FILES; SparsePARDISOSolver.h; config.h; ). set(SOURCE_FILES; SparsePARDISOSolver.cpp; initPardisoSolver.cpp; ). set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} SofaMeshCollision SofaBaseVisual SofaBaseLinearSolver Sofa.Core); set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} ${PARDISO_LIB} gfortran blas lapack gomp). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFAPARDISOSOLVER_VERSION}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${COMPILATION_FLAGS}""). target_link_libraries(${PROJECT_NAME} ${LINKER_DEPENDENCIES}). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAPARDISOSOLVER_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/CMakeLists.txt:1544,Deployability,configurat,configurations,1544,"cmake_minimum_required(VERSION 3.22); project(SofaPardisoSolver). set(SOFAPARDISOSOLVER_MAJOR_VERSION 0); set(SOFAPARDISOSOLVER_MINOR_VERSION 1); set(SOFAPARDISOSOLVER_VERSION ${SOFAPARDISOSOLVER_MAJOR_VERSION}.${SOFAPARDISOSOLVER_MINOR_VERSION}). set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""). find_package(SofaFramework REQUIRED); find_package(SofaBase REQUIRED). link_directories(""${CMAKE_CURRENT_SOURCE_DIR}/extlibs""); set(SOFAPARDISOSOLVER_LINK_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/extlibs""). find_package(GFortran REQUIRED); find_package(BLAS REQUIRED); find_package(LAPACK REQUIRED); find_package(OpenMP REQUIRED). set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} SofaBase SofaGeneral); set(COMPILATION_FLAGS -DSOFA_BUILD_SOFAPARDISOSOLVER ). set ( PARDISO_LIB """" CACHE FILE ""set to Pardiso library downloaded from the web"" ). set(HEADER_FILES; SparsePARDISOSolver.h; config.h; ). set(SOURCE_FILES; SparsePARDISOSolver.cpp; initPardisoSolver.cpp; ). set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} SofaMeshCollision SofaBaseVisual SofaBaseLinearSolver Sofa.Core); set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} ${PARDISO_LIB} gfortran blas lapack gomp). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFAPARDISOSOLVER_VERSION}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${COMPILATION_FLAGS}""). target_link_libraries(${PROJECT_NAME} ${LINKER_DEPENDENCIES}). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAPARDISOSOLVER_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/CMakeLists.txt:903,Modifiability,config,config,903,"cmake_minimum_required(VERSION 3.22); project(SofaPardisoSolver). set(SOFAPARDISOSOLVER_MAJOR_VERSION 0); set(SOFAPARDISOSOLVER_MINOR_VERSION 1); set(SOFAPARDISOSOLVER_VERSION ${SOFAPARDISOSOLVER_MAJOR_VERSION}.${SOFAPARDISOSOLVER_MINOR_VERSION}). set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""). find_package(SofaFramework REQUIRED); find_package(SofaBase REQUIRED). link_directories(""${CMAKE_CURRENT_SOURCE_DIR}/extlibs""); set(SOFAPARDISOSOLVER_LINK_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/extlibs""). find_package(GFortran REQUIRED); find_package(BLAS REQUIRED); find_package(LAPACK REQUIRED); find_package(OpenMP REQUIRED). set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} SofaBase SofaGeneral); set(COMPILATION_FLAGS -DSOFA_BUILD_SOFAPARDISOSOLVER ). set ( PARDISO_LIB """" CACHE FILE ""set to Pardiso library downloaded from the web"" ). set(HEADER_FILES; SparsePARDISOSolver.h; config.h; ). set(SOURCE_FILES; SparsePARDISOSolver.cpp; initPardisoSolver.cpp; ). set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} SofaMeshCollision SofaBaseVisual SofaBaseLinearSolver Sofa.Core); set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} ${PARDISO_LIB} gfortran blas lapack gomp). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFAPARDISOSOLVER_VERSION}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${COMPILATION_FLAGS}""). target_link_libraries(${PROJECT_NAME} ${LINKER_DEPENDENCIES}). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAPARDISOSOLVER_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/CMakeLists.txt:1544,Modifiability,config,configurations,1544,"cmake_minimum_required(VERSION 3.22); project(SofaPardisoSolver). set(SOFAPARDISOSOLVER_MAJOR_VERSION 0); set(SOFAPARDISOSOLVER_MINOR_VERSION 1); set(SOFAPARDISOSOLVER_VERSION ${SOFAPARDISOSOLVER_MAJOR_VERSION}.${SOFAPARDISOSOLVER_MINOR_VERSION}). set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ""${CMAKE_CURRENT_SOURCE_DIR}/cmake""). find_package(SofaFramework REQUIRED); find_package(SofaBase REQUIRED). link_directories(""${CMAKE_CURRENT_SOURCE_DIR}/extlibs""); set(SOFAPARDISOSOLVER_LINK_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/extlibs""). find_package(GFortran REQUIRED); find_package(BLAS REQUIRED); find_package(LAPACK REQUIRED); find_package(OpenMP REQUIRED). set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} SofaBase SofaGeneral); set(COMPILATION_FLAGS -DSOFA_BUILD_SOFAPARDISOSOLVER ). set ( PARDISO_LIB """" CACHE FILE ""set to Pardiso library downloaded from the web"" ). set(HEADER_FILES; SparsePARDISOSolver.h; config.h; ). set(SOURCE_FILES; SparsePARDISOSolver.cpp; initPardisoSolver.cpp; ). set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} SofaMeshCollision SofaBaseVisual SofaBaseLinearSolver Sofa.Core); set(LINKER_DEPENDENCIES ${LINKER_DEPENDENCIES} ${PARDISO_LIB} gfortran blas lapack gomp). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFAPARDISOSOLVER_VERSION}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""${COMPILATION_FLAGS}""). target_link_libraries(${PROJECT_NAME} ${LINKER_DEPENDENCIES}). ## Install rules for the library; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFAPARDISOSOLVER_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/plugins/SofaPardisoSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaPardisoSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/CMakeLists.txt:905,Deployability,configurat,configurations,905,cmake_minimum_required(VERSION 3.22); project(SofaSimpleGUI). set(SOFASIMPLEGUI_VERSION 0.1). set(HEADER_FILES; Camera.h; Interactor.h; PickedPoint.h; SofaGL.h; SofaScene.h; SpringInteractor.h; VisualPickVisitor.h; config.h.in; ). set(SOURCE_FILES; Camera.cpp; Interactor.cpp; SofaGL.cpp; SofaScene.cpp; SpringInteractor.cpp; VisualPickVisitor.cpp; initSimpleGUI.cpp; ). sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(Eigen3 REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Simulation.Graph REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component Sofa.GL Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFASIMPLEGUI_VERSION}). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFASIMPLEGUI_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ,MatchSource.DOCS,applications/plugins/SofaSimpleGUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/CMakeLists.txt:215,Modifiability,config,config,215,cmake_minimum_required(VERSION 3.22); project(SofaSimpleGUI). set(SOFASIMPLEGUI_VERSION 0.1). set(HEADER_FILES; Camera.h; Interactor.h; PickedPoint.h; SofaGL.h; SofaScene.h; SpringInteractor.h; VisualPickVisitor.h; config.h.in; ). set(SOURCE_FILES; Camera.cpp; Interactor.cpp; SofaGL.cpp; SofaScene.cpp; SpringInteractor.cpp; VisualPickVisitor.cpp; initSimpleGUI.cpp; ). sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(Eigen3 REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Simulation.Graph REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component Sofa.GL Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFASIMPLEGUI_VERSION}). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFASIMPLEGUI_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ,MatchSource.DOCS,applications/plugins/SofaSimpleGUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/CMakeLists.txt:905,Modifiability,config,configurations,905,cmake_minimum_required(VERSION 3.22); project(SofaSimpleGUI). set(SOFASIMPLEGUI_VERSION 0.1). set(HEADER_FILES; Camera.h; Interactor.h; PickedPoint.h; SofaGL.h; SofaScene.h; SpringInteractor.h; VisualPickVisitor.h; config.h.in; ). set(SOURCE_FILES; Camera.cpp; Interactor.cpp; SofaGL.cpp; SofaScene.cpp; SpringInteractor.cpp; VisualPickVisitor.cpp; initSimpleGUI.cpp; ). sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(Eigen3 REQUIRED); sofa_find_package(Sofa.GL REQUIRED); sofa_find_package(Sofa.Simulation.Graph REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component Sofa.GL Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} PUBLIC Eigen3::Eigen). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${SOFASIMPLEGUI_VERSION}). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${SOFASIMPLEGUI_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ,MatchSource.DOCS,applications/plugins/SofaSimpleGUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/README.txt:52,Modifiability,plugin,plugin,52,"; ************************************; * SimpleGUI plugin *; ************************************; A new design for Sofa GUI.; Authors: Francois Faure, Olivier Carre; Documentation: See doc/index.html; License: Same as the core of Sofa; ",MatchSource.DOCS,applications/plugins/SofaSimpleGUI/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaSimpleGUI/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/CMakeLists.txt:812,Deployability,configurat,configurations,812,"cmake_minimum_required(VERSION 3.22); project(SofaTest VERSION 0.1). set(HEADER_FILES; InitPlugin_test.h; Sofa_test.h; ). set(SOURCE_FILES; InitPlugin_test.cpp; Sofa_test.cpp; ). list(APPEND HEADER_FILES; BroadPhase_test.h; DataEngine_test.h; ForceField_test.h; PrimitiveCreation.h; Elasticity_test.h; Elasticity_test.inl; ); list(APPEND SOURCE_FILES; PrimitiveCreation.cpp; Elasticity_test.cpp; ). sofa_find_package(Sofa.Framework REQUIRED); sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(SceneCreator REQUIRED); sofa_find_package(Sofa.Testing REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${PYTHON_FILES}); target_link_libraries(${PROJECT_NAME} SceneCreator Sofa.Framework Sofa.Component Sofa.Testing). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; PACKAGE_VERSION ${PROJECT_VERSION}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaTest/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/CMakeLists.txt:812,Modifiability,config,configurations,812,"cmake_minimum_required(VERSION 3.22); project(SofaTest VERSION 0.1). set(HEADER_FILES; InitPlugin_test.h; Sofa_test.h; ). set(SOURCE_FILES; InitPlugin_test.cpp; Sofa_test.cpp; ). list(APPEND HEADER_FILES; BroadPhase_test.h; DataEngine_test.h; ForceField_test.h; PrimitiveCreation.h; Elasticity_test.h; Elasticity_test.inl; ); list(APPEND SOURCE_FILES; PrimitiveCreation.cpp; Elasticity_test.cpp; ). sofa_find_package(Sofa.Framework REQUIRED); sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(SceneCreator REQUIRED); sofa_find_package(Sofa.Testing REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${PYTHON_FILES}); target_link_libraries(${PROJECT_NAME} SceneCreator Sofa.Framework Sofa.Component Sofa.Testing). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; PACKAGE_VERSION ${PROJECT_VERSION}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaTest/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/CMakeLists.txt:1000,Modifiability,plugin,plugins,1000,"cmake_minimum_required(VERSION 3.22); project(SofaTest VERSION 0.1). set(HEADER_FILES; InitPlugin_test.h; Sofa_test.h; ). set(SOURCE_FILES; InitPlugin_test.cpp; Sofa_test.cpp; ). list(APPEND HEADER_FILES; BroadPhase_test.h; DataEngine_test.h; ForceField_test.h; PrimitiveCreation.h; Elasticity_test.h; Elasticity_test.inl; ); list(APPEND SOURCE_FILES; PrimitiveCreation.cpp; Elasticity_test.cpp; ). sofa_find_package(Sofa.Framework REQUIRED); sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(SceneCreator REQUIRED); sofa_find_package(Sofa.Testing REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${PYTHON_FILES}); target_link_libraries(${PROJECT_NAME} SceneCreator Sofa.Framework Sofa.Component Sofa.Testing). ## Install rules for the library and headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; PACKAGE_VERSION ${PROJECT_VERSION}; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/SofaTest/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaTest/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/CMakeLists.txt:765,Deployability,configurat,configurations,765,"cmake_minimum_required(VERSION 3.22); project(VolumetricRendering). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.GL.Component REQUIRED). set(HEADER_FILES; src/VolumetricRendering/config.h.in; src/VolumetricRendering/initVolumetricRendering.cpp; src/VolumetricRendering/OglTetrahedralModel.h; src/VolumetricRendering/OglTetrahedralModel.inl; src/VolumetricRendering/OglVolumetricModel.h; ). set(SOURCE_FILES; src/VolumetricRendering/initVolumetricRendering.cpp; src/VolumetricRendering/OglTetrahedralModel.cpp; src/VolumetricRendering/OglVolumetricModel.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.GL.Component). # Install rules for the library and the headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). sofa_add_subdirectory(plugin extensions/CUDA VolumetricRendering.CUDA); ",MatchSource.DOCS,applications/plugins/VolumetricRendering/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/CMakeLists.txt:193,Modifiability,config,config,193,"cmake_minimum_required(VERSION 3.22); project(VolumetricRendering). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.GL.Component REQUIRED). set(HEADER_FILES; src/VolumetricRendering/config.h.in; src/VolumetricRendering/initVolumetricRendering.cpp; src/VolumetricRendering/OglTetrahedralModel.h; src/VolumetricRendering/OglTetrahedralModel.inl; src/VolumetricRendering/OglVolumetricModel.h; ). set(SOURCE_FILES; src/VolumetricRendering/initVolumetricRendering.cpp; src/VolumetricRendering/OglTetrahedralModel.cpp; src/VolumetricRendering/OglVolumetricModel.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.GL.Component). # Install rules for the library and the headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). sofa_add_subdirectory(plugin extensions/CUDA VolumetricRendering.CUDA); ",MatchSource.DOCS,applications/plugins/VolumetricRendering/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/CMakeLists.txt:765,Modifiability,config,configurations,765,"cmake_minimum_required(VERSION 3.22); project(VolumetricRendering). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.GL.Component REQUIRED). set(HEADER_FILES; src/VolumetricRendering/config.h.in; src/VolumetricRendering/initVolumetricRendering.cpp; src/VolumetricRendering/OglTetrahedralModel.h; src/VolumetricRendering/OglTetrahedralModel.inl; src/VolumetricRendering/OglVolumetricModel.h; ). set(SOURCE_FILES; src/VolumetricRendering/initVolumetricRendering.cpp; src/VolumetricRendering/OglTetrahedralModel.cpp; src/VolumetricRendering/OglVolumetricModel.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.GL.Component). # Install rules for the library and the headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). sofa_add_subdirectory(plugin extensions/CUDA VolumetricRendering.CUDA); ",MatchSource.DOCS,applications/plugins/VolumetricRendering/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/CMakeLists.txt:1027,Modifiability,plugin,plugin,1027,"cmake_minimum_required(VERSION 3.22); project(VolumetricRendering). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.GL.Component REQUIRED). set(HEADER_FILES; src/VolumetricRendering/config.h.in; src/VolumetricRendering/initVolumetricRendering.cpp; src/VolumetricRendering/OglTetrahedralModel.h; src/VolumetricRendering/OglTetrahedralModel.inl; src/VolumetricRendering/OglVolumetricModel.h; ). set(SOURCE_FILES; src/VolumetricRendering/initVolumetricRendering.cpp; src/VolumetricRendering/OglTetrahedralModel.cpp; src/VolumetricRendering/OglVolumetricModel.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} Sofa.GL.Component). # Install rules for the library and the headers; CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). sofa_add_subdirectory(plugin extensions/CUDA VolumetricRendering.CUDA); ",MatchSource.DOCS,applications/plugins/VolumetricRendering/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/README.txt:5,Modifiability,plugin,plugin,5,This plugin allows to render volumetric meshes such tetrahedron-based or hexahedron-based models.,MatchSource.DOCS,applications/plugins/VolumetricRendering/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Xitact/CMakeLists.txt:662,Deployability,install,install,662,"cmake_minimum_required(VERSION 3.22); project(Xitact). find_package(SofaOpenglVisual REQUIRED). set(HEADER_FILES; IHPDriver.h; ITPDriver.h; PaceMaker.h; XiTrocarInterface.h; config.h; ). set(SOURCE_FILES; IHPDriver.cpp; ITPDriver.cpp; PaceMaker.cpp; initXitact.cpp; ). set(README_FILES PluginXitact.txt). find_package(SofaGui REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_XITACTPLUGIN""); target_link_libraries(${PROJECT_NAME} SofaMain SofaGui SofaGuiQt XiRobot SofaOpenglVisual); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT Xitact_libraries; EXPORT XitactTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Xitact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Xitact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Xitact/CMakeLists.txt:821,Deployability,install,install,821,"cmake_minimum_required(VERSION 3.22); project(Xitact). find_package(SofaOpenglVisual REQUIRED). set(HEADER_FILES; IHPDriver.h; ITPDriver.h; PaceMaker.h; XiTrocarInterface.h; config.h; ). set(SOURCE_FILES; IHPDriver.cpp; ITPDriver.cpp; PaceMaker.cpp; initXitact.cpp; ). set(README_FILES PluginXitact.txt). find_package(SofaGui REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_XITACTPLUGIN""); target_link_libraries(${PROJECT_NAME} SofaMain SofaGui SofaGuiQt XiRobot SofaOpenglVisual); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT Xitact_libraries; EXPORT XitactTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Xitact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Xitact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Xitact/CMakeLists.txt:174,Modifiability,config,config,174,"cmake_minimum_required(VERSION 3.22); project(Xitact). find_package(SofaOpenglVisual REQUIRED). set(HEADER_FILES; IHPDriver.h; ITPDriver.h; PaceMaker.h; XiTrocarInterface.h; config.h; ). set(SOURCE_FILES; IHPDriver.cpp; ITPDriver.cpp; PaceMaker.cpp; initXitact.cpp; ). set(README_FILES PluginXitact.txt). find_package(SofaGui REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_XITACTPLUGIN""); target_link_libraries(${PROJECT_NAME} SofaMain SofaGui SofaGuiQt XiRobot SofaOpenglVisual); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT Xitact_libraries; EXPORT XitactTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Xitact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Xitact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Xitact/CMakeLists.txt:872,Modifiability,plugin,plugins,872,"cmake_minimum_required(VERSION 3.22); project(Xitact). find_package(SofaOpenglVisual REQUIRED). set(HEADER_FILES; IHPDriver.h; ITPDriver.h; PaceMaker.h; XiTrocarInterface.h; config.h; ). set(SOURCE_FILES; IHPDriver.cpp; ITPDriver.cpp; PaceMaker.cpp; initXitact.cpp; ). set(README_FILES PluginXitact.txt). find_package(SofaGui REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${README_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_XITACTPLUGIN""); target_link_libraries(${PROJECT_NAME} SofaMain SofaGui SofaGuiQt XiRobot SofaOpenglVisual); include_directories(""${CMAKE_CURRENT_SOURCE_DIR}/..""). install(TARGETS ${PROJECT_NAME}; COMPONENT Xitact_libraries; EXPORT XitactTargets; RUNTIME DESTINATION bin; LIBRARY DESTINATION lib; ARCHIVE DESTINATION lib). install(DIRECTORY examples/ DESTINATION share/sofa/plugins/${PROJECT_NAME}); ",MatchSource.DOCS,applications/plugins/Xitact/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/Xitact/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/image_gui/CMakeLists.txt:128,Modifiability,config,config,128,"cmake_minimum_required(VERSION 3.22); project(image_gui). set(HEADER_FILES; src/image_gui/ImageTransformWidget.h; src/image_gui/config.h.in; ). set(MOC_HEADER_FILES; src/image_gui/HistogramWidget.h; src/image_gui/ImagePlaneWidget.h; src/image_gui/VectorVisualizationWidget.h; ). set(SOURCE_FILES; src/image_gui/HistogramWidget.cpp; src/image_gui/ImagePlaneWidget.cpp; src/image_gui/ImageTransformWidget.cpp; src/image_gui/VectorVisualizationWidget.cpp; src/image_gui/initImage_gui.cpp; ). include(../imagetoolbox/imagetoolbox.cmake). find_package(Sofa.GUI.Qt REQUIRED QUIET); find_package(Qt5 COMPONENTS Core QUIET); if (NOT Qt5Core_FOUND); if(CMAKE_VERSION VERSION_GREATER_EQUAL ""3.16""); find_package(Qt6 COMPONENTS Core CoreTools REQUIRED QUIET); if (Qt6Core_FOUND); qt6_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(); # else() should never happened as it would already break in Sofa.GUI.Qt; endif(); else(); qt5_wrap_cpp(MOC_FILES ${MOC_HEADER_FILES}); endif(). set(MOC_FILES_GROUP ""Generated""). add_definitions(""-DSOFA_BUILD_IMAGE_GUI""); add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${MOC_HEADER_FILES} ${MOC_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} image ${OPENGL_LIBRARIES} Sofa.GUI.Qt). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,applications/plugins/image/image_gui/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/image/image_gui/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/extlibs/miniFlowVR/README.txt:74,Availability,avail,available,74,"This folder contains a small subset of tools, mainly mesh manipulations,; available in FlowVR. See http://flowvr.sf.net/ for the complete package.; ",MatchSource.DOCS,applications/plugins/SofaDistanceGrid/extlibs/miniFlowVR/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaDistanceGrid/extlibs/miniFlowVR/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt:693,Availability,error,errors,693,"I place no restrictions on the use of newmat except that I take; no liability for any problems that may arise from its use,; distribution or other dealings with it. You can use it in your commercial projects. You can make and distribute modified or merged versions. You can; include parts of it in your own software. If you distribute modified or merged versions, please make it; clear which parts are mine and which parts are modified. For a substantially modified version, simply note that it is,; in part, derived from my software. A comment in the code will; be sufficient. The software is provided ""as is"", without warranty of any kind. Please understand that there may still be bugs and errors. Use at your own risk. I (Robert Davies) take no responsibility; for any errors or omissions in this package or for any misfortune; that may befall you or others as a result of your use,; distribution or other dealings with it.; ",MatchSource.DOCS,applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt:773,Availability,error,errors,773,"I place no restrictions on the use of newmat except that I take; no liability for any problems that may arise from its use,; distribution or other dealings with it. You can use it in your commercial projects. You can make and distribute modified or merged versions. You can; include parts of it in your own software. If you distribute modified or merged versions, please make it; clear which parts are mine and which parts are modified. For a substantially modified version, simply note that it is,; in part, derived from my software. A comment in the code will; be sufficient. The software is provided ""as is"", without warranty of any kind. Please understand that there may still be bugs and errors. Use at your own risk. I (Robert Davies) take no responsibility; for any errors or omissions in this package or for any misfortune; that may befall you or others as a result of your use,; distribution or other dealings with it.; ",MatchSource.DOCS,applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt:717,Safety,risk,risk,717,"I place no restrictions on the use of newmat except that I take; no liability for any problems that may arise from its use,; distribution or other dealings with it. You can use it in your commercial projects. You can make and distribute modified or merged versions. You can; include parts of it in your own software. If you distribute modified or merged versions, please make it; clear which parts are mine and which parts are modified. For a substantially modified version, simply note that it is,; in part, derived from my software. A comment in the code will; be sufficient. The software is provided ""as is"", without warranty of any kind. Please understand that there may still be bugs and errors. Use at your own risk. I (Robert Davies) take no responsibility; for any errors or omissions in this package or for any misfortune; that may befall you or others as a result of your use,; distribution or other dealings with it.; ",MatchSource.DOCS,applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt:380,Usability,clear,clear,380,"I place no restrictions on the use of newmat except that I take; no liability for any problems that may arise from its use,; distribution or other dealings with it. You can use it in your commercial projects. You can make and distribute modified or merged versions. You can; include parts of it in your own software. If you distribute modified or merged versions, please make it; clear which parts are mine and which parts are modified. For a substantially modified version, simply note that it is,; in part, derived from my software. A comment in the code will; be sufficient. The software is provided ""as is"", without warranty of any kind. Please understand that there may still be bugs and errors. Use at your own risk. I (Robert Davies) take no responsibility; for any errors or omissions in this package or for any misfortune; that may befall you or others as a result of your use,; distribution or other dealings with it.; ",MatchSource.DOCS,applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt:475,Usability,simpl,simply,475,"I place no restrictions on the use of newmat except that I take; no liability for any problems that may arise from its use,; distribution or other dealings with it. You can use it in your commercial projects. You can make and distribute modified or merged versions. You can; include parts of it in your own software. If you distribute modified or merged versions, please make it; clear which parts are mine and which parts are modified. For a substantially modified version, simply note that it is,; in part, derived from my software. A comment in the code will; be sufficient. The software is provided ""as is"", without warranty of any kind. Please understand that there may still be bugs and errors. Use at your own risk. I (Robert Davies) take no responsibility; for any errors or omissions in this package or for any misfortune; that may befall you or others as a result of your use,; distribution or other dealings with it.; ",MatchSource.DOCS,applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/SofaNewmat/extlibs/newmat/COPYING.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/extensions/CUDA/CMakeLists.txt:157,Modifiability,config,config,157,"cmake_minimum_required(VERSION 3.22); project(VolumetricRendering.CUDA). set(HEADER_FILES; src/VolumetricRendering/CUDA/init.h; src/VolumetricRendering/CUDA/config.h.in. src/VolumetricRendering/CUDA/CudaTetrahedralVisualModel.h; src/VolumetricRendering/CUDA/CudaTetrahedralVisualModel.inl; ). set(SOURCE_FILES; src/VolumetricRendering/CUDA/init.cpp. src/VolumetricRendering/CUDA/CudaTetrahedralVisualModel.cpp; ). sofa_find_package(VolumetricRendering REQUIRED); sofa_find_package(SofaCUDA REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} VolumetricRendering); target_link_libraries(${PROJECT_NAME} SofaCUDA). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/VolumetricRendering/extensions/CUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/extensions/CUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/extensions/CUDA/CMakeLists.txt:907,Modifiability,plugin,plugins,907,"cmake_minimum_required(VERSION 3.22); project(VolumetricRendering.CUDA). set(HEADER_FILES; src/VolumetricRendering/CUDA/init.h; src/VolumetricRendering/CUDA/config.h.in. src/VolumetricRendering/CUDA/CudaTetrahedralVisualModel.h; src/VolumetricRendering/CUDA/CudaTetrahedralVisualModel.inl; ). set(SOURCE_FILES; src/VolumetricRendering/CUDA/init.cpp. src/VolumetricRendering/CUDA/CudaTetrahedralVisualModel.cpp; ). sofa_find_package(VolumetricRendering REQUIRED); sofa_find_package(SofaCUDA REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} VolumetricRendering); target_link_libraries(${PROJECT_NAME} SofaCUDA). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; RELOCATABLE ""plugins""; ); ",MatchSource.DOCS,applications/plugins/VolumetricRendering/extensions/CUDA/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/plugins/VolumetricRendering/extensions/CUDA/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/getDeprecatedComponents/README.txt:216,Safety,avoid,avoid,216,getDeprecatedComponents; ************************. getDeprecatedComponents is a simple executable that reads the map sofa::helper::deprecated::components and outputs all components.; It is used by SOFA CI scripts to avoid testing scenes that contain deprecated components.; WARNING: the map needs to be up-to-date!; ,MatchSource.DOCS,applications/projects/getDeprecatedComponents/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/getDeprecatedComponents/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/getDeprecatedComponents/README.txt:222,Testability,test,testing,222,getDeprecatedComponents; ************************. getDeprecatedComponents is a simple executable that reads the map sofa::helper::deprecated::components and outputs all components.; It is used by SOFA CI scripts to avoid testing scenes that contain deprecated components.; WARNING: the map needs to be up-to-date!; ,MatchSource.DOCS,applications/projects/getDeprecatedComponents/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/getDeprecatedComponents/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/getDeprecatedComponents/README.txt:80,Usability,simpl,simple,80,getDeprecatedComponents; ************************. getDeprecatedComponents is a simple executable that reads the map sofa::helper::deprecated::components and outputs all components.; It is used by SOFA CI scripts to avoid testing scenes that contain deprecated components.; WARNING: the map needs to be up-to-date!; ,MatchSource.DOCS,applications/projects/getDeprecatedComponents/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/getDeprecatedComponents/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/Modeler/CMakeLists.txt:0,Integrability,message,message,0,"message(DEPRECATION ""Modeler project is deprecated""). add_subdirectory(""lib""); add_subdirectory(""exec""); ",MatchSource.DOCS,applications/projects/Modeler/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/Modeler/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/myCfExport/README.txt:85,Performance,load,load,85,"; myCfExport.cpp reads a list of scene files in a file, then for each scene file:; - load the file; - traverse the scene using a MyCfExportVisitor. MyCF is a knowledge based developed in Grenoble for the generation of mechanical models. Francois Faure, 2014 ; ",MatchSource.DOCS,applications/projects/myCfExport/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/myCfExport/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/qtSofa/README.txt:2,Usability,simpl,simple,2,"A simple qt application featuring a Sofa simulation, using the SofaSimpleGUI API. ",MatchSource.DOCS,applications/projects/qtSofa/README.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/qtSofa/README.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:780,Deployability,install,install,780,"cmake_minimum_required(VERSION 3.22); project(runSofa). ###################################; # Generate plugin_list.conf.default; include(cmake/GeneratePluginConfig.cmake); if(MSVC); # plugins are located in bin/; set(_pluginLocation ""bin""); else(); # plugins are located in lib/; set(_pluginLocation ""lib""); endif(); set(_configPluginFileName plugin_list.conf); set(_defaultConfigPluginFileName ""${_configPluginFileName}.default""); set(_defaultConfigPluginFilePath ""${CMAKE_BINARY_DIR}/${_pluginLocation}/${_defaultConfigPluginFileName}""); sofa_generate_plugin_config(${_defaultConfigPluginFilePath}); message(""Write Plugin list at ${_defaultConfigPluginFilePath}""); configure_file(${_defaultConfigPluginFilePath} ${PROJECT_BINARY_DIR}/${_defaultConfigPluginFileName} COPYONLY); install(FILES ""${_defaultConfigPluginFilePath}"" DESTINATION ${_pluginLocation}/ COMPONENT applications); ###################################. sofa_find_package(Sofa.Component.Playback QUIET). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(Sofa.GUI.Batch REQUIRED); sofa_find_package(SceneChecking REQUIRED). set(HEADER_FILES; runSofaValidation.h; ); set(SOURCE_FILES; Main.cpp; ). if(Sofa.Component.Playback_FOUND); list(APPEND SOURCE_FILES runSofaValidation.cpp); else(); list(APPEND SOURCE_FILES runSofaNoValidation.cpp); endif(). set(RESOURCE_FILES; resources/docs/runsofa.html; ${PROJECT_BINARY_DIR}/${_defaultConfigPluginFileName}; ); if(APPLE); set(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.icns""); set_source_files_properties(${RC_FILES} PROPERTIES MACOSX_PACKAGE_LOCATION ""Resources""); else(); set(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_execu",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:2834,Deployability,install,install,2834,"CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_executable(${PROJECT_NAME} ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); endif(). target_compile_definitions(${PROJECT_NAME} PUBLIC ""CONFIG_PLUGIN_FILENAME=${_configPluginFileName}""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""DEFAULT_CONFIG_PLUGIN_FILENAME=${_defaultConfigPluginFileName}""). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Batch); target_link_libraries(${PROJECT_NAME} SceneChecking). if(Sofa.Component.Playback_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.Component.Playback); else(); message(WARNING ""runSofa: Sofa.Component.Playback not found, disabling validation feature.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(runSofa_test); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/runSofa""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""resources/"" DESTINATION ""share/sofa/gui/runSofa"" COMPONENT resources). sofa_add_targets_to_package(; PACKAGE_NAME Sofa.GUI; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}""; INCLUDE_INSTALL_DIR ""Sofa.GUI/runSofa""; ); ",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:3212,Deployability,install,installed,3212,"CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_executable(${PROJECT_NAME} ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); endif(). target_compile_definitions(${PROJECT_NAME} PUBLIC ""CONFIG_PLUGIN_FILENAME=${_configPluginFileName}""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""DEFAULT_CONFIG_PLUGIN_FILENAME=${_defaultConfigPluginFileName}""). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Batch); target_link_libraries(${PROJECT_NAME} SceneChecking). if(Sofa.Component.Playback_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.Component.Playback); else(); message(WARNING ""runSofa: Sofa.Component.Playback not found, disabling validation feature.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(runSofa_test); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/runSofa""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""resources/"" DESTINATION ""share/sofa/gui/runSofa"" COMPONENT resources). sofa_add_targets_to_package(; PACKAGE_NAME Sofa.GUI; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}""; INCLUDE_INSTALL_DIR ""Sofa.GUI/runSofa""; ); ",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:3244,Deployability,install,install,3244,"CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_executable(${PROJECT_NAME} ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); endif(). target_compile_definitions(${PROJECT_NAME} PUBLIC ""CONFIG_PLUGIN_FILENAME=${_configPluginFileName}""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""DEFAULT_CONFIG_PLUGIN_FILENAME=${_defaultConfigPluginFileName}""). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Batch); target_link_libraries(${PROJECT_NAME} SceneChecking). if(Sofa.Component.Playback_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.Component.Playback); else(); message(WARNING ""runSofa: Sofa.Component.Playback not found, disabling validation feature.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(runSofa_test); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/runSofa""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""resources/"" DESTINATION ""share/sofa/gui/runSofa"" COMPONENT resources). sofa_add_targets_to_package(; PACKAGE_NAME Sofa.GUI; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}""; INCLUDE_INSTALL_DIR ""Sofa.GUI/runSofa""; ); ",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:3283,Deployability,install,installed,3283,"CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_executable(${PROJECT_NAME} ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); endif(). target_compile_definitions(${PROJECT_NAME} PUBLIC ""CONFIG_PLUGIN_FILENAME=${_configPluginFileName}""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""DEFAULT_CONFIG_PLUGIN_FILENAME=${_defaultConfigPluginFileName}""). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Batch); target_link_libraries(${PROJECT_NAME} SceneChecking). if(Sofa.Component.Playback_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.Component.Playback); else(); message(WARNING ""runSofa: Sofa.Component.Playback not found, disabling validation feature.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(runSofa_test); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/runSofa""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""resources/"" DESTINATION ""share/sofa/gui/runSofa"" COMPONENT resources). sofa_add_targets_to_package(; PACKAGE_NAME Sofa.GUI; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}""; INCLUDE_INSTALL_DIR ""Sofa.GUI/runSofa""; ); ",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:3381,Deployability,install,install,3381,"CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_executable(${PROJECT_NAME} ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); endif(). target_compile_definitions(${PROJECT_NAME} PUBLIC ""CONFIG_PLUGIN_FILENAME=${_configPluginFileName}""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""DEFAULT_CONFIG_PLUGIN_FILENAME=${_defaultConfigPluginFileName}""). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Batch); target_link_libraries(${PROJECT_NAME} SceneChecking). if(Sofa.Component.Playback_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.Component.Playback); else(); message(WARNING ""runSofa: Sofa.Component.Playback not found, disabling validation feature.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(runSofa_test); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/runSofa""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""resources/"" DESTINATION ""share/sofa/gui/runSofa"" COMPONENT resources). sofa_add_targets_to_package(; PACKAGE_NAME Sofa.GUI; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}""; INCLUDE_INSTALL_DIR ""Sofa.GUI/runSofa""; ); ",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:603,Integrability,message,message,603,"cmake_minimum_required(VERSION 3.22); project(runSofa). ###################################; # Generate plugin_list.conf.default; include(cmake/GeneratePluginConfig.cmake); if(MSVC); # plugins are located in bin/; set(_pluginLocation ""bin""); else(); # plugins are located in lib/; set(_pluginLocation ""lib""); endif(); set(_configPluginFileName plugin_list.conf); set(_defaultConfigPluginFileName ""${_configPluginFileName}.default""); set(_defaultConfigPluginFilePath ""${CMAKE_BINARY_DIR}/${_pluginLocation}/${_defaultConfigPluginFileName}""); sofa_generate_plugin_config(${_defaultConfigPluginFilePath}); message(""Write Plugin list at ${_defaultConfigPluginFilePath}""); configure_file(${_defaultConfigPluginFilePath} ${PROJECT_BINARY_DIR}/${_defaultConfigPluginFileName} COPYONLY); install(FILES ""${_defaultConfigPluginFilePath}"" DESTINATION ${_pluginLocation}/ COMPONENT applications); ###################################. sofa_find_package(Sofa.Component.Playback QUIET). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(Sofa.GUI.Batch REQUIRED); sofa_find_package(SceneChecking REQUIRED). set(HEADER_FILES; runSofaValidation.h; ); set(SOURCE_FILES; Main.cpp; ). if(Sofa.Component.Playback_FOUND); list(APPEND SOURCE_FILES runSofaValidation.cpp); else(); list(APPEND SOURCE_FILES runSofaNoValidation.cpp); endif(). set(RESOURCE_FILES; resources/docs/runsofa.html; ${PROJECT_BINARY_DIR}/${_defaultConfigPluginFileName}; ); if(APPLE); set(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.icns""); set_source_files_properties(${RC_FILES} PROPERTIES MACOSX_PACKAGE_LOCATION ""Resources""); else(); set(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_execu",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:2649,Integrability,message,message,2649,"t(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_executable(${PROJECT_NAME} ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); endif(). target_compile_definitions(${PROJECT_NAME} PUBLIC ""CONFIG_PLUGIN_FILENAME=${_configPluginFileName}""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""DEFAULT_CONFIG_PLUGIN_FILENAME=${_defaultConfigPluginFileName}""). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Batch); target_link_libraries(${PROJECT_NAME} SceneChecking). if(Sofa.Component.Playback_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.Component.Playback); else(); message(WARNING ""runSofa: Sofa.Component.Playback not found, disabling validation feature.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(runSofa_test); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/runSofa""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""resources/"" DESTINATION ""share/sofa/gui/runSofa"" COMPONENT resources). sofa_add_targets_to_package(; PACKAGE_NAME Sofa.GUI; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}""; INCLUDE_INSTALL_DIR ""Sofa.GUI",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:185,Modifiability,plugin,plugins,185,"cmake_minimum_required(VERSION 3.22); project(runSofa). ###################################; # Generate plugin_list.conf.default; include(cmake/GeneratePluginConfig.cmake); if(MSVC); # plugins are located in bin/; set(_pluginLocation ""bin""); else(); # plugins are located in lib/; set(_pluginLocation ""lib""); endif(); set(_configPluginFileName plugin_list.conf); set(_defaultConfigPluginFileName ""${_configPluginFileName}.default""); set(_defaultConfigPluginFilePath ""${CMAKE_BINARY_DIR}/${_pluginLocation}/${_defaultConfigPluginFileName}""); sofa_generate_plugin_config(${_defaultConfigPluginFilePath}); message(""Write Plugin list at ${_defaultConfigPluginFilePath}""); configure_file(${_defaultConfigPluginFilePath} ${PROJECT_BINARY_DIR}/${_defaultConfigPluginFileName} COPYONLY); install(FILES ""${_defaultConfigPluginFilePath}"" DESTINATION ${_pluginLocation}/ COMPONENT applications); ###################################. sofa_find_package(Sofa.Component.Playback QUIET). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(Sofa.GUI.Batch REQUIRED); sofa_find_package(SceneChecking REQUIRED). set(HEADER_FILES; runSofaValidation.h; ); set(SOURCE_FILES; Main.cpp; ). if(Sofa.Component.Playback_FOUND); list(APPEND SOURCE_FILES runSofaValidation.cpp); else(); list(APPEND SOURCE_FILES runSofaNoValidation.cpp); endif(). set(RESOURCE_FILES; resources/docs/runsofa.html; ${PROJECT_BINARY_DIR}/${_defaultConfigPluginFileName}; ); if(APPLE); set(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.icns""); set_source_files_properties(${RC_FILES} PROPERTIES MACOSX_PACKAGE_LOCATION ""Resources""); else(); set(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_execu",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:252,Modifiability,plugin,plugins,252,"cmake_minimum_required(VERSION 3.22); project(runSofa). ###################################; # Generate plugin_list.conf.default; include(cmake/GeneratePluginConfig.cmake); if(MSVC); # plugins are located in bin/; set(_pluginLocation ""bin""); else(); # plugins are located in lib/; set(_pluginLocation ""lib""); endif(); set(_configPluginFileName plugin_list.conf); set(_defaultConfigPluginFileName ""${_configPluginFileName}.default""); set(_defaultConfigPluginFilePath ""${CMAKE_BINARY_DIR}/${_pluginLocation}/${_defaultConfigPluginFileName}""); sofa_generate_plugin_config(${_defaultConfigPluginFilePath}); message(""Write Plugin list at ${_defaultConfigPluginFilePath}""); configure_file(${_defaultConfigPluginFilePath} ${PROJECT_BINARY_DIR}/${_defaultConfigPluginFileName} COPYONLY); install(FILES ""${_defaultConfigPluginFilePath}"" DESTINATION ${_pluginLocation}/ COMPONENT applications); ###################################. sofa_find_package(Sofa.Component.Playback QUIET). sofa_find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(Sofa.GUI.Batch REQUIRED); sofa_find_package(SceneChecking REQUIRED). set(HEADER_FILES; runSofaValidation.h; ); set(SOURCE_FILES; Main.cpp; ). if(Sofa.Component.Playback_FOUND); list(APPEND SOURCE_FILES runSofaValidation.cpp); else(); list(APPEND SOURCE_FILES runSofaNoValidation.cpp); endif(). set(RESOURCE_FILES; resources/docs/runsofa.html; ${PROJECT_BINARY_DIR}/${_defaultConfigPluginFileName}; ); if(APPLE); set(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.icns""); set_source_files_properties(${RC_FILES} PROPERTIES MACOSX_PACKAGE_LOCATION ""Resources""); else(); set(RC_FILES ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_execu",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt:2720,Security,validat,validation,2720,"CMAKE_CURRENT_SOURCE_DIR}/runSofa.rc""); endif(). if(APPLE AND SOFA_BUILD_APP_BUNDLE); add_executable(${PROJECT_NAME} MACOSX_BUNDLE ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); set_target_properties(${PROJECT_NAME} PROPERTIES MACOSX_BUNDLE_INFO_PLIST ""${CMAKE_CURRENT_SOURCE_DIR}/runSofa.plist""); else(); add_executable(${PROJECT_NAME} ${RC_FILES} ${RESOURCE_FILES} ${HEADER_FILES} ${SOURCE_FILES}); endif(). target_compile_definitions(${PROJECT_NAME} PUBLIC ""CONFIG_PLUGIN_FILENAME=${_configPluginFileName}""); target_compile_definitions(${PROJECT_NAME} PUBLIC ""DEFAULT_CONFIG_PLUGIN_FILENAME=${_defaultConfigPluginFileName}""). target_link_libraries(${PROJECT_NAME} Sofa.Simulation.Graph); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Common); target_link_libraries(${PROJECT_NAME} Sofa.GUI.Batch); target_link_libraries(${PROJECT_NAME} SceneChecking). if(Sofa.Component.Playback_FOUND); target_link_libraries(${PROJECT_NAME} Sofa.Component.Playback); else(); message(WARNING ""runSofa: Sofa.Component.Playback not found, disabling validation feature.""); endif(). if(SOFA_BUILD_TESTS); add_subdirectory(runSofa_test); endif(). # Create build and install versions of .ini file for resources finding; set(RESOURCES_DIR ""${CMAKE_CURRENT_SOURCE_DIR}/resources""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/${PROJECT_NAME}.ini""); set(RESOURCES_DIR ""../share/sofa/gui/runSofa""); configure_file(""${CMAKE_CURRENT_SOURCE_DIR}/etc/${PROJECT_NAME}.ini.in"" ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini""); install(FILES ""${CMAKE_BINARY_DIR}/etc/installed${PROJECT_NAME}.ini"" DESTINATION etc RENAME ${PROJECT_NAME}.ini COMPONENT applications). install(DIRECTORY ""resources/"" DESTINATION ""share/sofa/gui/runSofa"" COMPONENT resources). sofa_add_targets_to_package(; PACKAGE_NAME Sofa.GUI; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""${CMAKE_CURRENT_SOURCE_DIR}""; INCLUDE_INSTALL_DIR ""Sofa.GUI/runSofa""; ); ",MatchSource.DOCS,applications/projects/runSofa/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/runSofa/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt:373,Modifiability,config,config,373,"cmake_minimum_required(VERSION 3.22); project(SceneChecking LANGUAGES CXX). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.SceneUtility REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED). set(SCENECHECK_SRC_DIR src/SceneChecking). set(HEADER_FILES; ${SCENECHECK_SRC_DIR}/config.h.in; ${SCENECHECK_SRC_DIR}/init.h; ${SCENECHECK_SRC_DIR}/SceneCheck.h; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.h; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.h; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.h; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.h; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.h; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.h; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.h; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.h; ). set(SOURCE_FILES; ${SCENECHECK_SRC_DIR}/init.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.SceneUtility Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SCENECHECKING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SCE",MatchSource.DOCS,applications/projects/SceneChecking/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt:1753,Modifiability,plugin,plugins,1753,"LANGUAGES CXX). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.SceneUtility REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED). set(SCENECHECK_SRC_DIR src/SceneChecking). set(HEADER_FILES; ${SCENECHECK_SRC_DIR}/config.h.in; ${SCENECHECK_SRC_DIR}/init.h; ${SCENECHECK_SRC_DIR}/SceneCheck.h; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.h; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.h; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.h; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.h; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.h; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.h; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.h; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.h; ). set(SOURCE_FILES; ${SCENECHECK_SRC_DIR}/init.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.SceneUtility Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SCENECHECKING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SCENECHECKING_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,applications/projects/SceneChecking/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt:1827,Testability,test,tests,1827,"LANGUAGES CXX). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.SceneUtility REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED). set(SCENECHECK_SRC_DIR src/SceneChecking). set(HEADER_FILES; ${SCENECHECK_SRC_DIR}/config.h.in; ${SCENECHECK_SRC_DIR}/init.h; ${SCENECHECK_SRC_DIR}/SceneCheck.h; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.h; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.h; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.h; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.h; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.h; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.h; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.h; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.h; ). set(SOURCE_FILES; ${SCENECHECK_SRC_DIR}/init.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.SceneUtility Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SCENECHECKING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SCENECHECKING_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,applications/projects/SceneChecking/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt:1928,Testability,test,tests,1928,"LANGUAGES CXX). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.SceneUtility REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED). set(SCENECHECK_SRC_DIR src/SceneChecking). set(HEADER_FILES; ${SCENECHECK_SRC_DIR}/config.h.in; ${SCENECHECK_SRC_DIR}/init.h; ${SCENECHECK_SRC_DIR}/SceneCheck.h; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.h; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.h; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.h; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.h; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.h; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.h; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.h; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.h; ). set(SOURCE_FILES; ${SCENECHECK_SRC_DIR}/init.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.SceneUtility Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SCENECHECKING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SCENECHECKING_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,applications/projects/SceneChecking/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt:2043,Testability,test,tests,2043,"LANGUAGES CXX). find_package(Sofa.Config REQUIRED); sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.SceneUtility REQUIRED); sofa_find_package(Sofa.Component.Collision.Response.Contact REQUIRED). set(SCENECHECK_SRC_DIR src/SceneChecking). set(HEADER_FILES; ${SCENECHECK_SRC_DIR}/config.h.in; ${SCENECHECK_SRC_DIR}/init.h; ${SCENECHECK_SRC_DIR}/SceneCheck.h; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.h; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.h; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.h; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.h; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.h; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.h; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.h; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.h; ). set(SOURCE_FILES; ${SCENECHECK_SRC_DIR}/init.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckAPIChange.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckCollisionResponse.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDeprecatedComponents.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckDuplicatedName.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckMissingRequiredPlugin.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckUsingAlias.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerListener.cpp; ${SCENECHECK_SRC_DIR}/SceneCheckerVisitor.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}). target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.Component.SceneUtility Sofa.Component.Collision.Response.Contact). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; RELOCATABLE ""plugins""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SCENECHECKING_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SCENECHECKING_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,applications/projects/SceneChecking/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SceneChecking/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaBatch/doc.txt:884,Performance,load,loaded,884," sofaBatch permits to automatically save states of several simulations without open the GUI (and so without X-server).; It is useful to run several simulations during the night on a distant server.; ; A list of scenes .scn are given, and for each a number of time steps to compute and a .simu output namefile.; Resulting .simu and simulation files will be saved in the 'simulation' directory.; ; Theses tasks must be written as a list in a text file (see the file Sofa/applications/projects/sofaBatch/tasks as an example):; //.scn names #time steps output name; scene1.scn 100 mysimu1; scene2.scn 1876 mysimu2; scene3.scn 15 mysimu3; ... Running command: sofaBatch listFileName; (example: Sofa/bin/sofaBatch Sofa/applications/projects/sofaBatch/tasks). Files mysimu1.simu, mysimu2.simu, mysimu3.simu, ... are created in Sofa/applications/projects/sofaBatch/simulation and they can be loaded with runSofa to visualize results. see help : Sofa/bin/sofaBatch --help. ",MatchSource.DOCS,applications/projects/sofaBatch/doc.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaBatch/doc.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaOPENCL/CMakeLists.txt:200,Modifiability,plugin,plugins,200,cmake_minimum_required(VERSION 3.22); project(sofaOPENCL). find_package(SofaGui REQUIRED); find_package(SofaOpenCL REQUIRED). set(SOURCE_FILES Main.cpp); set(RC_FILES sofa.rc). include_directories(../plugins); add_executable(${PROJECT_NAME} ${SOURCE_FILES} ${RC_FILES}); target_link_libraries(${PROJECT_NAME} SofaGui SofaOpenCL); ,MatchSource.DOCS,applications/projects/sofaOPENCL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaOPENCL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt:1855,Deployability,configurat,configurations,1855,"PI_SRC_DIR ""src/SofaPhysicsAPI""); set(HEADER_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/config.h.in; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsAPI.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.h; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.h; ). set(SOURCE_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.cpp; ). find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(SofaValidation QUIET). if(SofaValidation_FOUND); message(""SofaPhysicsAPI: SofaValidation has been found; enabling DataController and DataMonitor support.""); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor_impl.h; ); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor.cpp; ); else(); message(""SofaPhysicsAPI: SofaValidation has not been found; DataController and DataMonitor will not be supported.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.GUI.Common Sofa.SimpleApi); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC SofaValidation); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${Sofa_VERSION}). ## Install rules and CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/projects/SofaPhysicsAPI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt:887,Integrability,message,message,887,"cmake_minimum_required(VERSION 3.22); project(SofaPhysicsAPI LANGUAGES CXX). set(SOFAPHYSICSAPI_SRC_DIR ""src/SofaPhysicsAPI""); set(HEADER_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/config.h.in; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsAPI.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.h; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.h; ). set(SOURCE_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.cpp; ). find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(SofaValidation QUIET). if(SofaValidation_FOUND); message(""SofaPhysicsAPI: SofaValidation has been found; enabling DataController and DataMonitor support.""); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor_impl.h; ); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor.cpp; ); else(); message(""SofaPhysicsAPI: SofaValidation has not been found; DataController and DataMonitor will not be supported.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.GUI.Common Sofa.SimpleApi); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC SofaValidation); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${Sofa_VERSION}). ## Install rules and CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AU",MatchSource.DOCS,applications/projects/SofaPhysicsAPI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt:1291,Integrability,message,message,1291,"PI_SRC_DIR ""src/SofaPhysicsAPI""); set(HEADER_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/config.h.in; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsAPI.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.h; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.h; ). set(SOURCE_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.cpp; ). find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(SofaValidation QUIET). if(SofaValidation_FOUND); message(""SofaPhysicsAPI: SofaValidation has been found; enabling DataController and DataMonitor support.""); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor_impl.h; ); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor.cpp; ); else(); message(""SofaPhysicsAPI: SofaValidation has not been found; DataController and DataMonitor will not be supported.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.GUI.Common Sofa.SimpleApi); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC SofaValidation); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${Sofa_VERSION}). ## Install rules and CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/projects/SofaPhysicsAPI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt:171,Modifiability,config,config,171,"cmake_minimum_required(VERSION 3.22); project(SofaPhysicsAPI LANGUAGES CXX). set(SOFAPHYSICSAPI_SRC_DIR ""src/SofaPhysicsAPI""); set(HEADER_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/config.h.in; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsAPI.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.h; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.h; ). set(SOURCE_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.cpp; ). find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(SofaValidation QUIET). if(SofaValidation_FOUND); message(""SofaPhysicsAPI: SofaValidation has been found; enabling DataController and DataMonitor support.""); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor_impl.h; ); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor.cpp; ); else(); message(""SofaPhysicsAPI: SofaValidation has not been found; DataController and DataMonitor will not be supported.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.GUI.Common Sofa.SimpleApi); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC SofaValidation); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${Sofa_VERSION}). ## Install rules and CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AU",MatchSource.DOCS,applications/projects/SofaPhysicsAPI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt:1855,Modifiability,config,configurations,1855,"PI_SRC_DIR ""src/SofaPhysicsAPI""); set(HEADER_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/config.h.in; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsAPI.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.h; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.h; ). set(SOURCE_FILES; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsOutputMesh.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsSimulation.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsBindings.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/fakegui.cpp; ). find_package(Sofa.Simulation.Graph REQUIRED); sofa_find_package(Sofa.SimpleApi REQUIRED); sofa_find_package(Sofa.Component REQUIRED); sofa_find_package(Sofa.GUI.Common REQUIRED); sofa_find_package(SofaValidation QUIET). if(SofaValidation_FOUND); message(""SofaPhysicsAPI: SofaValidation has been found; enabling DataController and DataMonitor support.""); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController_impl.h; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor_impl.h; ); list(APPEND HEADER_FILES ; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataController.cpp; ${SOFAPHYSICSAPI_SRC_DIR}/SofaPhysicsDataMonitor.cpp; ); else(); message(""SofaPhysicsAPI: SofaValidation has not been found; DataController and DataMonitor will not be supported.""); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Graph Sofa.GUI.Common Sofa.SimpleApi); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component). if(SofaValidation_FOUND); target_link_libraries(${PROJECT_NAME} PUBLIC SofaValidation); endif(). set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ${Sofa_VERSION}). ## Install rules and CMake package configurations files; sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ${PROJECT_NAME}; ); ",MatchSource.DOCS,applications/projects/SofaPhysicsAPI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/SofaPhysicsAPI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/Modeler/exec/CMakeLists.txt:256,Integrability,message,message,256,"cmake_minimum_required(VERSION 3.22); project(Modeler). if(APPLE); set(RC_FILES ""../Modeler.icns""); else(); set(RC_FILES ""sofa.rc""); endif(). sofa_find_package(Qt5 COMPONENTS Core REQUIRED); sofa_find_package(SofaComponentAll REQUIRED). if(Qt5Core_FOUND); message(""Modeler executable: Using Qt5""); qt5_add_resources(RESOURCE_FILES ""${CMAKE_SOURCE_DIR}/share/textures/modeler/icons.qrc""); endif(). add_executable(${PROJECT_NAME} Main.cpp ${RC_FILES} ${RESOURCE_FILES}); target_link_libraries(${PROJECT_NAME} SofaModeler SofaComponentAll SofaSimulationGraph). sofa_install_targets(SofaModeler Modeler ""Modeler""); ",MatchSource.DOCS,applications/projects/Modeler/exec/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/Modeler/exec/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:202,Deployability,update,updateSampleMaterialProperties,202,. File: scenes/steak.pscn using steak-seg.ppm 3 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 0.94; computeWeights: 2; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 10; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.94; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 20; Lloyd_iteration 0.23; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.93; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 3 50; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.23; computeUniformSampling: 0.96; computeWeights: 1.92; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; computeUniformSampling: 1.89; computeWeights: 2.98; computeLinearRegionsSampling: 0.05; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 10; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.8,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:444,Deployability,update,updateSampleMaterialProperties,444,. File: scenes/steak.pscn using steak-seg.ppm 3 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 0.94; computeWeights: 2; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 10; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.94; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 20; Lloyd_iteration 0.23; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.93; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 3 50; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.23; computeUniformSampling: 0.96; computeWeights: 1.92; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; computeUniformSampling: 1.89; computeWeights: 2.98; computeLinearRegionsSampling: 0.05; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 10; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.8,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:686,Deployability,update,updateSampleMaterialProperties,686,. File: scenes/steak.pscn using steak-seg.ppm 3 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 0.94; computeWeights: 2; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 10; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.94; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 20; Lloyd_iteration 0.23; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.93; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 3 50; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.23; computeUniformSampling: 0.96; computeWeights: 1.92; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; computeUniformSampling: 1.89; computeWeights: 2.98; computeLinearRegionsSampling: 0.05; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 10; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.8,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:925,Deployability,update,updateSampleMaterialProperties,925,. File: scenes/steak.pscn using steak-seg.ppm 3 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 0.94; computeWeights: 2; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 10; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.94; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 20; Lloyd_iteration 0.23; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.93; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 3 50; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.23; computeUniformSampling: 0.96; computeWeights: 1.92; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; computeUniformSampling: 1.89; computeWeights: 2.98; computeLinearRegionsSampling: 0.05; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 10; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.8,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:1210,Deployability,update,updateSampleMaterialProperties,1210,perties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 10; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.94; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 3 20; Lloyd_iteration 0.23; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.93; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 3 50; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.23; computeUniformSampling: 0.96; computeWeights: 1.92; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; computeUniformSampling: 1.89; computeWeights: 2.98; computeLinearRegionsSampling: 0.05; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 10; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 10 6; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_ite,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:1496,Deployability,update,updateSampleMaterialProperties,1496, steak-seg.ppm 3 20; Lloyd_iteration 0.23; Lloyd_iteration 0.23; Lloyd_iteration 0.24; computeUniformSampling: 0.94; computeWeights: 1.93; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 3 50; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.23; computeUniformSampling: 0.96; computeWeights: 1.92; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; computeUniformSampling: 1.89; computeWeights: 2.98; computeLinearRegionsSampling: 0.05; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 10; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 10 6; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 10; Lloyd_iteration 0.25; Lloyd_ite,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:1779,Deployability,update,updateSampleMaterialProperties,1779,loyd_iteration 0.25; Lloyd_iteration 0.23; computeUniformSampling: 0.96; computeWeights: 1.92; computeLinearRegionsSampling: 0.04; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 6; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; computeUniformSampling: 1.89; computeWeights: 2.98; computeLinearRegionsSampling: 0.05; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 10; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 10 6; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 10; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:2062,Deployability,update,updateSampleMaterialProperties,2062, Lloyd_iteration 0.24; Lloyd_iteration 0.24; computeUniformSampling: 1.89; computeWeights: 2.98; computeLinearRegionsSampling: 0.05; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 5 10; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 10 6; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 10; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 20; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; computeUniformSampling: 3.59; computeWeights: 4.93; computeLinearRegionsSampling: 0.12; updateSampleMaterialPrope,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:2391,Deployability,update,updateSampleMaterialProperties,2391,; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 20; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.25; Lloyd_iteration 0.23; Lloyd_iteration 0.23; computeUniformSampling: 1.89; computeWeights: 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 10 6; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 10; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 20; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; computeUniformSampling: 3.59; computeWeights: 4.93; computeLinearRegionsSampling: 0.12; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 50; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; computeUniformSampling: 3.6; computeWeights: 4.94; computeLinearRegionsSampling: 0.13; updateSampleMaterialProp,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:2721,Deployability,update,updateSampleMaterialProperties,2721, 3.03; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0. File: scenes/steak.pscn using steak-seg.ppm 5 50; Lloyd_iteration 0.23; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.23; computeUniformSampling: 1.88; computeWeights: 2.96; computeLinearRegionsSampling: 0.07; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 10 6; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 10; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 20; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; computeUniformSampling: 3.59; computeWeights: 4.93; computeLinearRegionsSampling: 0.12; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 50; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; computeUniformSampling: 3.6; computeWeights: 4.94; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 20 6; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.1; computeLinearRegio,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:3052,Deployability,update,updateSampleMaterialProperties,3052,eSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 10 6; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 10; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 20; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; computeUniformSampling: 3.59; computeWeights: 4.93; computeLinearRegionsSampling: 0.12; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 50; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; computeUniformSampling: 3.6; computeWeights: 4.94; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 20 6; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.1; computeLinearRegionsSampling: 0.3; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 10; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.5,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:3382,Deployability,update,updateSampleMaterialProperties,3382,SampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 10; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; computeUniformSampling: 3.6; computeWeights: 4.93; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 20; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; computeUniformSampling: 3.59; computeWeights: 4.93; computeLinearRegionsSampling: 0.12; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 50; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; computeUniformSampling: 3.6; computeWeights: 4.94; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 20 6; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.1; computeLinearRegionsSampling: 0.3; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 10; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.55; computeWeights: 8.01; computeLinearRegionsSampling: 0.28; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 20; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloy,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:3753,Deployability,update,updateSampleMaterialProperties,3753,nes/steak.pscn using steak-seg.ppm 10 20; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; computeUniformSampling: 3.59; computeWeights: 4.93; computeLinearRegionsSampling: 0.12; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg.ppm 10 50; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; computeUniformSampling: 3.6; computeWeights: 4.94; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 20 6; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.1; computeLinearRegionsSampling: 0.3; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 10; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.55; computeWeights: 8.01; computeLinearRegionsSampling: 0.28; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 20; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.01; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 50; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Ll,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:4128,Deployability,update,updateSampleMaterialProperties,4128,oyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; Lloyd_iteration 0.25; Lloyd_iteration 0.25; Lloyd_iteration 0.24; computeUniformSampling: 3.6; computeWeights: 4.94; computeLinearRegionsSampling: 0.13; updateSampleMaterialProperties: 0.01. File: scenes/steak.pscn using steak-seg.ppm 20 6; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.1; computeLinearRegionsSampling: 0.3; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 10; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.55; computeWeights: 8.01; computeLinearRegionsSampling: 0.28; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 20; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.01; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 50; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.54; computeWeights: 8.05; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg2.ppm 3 6; computeUniformSampling: 2.09; computeWeights: 15.09; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 10; ,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:4502,Deployability,update,updateSampleMaterialProperties,4502,yd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.1; computeLinearRegionsSampling: 0.3; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 10; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.55; computeWeights: 8.01; computeLinearRegionsSampling: 0.28; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 20; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.01; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 50; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.54; computeWeights: 8.05; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg2.ppm 3 6; computeUniformSampling: 2.09; computeWeights: 15.09; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 10; computeUniformSampling: 2.08; computeWeights: 15.01; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 20; computeUniformSampling: 2.1; computeWeights: 15.07; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 50; computeUniformSampl,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:4877,Deployability,update,updateSampleMaterialProperties,4877,iteration 0.27; Lloyd_iteration 0.26; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.55; computeWeights: 8.01; computeLinearRegionsSampling: 0.28; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 20; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.01; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 50; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.54; computeWeights: 8.05; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg2.ppm 3 6; computeUniformSampling: 2.09; computeWeights: 15.09; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 10; computeUniformSampling: 2.08; computeWeights: 15.01; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 20; computeUniformSampling: 2.1; computeWeights: 15.07; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 50; computeUniformSampling: 2.08; computeWeights: 14.87; computeLinearRegionsSampling: 0.25; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 5 6; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.11; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.09; Lloyd_iteration 2.0,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:5054,Deployability,update,updateSampleMaterialProperties,5054, computeWeights: 8.01; computeLinearRegionsSampling: 0.28; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 20; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.01; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 50; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.54; computeWeights: 8.05; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg2.ppm 3 6; computeUniformSampling: 2.09; computeWeights: 15.09; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 10; computeUniformSampling: 2.08; computeWeights: 15.01; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 20; computeUniformSampling: 2.1; computeWeights: 15.07; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 50; computeUniformSampling: 2.08; computeWeights: 14.87; computeLinearRegionsSampling: 0.25; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 5 6; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.11; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.09,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:5232,Deployability,update,updateSampleMaterialProperties,5232,eration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.28; Lloyd_iteration 0.27; computeUniformSampling: 6.6; computeWeights: 8.01; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 50; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.54; computeWeights: 8.05; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg2.ppm 3 6; computeUniformSampling: 2.09; computeWeights: 15.09; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 10; computeUniformSampling: 2.08; computeWeights: 15.01; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 20; computeUniformSampling: 2.1; computeWeights: 15.07; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 50; computeUniformSampling: 2.08; computeWeights: 14.87; computeLinearRegionsSampling: 0.25; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 5 6; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.11; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.1; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.04; L,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:5409,Deployability,update,updateSampleMaterialProperties,5409,iformSampling: 6.6; computeWeights: 8.01; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg.ppm 20 50; Lloyd_iteration 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.54; computeWeights: 8.05; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg2.ppm 3 6; computeUniformSampling: 2.09; computeWeights: 15.09; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 10; computeUniformSampling: 2.08; computeWeights: 15.01; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 20; computeUniformSampling: 2.1; computeWeights: 15.07; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 50; computeUniformSampling: 2.08; computeWeights: 14.87; computeLinearRegionsSampling: 0.25; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 5 6; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.11; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.1; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.1; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.04; Lloyd_iteration 2.12; Lloyd_iteration 2.04; Llo,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:5587,Deployability,update,updateSampleMaterialProperties,5587,tion 0.27; Lloyd_iteration 0.28; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; Lloyd_iteration 0.27; computeUniformSampling: 6.54; computeWeights: 8.05; computeLinearRegionsSampling: 0.29; updateSampleMaterialProperties: 0.05. File: scenes/steak.pscn using steak-seg2.ppm 3 6; computeUniformSampling: 2.09; computeWeights: 15.09; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 10; computeUniformSampling: 2.08; computeWeights: 15.01; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 20; computeUniformSampling: 2.1; computeWeights: 15.07; computeLinearRegionsSampling: 0.26; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 3 50; computeUniformSampling: 2.08; computeWeights: 14.87; computeLinearRegionsSampling: 0.25; updateSampleMaterialProperties: 0.02. File: scenes/steak.pscn using steak-seg2.ppm 5 6; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.11; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.1; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.1; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.04; Lloyd_iteration 2.12; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:7957,Deployability,update,updateSampleMaterialProperties,7957,oyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.07; Lloyd_iteration 2.1; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.04; Lloyd_iteration 2.09; Lloyd_iteration 2.08; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.07; Lloyd_iteration 2.09; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.11; Lloyd_iteration 2.04; Lloyd_iteration 2.05; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.1; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.1; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.09; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.07; computeUniformSampling: 210.47; computeWeights: 24; computeLinearRegionsSampling: 0.45; updateSampleMaterialProperties: 0.04. File: scenes/steak.pscn using steak-seg2.ppm 5 10; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.07; Lloyd_iteration 2.03; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.08; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.07; Lloyd_iteration 2.02; Lloyd_iteration 2.02; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.07; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.07; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.07; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Ll,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:10337,Deployability,update,updateSampleMaterialProperties,10337,eration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.07; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.08; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.01; Lloyd_iteration 2.02; Lloyd_iteration 2.08; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.07; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.05; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.03; computeUniformSampling: 207.77; computeWeights: 23.72; computeLinearRegionsSampling: 0.47; updateSampleMaterialProperties: 0.04. File: scenes/steak.pscn using steak-seg2.ppm 5 20; Lloyd_iteration 2.07; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.07; Lloyd_iteration 2.05; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.08; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.07; Lloyd_iteration 2.03; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.09; Lloyd_iteration 2.03; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.07; Lloyd_iteration 2.03; Lloyd_iteration 2.04; Lloyd_iteration 2.04; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.02; Lloyd_iteration 2.03; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.04; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.03; Ll,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:12716,Deployability,update,updateSampleMaterialProperties,12716,teration 2.08; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.08; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.08; Lloyd_iteration 2.02; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.02; Lloyd_iteration 2.07; Lloyd_iteration 2.05; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.04; Lloyd_iteration 2.07; Lloyd_iteration 2.04; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.08; Lloyd_iteration 2.04; Lloyd_iteration 2.04; Lloyd_iteration 2.04; Lloyd_iteration 2.02; Lloyd_iteration 2.08; Lloyd_iteration 2.03; Lloyd_iteration 2.03; Lloyd_iteration 2.04; Lloyd_iteration 2.03; Lloyd_iteration 2.08; Lloyd_iteration 2.03; computeUniformSampling: 208.3; computeWeights: 23.72; computeLinearRegionsSampling: 0.45; updateSampleMaterialProperties: 0.04. File: scenes/steak.pscn using steak-seg2.ppm 5 50; Lloyd_iteration 2.06; Lloyd_iteration 2.07; Lloyd_iteration 2.1; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.1; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.08; Lloyd_iteration 2.08; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.04; Lloyd_iteration 2.09; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.1; Lloyd_iteration 2.05; Lloyd_iteration 2.07; Lloyd_iteration 2.05; Lloyd_iteration 2.07; Lloyd_iteration 2.1; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.09; Lloyd_iteration 2.07; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.07; Lloyd_iteration 2.1; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.08; Lloyd_iteration 2.09; Lloyd_i,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:15088,Deployability,update,updateSampleMaterialProperties,15088,iteration 2.05; Lloyd_iteration 2.11; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.07; Lloyd_iteration 2.06; Lloyd_iteration 2.09; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.09; Lloyd_iteration 2.08; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.1; Lloyd_iteration 2.07; Lloyd_iteration 2.05; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.1; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.07; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.07; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd_iteration 2.05; Lloyd_iteration 2.05; Lloyd_iteration 2.07; Lloyd_iteration 2.07; Lloyd_iteration 2.08; Lloyd_iteration 2.06; Lloyd_iteration 2.06; Lloyd_iteration 2.05; Lloyd_iteration 2.09; Lloyd_iteration 2.08; computeUniformSampling: 210.81; computeWeights: 23.98; computeLinearRegionsSampling: 0.46; updateSampleMaterialProperties: 0.03. File: scenes/steak.pscn using steak-seg2.ppm 10 6; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.17; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.18; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.19; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.18; Lloyd_iteration 2.12; Lloyd_iteration 2.14; Lloyd_iteration 2.12; Lloyd_iteration 2.17; Lloyd_iteration 2.14; Lloyd_iteration 2.12; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.18; Lloyd_iteration 2.12; Lloyd_iteration 2.11; Lloyd_iteration 2.14; Lloyd_iteration 2.12; Lloyd_iteration 2.17; Lloyd_iteration 2.12; Lloyd_iteration 2.12; Lloyd_iteration 2.13; Lloyd_iteration 2.17; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Ll,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:17468,Deployability,update,updateSampleMaterialProperties,17468,eration 2.12; Lloyd_iteration 2.12; Lloyd_iteration 2.12; Lloyd_iteration 2.12; Lloyd_iteration 2.16; Lloyd_iteration 2.13; Lloyd_iteration 2.12; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.12; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.16; Lloyd_iteration 2.12; Lloyd_iteration 2.14; Lloyd_iteration 2.12; Lloyd_iteration 2.13; Lloyd_iteration 2.16; Lloyd_iteration 2.14; Lloyd_iteration 2.12; Lloyd_iteration 2.12; Lloyd_iteration 2.18; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.12; Lloyd_iteration 2.12; Lloyd_iteration 2.18; Lloyd_iteration 2.11; Lloyd_iteration 2.13; Lloyd_iteration 2.12; Lloyd_iteration 2.13; Lloyd_iteration 2.16; Lloyd_iteration 2.12; Lloyd_iteration 2.13; Lloyd_iteration 2.11; Lloyd_iteration 2.17; Lloyd_iteration 2.13; Lloyd_iteration 2.12; Lloyd_iteration 2.14; Lloyd_iteration 2.12; computeUniformSampling: 227.73; computeWeights: 39.43; computeLinearRegionsSampling: 0.84; updateSampleMaterialProperties: 0.1. File: scenes/steak.pscn using steak-seg2.ppm 10 10; Lloyd_iteration 2.2; Lloyd_iteration 2.16; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.17; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.19; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.19; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.18; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.2; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.19; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.18; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloy,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:19844,Deployability,update,updateSampleMaterialProperties,19844,teration 2.14; Lloyd_iteration 2.21; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.19; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.2; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.13; Lloyd_iteration 2.19; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.16; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.21; Lloyd_iteration 2.13; Lloyd_iteration 2.15; computeUniformSampling: 229.47; computeWeights: 39.74; computeLinearRegionsSampling: 0.86; updateSampleMaterialProperties: 0.1. File: scenes/steak.pscn using steak-seg2.ppm 10 20; Lloyd_iteration 2.16; Lloyd_iteration 2.18; Lloyd_iteration 2.18; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.2; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.19; Lloyd_iteration 2.16; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.2; Lloyd_iteration 2.16; Lloyd_iteration 2.16; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.2; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.2; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.19; Lloyd_iteration 2.16; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.19; Lloyd_iteration 2.16; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.17; Lloyd_iteration 2.16; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:22217,Deployability,update,updateSampleMaterialProperties,22217,teration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.19; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.19; Lloyd_iteration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.18; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.21; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.16; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.19; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.18; computeUniformSampling: 229.82; computeWeights: 39.8; computeLinearRegionsSampling: 0.86; updateSampleMaterialProperties: 0.1. File: scenes/steak.pscn using steak-seg2.ppm 10 50; Lloyd_iteration 2.17; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.18; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.16; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.19; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.2; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.18; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.17; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.19; Lloyd_iteration 2.16; Lloyd_iteration 2.15; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.19; Lloyd_iteration 2.14; Llo,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:24595,Deployability,update,updateSampleMaterialProperties,24595,eration 2.15; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.18; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.16; Lloyd_iteration 2.17; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.13; Lloyd_iteration 2.19; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.19; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.18; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.17; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.17; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.13; computeUniformSampling: 229.18; computeWeights: 39.73; computeLinearRegionsSampling: 0.87; updateSampleMaterialProperties: 0.1. File: scenes/steak.pscn using steak-seg2.ppm 20 6; Lloyd_iteration 2.42; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.37; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.35; Lloyd_iteration 2.32; computeUniformSampling: 60.17; computeWeights: 63.02; computeLinearRegionsSampling: 1.62; updateSampleMaterialProperties: 0.26. File: scenes/steak.pscn using steak-seg2.ppm 20 10; Lloyd_iteration 2.34; Lloyd_iteration 2.31; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.3; Lloyd_iteration 2.31; Lloyd_iteration 2.31; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.3; Lloyd_iteration 2.3; computeUniformSampling: 59.63; computeWeights: 62.45; computeLinearRegionsSampling: 1.55; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 20; Lloyd_iteration 2.36; Lloyd_iteration 2.41; Lloyd_iteration 2.34; Lloyd_iteration 2.33,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:25015,Deployability,update,updateSampleMaterialProperties,25015,ation 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.19; Lloyd_iteration 2.13; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.15; Lloyd_iteration 2.18; Lloyd_iteration 2.13; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.17; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.13; Lloyd_iteration 2.15; Lloyd_iteration 2.17; Lloyd_iteration 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.13; computeUniformSampling: 229.18; computeWeights: 39.73; computeLinearRegionsSampling: 0.87; updateSampleMaterialProperties: 0.1. File: scenes/steak.pscn using steak-seg2.ppm 20 6; Lloyd_iteration 2.42; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.37; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.35; Lloyd_iteration 2.32; computeUniformSampling: 60.17; computeWeights: 63.02; computeLinearRegionsSampling: 1.62; updateSampleMaterialProperties: 0.26. File: scenes/steak.pscn using steak-seg2.ppm 20 10; Lloyd_iteration 2.34; Lloyd_iteration 2.31; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.3; Lloyd_iteration 2.31; Lloyd_iteration 2.31; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.3; Lloyd_iteration 2.3; computeUniformSampling: 59.63; computeWeights: 62.45; computeLinearRegionsSampling: 1.55; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 20; Lloyd_iteration 2.36; Lloyd_iteration 2.41; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.39; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.37; computeUniformSampling: 60.37; computeWeights: 63.36; computeLinearRegionsSampling: 1.61; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 50; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:25434,Deployability,update,updateSampleMaterialProperties,25434,tion 2.14; Lloyd_iteration 2.14; Lloyd_iteration 2.13; computeUniformSampling: 229.18; computeWeights: 39.73; computeLinearRegionsSampling: 0.87; updateSampleMaterialProperties: 0.1. File: scenes/steak.pscn using steak-seg2.ppm 20 6; Lloyd_iteration 2.42; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.37; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.35; Lloyd_iteration 2.32; computeUniformSampling: 60.17; computeWeights: 63.02; computeLinearRegionsSampling: 1.62; updateSampleMaterialProperties: 0.26. File: scenes/steak.pscn using steak-seg2.ppm 20 10; Lloyd_iteration 2.34; Lloyd_iteration 2.31; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.3; Lloyd_iteration 2.31; Lloyd_iteration 2.31; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.3; Lloyd_iteration 2.3; computeUniformSampling: 59.63; computeWeights: 62.45; computeLinearRegionsSampling: 1.55; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 20; Lloyd_iteration 2.36; Lloyd_iteration 2.41; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.39; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.37; computeUniformSampling: 60.37; computeWeights: 63.36; computeLinearRegionsSampling: 1.61; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 50; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.38; Lloyd_iteration 2.32; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.32; Lloyd_iteration 2.32; computeUniformSampling: 59.97; computeWeights: 62.97; computeLinearRegionsSampling: 1.6; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg3.ppm 3 6; computeUniformSampling: 17.03; computeWeights: 128.26; computeLinearRegionsSampling:,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:25856,Deployability,update,updateSampleMaterialProperties,25856,ion 2.36; Lloyd_iteration 2.35; Lloyd_iteration 2.32; computeUniformSampling: 60.17; computeWeights: 63.02; computeLinearRegionsSampling: 1.62; updateSampleMaterialProperties: 0.26. File: scenes/steak.pscn using steak-seg2.ppm 20 10; Lloyd_iteration 2.34; Lloyd_iteration 2.31; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.3; Lloyd_iteration 2.31; Lloyd_iteration 2.31; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.3; Lloyd_iteration 2.3; computeUniformSampling: 59.63; computeWeights: 62.45; computeLinearRegionsSampling: 1.55; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 20; Lloyd_iteration 2.36; Lloyd_iteration 2.41; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.39; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.37; computeUniformSampling: 60.37; computeWeights: 63.36; computeLinearRegionsSampling: 1.61; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 50; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.38; Lloyd_iteration 2.32; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.32; Lloyd_iteration 2.32; computeUniformSampling: 59.97; computeWeights: 62.97; computeLinearRegionsSampling: 1.6; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg3.ppm 3 6; computeUniformSampling: 17.03; computeWeights: 128.26; computeLinearRegionsSampling: 2.31; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 10; computeUniformSampling: 17.07; computeWeights: 128.21; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 20; computeUniformSampling: 17.15; computeWeights: 128.5; computeLinearRegionsSampling: 2.3; updateSampleMaterialProperties: 0.17. File: scenes/steak.,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:26277,Deployability,update,updateSampleMaterialProperties,26277,ion 2.32; Lloyd_iteration 2.3; Lloyd_iteration 2.3; computeUniformSampling: 59.63; computeWeights: 62.45; computeLinearRegionsSampling: 1.55; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 20; Lloyd_iteration 2.36; Lloyd_iteration 2.41; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.39; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.37; computeUniformSampling: 60.37; computeWeights: 63.36; computeLinearRegionsSampling: 1.61; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 50; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.38; Lloyd_iteration 2.32; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.32; Lloyd_iteration 2.32; computeUniformSampling: 59.97; computeWeights: 62.97; computeLinearRegionsSampling: 1.6; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg3.ppm 3 6; computeUniformSampling: 17.03; computeWeights: 128.26; computeLinearRegionsSampling: 2.31; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 10; computeUniformSampling: 17.07; computeWeights: 128.21; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 20; computeUniformSampling: 17.15; computeWeights: 128.5; computeLinearRegionsSampling: 2.3; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 50; computeUniformSampling: 17.13; computeWeights: 128.59; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.18. File: scenes/steak.pscn using steak-seg3.ppm 5 6; Lloyd_iteration 17.73; Lloyd_iteration 17.67; Lloyd_iteration 17.78; Lloyd_iteration 17.71; Lloyd_iteration 17.79; Lloyd_iteration 17.77; Lloyd_iteration 17.71; Lloyd_iteration 17.73; Lloyd_iteration 17.75; Lloy,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:26456,Deployability,update,updateSampleMaterialProperties,26456, File: scenes/steak.pscn using steak-seg2.ppm 20 20; Lloyd_iteration 2.36; Lloyd_iteration 2.41; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.39; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.37; computeUniformSampling: 60.37; computeWeights: 63.36; computeLinearRegionsSampling: 1.61; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 50; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.38; Lloyd_iteration 2.32; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.32; Lloyd_iteration 2.32; computeUniformSampling: 59.97; computeWeights: 62.97; computeLinearRegionsSampling: 1.6; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg3.ppm 3 6; computeUniformSampling: 17.03; computeWeights: 128.26; computeLinearRegionsSampling: 2.31; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 10; computeUniformSampling: 17.07; computeWeights: 128.21; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 20; computeUniformSampling: 17.15; computeWeights: 128.5; computeLinearRegionsSampling: 2.3; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 50; computeUniformSampling: 17.13; computeWeights: 128.59; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.18. File: scenes/steak.pscn using steak-seg3.ppm 5 6; Lloyd_iteration 17.73; Lloyd_iteration 17.67; Lloyd_iteration 17.78; Lloyd_iteration 17.71; Lloyd_iteration 17.79; Lloyd_iteration 17.77; Lloyd_iteration 17.71; Lloyd_iteration 17.73; Lloyd_iteration 17.75; Lloyd_iteration 17.74; Lloyd_iteration 17.67; Lloyd_iteration 17.67; Lloyd_iteration 17.68; Lloyd_iteration 17.76; Lloyd_iteration 17.71; Lloyd_iteration 17.59; Lloyd_iteration 17.65,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:26636,Deployability,update,updateSampleMaterialProperties,26636,.39; Lloyd_iteration 2.33; Lloyd_iteration 2.34; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.37; computeUniformSampling: 60.37; computeWeights: 63.36; computeLinearRegionsSampling: 1.61; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 50; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.38; Lloyd_iteration 2.32; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.32; Lloyd_iteration 2.32; computeUniformSampling: 59.97; computeWeights: 62.97; computeLinearRegionsSampling: 1.6; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg3.ppm 3 6; computeUniformSampling: 17.03; computeWeights: 128.26; computeLinearRegionsSampling: 2.31; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 10; computeUniformSampling: 17.07; computeWeights: 128.21; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 20; computeUniformSampling: 17.15; computeWeights: 128.5; computeLinearRegionsSampling: 2.3; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 50; computeUniformSampling: 17.13; computeWeights: 128.59; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.18. File: scenes/steak.pscn using steak-seg3.ppm 5 6; Lloyd_iteration 17.73; Lloyd_iteration 17.67; Lloyd_iteration 17.78; Lloyd_iteration 17.71; Lloyd_iteration 17.79; Lloyd_iteration 17.77; Lloyd_iteration 17.71; Lloyd_iteration 17.73; Lloyd_iteration 17.75; Lloyd_iteration 17.74; Lloyd_iteration 17.67; Lloyd_iteration 17.67; Lloyd_iteration 17.68; Lloyd_iteration 17.76; Lloyd_iteration 17.71; Lloyd_iteration 17.59; Lloyd_iteration 17.65; Lloyd_iteration 17.75; Lloyd_iteration 17.62; Lloyd_iteration 17.62; Lloyd_iteration 17.76; Lloyd_iteration 17.73; Lloyd_iteration 17.76; Lloyd_iteration 17.69; Lloyd_iteration 1,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:26814,Deployability,update,updateSampleMaterialProperties,26814,nearRegionsSampling: 1.61; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg2.ppm 20 50; Lloyd_iteration 2.35; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.38; Lloyd_iteration 2.32; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.32; Lloyd_iteration 2.32; computeUniformSampling: 59.97; computeWeights: 62.97; computeLinearRegionsSampling: 1.6; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg3.ppm 3 6; computeUniformSampling: 17.03; computeWeights: 128.26; computeLinearRegionsSampling: 2.31; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 10; computeUniformSampling: 17.07; computeWeights: 128.21; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 20; computeUniformSampling: 17.15; computeWeights: 128.5; computeLinearRegionsSampling: 2.3; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 50; computeUniformSampling: 17.13; computeWeights: 128.59; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.18. File: scenes/steak.pscn using steak-seg3.ppm 5 6; Lloyd_iteration 17.73; Lloyd_iteration 17.67; Lloyd_iteration 17.78; Lloyd_iteration 17.71; Lloyd_iteration 17.79; Lloyd_iteration 17.77; Lloyd_iteration 17.71; Lloyd_iteration 17.73; Lloyd_iteration 17.75; Lloyd_iteration 17.74; Lloyd_iteration 17.67; Lloyd_iteration 17.67; Lloyd_iteration 17.68; Lloyd_iteration 17.76; Lloyd_iteration 17.71; Lloyd_iteration 17.59; Lloyd_iteration 17.65; Lloyd_iteration 17.75; Lloyd_iteration 17.62; Lloyd_iteration 17.62; Lloyd_iteration 17.76; Lloyd_iteration 17.73; Lloyd_iteration 17.76; Lloyd_iteration 17.69; Lloyd_iteration 17.71; Lloyd_iteration 17.64; Lloyd_iteration 17.65; Lloyd_iteration 17.56; Lloyd_iteration 17.53; Lloyd_iteration 17.61; Lloyd_iteration 17.62; Lloyd_iteration 17.67; Lloyd_iterat,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:26994,Deployability,update,updateSampleMaterialProperties,26994,3; Lloyd_iteration 2.38; Lloyd_iteration 2.32; Lloyd_iteration 2.32; Lloyd_iteration 2.33; Lloyd_iteration 2.33; Lloyd_iteration 2.36; Lloyd_iteration 2.32; Lloyd_iteration 2.32; computeUniformSampling: 59.97; computeWeights: 62.97; computeLinearRegionsSampling: 1.6; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg3.ppm 3 6; computeUniformSampling: 17.03; computeWeights: 128.26; computeLinearRegionsSampling: 2.31; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 10; computeUniformSampling: 17.07; computeWeights: 128.21; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 20; computeUniformSampling: 17.15; computeWeights: 128.5; computeLinearRegionsSampling: 2.3; updateSampleMaterialProperties: 0.17. File: scenes/steak.pscn using steak-seg3.ppm 3 50; computeUniformSampling: 17.13; computeWeights: 128.59; computeLinearRegionsSampling: 2.32; updateSampleMaterialProperties: 0.18. File: scenes/steak.pscn using steak-seg3.ppm 5 6; Lloyd_iteration 17.73; Lloyd_iteration 17.67; Lloyd_iteration 17.78; Lloyd_iteration 17.71; Lloyd_iteration 17.79; Lloyd_iteration 17.77; Lloyd_iteration 17.71; Lloyd_iteration 17.73; Lloyd_iteration 17.75; Lloyd_iteration 17.74; Lloyd_iteration 17.67; Lloyd_iteration 17.67; Lloyd_iteration 17.68; Lloyd_iteration 17.76; Lloyd_iteration 17.71; Lloyd_iteration 17.59; Lloyd_iteration 17.65; Lloyd_iteration 17.75; Lloyd_iteration 17.62; Lloyd_iteration 17.62; Lloyd_iteration 17.76; Lloyd_iteration 17.73; Lloyd_iteration 17.76; Lloyd_iteration 17.69; Lloyd_iteration 17.71; Lloyd_iteration 17.64; Lloyd_iteration 17.65; Lloyd_iteration 17.56; Lloyd_iteration 17.53; Lloyd_iteration 17.61; Lloyd_iteration 17.62; Lloyd_iteration 17.67; Lloyd_iteration 17.58; Lloyd_iteration 17.65; Lloyd_iteration 17.67; Lloyd_iteration 17.68; Lloyd_iteration 17.61; Lloyd_iteration 17.61; Lloyd_iteration 17.67; Lloyd_iteration 17.68; Lloyd_i,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:29470,Deployability,update,updateSampleMaterialProperties,29470,loyd_iteration 17.68; Lloyd_iteration 17.6; Lloyd_iteration 17.66; Lloyd_iteration 17.64; Lloyd_iteration 17.71; Lloyd_iteration 17.64; Lloyd_iteration 17.58; Lloyd_iteration 17.67; Lloyd_iteration 17.66; Lloyd_iteration 17.62; Lloyd_iteration 17.64; Lloyd_iteration 17.62; Lloyd_iteration 17.71; Lloyd_iteration 17.69; Lloyd_iteration 17.59; Lloyd_iteration 17.6; Lloyd_iteration 17.71; Lloyd_iteration 17.69; Lloyd_iteration 17.6; Lloyd_iteration 17.57; Lloyd_iteration 17.64; Lloyd_iteration 17.62; Lloyd_iteration 17.62; Lloyd_iteration 17.58; Lloyd_iteration 17.68; Lloyd_iteration 17.63; Lloyd_iteration 17.71; Lloyd_iteration 17.66; Lloyd_iteration 17.65; Lloyd_iteration 17.72; Lloyd_iteration 17.7; Lloyd_iteration 17.67; Lloyd_iteration 17.62; Lloyd_iteration 17.62; Lloyd_iteration 17.68; Lloyd_iteration 17.63; Lloyd_iteration 17.65; Lloyd_iteration 17.69; Lloyd_iteration 17.65; computeUniformSampling: 1800.54; computeWeights: 202.38; computeLinearRegionsSampling: 3.79; updateSampleMaterialProperties: 0.27. File: scenes/steak.pscn using steak-seg3.ppm 5 10; Lloyd_iteration 17.65; Lloyd_iteration 17.73; Lloyd_iteration 17.78; Lloyd_iteration 17.83; Lloyd_iteration 17.77; Lloyd_iteration 17.73; Lloyd_iteration 17.75; Lloyd_iteration 17.78; Lloyd_iteration 17.72; Lloyd_iteration 17.71; Lloyd_iteration 17.71; Lloyd_iteration 17.75; Lloyd_iteration 17.73; Lloyd_iteration 17.71; Lloyd_iteration 17.73; Lloyd_iteration 17.75; Lloyd_iteration 17.78; Lloyd_iteration 17.73; Lloyd_iteration 17.72; Lloyd_iteration 17.74; Lloyd_iteration 17.72; Lloyd_iteration 17.77; Lloyd_iteration 17.7; Lloyd_iteration 17.72; Lloyd_iteration 17.71; Lloyd_iteration 17.71; Lloyd_iteration 17.61; Lloyd_iteration 17.56; Lloyd_iteration 17.69; Lloyd_iteration 17.66; Lloyd_iteration 17.67; Lloyd_iteration 17.61; Lloyd_iteration 17.67; Lloyd_iteration 17.65; Lloyd_iteration 17.67; Lloyd_iteration 17.59; Lloyd_iteration 17.64; Lloyd_iteration 17.69; Lloyd_iteration 17.65; Lloyd_iteration 17.68; Lloyd_i,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:31942,Deployability,update,updateSampleMaterialProperties,31942,loyd_iteration 17.64; Lloyd_iteration 17.67; Lloyd_iteration 17.72; Lloyd_iteration 17.68; Lloyd_iteration 17.69; Lloyd_iteration 17.62; Lloyd_iteration 17.66; Lloyd_iteration 17.72; Lloyd_iteration 17.73; Lloyd_iteration 17.64; Lloyd_iteration 17.65; Lloyd_iteration 17.71; Lloyd_iteration 17.72; Lloyd_iteration 17.71; Lloyd_iteration 17.65; Lloyd_iteration 17.7; Lloyd_iteration 17.68; Lloyd_iteration 17.69; Lloyd_iteration 17.63; Lloyd_iteration 17.71; Lloyd_iteration 17.71; Lloyd_iteration 17.73; Lloyd_iteration 17.7; Lloyd_iteration 17.67; Lloyd_iteration 17.68; Lloyd_iteration 17.73; Lloyd_iteration 17.67; Lloyd_iteration 17.63; Lloyd_iteration 17.71; Lloyd_iteration 17.71; Lloyd_iteration 17.71; Lloyd_iteration 17.69; Lloyd_iteration 17.66; Lloyd_iteration 17.65; Lloyd_iteration 17.73; Lloyd_iteration 17.7; Lloyd_iteration 17.66; Lloyd_iteration 17.68; Lloyd_iteration 17.75; computeUniformSampling: 1803.23; computeWeights: 202.74; computeLinearRegionsSampling: 3.8; updateSampleMaterialProperties: 0.26. File: scenes/steak.pscn using steak-seg3.ppm 5 20; Lloyd_iteration 17.71; Lloyd_iteration 17.73; Lloyd_iteration 17.78; Lloyd_iteration 17.83; Lloyd_iteration 17.79; Lloyd_iteration 17.76; Lloyd_iteration 17.72; Lloyd_iteration 17.74; Lloyd_iteration 17.73; Lloyd_iteration 17.65; Lloyd_iteration 17.75; Lloyd_iteration 17.76; Lloyd_iteration 17.76; Lloyd_iteration 17.74; Lloyd_iteration 17.67; Lloyd_iteration 17.71; Lloyd_iteration 17.74; Lloyd_iteration 17.76; Lloyd_iteration 17.66; Lloyd_iteration 17.78; Lloyd_iteration 17.76; Lloyd_iteration 17.76; Lloyd_iteration 17.74; Lloyd_iteration 17.66; Lloyd_iteration 17.76; Lloyd_iteration 17.7; Lloyd_iteration 17.66; Lloyd_iteration 17.59; Lloyd_iteration 17.64; Lloyd_iteration 17.67; Lloyd_iteration 17.69; Lloyd_iteration 17.66; Lloyd_iteration 17.61; Lloyd_iteration 17.68; Lloyd_iteration 17.7; Lloyd_iteration 17.68; Lloyd_iteration 17.63; Lloyd_iteration 17.71; Lloyd_iteration 17.72; Lloyd_iteration 17.68; Lloyd_ite,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:34414,Deployability,update,updateSampleMaterialProperties,34414,Lloyd_iteration 17.75; Lloyd_iteration 17.66; Lloyd_iteration 17.65; Lloyd_iteration 17.72; Lloyd_iteration 17.74; Lloyd_iteration 17.69; Lloyd_iteration 17.63; Lloyd_iteration 17.73; Lloyd_iteration 17.74; Lloyd_iteration 17.67; Lloyd_iteration 17.68; Lloyd_iteration 17.7; Lloyd_iteration 17.71; Lloyd_iteration 17.68; Lloyd_iteration 17.69; Lloyd_iteration 17.66; Lloyd_iteration 17.66; Lloyd_iteration 17.7; Lloyd_iteration 17.71; Lloyd_iteration 17.61; Lloyd_iteration 17.75; Lloyd_iteration 17.71; Lloyd_iteration 17.74; Lloyd_iteration 17.71; Lloyd_iteration 17.7; Lloyd_iteration 17.68; Lloyd_iteration 17.74; Lloyd_iteration 17.75; Lloyd_iteration 17.68; Lloyd_iteration 17.72; Lloyd_iteration 17.68; Lloyd_iteration 17.7; Lloyd_iteration 17.67; Lloyd_iteration 17.66; Lloyd_iteration 17.67; Lloyd_iteration 17.72; Lloyd_iteration 17.71; Lloyd_iteration 17.65; Lloyd_iteration 17.67; computeUniformSampling: 1804.31; computeWeights: 203.1; computeLinearRegionsSampling: 3.78; updateSampleMaterialProperties: 0.26. File: scenes/steak.pscn using steak-seg3.ppm 5 50; Lloyd_iteration 17.66; Lloyd_iteration 17.67; Lloyd_iteration 17.82; Lloyd_iteration 17.76; Lloyd_iteration 17.84; Lloyd_iteration 17.78; Lloyd_iteration 17.77; Lloyd_iteration 17.77; Lloyd_iteration 17.71; Lloyd_iteration 17.76; Lloyd_iteration 17.72; Lloyd_iteration 17.75; Lloyd_iteration 17.75; Lloyd_iteration 17.72; Lloyd_iteration 17.7; Lloyd_iteration 17.75; Lloyd_iteration 17.78; Lloyd_iteration 17.76; Lloyd_iteration 17.72; Lloyd_iteration 17.64; Lloyd_iteration 17.69; Lloyd_iteration 17.71; Lloyd_iteration 17.72; Lloyd_iteration 17.72; Lloyd_iteration 17.67; Lloyd_iteration 17.7; Lloyd_iteration 17.72; Lloyd_iteration 17.7; Lloyd_iteration 17.63; Lloyd_iteration 17.69; Lloyd_iteration 17.7; Lloyd_iteration 17.72; Lloyd_iteration 17.66; Lloyd_iteration 17.68; Lloyd_iteration 17.66; Lloyd_iteration 17.63; Lloyd_iteration 17.66; Lloyd_iteration 17.59; Lloyd_iteration 17.71; Lloyd_iteration 17.72; Lloyd_iter,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:36888,Deployability,update,updateSampleMaterialProperties,36888,d_iteration 17.7; Lloyd_iteration 17.75; Lloyd_iteration 17.68; Lloyd_iteration 17.72; Lloyd_iteration 17.74; Lloyd_iteration 17.71; Lloyd_iteration 17.68; Lloyd_iteration 17.64; Lloyd_iteration 17.66; Lloyd_iteration 17.75; Lloyd_iteration 17.73; Lloyd_iteration 17.68; Lloyd_iteration 17.75; Lloyd_iteration 17.72; Lloyd_iteration 17.67; Lloyd_iteration 17.64; Lloyd_iteration 17.63; Lloyd_iteration 17.67; Lloyd_iteration 17.75; Lloyd_iteration 17.68; Lloyd_iteration 17.67; Lloyd_iteration 17.71; Lloyd_iteration 17.72; Lloyd_iteration 17.76; Lloyd_iteration 17.61; Lloyd_iteration 17.74; Lloyd_iteration 17.66; Lloyd_iteration 17.74; Lloyd_iteration 17.64; Lloyd_iteration 17.62; Lloyd_iteration 17.67; Lloyd_iteration 17.74; Lloyd_iteration 17.74; Lloyd_iteration 17.65; Lloyd_iteration 17.74; Lloyd_iteration 17.72; Lloyd_iteration 17.69; Lloyd_iteration 17.71; Lloyd_iteration 17.71; computeUniformSampling: 1804.36; computeWeights: 202.43; computeLinearRegionsSampling: 3.75; updateSampleMaterialProperties: 0.25. File: scenes/steak.pscn using steak-seg3.ppm 10 6; Lloyd_iteration 19.01; Lloyd_iteration 18.74; Lloyd_iteration 18.76; Lloyd_iteration 18.79; Lloyd_iteration 18.82; Lloyd_iteration 18.83; Lloyd_iteration 18.86; Lloyd_iteration 18.88; Lloyd_iteration 18.9; Lloyd_iteration 18.87; Lloyd_iteration 18.83; Lloyd_iteration 18.86; Lloyd_iteration 18.84; Lloyd_iteration 18.89; Lloyd_iteration 18.89; Lloyd_iteration 18.91; Lloyd_iteration 18.89; Lloyd_iteration 18.89; Lloyd_iteration 18.89; Lloyd_iteration 18.87; Lloyd_iteration 18.78; Lloyd_iteration 18.78; Lloyd_iteration 18.82; Lloyd_iteration 18.79; Lloyd_iteration 18.8; Lloyd_iteration 18.83; Lloyd_iteration 18.83; Lloyd_iteration 18.81; Lloyd_iteration 18.73; Lloyd_iteration 18.81; Lloyd_iteration 18.78; Lloyd_iteration 18.76; Lloyd_iteration 18.85; Lloyd_iteration 18.83; Lloyd_iteration 18.86; Lloyd_iteration 18.81; Lloyd_iteration 18.78; Lloyd_iteration 18.73; Lloyd_iteration 18.75; Lloyd_iteration 18.8; Lloyd_ite,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:39361,Deployability,update,updateSampleMaterialProperties,39361,yd_iteration 18.8; Lloyd_iteration 18.84; Lloyd_iteration 18.79; Lloyd_iteration 18.77; Lloyd_iteration 18.82; Lloyd_iteration 18.79; Lloyd_iteration 18.77; Lloyd_iteration 18.81; Lloyd_iteration 18.81; Lloyd_iteration 18.78; Lloyd_iteration 18.81; Lloyd_iteration 18.79; Lloyd_iteration 18.81; Lloyd_iteration 18.82; Lloyd_iteration 18.76; Lloyd_iteration 18.83; Lloyd_iteration 18.82; Lloyd_iteration 18.84; Lloyd_iteration 18.85; Lloyd_iteration 18.79; Lloyd_iteration 18.72; Lloyd_iteration 18.81; Lloyd_iteration 18.82; Lloyd_iteration 18.82; Lloyd_iteration 18.79; Lloyd_iteration 18.8; Lloyd_iteration 18.84; Lloyd_iteration 18.77; Lloyd_iteration 18.74; Lloyd_iteration 18.72; Lloyd_iteration 18.81; Lloyd_iteration 18.76; Lloyd_iteration 18.84; Lloyd_iteration 18.81; Lloyd_iteration 18.78; Lloyd_iteration 18.76; Lloyd_iteration 18.81; Lloyd_iteration 18.79; Lloyd_iteration 18.73; computeUniformSampling: 2003.85; computeWeights: 333.38; computeLinearRegionsSampling: 6.53; updateSampleMaterialProperties: 0.73. File: scenes/steak.pscn using steak-seg3.ppm 10 10; Lloyd_iteration 19.05; Lloyd_iteration 18.88; Lloyd_iteration 18.81; Lloyd_iteration 18.81; Lloyd_iteration 18.81; Lloyd_iteration 18.87; Lloyd_iteration 18.87; Lloyd_iteration 18.85; Lloyd_iteration 18.82; Lloyd_iteration 18.86; Lloyd_iteration 18.88; Lloyd_iteration 18.83; Lloyd_iteration 18.9; Lloyd_iteration 18.91; Lloyd_iteration 18.91; Lloyd_iteration 18.88; Lloyd_iteration 18.89; Lloyd_iteration 18.77; Lloyd_iteration 18.91; Lloyd_iteration 18.83; Lloyd_iteration 18.79; Lloyd_iteration 18.85; Lloyd_iteration 18.86; Lloyd_iteration 18.86; Lloyd_iteration 18.83; Lloyd_iteration 18.82; Lloyd_iteration 18.76; Lloyd_iteration 18.82; Lloyd_iteration 18.84; Lloyd_iteration 18.85; Lloyd_iteration 18.85; Lloyd_iteration 18.82; Lloyd_iteration 18.85; Lloyd_iteration 18.83; Lloyd_iteration 18.83; Lloyd_iteration 18.74; Lloyd_iteration 18.83; Lloyd_iteration 18.78; Lloyd_iteration 18.83; Lloyd_iteration 18.8; Lloyd_i,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:41836,Deployability,update,updateSampleMaterialProperties,41836,loyd_iteration 18.81; Lloyd_iteration 18.8; Lloyd_iteration 18.83; Lloyd_iteration 18.85; Lloyd_iteration 18.85; Lloyd_iteration 18.87; Lloyd_iteration 18.83; Lloyd_iteration 18.86; Lloyd_iteration 18.85; Lloyd_iteration 18.82; Lloyd_iteration 18.78; Lloyd_iteration 18.8; Lloyd_iteration 18.85; Lloyd_iteration 18.76; Lloyd_iteration 18.84; Lloyd_iteration 18.8; Lloyd_iteration 18.81; Lloyd_iteration 18.83; Lloyd_iteration 18.78; Lloyd_iteration 18.81; Lloyd_iteration 18.85; Lloyd_iteration 18.82; Lloyd_iteration 18.86; Lloyd_iteration 18.86; Lloyd_iteration 18.82; Lloyd_iteration 18.86; Lloyd_iteration 18.83; Lloyd_iteration 18.81; Lloyd_iteration 18.79; Lloyd_iteration 18.82; Lloyd_iteration 18.84; Lloyd_iteration 18.84; Lloyd_iteration 18.86; Lloyd_iteration 18.87; Lloyd_iteration 18.87; Lloyd_iteration 18.81; Lloyd_iteration 18.77; Lloyd_iteration 18.79; Lloyd_iteration 18.82; computeUniformSampling: 2005.9; computeWeights: 333.33; computeLinearRegionsSampling: 6.53; updateSampleMaterialProperties: 0.71. File: scenes/steak.pscn using steak-seg3.ppm 10 20; Lloyd_iteration 19.03; Lloyd_iteration 18.8; Lloyd_iteration 18.74; Lloyd_iteration 18.82; Lloyd_iteration 18.85; Lloyd_iteration 18.84; Lloyd_iteration 18.84; Lloyd_iteration 18.82; Lloyd_iteration 18.86; Lloyd_iteration 18.87; Lloyd_iteration 18.88; Lloyd_iteration 18.89; Lloyd_iteration 18.9; Lloyd_iteration 18.9; Lloyd_iteration 18.86; Lloyd_iteration 18.81; Lloyd_iteration 18.84; Lloyd_iteration 18.85; Lloyd_iteration 18.89; Lloyd_iteration 18.9; Lloyd_iteration 18.84; Lloyd_iteration 18.79; Lloyd_iteration 18.84; Lloyd_iteration 18.84; Lloyd_iteration 18.8; Lloyd_iteration 18.8; Lloyd_iteration 18.78; Lloyd_iteration 18.82; Lloyd_iteration 18.78; Lloyd_iteration 18.8; Lloyd_iteration 18.83; Lloyd_iteration 18.84; Lloyd_iteration 18.85; Lloyd_iteration 18.8; Lloyd_iteration 18.72; Lloyd_iteration 18.84; Lloyd_iteration 18.81; Lloyd_iteration 18.81; Lloyd_iteration 18.8; Lloyd_iteration 18.8; Lloyd_iteration,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:44305,Deployability,update,updateSampleMaterialProperties,44305,oyd_iteration 18.78; Lloyd_iteration 18.82; Lloyd_iteration 18.81; Lloyd_iteration 18.83; Lloyd_iteration 18.8; Lloyd_iteration 18.87; Lloyd_iteration 18.86; Lloyd_iteration 18.82; Lloyd_iteration 18.79; Lloyd_iteration 18.79; Lloyd_iteration 18.78; Lloyd_iteration 18.76; Lloyd_iteration 18.79; Lloyd_iteration 18.79; Lloyd_iteration 18.8; Lloyd_iteration 18.81; Lloyd_iteration 18.82; Lloyd_iteration 18.74; Lloyd_iteration 18.77; Lloyd_iteration 18.81; Lloyd_iteration 18.79; Lloyd_iteration 18.77; Lloyd_iteration 18.83; Lloyd_iteration 18.79; Lloyd_iteration 18.79; Lloyd_iteration 18.76; Lloyd_iteration 18.72; Lloyd_iteration 18.77; Lloyd_iteration 18.79; Lloyd_iteration 18.81; Lloyd_iteration 18.82; Lloyd_iteration 18.79; Lloyd_iteration 18.83; Lloyd_iteration 18.77; Lloyd_iteration 18.76; Lloyd_iteration 18.75; Lloyd_iteration 18.76; Lloyd_iteration 18.85; Lloyd_iteration 18.84; computeUniformSampling: 2003.83; computeWeights: 333.2; computeLinearRegionsSampling: 6.56; updateSampleMaterialProperties: 0.71. File: scenes/steak.pscn using steak-seg3.ppm 10 50; Lloyd_iteration 18.99; Lloyd_iteration 18.76; Lloyd_iteration 18.72; Lloyd_iteration 18.69; Lloyd_iteration 18.69; Lloyd_iteration 18.73; Lloyd_iteration 18.78; Lloyd_iteration 18.82; Lloyd_iteration 18.8; Lloyd_iteration 18.8; Lloyd_iteration 18.81; Lloyd_iteration 18.8; Lloyd_iteration 18.74; Lloyd_iteration 18.79; Lloyd_iteration 18.81; Lloyd_iteration 18.81; Lloyd_iteration 18.84; Lloyd_iteration 18.81; Lloyd_iteration 18.81; Lloyd_iteration 18.83; Lloyd_iteration 18.68; Lloyd_iteration 18.68; Lloyd_iteration 18.76; Lloyd_iteration 18.72; Lloyd_iteration 18.77; Lloyd_iteration 18.75; Lloyd_iteration 18.76; Lloyd_iteration 18.76; Lloyd_iteration 18.74; Lloyd_iteration 18.7; Lloyd_iteration 18.72; Lloyd_iteration 18.76; Lloyd_iteration 18.76; Lloyd_iteration 18.78; Lloyd_iteration 18.75; Lloyd_iteration 18.75; Lloyd_iteration 18.74; Lloyd_iteration 18.71; Lloyd_iteration 18.71; Lloyd_iteration 18.75; Lloyd_ite,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:46779,Deployability,update,updateSampleMaterialProperties,46779,oyd_iteration 18.75; Lloyd_iteration 18.71; Lloyd_iteration 18.71; Lloyd_iteration 18.76; Lloyd_iteration 18.76; Lloyd_iteration 18.78; Lloyd_iteration 18.77; Lloyd_iteration 18.77; Lloyd_iteration 18.74; Lloyd_iteration 18.73; Lloyd_iteration 18.7; Lloyd_iteration 18.72; Lloyd_iteration 18.76; Lloyd_iteration 18.77; Lloyd_iteration 18.76; Lloyd_iteration 18.77; Lloyd_iteration 18.76; Lloyd_iteration 18.75; Lloyd_iteration 18.68; Lloyd_iteration 18.75; Lloyd_iteration 18.75; Lloyd_iteration 18.76; Lloyd_iteration 18.77; Lloyd_iteration 18.76; Lloyd_iteration 18.77; Lloyd_iteration 18.74; Lloyd_iteration 18.7; Lloyd_iteration 18.73; Lloyd_iteration 18.75; Lloyd_iteration 18.77; Lloyd_iteration 18.75; Lloyd_iteration 18.78; Lloyd_iteration 18.76; Lloyd_iteration 18.73; Lloyd_iteration 18.73; Lloyd_iteration 18.7; Lloyd_iteration 18.76; Lloyd_iteration 18.73; Lloyd_iteration 18.78; computeUniformSampling: 1997.36; computeWeights: 332.65; computeLinearRegionsSampling: 6.65; updateSampleMaterialProperties: 0.71. File: scenes/steak.pscn using steak-seg3.ppm 20 6; Lloyd_iteration 21.04; Lloyd_iteration 20.8; Lloyd_iteration 20.75; Lloyd_iteration 20.67; Lloyd_iteration 20.68; Lloyd_iteration 20.62; Lloyd_iteration 20.63; Lloyd_iteration 20.68; Lloyd_iteration 20.68; Lloyd_iteration 20.72; Lloyd_iteration 20.54; Lloyd_iteration 20.53; Lloyd_iteration 20.57; Lloyd_iteration 20.59; Lloyd_iteration 20.57; Lloyd_iteration 20.57; Lloyd_iteration 20.56; Lloyd_iteration 20.56; Lloyd_iteration 20.54; Lloyd_iteration 20.59; Lloyd_iteration 20.55; Lloyd_iteration 20.61; Lloyd_iteration 20.65; Lloyd_iteration 20.62; Lloyd_iteration 20.64; Lloyd_iteration 20.65; Lloyd_iteration 20.6; Lloyd_iteration 20.66; Lloyd_iteration 20.58; Lloyd_iteration 20.61; Lloyd_iteration 20.59; Lloyd_iteration 20.62; Lloyd_iteration 20.66; Lloyd_iteration 20.63; Lloyd_iteration 20.61; Lloyd_iteration 20.6; Lloyd_iteration 20.61; Lloyd_iteration 20.67; Lloyd_iteration 20.68; Lloyd_iteration 20.67; Lloyd_ite,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:49259,Deployability,update,updateSampleMaterialProperties,49259,iteration 20.66; Lloyd_iteration 20.62; Lloyd_iteration 20.64; Lloyd_iteration 20.61; Lloyd_iteration 20.64; Lloyd_iteration 20.64; Lloyd_iteration 20.66; Lloyd_iteration 20.63; Lloyd_iteration 20.67; Lloyd_iteration 20.66; Lloyd_iteration 20.63; Lloyd_iteration 20.62; Lloyd_iteration 20.58; Lloyd_iteration 20.67; Lloyd_iteration 20.58; Lloyd_iteration 20.61; Lloyd_iteration 20.58; Lloyd_iteration 20.61; Lloyd_iteration 20.66; Lloyd_iteration 20.64; Lloyd_iteration 20.62; Lloyd_iteration 20.67; Lloyd_iteration 20.65; Lloyd_iteration 20.67; Lloyd_iteration 20.67; Lloyd_iteration 20.66; Lloyd_iteration 20.65; Lloyd_iteration 20.66; Lloyd_iteration 20.65; Lloyd_iteration 20.63; Lloyd_iteration 20.62; Lloyd_iteration 20.81; Lloyd_iteration 20.82; Lloyd_iteration 20.84; Lloyd_iteration 20.83; Lloyd_iteration 20.83; Lloyd_iteration 20.83; Lloyd_iteration 20.84; Lloyd_iteration 20.79; computeUniformSampling: 2369.12; computeWeights: 527.24; computeLinearRegionsSampling: 11.89; updateSampleMaterialProperties: 1.87. File: scenes/steak.pscn using steak-seg3.ppm 20 10; Lloyd_iteration 20.98; Lloyd_iteration 20.7; Lloyd_iteration 20.64; Lloyd_iteration 20.59; Lloyd_iteration 20.55; Lloyd_iteration 20.54; Lloyd_iteration 20.56; Lloyd_iteration 20.56; Lloyd_iteration 20.55; Lloyd_iteration 20.58; Lloyd_iteration 20.46; Lloyd_iteration 20.47; Lloyd_iteration 20.45; Lloyd_iteration 20.5; Lloyd_iteration 20.47; Lloyd_iteration 20.51; Lloyd_iteration 20.49; Lloyd_iteration 20.52; Lloyd_iteration 20.52; Lloyd_iteration 20.51; Lloyd_iteration 20.51; Lloyd_iteration 20.54; Lloyd_iteration 20.49; Lloyd_iteration 20.51; Lloyd_iteration 20.51; Lloyd_iteration 20.53; Lloyd_iteration 20.5; Lloyd_iteration 20.51; Lloyd_iteration 20.51; Lloyd_iteration 20.56; Lloyd_iteration 20.54; Lloyd_iteration 20.54; Lloyd_iteration 20.54; Lloyd_iteration 20.57; Lloyd_iteration 20.56; Lloyd_iteration 20.55; Lloyd_iteration 20.55; Lloyd_iteration 20.56; Lloyd_iteration 20.55; Lloyd_iteration 20.54; Lloyd_it,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:51734,Deployability,update,updateSampleMaterialProperties,51734,yd_iteration 20.64; Lloyd_iteration 20.66; Lloyd_iteration 20.68; Lloyd_iteration 20.66; Lloyd_iteration 20.61; Lloyd_iteration 20.71; Lloyd_iteration 20.68; Lloyd_iteration 20.61; Lloyd_iteration 20.59; Lloyd_iteration 20.61; Lloyd_iteration 20.64; Lloyd_iteration 20.62; Lloyd_iteration 20.63; Lloyd_iteration 20.6; Lloyd_iteration 20.63; Lloyd_iteration 20.6; Lloyd_iteration 20.66; Lloyd_iteration 20.62; Lloyd_iteration 20.62; Lloyd_iteration 20.64; Lloyd_iteration 20.62; Lloyd_iteration 20.65; Lloyd_iteration 20.59; Lloyd_iteration 20.59; Lloyd_iteration 20.58; Lloyd_iteration 20.55; Lloyd_iteration 20.5; Lloyd_iteration 20.52; Lloyd_iteration 20.55; Lloyd_iteration 20.59; Lloyd_iteration 20.57; Lloyd_iteration 20.72; Lloyd_iteration 20.72; Lloyd_iteration 20.74; Lloyd_iteration 20.72; Lloyd_iteration 20.73; Lloyd_iteration 20.71; Lloyd_iteration 20.72; Lloyd_iteration 20.74; computeUniformSampling: 2361.78; computeWeights: 527.72; computeLinearRegionsSampling: 11.83; updateSampleMaterialProperties: 1.82. File: scenes/steak.pscn using steak-seg3.ppm 20 20; Lloyd_iteration 21.01; Lloyd_iteration 20.78; Lloyd_iteration 20.73; Lloyd_iteration 20.64; Lloyd_iteration 20.68; Lloyd_iteration 20.64; Lloyd_iteration 20.72; Lloyd_iteration 20.65; Lloyd_iteration 20.68; Lloyd_iteration 20.68; Lloyd_iteration 20.59; Lloyd_iteration 20.56; Lloyd_iteration 20.57; Lloyd_iteration 20.56; Lloyd_iteration 20.56; Lloyd_iteration 20.56; Lloyd_iteration 20.56; Lloyd_iteration 20.55; Lloyd_iteration 20.6; Lloyd_iteration 20.56; Lloyd_iteration 20.62; Lloyd_iteration 20.58; Lloyd_iteration 20.62; Lloyd_iteration 20.61; Lloyd_iteration 20.65; Lloyd_iteration 20.61; Lloyd_iteration 20.65; Lloyd_iteration 20.63; Lloyd_iteration 20.64; Lloyd_iteration 20.62; Lloyd_iteration 20.65; Lloyd_iteration 20.61; Lloyd_iteration 20.6; Lloyd_iteration 20.58; Lloyd_iteration 20.63; Lloyd_iteration 20.6; Lloyd_iteration 20.67; Lloyd_iteration 20.64; Lloyd_iteration 20.7; Lloyd_iteration 20.65; Lloyd_ite,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:54206,Deployability,update,updateSampleMaterialProperties,54206, Lloyd_iteration 20.6; Lloyd_iteration 20.68; Lloyd_iteration 20.58; Lloyd_iteration 20.67; Lloyd_iteration 20.64; Lloyd_iteration 20.67; Lloyd_iteration 20.62; Lloyd_iteration 20.7; Lloyd_iteration 20.62; Lloyd_iteration 20.68; Lloyd_iteration 20.63; Lloyd_iteration 20.67; Lloyd_iteration 20.63; Lloyd_iteration 20.68; Lloyd_iteration 20.58; Lloyd_iteration 20.66; Lloyd_iteration 20.65; Lloyd_iteration 20.68; Lloyd_iteration 20.64; Lloyd_iteration 20.69; Lloyd_iteration 20.64; Lloyd_iteration 20.66; Lloyd_iteration 20.63; Lloyd_iteration 20.69; Lloyd_iteration 20.64; Lloyd_iteration 20.67; Lloyd_iteration 20.64; Lloyd_iteration 20.7; Lloyd_iteration 20.63; Lloyd_iteration 20.65; Lloyd_iteration 20.64; Lloyd_iteration 20.83; Lloyd_iteration 20.8; Lloyd_iteration 20.82; Lloyd_iteration 20.78; Lloyd_iteration 20.81; Lloyd_iteration 20.77; Lloyd_iteration 20.83; Lloyd_iteration 20.78; computeUniformSampling: 2369; computeWeights: 527.58; computeLinearRegionsSampling: 11.85; updateSampleMaterialProperties: 1.83. File: scenes/steak.pscn using steak-seg3.ppm 20 50; Lloyd_iteration 20.92; Lloyd_iteration 20.7; Lloyd_iteration 20.62; Lloyd_iteration 20.59; Lloyd_iteration 20.59; Lloyd_iteration 20.58; Lloyd_iteration 20.59; Lloyd_iteration 20.57; Lloyd_iteration 20.57; Lloyd_iteration 20.56; Lloyd_iteration 20.5; Lloyd_iteration 20.47; Lloyd_iteration 20.46; Lloyd_iteration 20.48; Lloyd_iteration 20.49; Lloyd_iteration 20.5; Lloyd_iteration 20.48; Lloyd_iteration 20.49; Lloyd_iteration 20.51; Lloyd_iteration 20.49; Lloyd_iteration 20.48; Lloyd_iteration 20.47; Lloyd_iteration 20.52; Lloyd_iteration 20.53; Lloyd_iteration 20.52; Lloyd_iteration 20.51; Lloyd_iteration 20.5; Lloyd_iteration 20.51; Lloyd_iteration 20.53; Lloyd_iteration 20.51; Lloyd_iteration 20.52; Lloyd_iteration 20.56; Lloyd_iteration 20.55; Lloyd_iteration 20.55; Lloyd_iteration 20.53; Lloyd_iteration 20.55; Lloyd_iteration 20.54; Lloyd_iteration 20.57; Lloyd_iteration 20.54; Lloyd_iteration 20.56; Lloyd_ite,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt:56682,Deployability,update,updateSampleMaterialProperties,56682,on 20.51; Lloyd_iteration 20.49; Lloyd_iteration 20.48; Lloyd_iteration 20.47; Lloyd_iteration 20.52; Lloyd_iteration 20.53; Lloyd_iteration 20.52; Lloyd_iteration 20.51; Lloyd_iteration 20.5; Lloyd_iteration 20.51; Lloyd_iteration 20.53; Lloyd_iteration 20.51; Lloyd_iteration 20.52; Lloyd_iteration 20.56; Lloyd_iteration 20.55; Lloyd_iteration 20.55; Lloyd_iteration 20.53; Lloyd_iteration 20.55; Lloyd_iteration 20.54; Lloyd_iteration 20.57; Lloyd_iteration 20.54; Lloyd_iteration 20.56; Lloyd_iteration 20.55; Lloyd_iteration 20.55; Lloyd_iteration 20.53; Lloyd_iteration 20.52; Lloyd_iteration 20.57; Lloyd_iteration 20.59; Lloyd_iteration 20.53; Lloyd_iteration 20.54; Lloyd_iteration 20.58; Lloyd_iteration 20.59; Lloyd_iteration 20.57; Lloyd_iteration 20.55; Lloyd_iteration 20.54; Lloyd_iteration 20.58; Lloyd_iteration 20.56; Lloyd_iteration 20.57; Lloyd_iteration 20.53; Lloyd_iteration 20.57; Lloyd_iteration 20.52; Lloyd_iteration 20.53; Lloyd_iteration 20.56; Lloyd_iteration 20.56; Lloyd_iteration 20.57; Lloyd_iteration 20.56; Lloyd_iteration 20.57; Lloyd_iteration 20.57; Lloyd_iteration 20.57; Lloyd_iteration 20.56; Lloyd_iteration 20.57; Lloyd_iteration 20.55; Lloyd_iteration 20.54; Lloyd_iteration 20.54; Lloyd_iteration 20.56; Lloyd_iteration 20.53; Lloyd_iteration 20.5; Lloyd_iteration 20.54; Lloyd_iteration 20.52; Lloyd_iteration 20.55; Lloyd_iteration 20.56; Lloyd_iteration 20.54; Lloyd_iteration 20.56; Lloyd_iteration 20.57; Lloyd_iteration 20.54; Lloyd_iteration 20.55; Lloyd_iteration 20.58; Lloyd_iteration 20.56; Lloyd_iteration 20.55; Lloyd_iteration 20.56; Lloyd_iteration 20.56; Lloyd_iteration 20.56; Lloyd_iteration 20.53; Lloyd_iteration 20.53; Lloyd_iteration 20.69; Lloyd_iteration 20.71; Lloyd_iteration 20.72; Lloyd_iteration 20.73; Lloyd_iteration 20.73; Lloyd_iteration 20.72; Lloyd_iteration 20.75; Lloyd_iteration 20.75; computeUniformSampling: 2358.51; computeWeights: 529.06; computeLinearRegionsSampling: 12; updateSampleMaterialProperties: 1.84; ,MatchSource.DOCS,applications/projects/sofaInitTimer/output/output.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/applications/projects/sofaInitTimer/output/output.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/CMakeLists.txt:479,Modifiability,config,config,479,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component LANGUAGES CXX). set(SOFACOMPONENT_SOURCE_DIR ""src/sofa/component""). sofa_add_subdirectory_modules(SOFACOMPONENT_TARGETS; DIRECTORIES; ODESolver; IO; Playback; SceneUtility; Topology; Visual; LinearSystem; LinearSolver; Mass; Diffusion; Mapping; StateContainer; SolidMechanics; Constraint; AnimationLoop; MechanicalLoad; Collision; Setting; Controller; Engine; Haptics; ). set(HEADER_FILES; ${SOFACOMPONENT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENT_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENT_SOURCE_DIR}/init.cpp; ). set(TARGET_NAME ${PROJECT_NAME}). add_library(${TARGET_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${TARGET_NAME} PUBLIC ${SOFACOMPONENT_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/CMakeLists.txt:121,Performance,load,loaded,121,cmake_minimum_required(VERSION 3.22). # framework libraries; if(NOT TARGET Sofa.Config); # add Config only if it was not loaded before; sofa_add_subdirectory(library Config Sofa.Config ON); endif(); sofa_add_subdirectory(library Type Sofa.Type ON); sofa_add_subdirectory(library Geometry Sofa.Geometry ON); sofa_add_subdirectory(library Topology Sofa.Topology ON); sofa_add_subdirectory(library Helper Sofa.Helper ON); sofa_add_subdirectory(library LinearAlgebra Sofa.LinearAlgebra ON); sofa_add_subdirectory(library DefaultType Sofa.DefaultType ON); sofa_add_subdirectory(library Core Sofa.Core ON); sofa_add_subdirectory(library Simulation Sofa.Simulation ON); sofa_add_subdirectory(library SimpleApi Sofa.SimpleApi ON); sofa_add_subdirectory(library Testing Sofa.Testing ON). # Library gathering all framework libraries; sofa_add_subdirectory(library Framework Sofa.Framework ON); ,MatchSource.DOCS,Sofa/framework/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/framework/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/CMakeLists.txt:322,Modifiability,config,config,322,"cmake_minimum_required(VERSION 3.22); project(Sofa.GL LANGUAGES CXX). set(SOFAGLSRC_ROOT ""src/sofa/gl""). sofa_find_package(OpenGL REQUIRED BOTH_SCOPES); sofa_find_package(GLEW BOTH_SCOPES REQUIRED); sofa_find_package(Sofa.Helper REQUIRED); sofa_find_package(Sofa.DefaultType REQUIRED). set(HEADER_FILES; ${SOFAGLSRC_ROOT}/config.h.in; ${SOFAGLSRC_ROOT}/initSofa.GL.h; ${SOFAGLSRC_ROOT}/gl.h; ${SOFAGLSRC_ROOT}/glu.h; ${SOFAGLSRC_ROOT}/Capture.h; ${SOFAGLSRC_ROOT}/Color.h; ${SOFAGLSRC_ROOT}/RAII.h; ${SOFAGLSRC_ROOT}/template.h; ${SOFAGLSRC_ROOT}/Axis.h; ${SOFAGLSRC_ROOT}/BasicShapes.h; ${SOFAGLSRC_ROOT}/BasicShapesGL.h; ${SOFAGLSRC_ROOT}/BasicShapesGL.inl; ${SOFAGLSRC_ROOT}/Cylinder.h; ${SOFAGLSRC_ROOT}/Texture.h; ${SOFAGLSRC_ROOT}/VideoRecorderFFMPEG.h; ${SOFAGLSRC_ROOT}/glText.h; ${SOFAGLSRC_ROOT}/glText.inl; ${SOFAGLSRC_ROOT}/TransformationGL.h; ${SOFAGLSRC_ROOT}/DrawToolGL.h; ). set(SOURCE_FILES; ${SOFAGLSRC_ROOT}/initSofa.GL.cpp; ${SOFAGLSRC_ROOT}/Axis.cpp; ${SOFAGLSRC_ROOT}/BasicShapesGL.cpp; ${SOFAGLSRC_ROOT}/Cylinder.cpp; ${SOFAGLSRC_ROOT}/glText.cpp; ${SOFAGLSRC_ROOT}/Capture.cpp; ${SOFAGLSRC_ROOT}/Texture.cpp; ${SOFAGLSRC_ROOT}/VideoRecorderFFMPEG.cpp; ${SOFAGLSRC_ROOT}/gl.cpp; ${SOFAGLSRC_ROOT}/TransformationGL.cpp; ${SOFAGLSRC_ROOT}/DrawToolGL.cpp; ). if(GLEW_FOUND); list(APPEND HEADER_FILES; ${SOFAGLSRC_ROOT}/FrameBufferObject.h; ${SOFAGLSRC_ROOT}/GLSLShader.h; ); list(APPEND SOURCE_FILES; ${SOFAGLSRC_ROOT}/FrameBufferObject.cpp; ${SOFAGLSRC_ROOT}/GLSLShader.cpp; ); list(APPEND SHADER_FILES; ${SOFAGLSRC_ROOT}/shaders/generateSphere.cppglsl; ); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType). if(TARGET OpenGL::GL AND TARGET OpenGL::GLU) # Imported targets defined since CMake 3.8; target_link_libraries(${PROJECT_NAME} PUBLIC OpenGL::GL OpenGL::GLU); else(); target_link_libraries(${PROJECT_NAME} PUBLIC ${OPENGL_LIBRARIES}); target_include_directories(${PROJEC",MatchSource.DOCS,Sofa/GL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/CMakeLists.txt:2768,Testability,test,tests,2768,"OOT}/Cylinder.cpp; ${SOFAGLSRC_ROOT}/glText.cpp; ${SOFAGLSRC_ROOT}/Capture.cpp; ${SOFAGLSRC_ROOT}/Texture.cpp; ${SOFAGLSRC_ROOT}/VideoRecorderFFMPEG.cpp; ${SOFAGLSRC_ROOT}/gl.cpp; ${SOFAGLSRC_ROOT}/TransformationGL.cpp; ${SOFAGLSRC_ROOT}/DrawToolGL.cpp; ). if(GLEW_FOUND); list(APPEND HEADER_FILES; ${SOFAGLSRC_ROOT}/FrameBufferObject.h; ${SOFAGLSRC_ROOT}/GLSLShader.h; ); list(APPEND SOURCE_FILES; ${SOFAGLSRC_ROOT}/FrameBufferObject.cpp; ${SOFAGLSRC_ROOT}/GLSLShader.cpp; ); list(APPEND SHADER_FILES; ${SOFAGLSRC_ROOT}/shaders/generateSphere.cppglsl; ); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType). if(TARGET OpenGL::GL AND TARGET OpenGL::GLU) # Imported targets defined since CMake 3.8; target_link_libraries(${PROJECT_NAME} PUBLIC OpenGL::GL OpenGL::GLU); else(); target_link_libraries(${PROJECT_NAME} PUBLIC ${OPENGL_LIBRARIES}); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${OPENGL_INCLUDE_DIR}); endif(); if(CMAKE_SYSTEM_NAME STREQUAL Linux AND SOFA_BUILD_RELEASE_PACKAGE AND OPENGL_GLU_FOUND); # Add GLU to Linux binaries; sofa_install_libraries(PATHS ${OPENGL_glu_LIBRARY}); endif(). target_link_libraries(${PROJECT_NAME} PUBLIC GLEW::GLEW); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS GLEW::GLEW); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). sofa_add_subdirectory(module Component ${PROJECT_NAME}.Component ON). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA.GL_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA.GL_BUILD_TESTS); enable_testing(); add_subdirectory(${PROJECT_NAME}_test); endif(); ",MatchSource.DOCS,Sofa/GL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/CMakeLists.txt:2863,Testability,test,tests,2863,"OOT}/Cylinder.cpp; ${SOFAGLSRC_ROOT}/glText.cpp; ${SOFAGLSRC_ROOT}/Capture.cpp; ${SOFAGLSRC_ROOT}/Texture.cpp; ${SOFAGLSRC_ROOT}/VideoRecorderFFMPEG.cpp; ${SOFAGLSRC_ROOT}/gl.cpp; ${SOFAGLSRC_ROOT}/TransformationGL.cpp; ${SOFAGLSRC_ROOT}/DrawToolGL.cpp; ). if(GLEW_FOUND); list(APPEND HEADER_FILES; ${SOFAGLSRC_ROOT}/FrameBufferObject.h; ${SOFAGLSRC_ROOT}/GLSLShader.h; ); list(APPEND SOURCE_FILES; ${SOFAGLSRC_ROOT}/FrameBufferObject.cpp; ${SOFAGLSRC_ROOT}/GLSLShader.cpp; ); list(APPEND SHADER_FILES; ${SOFAGLSRC_ROOT}/shaders/generateSphere.cppglsl; ); endif(). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Helper Sofa.DefaultType). if(TARGET OpenGL::GL AND TARGET OpenGL::GLU) # Imported targets defined since CMake 3.8; target_link_libraries(${PROJECT_NAME} PUBLIC OpenGL::GL OpenGL::GLU); else(); target_link_libraries(${PROJECT_NAME} PUBLIC ${OPENGL_LIBRARIES}); target_include_directories(${PROJECT_NAME} SYSTEM PUBLIC ${OPENGL_INCLUDE_DIR}); endif(); if(CMAKE_SYSTEM_NAME STREQUAL Linux AND SOFA_BUILD_RELEASE_PACKAGE AND OPENGL_GLU_FOUND); # Add GLU to Linux binaries; sofa_install_libraries(PATHS ${OPENGL_glu_LIBRARY}); endif(). target_link_libraries(${PROJECT_NAME} PUBLIC GLEW::GLEW); if (SOFA_BUILD_RELEASE_PACKAGE OR CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS GLEW::GLEW); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). sofa_add_subdirectory(module Component ${PROJECT_NAME}.Component ON). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA.GL_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA.GL_BUILD_TESTS); enable_testing(); add_subdirectory(${PROJECT_NAME}_test); endif(); ",MatchSource.DOCS,Sofa/GL/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GL/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt:979,Integrability,depend,dependency,979,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI LANGUAGES CXX). set(SOFAGUI_SOURCE_DIR ""src/sofa/gui""). set(SOFAGUI_TARGETS); set(SOFAGUI_MISSINGTARGETS). sofa_add_subdirectory(module Component ${PROJECT_NAME}.Component ON); if(TARGET ${PROJECT_NAME}.Component); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Component); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Component); endif(). sofa_add_subdirectory(library Common ${PROJECT_NAME}.Common ON); if(TARGET ${PROJECT_NAME}.Common); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Common); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Common); endif(). set(SOFAGUI_DIRS Batch Qt); foreach(dir ${SOFAGUI_DIRS}); sofa_add_subdirectory(plugin ${dir} ${PROJECT_NAME}.${dir} ON); if(TARGET ${PROJECT_NAME}.${dir}); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.${dir}); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.${dir}); endif(); endforeach(). # HeadlessRecorder is still an ""optional"" dependency of Sofa.GUI; sofa_add_subdirectory(plugin HeadlessRecorder ${PROJECT_NAME}.HeadlessRecorder OFF); if(TARGET ${PROJECT_NAME}.HeadlessRecorder); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.HeadlessRecorder); set(SOFA_GUI_HAVE_SOFA_GUI_HEADLESSRECORDER 1); endif(). option(LIBRARY_SOFA_GUI ""Build the Sofa.Gui library."" ON). if(LIBRARY_SOFA_GUI); if(SOFAGUI_MISSINGTARGETS); message(""${PROJECT_NAME}: package and library will not be created because some dependencies are missing or disabled: ${SOFAGUI_MISSINGTARGETS}""); return(); endif(). set(HEADER_FILES; ${SOFAGUI_SOURCE_DIR}/config.h.in; ${SOFAGUI_SOURCE_DIR}/init.h; ); set(SOURCE_FILES; ${SOFAGUI_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGUI_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${P",MatchSource.DOCS,Sofa/GUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt:1362,Integrability,message,message,1362,"ON 3.22); project(Sofa.GUI LANGUAGES CXX). set(SOFAGUI_SOURCE_DIR ""src/sofa/gui""). set(SOFAGUI_TARGETS); set(SOFAGUI_MISSINGTARGETS). sofa_add_subdirectory(module Component ${PROJECT_NAME}.Component ON); if(TARGET ${PROJECT_NAME}.Component); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Component); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Component); endif(). sofa_add_subdirectory(library Common ${PROJECT_NAME}.Common ON); if(TARGET ${PROJECT_NAME}.Common); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Common); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Common); endif(). set(SOFAGUI_DIRS Batch Qt); foreach(dir ${SOFAGUI_DIRS}); sofa_add_subdirectory(plugin ${dir} ${PROJECT_NAME}.${dir} ON); if(TARGET ${PROJECT_NAME}.${dir}); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.${dir}); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.${dir}); endif(); endforeach(). # HeadlessRecorder is still an ""optional"" dependency of Sofa.GUI; sofa_add_subdirectory(plugin HeadlessRecorder ${PROJECT_NAME}.HeadlessRecorder OFF); if(TARGET ${PROJECT_NAME}.HeadlessRecorder); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.HeadlessRecorder); set(SOFA_GUI_HAVE_SOFA_GUI_HEADLESSRECORDER 1); endif(). option(LIBRARY_SOFA_GUI ""Build the Sofa.Gui library."" ON). if(LIBRARY_SOFA_GUI); if(SOFAGUI_MISSINGTARGETS); message(""${PROJECT_NAME}: package and library will not be created because some dependencies are missing or disabled: ${SOFAGUI_MISSINGTARGETS}""); return(); endif(). set(HEADER_FILES; ${SOFAGUI_SOURCE_DIR}/config.h.in; ${SOFAGUI_SOURCE_DIR}/init.h; ); set(SOURCE_FILES; ${SOFAGUI_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGUI_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). endif(); ",MatchSource.DOCS,Sofa/GUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt:1441,Integrability,depend,dependencies,1441,"ON 3.22); project(Sofa.GUI LANGUAGES CXX). set(SOFAGUI_SOURCE_DIR ""src/sofa/gui""). set(SOFAGUI_TARGETS); set(SOFAGUI_MISSINGTARGETS). sofa_add_subdirectory(module Component ${PROJECT_NAME}.Component ON); if(TARGET ${PROJECT_NAME}.Component); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Component); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Component); endif(). sofa_add_subdirectory(library Common ${PROJECT_NAME}.Common ON); if(TARGET ${PROJECT_NAME}.Common); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Common); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Common); endif(). set(SOFAGUI_DIRS Batch Qt); foreach(dir ${SOFAGUI_DIRS}); sofa_add_subdirectory(plugin ${dir} ${PROJECT_NAME}.${dir} ON); if(TARGET ${PROJECT_NAME}.${dir}); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.${dir}); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.${dir}); endif(); endforeach(). # HeadlessRecorder is still an ""optional"" dependency of Sofa.GUI; sofa_add_subdirectory(plugin HeadlessRecorder ${PROJECT_NAME}.HeadlessRecorder OFF); if(TARGET ${PROJECT_NAME}.HeadlessRecorder); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.HeadlessRecorder); set(SOFA_GUI_HAVE_SOFA_GUI_HEADLESSRECORDER 1); endif(). option(LIBRARY_SOFA_GUI ""Build the Sofa.Gui library."" ON). if(LIBRARY_SOFA_GUI); if(SOFAGUI_MISSINGTARGETS); message(""${PROJECT_NAME}: package and library will not be created because some dependencies are missing or disabled: ${SOFAGUI_MISSINGTARGETS}""); return(); endif(). set(HEADER_FILES; ${SOFAGUI_SOURCE_DIR}/config.h.in; ${SOFAGUI_SOURCE_DIR}/init.h; ); set(SOURCE_FILES; ${SOFAGUI_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGUI_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). endif(); ",MatchSource.DOCS,Sofa/GUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt:716,Modifiability,plugin,plugin,716,"cmake_minimum_required(VERSION 3.22); project(Sofa.GUI LANGUAGES CXX). set(SOFAGUI_SOURCE_DIR ""src/sofa/gui""). set(SOFAGUI_TARGETS); set(SOFAGUI_MISSINGTARGETS). sofa_add_subdirectory(module Component ${PROJECT_NAME}.Component ON); if(TARGET ${PROJECT_NAME}.Component); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Component); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Component); endif(). sofa_add_subdirectory(library Common ${PROJECT_NAME}.Common ON); if(TARGET ${PROJECT_NAME}.Common); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Common); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Common); endif(). set(SOFAGUI_DIRS Batch Qt); foreach(dir ${SOFAGUI_DIRS}); sofa_add_subdirectory(plugin ${dir} ${PROJECT_NAME}.${dir} ON); if(TARGET ${PROJECT_NAME}.${dir}); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.${dir}); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.${dir}); endif(); endforeach(). # HeadlessRecorder is still an ""optional"" dependency of Sofa.GUI; sofa_add_subdirectory(plugin HeadlessRecorder ${PROJECT_NAME}.HeadlessRecorder OFF); if(TARGET ${PROJECT_NAME}.HeadlessRecorder); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.HeadlessRecorder); set(SOFA_GUI_HAVE_SOFA_GUI_HEADLESSRECORDER 1); endif(). option(LIBRARY_SOFA_GUI ""Build the Sofa.Gui library."" ON). if(LIBRARY_SOFA_GUI); if(SOFAGUI_MISSINGTARGETS); message(""${PROJECT_NAME}: package and library will not be created because some dependencies are missing or disabled: ${SOFAGUI_MISSINGTARGETS}""); return(); endif(). set(HEADER_FILES; ${SOFAGUI_SOURCE_DIR}/config.h.in; ${SOFAGUI_SOURCE_DIR}/init.h; ); set(SOURCE_FILES; ${SOFAGUI_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGUI_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${P",MatchSource.DOCS,Sofa/GUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt:1025,Modifiability,plugin,plugin,1025,"ON 3.22); project(Sofa.GUI LANGUAGES CXX). set(SOFAGUI_SOURCE_DIR ""src/sofa/gui""). set(SOFAGUI_TARGETS); set(SOFAGUI_MISSINGTARGETS). sofa_add_subdirectory(module Component ${PROJECT_NAME}.Component ON); if(TARGET ${PROJECT_NAME}.Component); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Component); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Component); endif(). sofa_add_subdirectory(library Common ${PROJECT_NAME}.Common ON); if(TARGET ${PROJECT_NAME}.Common); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Common); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Common); endif(). set(SOFAGUI_DIRS Batch Qt); foreach(dir ${SOFAGUI_DIRS}); sofa_add_subdirectory(plugin ${dir} ${PROJECT_NAME}.${dir} ON); if(TARGET ${PROJECT_NAME}.${dir}); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.${dir}); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.${dir}); endif(); endforeach(). # HeadlessRecorder is still an ""optional"" dependency of Sofa.GUI; sofa_add_subdirectory(plugin HeadlessRecorder ${PROJECT_NAME}.HeadlessRecorder OFF); if(TARGET ${PROJECT_NAME}.HeadlessRecorder); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.HeadlessRecorder); set(SOFA_GUI_HAVE_SOFA_GUI_HEADLESSRECORDER 1); endif(). option(LIBRARY_SOFA_GUI ""Build the Sofa.Gui library."" ON). if(LIBRARY_SOFA_GUI); if(SOFAGUI_MISSINGTARGETS); message(""${PROJECT_NAME}: package and library will not be created because some dependencies are missing or disabled: ${SOFAGUI_MISSINGTARGETS}""); return(); endif(). set(HEADER_FILES; ${SOFAGUI_SOURCE_DIR}/config.h.in; ${SOFAGUI_SOURCE_DIR}/init.h; ); set(SOURCE_FILES; ${SOFAGUI_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGUI_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). endif(); ",MatchSource.DOCS,Sofa/GUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt:1567,Modifiability,config,config,1567,"ON 3.22); project(Sofa.GUI LANGUAGES CXX). set(SOFAGUI_SOURCE_DIR ""src/sofa/gui""). set(SOFAGUI_TARGETS); set(SOFAGUI_MISSINGTARGETS). sofa_add_subdirectory(module Component ${PROJECT_NAME}.Component ON); if(TARGET ${PROJECT_NAME}.Component); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Component); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Component); endif(). sofa_add_subdirectory(library Common ${PROJECT_NAME}.Common ON); if(TARGET ${PROJECT_NAME}.Common); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.Common); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.Common); endif(). set(SOFAGUI_DIRS Batch Qt); foreach(dir ${SOFAGUI_DIRS}); sofa_add_subdirectory(plugin ${dir} ${PROJECT_NAME}.${dir} ON); if(TARGET ${PROJECT_NAME}.${dir}); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.${dir}); else(); list(APPEND SOFAGUI_MISSINGTARGETS ${PROJECT_NAME}.${dir}); endif(); endforeach(). # HeadlessRecorder is still an ""optional"" dependency of Sofa.GUI; sofa_add_subdirectory(plugin HeadlessRecorder ${PROJECT_NAME}.HeadlessRecorder OFF); if(TARGET ${PROJECT_NAME}.HeadlessRecorder); list(APPEND SOFAGUI_TARGETS ${PROJECT_NAME}.HeadlessRecorder); set(SOFA_GUI_HAVE_SOFA_GUI_HEADLESSRECORDER 1); endif(). option(LIBRARY_SOFA_GUI ""Build the Sofa.Gui library."" ON). if(LIBRARY_SOFA_GUI); if(SOFAGUI_MISSINGTARGETS); message(""${PROJECT_NAME}: package and library will not be created because some dependencies are missing or disabled: ${SOFAGUI_MISSINGTARGETS}""); return(); endif(). set(HEADER_FILES; ${SOFAGUI_SOURCE_DIR}/config.h.in; ${SOFAGUI_SOURCE_DIR}/init.h; ); set(SOURCE_FILES; ${SOFAGUI_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFAGUI_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). endif(); ",MatchSource.DOCS,Sofa/GUI/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/GUI/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/AnimationLoop/CMakeLists.txt:229,Modifiability,config,config,229,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.AnimationLoop LANGUAGES CXX). set(SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR ""src/sofa/component/animationloop""). set(HEADER_FILES; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/FreeMotionAnimationLoop.h; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/ConstraintAnimationLoop.h; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/MultiStepAnimationLoop.h; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/MultiTagAnimationLoop.h; ). set(SOURCE_FILES; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/FreeMotionAnimationLoop.cpp; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/ConstraintAnimationLoop.cpp; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/MultiStepAnimationLoop.cpp; ${SOFACOMPONENTANIMATIONLOOP_SOURCE_DIR}/MultiTagAnimationLoop.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/AnimationLoop/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/AnimationLoop/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/CMakeLists.txt:319,Modifiability,config,config,319,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Collision LANGUAGES CXX). set(SOFACOMPONENTCOLLISION_SOURCE_DIR ""src/sofa/component/collision""). sofa_add_subdirectory_modules(SOFACOMPONENTCOLLISION_TARGETS; DIRECTORIES Geometry Detection Response; ). set(HEADER_FILES; ${SOFACOMPONENTCOLLISION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCOLLISION_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCOLLISION_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTCOLLISION_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). if(SOFA_BUILD_TESTS); add_subdirectory(Testing); endif(); ",MatchSource.DOCS,Sofa/Component/Collision/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Collision/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/CMakeLists.txt:318,Modifiability,config,config,318,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Constraint LANGUAGES CXX). set(SOFACOMPONENTCONSTRAINT_SOURCE_DIR ""src/sofa/component/constraint""). sofa_add_subdirectory_modules(SOFACOMPONENTCONSTRAINT_TARGETS; DIRECTORIES Lagrangian Projective; ). set(HEADER_FILES; ${SOFACOMPONENTCONSTRAINT_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCONSTRAINT_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCONSTRAINT_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTCONSTRAINT_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Constraint/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Constraint/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Controller/CMakeLists.txt:217,Modifiability,config,config,217,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Controller LANGUAGES CXX). set(SOFACOMPONENTCONTROLLER_SOURCE_DIR ""src/sofa/component/controller""). set(HEADER_FILES; ${SOFACOMPONENTCONTROLLER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTCONTROLLER_SOURCE_DIR}/init.h ; ${SOFACOMPONENTCONTROLLER_SOURCE_DIR}/MechanicalStateController.h; ${SOFACOMPONENTCONTROLLER_SOURCE_DIR}/MechanicalStateController.inl; ${SOFACOMPONENTCONTROLLER_SOURCE_DIR}/Controller.h; ). set(SOURCE_FILES; ${SOFACOMPONENTCONTROLLER_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTCONTROLLER_SOURCE_DIR}/Controller.cpp; ${SOFACOMPONENTCONTROLLER_SOURCE_DIR}/MechanicalStateController.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/Controller/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Controller/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Diffusion/CMakeLists.txt:213,Modifiability,config,config,213,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Diffusion LANGUAGES CXX). set(SOFACOMPONENTDIFFUSION_SOURCE_DIR ""src/sofa/component/diffusion""). set(HEADER_FILES; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/init.h; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.h; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_DIFFUSION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_DIFFUSION_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Diffusion/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Diffusion/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Diffusion/CMakeLists.txt:1034,Testability,test,tests,1034,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Diffusion LANGUAGES CXX). set(SOFACOMPONENTDIFFUSION_SOURCE_DIR ""src/sofa/component/diffusion""). set(HEADER_FILES; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/init.h; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.h; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_DIFFUSION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_DIFFUSION_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Diffusion/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Diffusion/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Diffusion/CMakeLists.txt:1146,Testability,test,tests,1146,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Diffusion LANGUAGES CXX). set(SOFACOMPONENTDIFFUSION_SOURCE_DIR ""src/sofa/component/diffusion""). set(HEADER_FILES; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/init.h; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.h; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_DIFFUSION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_DIFFUSION_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Diffusion/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Diffusion/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Diffusion/CMakeLists.txt:1290,Testability,test,tests,1290,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Diffusion LANGUAGES CXX). set(SOFACOMPONENTDIFFUSION_SOURCE_DIR ""src/sofa/component/diffusion""). set(HEADER_FILES; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/init.h; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.h; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTDIFFUSION_SOURCE_DIR}/TetrahedronDiffusionFEMForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_DIFFUSION_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_DIFFUSION_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Diffusion/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Diffusion/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/CMakeLists.txt:310,Modifiability,config,config,310,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Engine LANGUAGES CXX). set(SOFACOMPONENTENGINE_SOURCE_DIR ""src/sofa/component/engine""). sofa_add_subdirectory_modules(SOFACOMPONENTENGINE_TARGETS; DIRECTORIES Analyze Generate Select Transform; ). set(HEADER_FILES; ${SOFACOMPONENTENGINE_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTENGINE_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTENGINE_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTENGINE_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). if(SOFA_BUILD_TESTS); add_subdirectory(Testing); endif(); ",MatchSource.DOCS,Sofa/Component/Engine/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Engine/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Haptics/CMakeLists.txt:205,Modifiability,config,config,205,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Haptics LANGUAGES CXX). set(SOFACOMPONENTHAPTICS_SOURCE_DIR ""src/sofa/component/haptics""). set(HEADER_FILES; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/init.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/ForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.inl; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/MechanicalStateForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedbackT.h; ). set(SOURCE_FILES; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/ForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedbackT.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Solver REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Solver). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_HAPTICS_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_HAPTICS_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Haptics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Haptics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Haptics/CMakeLists.txt:1532,Testability,test,tests,1532,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Haptics LANGUAGES CXX). set(SOFACOMPONENTHAPTICS_SOURCE_DIR ""src/sofa/component/haptics""). set(HEADER_FILES; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/init.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/ForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.inl; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/MechanicalStateForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedbackT.h; ). set(SOURCE_FILES; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/ForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedbackT.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Solver REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Solver). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_HAPTICS_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_HAPTICS_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Haptics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Haptics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Haptics/CMakeLists.txt:1642,Testability,test,tests,1642,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Haptics LANGUAGES CXX). set(SOFACOMPONENTHAPTICS_SOURCE_DIR ""src/sofa/component/haptics""). set(HEADER_FILES; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/init.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/ForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.inl; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/MechanicalStateForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedbackT.h; ). set(SOURCE_FILES; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/ForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedbackT.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Solver REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Solver). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_HAPTICS_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_HAPTICS_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Haptics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Haptics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Haptics/CMakeLists.txt:1784,Testability,test,tests,1784,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Haptics LANGUAGES CXX). set(SOFACOMPONENTHAPTICS_SOURCE_DIR ""src/sofa/component/haptics""). set(HEADER_FILES; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/init.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/ForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.inl; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/MechanicalStateForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedback.h; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedbackT.h; ). set(SOURCE_FILES; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/ForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/LCPForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedback.cpp; ${SOFACOMPONENTHAPTICS_SOURCE_DIR}/NullForceFeedbackT.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Constraint.Lagrangian.Solver REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Constraint.Lagrangian.Solver). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_HAPTICS_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_HAPTICS_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Haptics/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Haptics/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/CMakeLists.txt:261,Modifiability,config,config,261,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.IO LANGUAGES CXX). set(SOFACOMPONENTIO_SOURCE_DIR ""src/sofa/component/io""). sofa_add_subdirectory_modules(SOFACOMPONENTIO_TARGETS; DIRECTORIES Mesh; ). set(HEADER_FILES; ${SOFACOMPONENTIO_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTIO_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTIO_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTIO_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/IO/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/IO/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/CMakeLists.txt:351,Modifiability,config,config,351,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.LinearSolver LANGUAGES CXX). set(SOFACOMPONENTLINEARSOLVER_SOURCE_DIR ""src/sofa/component/linearsolver""). sofa_add_subdirectory_modules(SOFACOMPONENTLINEARSOLVER_TARGETS; DIRECTORIES; Iterative; Ordering; Direct; Preconditioner; ). set(HEADER_FILES; ${SOFACOMPONENTLINEARSOLVER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTLINEARSOLVER_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTLINEARSOLVER_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTLINEARSOLVER_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ); ",MatchSource.DOCS,Sofa/Component/LinearSolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSystem/CMakeLists.txt:1901,Modifiability,config,config,1901,EM_SOURCE_DIR}/ConstantSparsityProjectionMethod.inl; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/CreateMatrixDispatcher.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/LinearSystemData.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MappedMassMatrixObserver.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MappedMassMatrixObserver.inl; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MappingGraph.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixFreeSystem.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixLinearSystem.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixLinearSystem.inl; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixProjectionMethod.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixProjectionMethod.inl; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/TypedMatrixLinearSystem.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/TypedMatrixLinearSystem.inl; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/config.h.in. ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/AssemblingMappedMatrixAccumulator.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/AssemblingMatrixAccumulator.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/BaseAssemblingMatrixAccumulator.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/ConstantLocalMappedMatrix.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/ConstantLocalMatrix.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/SparsityPatternLocalMappedMatrix.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/SparsityPatternLocalMatrix.h. ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/AssembleGlobalVectorFromLocalVectorVisitor.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/DispatchFromGlobalVectorToLocalVectorVisitor.h; ). set(SOURCE_FILES; ${SOFAC,MatchSource.DOCS,Sofa/Component/LinearSystem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSystem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSystem/CMakeLists.txt:4393,Testability,test,tests,4393,"MPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/SparsityPatternLocalMatrix.h. ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/AssembleGlobalVectorFromLocalVectorVisitor.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/DispatchFromGlobalVectorToLocalVectorVisitor.h; ). set(SOURCE_FILES; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/BaseMatrixProjectionMethod.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/CompositeLinearSystem.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/ConstantSparsityPatternSystem.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/ConstantSparsityProjectionMethod.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MappedMassMatrixObserver.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MappingGraph.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixLinearSystem.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixProjectionMethod.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/TypedMatrixLinearSystem.cpp. ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/AssembleGlobalVectorFromLocalVectorVisitor.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/DispatchFromGlobalVectorToLocalVectorVisitor.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.LinearAlgebra). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_LINEARSYSTEM_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_LINEARSYSTEM_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/LinearSystem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSystem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSystem/CMakeLists.txt:4522,Testability,test,tests,4522,"MPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/matrixaccumulators/SparsityPatternLocalMatrix.h. ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/AssembleGlobalVectorFromLocalVectorVisitor.h; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/DispatchFromGlobalVectorToLocalVectorVisitor.h; ). set(SOURCE_FILES; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/BaseMatrixProjectionMethod.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/CompositeLinearSystem.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/ConstantSparsityPatternSystem.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/ConstantSparsityProjectionMethod.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MappedMassMatrixObserver.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MappingGraph.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixLinearSystem.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/MatrixProjectionMethod.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/TypedMatrixLinearSystem.cpp. ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/AssembleGlobalVectorFromLocalVectorVisitor.cpp; ${SOFACOMPONENTLINEARSOLVERLINEARSYSTEM_SOURCE_DIR}/visitors/DispatchFromGlobalVectorToLocalVectorVisitor.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core Sofa.LinearAlgebra). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). cmake_dependent_option(SOFA_COMPONENT_LINEARSYSTEM_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_LINEARSYSTEM_BUILD_TESTS); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/LinearSystem/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/LinearSystem/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/CMakeLists.txt:311,Modifiability,config,config,311,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Mapping LANGUAGES CXX). set(SOFACOMPONENTMAPPING_SOURCE_DIR ""src/sofa/component/mapping""). sofa_add_subdirectory_modules(SOFACOMPONENTMAPPING_TARGETS; DIRECTORIES Linear NonLinear MappedMatrix; ). set(HEADER_FILES; ${SOFACOMPONENTMAPPING_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMAPPING_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTMAPPING_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTMAPPING_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). if(SOFA_BUILD_TESTS); add_subdirectory(Testing); endif(); ",MatchSource.DOCS,Sofa/Component/Mapping/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mapping/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mass/CMakeLists.txt:193,Modifiability,config,config,193,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Mass LANGUAGES CXX). set(SOFACOMPONENTMASS_SOURCE_DIR ""src/sofa/component/mass""). set(HEADER_FILES; ${SOFACOMPONENTMASS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMASS_SOURCE_DIR}/init.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/AddMToMatrixFunctor.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/MassType.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/RigidMassType.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/VecMassType.h; ). set(SOURCE_FILES; ${SOFACOMPONENTMASS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MASS_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MASS_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mass/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mass/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mass/CMakeLists.txt:1580,Testability,test,tests,1580,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Mass LANGUAGES CXX). set(SOFACOMPONENTMASS_SOURCE_DIR ""src/sofa/component/mass""). set(HEADER_FILES; ${SOFACOMPONENTMASS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMASS_SOURCE_DIR}/init.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/AddMToMatrixFunctor.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/MassType.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/RigidMassType.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/VecMassType.h; ). set(SOURCE_FILES; ${SOFACOMPONENTMASS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MASS_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MASS_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mass/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mass/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mass/CMakeLists.txt:1687,Testability,test,tests,1687,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Mass LANGUAGES CXX). set(SOFACOMPONENTMASS_SOURCE_DIR ""src/sofa/component/mass""). set(HEADER_FILES; ${SOFACOMPONENTMASS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMASS_SOURCE_DIR}/init.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/AddMToMatrixFunctor.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/MassType.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/RigidMassType.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/VecMassType.h; ). set(SOURCE_FILES; ${SOFACOMPONENTMASS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MASS_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MASS_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mass/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mass/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mass/CMakeLists.txt:1826,Testability,test,tests,1826,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Mass LANGUAGES CXX). set(SOFACOMPONENTMASS_SOURCE_DIR ""src/sofa/component/mass""). set(HEADER_FILES; ${SOFACOMPONENTMASS_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMASS_SOURCE_DIR}/init.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/AddMToMatrixFunctor.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/MassType.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/RigidMassType.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.h; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.inl; ${SOFACOMPONENTMASS_SOURCE_DIR}/VecMassType.h; ). set(SOURCE_FILES; ${SOFACOMPONENTMASS_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/DiagonalMass.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/MeshMatrixMass.cpp; ${SOFACOMPONENTMASS_SOURCE_DIR}/UniformMass.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED); sofa_find_package(Sofa.Component.Topology.Container.Dynamic REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Component.Topology.Container.Dynamic). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MASS_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MASS_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Mass/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Mass/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/MechanicalLoad/CMakeLists.txt:233,Modifiability,config,config,233,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.MechanicalLoad LANGUAGES CXX). set(SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR ""src/sofa/component/mechanicalload""). set(HEADER_FILES; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/init.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConicalForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConicalForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConstantForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConstantForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/DiagonalVelocityDampingForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/DiagonalVelocityDampingForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EdgePressureForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EdgePressureForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EllipsoidForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EllipsoidForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/InteractionEllipsoidForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/InteractionEllipsoidForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/LinearForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/LinearForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/OscillatingTorsionPressureForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/OscillatingTorsionPressureForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/PlaneForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/PlaneForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/QuadPressureForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/QuadPressureForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SphereForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SphereForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SurfacePressureForceField.h; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SurfacePressureForceField.inl; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DI",MatchSource.DOCS,Sofa/Component/MechanicalLoad/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/MechanicalLoad/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/MechanicalLoad/CMakeLists.txt:4229,Testability,test,tests,4229,"ormVelocityDampingForceField.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConicalForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConstantForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/DiagonalVelocityDampingForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EdgePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EllipsoidForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/InteractionEllipsoidForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/LinearForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/OscillatingTorsionPressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/PlaneForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/QuadPressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SphereForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SurfacePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TaitSurfacePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TorsionForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TrianglePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/UniformVelocityDampingForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MECHANICALLOAD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MECHANICALLOAD_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/MechanicalLoad/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/MechanicalLoad/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/MechanicalLoad/CMakeLists.txt:4346,Testability,test,tests,4346,"ormVelocityDampingForceField.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConicalForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConstantForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/DiagonalVelocityDampingForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EdgePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EllipsoidForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/InteractionEllipsoidForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/LinearForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/OscillatingTorsionPressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/PlaneForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/QuadPressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SphereForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SurfacePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TaitSurfacePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TorsionForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TrianglePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/UniformVelocityDampingForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MECHANICALLOAD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MECHANICALLOAD_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/MechanicalLoad/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/MechanicalLoad/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/MechanicalLoad/CMakeLists.txt:4495,Testability,test,tests,4495,"ormVelocityDampingForceField.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConicalForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/ConstantForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/DiagonalVelocityDampingForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EdgePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/EllipsoidForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/InteractionEllipsoidForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/LinearForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/OscillatingTorsionPressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/PlaneForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/QuadPressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SphereForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/SurfacePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TaitSurfacePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TorsionForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/TrianglePressureForceField.cpp; ${SOFACOMPONENTMECHANICALLOAD_SOURCE_DIR}/UniformVelocityDampingForceField.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_MECHANICALLOAD_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_MECHANICALLOAD_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/MechanicalLoad/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/MechanicalLoad/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/CMakeLists.txt:308,Modifiability,config,config,308,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.ODESolver LANGUAGES CXX). set(SOFACOMPONENTODESOLVER_SOURCE_DIR ""src/sofa/component/odesolver""). sofa_add_subdirectory_modules(SOFACOMPONENTODESOLVER_TARGETS; DIRECTORIES Forward Backward; ). set(HEADER_FILES; ${SOFACOMPONENTODESOLVER_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTODESOLVER_SOURCE_DIR}/init.h; ). set(SOURCE_FILES; ${SOFACOMPONENTODESOLVER_SOURCE_DIR}/init.cpp; ). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC ${SOFACOMPONENTODESOLVER_TARGETS}). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). if(SOFA_BUILD_TESTS); add_subdirectory(Testing); endif(); ",MatchSource.DOCS,Sofa/Component/ODESolver/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/ODESolver/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Playback/CMakeLists.txt:209,Modifiability,config,config,209,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.Playback LANGUAGES CXX). set(SOFACOMPONENTPLAYBACK_SOURCE_DIR ""src/sofa/component/playback""). set(HEADER_FILES; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/init.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/InputEventReader.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareTopology.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/InputEventReader.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.cpp; ). sofa_find_package(ZLIB REQUIRED); sofa_find_package(Sofa.Simulation.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmak",MatchSource.DOCS,Sofa/Component/Playback/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Playback/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Playback/CMakeLists.txt:1968,Testability,test,tests,1968,"AYBACK_SOURCE_DIR}/init.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/InputEventReader.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareTopology.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/InputEventReader.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.cpp; ). sofa_find_package(ZLIB REQUIRED); sofa_find_package(Sofa.Simulation.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_PLAYBACK_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_PLAYBACK_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Playback/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Playback/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Playback/CMakeLists.txt:2079,Testability,test,tests,2079,"AYBACK_SOURCE_DIR}/init.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/InputEventReader.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareTopology.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/InputEventReader.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.cpp; ). sofa_find_package(ZLIB REQUIRED); sofa_find_package(Sofa.Simulation.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_PLAYBACK_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_PLAYBACK_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Playback/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Playback/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Playback/CMakeLists.txt:2222,Testability,test,tests,2222,"AYBACK_SOURCE_DIR}/init.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/InputEventReader.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.inl; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.h; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.inl; ). set(SOURCE_FILES; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/CompareTopology.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/InputEventReader.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/ReadTopology.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteState.cpp; ${SOFACOMPONENTPLAYBACK_SOURCE_DIR}/WriteTopology.cpp; ). sofa_find_package(ZLIB REQUIRED); sofa_find_package(Sofa.Simulation.Common REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES} ${WRAPPER_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Common); target_link_libraries(${PROJECT_NAME} PUBLIC ZLIB::ZLIB); if(CMAKE_SYSTEM_NAME STREQUAL Windows); sofa_install_libraries(TARGETS ZLIB::ZLIB); endif(). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_PLAYBACK_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_PLAYBACK_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/Playback/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/Playback/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SceneUtility/CMakeLists.txt:225,Modifiability,config,config,225,"cmake_minimum_required(VERSION 3.22); project(Sofa.Component.SceneUtility LANGUAGES CXX). set(SOFACOMPONENTSCENEUTILITY_SOURCE_DIR ""src/sofa/component/sceneutility""). set(HEADER_FILES; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/init.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/AddResourceRepository.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/APIVersion.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/InfoComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeAliasComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeDataAliasComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MessageHandlerComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimation.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimationOnEvent.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/AddResourceRepository.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/APIVersion.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/InfoComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeAliasComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeDataAliasComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MessageHandlerComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimation.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimationOnEvent.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SCENEUTILITY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TE",MatchSource.DOCS,Sofa/Component/SceneUtility/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SceneUtility/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SceneUtility/CMakeLists.txt:1830,Testability,test,tests,1830,"ENEUTILITY_SOURCE_DIR ""src/sofa/component/sceneutility""). set(HEADER_FILES; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/init.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/AddResourceRepository.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/APIVersion.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/InfoComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeAliasComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeDataAliasComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MessageHandlerComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimation.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimationOnEvent.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/AddResourceRepository.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/APIVersion.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/InfoComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeAliasComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeDataAliasComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MessageHandlerComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimation.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimationOnEvent.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SCENEUTILITY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SCENEUTILITY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SceneUtility/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SceneUtility/CMakeLists.txt
https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SceneUtility/CMakeLists.txt:1945,Testability,test,tests,1945,"ENEUTILITY_SOURCE_DIR ""src/sofa/component/sceneutility""). set(HEADER_FILES; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/config.h.in; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/init.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/AddResourceRepository.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/APIVersion.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/InfoComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeAliasComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeDataAliasComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MessageHandlerComponent.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimation.h; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimationOnEvent.h; ). set(SOURCE_FILES; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/init.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/AddResourceRepository.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/APIVersion.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/InfoComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeAliasComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MakeDataAliasComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/MessageHandlerComponent.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimation.cpp; ${SOFACOMPONENTSCENEUTILITY_SOURCE_DIR}/PauseAnimationOnEvent.cpp; ). sofa_find_package(Sofa.Simulation.Core REQUIRED). add_library(${PROJECT_NAME} SHARED ${HEADER_FILES} ${SOURCE_FILES}); target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.Simulation.Core). sofa_create_package_with_targets(; PACKAGE_NAME ${PROJECT_NAME}; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""${PROJECT_NAME}""; ). # Tests; # If SOFA_BUILD_TESTS exists and is OFF, then these tests will be auto-disabled; cmake_dependent_option(SOFA_COMPONENT_SCENEUTILITY_BUILD_TESTS ""Compile the automatic tests"" ON ""SOFA_BUILD_TESTS OR NOT DEFINED SOFA_BUILD_TESTS"" OFF); if(SOFA_COMPONENT_SCENEUTILITY_BUILD_TESTS); enable_testing(); add_subdirectory(tests); endif(); ",MatchSource.DOCS,Sofa/Component/SceneUtility/CMakeLists.txt,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/tree/v24.06.00/Sofa/Component/SceneUtility/CMakeLists.txt
