id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:85,Safety,hazard,hazard,85,// Create a write hazard for the allocas. This inhibits folding; // loads across the hazard. This hazard is inserted at the; // beginning of the catch path to reflect the possibility that the; // variables might have been written within the protected scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:98,Safety,hazard,hazard,98,// Create a write hazard for the allocas. This inhibits folding; // loads across the hazard. This hazard is inserted at the; // beginning of the catch path to reflect the possibility that the; // variables might have been written within the protected scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:17,Safety,hazard,hazard,17,/// Emit a write hazard at the current location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:14,Safety,hazard,hazards,14,"/// Emit read hazards in all the protected blocks, i.e. all the blocks; /// which have been inserted since the beginning of the try.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:96,Performance,perform,performed,96,"// Insert a read hazard before the call. This will ensure that; // any writes to the locals are performed before making the; // call. If the call throws, then this is sufficient to; // guarantee correctness as long as it doesn't also write to any; // locals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:17,Safety,hazard,hazard,17,"// Insert a read hazard before the call. This will ensure that; // any writes to the locals are performed before making the; // call. If the call throws, then this is sufficient to; // guarantee correctness as long as it doesn't also write to any; // locals.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3334,Integrability,synchroniz,synchronized,3334," = null;; bool _call_try_exit = true;. objc_exception_try_enter(&d);; if (!setjmp(d.jmp_buf)) {; ... try body ...; } else {; // exception path; id _caught = objc_exception_extract(&d);. // enter new try scope for handlers; if (!setjmp(d.jmp_buf)) {; ... match exception and execute catch blocks ... // fell off end, rethrow.; _rethrow = _caught;; ... jump-through-finally to finally_rethrow ...; } else {; // exception in catch block; _rethrow = objc_exception_extract(&d);; _call_try_exit = false;; ... jump-through-finally to finally_rethrow ...; }; }; ... jump-through-finally to finally_end ... finally:; if (_call_try_exit); objc_exception_try_exit(&d);. ... finally block ....; ... dispatch to finally destination ... finally_rethrow:; objc_exception_throw(_rethrow);. finally_end:; }. This framework differs slightly from the one gcc uses, in that gcc; uses _rethrow to determine if objc_exception_try_exit should be called; and if the object should be rethrown. This breaks in the face of; throwing nil and introduces unnecessary branches. We specialize this framework for a few particular circumstances:. - If there are no catch blocks, then we avoid emitting the second; exception handling context. - If there is a catch-all catch block (i.e. @catch(...) or @catch(id; e)) we avoid emitting the code to rethrow an uncaught exception. - FIXME: If there is no @finally block we can do a few more; simplifications. Rethrows and Jumps-Through-Finally; --. '@throw;' is supported by pushing the currently-caught exception; onto ObjCEHStack while the @catch blocks are emitted. Branches through the @finally block are handled with an ordinary; normal cleanup. We do not register an EH cleanup; fragile-ABI ObjC; exceptions are not compatible with C++ exceptions, and this is; hardly the only place where this will go wrong. @synchronized(expr) { stmt; } is emitted as if it were:; id synch_value = expr;; objc_sync_enter(synch_value);; @try { stmt; } @finally { objc_sync_exit(synch_value); }; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:1256,Modifiability,variab,variables,1256," a stack, with a pointer to the top; of the stack kept in thread-local storage. objc_exception_try_enter pushes a catch buffer onto the EH stack.; objc_exception_try_exit pops the given catch buffer, which is; required to be the top of the EH stack.; objc_exception_throw pops the top of the EH stack, writes the; thrown exception into the appropriate field, and longjmps; to the setjmp buffer. It crashes the process (with a printf; and an abort()) if there are no catch buffers on the stack.; objc_exception_extract just reads the exception pointer out of the; catch buffer. There's no reason an implementation couldn't use a light-weight; setjmp here --- something like __builtin_setjmp, but API-compatible; with the heavyweight setjmp. This will be more important if we ever; want to implement correct ObjC/C++ exception interactions for the; fragile ABI. Note that for this use of setjmp/longjmp to be correct in the presence of; optimization, we use inline assembly on the set of local variables to force; flushing locals to memory immediately before any protected calls and to; inhibit optimizing locals across the setjmp->catch edge. The basic framework for a @try-catch-finally is as follows:; {; objc_exception_data d;; id _rethrow = null;; bool _call_try_exit = true;. objc_exception_try_enter(&d);; if (!setjmp(d.jmp_buf)) {; ... try body ...; } else {; // exception path; id _caught = objc_exception_extract(&d);. // enter new try scope for handlers; if (!setjmp(d.jmp_buf)) {; ... match exception and execute catch blocks ... // fell off end, rethrow.; _rethrow = _caught;; ... jump-through-finally to finally_rethrow ...; } else {; // exception in catch block; _rethrow = objc_exception_extract(&d);; _call_try_exit = false;; ... jump-through-finally to finally_rethrow ...; }; }; ... jump-through-finally to finally_end ... finally:; if (_call_try_exit); objc_exception_try_exit(&d);. ... finally block ....; ... dispatch to finally destination ... finally_rethrow:; objc_exception_th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:1199,Performance,optimiz,optimization,1199," a stack, with a pointer to the top; of the stack kept in thread-local storage. objc_exception_try_enter pushes a catch buffer onto the EH stack.; objc_exception_try_exit pops the given catch buffer, which is; required to be the top of the EH stack.; objc_exception_throw pops the top of the EH stack, writes the; thrown exception into the appropriate field, and longjmps; to the setjmp buffer. It crashes the process (with a printf; and an abort()) if there are no catch buffers on the stack.; objc_exception_extract just reads the exception pointer out of the; catch buffer. There's no reason an implementation couldn't use a light-weight; setjmp here --- something like __builtin_setjmp, but API-compatible; with the heavyweight setjmp. This will be more important if we ever; want to implement correct ObjC/C++ exception interactions for the; fragile ABI. Note that for this use of setjmp/longjmp to be correct in the presence of; optimization, we use inline assembly on the set of local variables to force; flushing locals to memory immediately before any protected calls and to; inhibit optimizing locals across the setjmp->catch edge. The basic framework for a @try-catch-finally is as follows:; {; objc_exception_data d;; id _rethrow = null;; bool _call_try_exit = true;. objc_exception_try_enter(&d);; if (!setjmp(d.jmp_buf)) {; ... try body ...; } else {; // exception path; id _caught = objc_exception_extract(&d);. // enter new try scope for handlers; if (!setjmp(d.jmp_buf)) {; ... match exception and execute catch blocks ... // fell off end, rethrow.; _rethrow = _caught;; ... jump-through-finally to finally_rethrow ...; } else {; // exception in catch block; _rethrow = objc_exception_extract(&d);; _call_try_exit = false;; ... jump-through-finally to finally_rethrow ...; }; }; ... jump-through-finally to finally_end ... finally:; if (_call_try_exit); objc_exception_try_exit(&d);. ... finally block ....; ... dispatch to finally destination ... finally_rethrow:; objc_exception_th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:1357,Performance,optimiz,optimizing,1357," a stack, with a pointer to the top; of the stack kept in thread-local storage. objc_exception_try_enter pushes a catch buffer onto the EH stack.; objc_exception_try_exit pops the given catch buffer, which is; required to be the top of the EH stack.; objc_exception_throw pops the top of the EH stack, writes the; thrown exception into the appropriate field, and longjmps; to the setjmp buffer. It crashes the process (with a printf; and an abort()) if there are no catch buffers on the stack.; objc_exception_extract just reads the exception pointer out of the; catch buffer. There's no reason an implementation couldn't use a light-weight; setjmp here --- something like __builtin_setjmp, but API-compatible; with the heavyweight setjmp. This will be more important if we ever; want to implement correct ObjC/C++ exception interactions for the; fragile ABI. Note that for this use of setjmp/longjmp to be correct in the presence of; optimization, we use inline assembly on the set of local variables to force; flushing locals to memory immediately before any protected calls and to; inhibit optimizing locals across the setjmp->catch edge. The basic framework for a @try-catch-finally is as follows:; {; objc_exception_data d;; id _rethrow = null;; bool _call_try_exit = true;. objc_exception_try_enter(&d);; if (!setjmp(d.jmp_buf)) {; ... try body ...; } else {; // exception path; id _caught = objc_exception_extract(&d);. // enter new try scope for handlers; if (!setjmp(d.jmp_buf)) {; ... match exception and execute catch blocks ... // fell off end, rethrow.; _rethrow = _caught;; ... jump-through-finally to finally_rethrow ...; } else {; // exception in catch block; _rethrow = objc_exception_extract(&d);; _call_try_exit = false;; ... jump-through-finally to finally_rethrow ...; }; }; ... jump-through-finally to finally_end ... finally:; if (_call_try_exit); objc_exception_try_exit(&d);. ... finally block ....; ... dispatch to finally destination ... finally_rethrow:; objc_exception_th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:705,Safety,abort,abort,705,"/*. Objective-C setjmp-longjmp (sjlj) Exception Handling; --. A catch buffer is a setjmp buffer plus:; - a pointer to the exception that was caught; - a pointer to the previous exception data buffer; - two pointers of reserved storage; Therefore catch buffers form a stack, with a pointer to the top; of the stack kept in thread-local storage. objc_exception_try_enter pushes a catch buffer onto the EH stack.; objc_exception_try_exit pops the given catch buffer, which is; required to be the top of the EH stack.; objc_exception_throw pops the top of the EH stack, writes the; thrown exception into the appropriate field, and longjmps; to the setjmp buffer. It crashes the process (with a printf; and an abort()) if there are no catch buffers on the stack.; objc_exception_extract just reads the exception pointer out of the; catch buffer. There's no reason an implementation couldn't use a light-weight; setjmp here --- something like __builtin_setjmp, but API-compatible; with the heavyweight setjmp. This will be more important if we ever; want to implement correct ObjC/C++ exception interactions for the; fragile ABI. Note that for this use of setjmp/longjmp to be correct in the presence of; optimization, we use inline assembly on the set of local variables to force; flushing locals to memory immediately before any protected calls and to; inhibit optimizing locals across the setjmp->catch edge. The basic framework for a @try-catch-finally is as follows:; {; objc_exception_data d;; id _rethrow = null;; bool _call_try_exit = true;. objc_exception_try_enter(&d);; if (!setjmp(d.jmp_buf)) {; ... try body ...; } else {; // exception path; id _caught = objc_exception_extract(&d);. // enter new try scope for handlers; if (!setjmp(d.jmp_buf)) {; ... match exception and execute catch blocks ... // fell off end, rethrow.; _rethrow = _caught;; ... jump-through-finally to finally_rethrow ...; } else {; // exception in catch block; _rethrow = objc_exception_extract(&d);; _call_try_exit = fals",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:2659,Safety,avoid,avoid,2659," = null;; bool _call_try_exit = true;. objc_exception_try_enter(&d);; if (!setjmp(d.jmp_buf)) {; ... try body ...; } else {; // exception path; id _caught = objc_exception_extract(&d);. // enter new try scope for handlers; if (!setjmp(d.jmp_buf)) {; ... match exception and execute catch blocks ... // fell off end, rethrow.; _rethrow = _caught;; ... jump-through-finally to finally_rethrow ...; } else {; // exception in catch block; _rethrow = objc_exception_extract(&d);; _call_try_exit = false;; ... jump-through-finally to finally_rethrow ...; }; }; ... jump-through-finally to finally_end ... finally:; if (_call_try_exit); objc_exception_try_exit(&d);. ... finally block ....; ... dispatch to finally destination ... finally_rethrow:; objc_exception_throw(_rethrow);. finally_end:; }. This framework differs slightly from the one gcc uses, in that gcc; uses _rethrow to determine if objc_exception_try_exit should be called; and if the object should be rethrown. This breaks in the face of; throwing nil and introduces unnecessary branches. We specialize this framework for a few particular circumstances:. - If there are no catch blocks, then we avoid emitting the second; exception handling context. - If there is a catch-all catch block (i.e. @catch(...) or @catch(id; e)) we avoid emitting the code to rethrow an uncaught exception. - FIXME: If there is no @finally block we can do a few more; simplifications. Rethrows and Jumps-Through-Finally; --. '@throw;' is supported by pushing the currently-caught exception; onto ObjCEHStack while the @catch blocks are emitted. Branches through the @finally block are handled with an ordinary; normal cleanup. We do not register an EH cleanup; fragile-ABI ObjC; exceptions are not compatible with C++ exceptions, and this is; hardly the only place where this will go wrong. @synchronized(expr) { stmt; } is emitted as if it were:; id synch_value = expr;; objc_sync_enter(synch_value);; @try { stmt; } @finally { objc_sync_exit(synch_value); }; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:2791,Safety,avoid,avoid,2791," = null;; bool _call_try_exit = true;. objc_exception_try_enter(&d);; if (!setjmp(d.jmp_buf)) {; ... try body ...; } else {; // exception path; id _caught = objc_exception_extract(&d);. // enter new try scope for handlers; if (!setjmp(d.jmp_buf)) {; ... match exception and execute catch blocks ... // fell off end, rethrow.; _rethrow = _caught;; ... jump-through-finally to finally_rethrow ...; } else {; // exception in catch block; _rethrow = objc_exception_extract(&d);; _call_try_exit = false;; ... jump-through-finally to finally_rethrow ...; }; }; ... jump-through-finally to finally_end ... finally:; if (_call_try_exit); objc_exception_try_exit(&d);. ... finally block ....; ... dispatch to finally destination ... finally_rethrow:; objc_exception_throw(_rethrow);. finally_end:; }. This framework differs slightly from the one gcc uses, in that gcc; uses _rethrow to determine if objc_exception_try_exit should be called; and if the object should be rethrown. This breaks in the face of; throwing nil and introduces unnecessary branches. We specialize this framework for a few particular circumstances:. - If there are no catch blocks, then we avoid emitting the second; exception handling context. - If there is a catch-all catch block (i.e. @catch(...) or @catch(id; e)) we avoid emitting the code to rethrow an uncaught exception. - FIXME: If there is no @finally block we can do a few more; simplifications. Rethrows and Jumps-Through-Finally; --. '@throw;' is supported by pushing the currently-caught exception; onto ObjCEHStack while the @catch blocks are emitted. Branches through the @finally block are handled with an ordinary; normal cleanup. We do not register an EH cleanup; fragile-ABI ObjC; exceptions are not compatible with C++ exceptions, and this is; hardly the only place where this will go wrong. @synchronized(expr) { stmt; } is emitted as if it were:; id synch_value = expr;; objc_sync_enter(synch_value);; @try { stmt; } @finally { objc_sync_exit(synch_value); }; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:2910,Usability,simpl,simplifications,2910," = null;; bool _call_try_exit = true;. objc_exception_try_enter(&d);; if (!setjmp(d.jmp_buf)) {; ... try body ...; } else {; // exception path; id _caught = objc_exception_extract(&d);. // enter new try scope for handlers; if (!setjmp(d.jmp_buf)) {; ... match exception and execute catch blocks ... // fell off end, rethrow.; _rethrow = _caught;; ... jump-through-finally to finally_rethrow ...; } else {; // exception in catch block; _rethrow = objc_exception_extract(&d);; _call_try_exit = false;; ... jump-through-finally to finally_rethrow ...; }; }; ... jump-through-finally to finally_end ... finally:; if (_call_try_exit); objc_exception_try_exit(&d);. ... finally block ....; ... dispatch to finally destination ... finally_rethrow:; objc_exception_throw(_rethrow);. finally_end:; }. This framework differs slightly from the one gcc uses, in that gcc; uses _rethrow to determine if objc_exception_try_exit should be called; and if the object should be rethrown. This breaks in the face of; throwing nil and introduces unnecessary branches. We specialize this framework for a few particular circumstances:. - If there are no catch blocks, then we avoid emitting the second; exception handling context. - If there is a catch-all catch block (i.e. @catch(...) or @catch(id; e)) we avoid emitting the code to rethrow an uncaught exception. - FIXME: If there is no @finally block we can do a few more; simplifications. Rethrows and Jumps-Through-Finally; --. '@throw;' is supported by pushing the currently-caught exception; onto ObjCEHStack while the @catch blocks are emitted. Branches through the @finally block are handled with an ordinary; normal cleanup. We do not register an EH cleanup; fragile-ABI ObjC; exceptions are not compatible with C++ exceptions, and this is; hardly the only place where this will go wrong. @synchronized(expr) { stmt; } is emitted as if it were:; id synch_value = expr;; objc_sync_enter(synch_value);; @try { stmt; } @finally { objc_sync_exit(synch_value); }; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:8,Integrability,synchroniz,synchronized,8,"// For @synchronized, call objc_sync_enter(sync.expr). The; // evaluation of the expression must occur before we enter the; // @synchronized. We can't avoid a temp here because we need the; // value to be preserved. If the backend ever does liveness; // correctly after setjmp, this will be unnecessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:128,Integrability,synchroniz,synchronized,128,"// For @synchronized, call objc_sync_enter(sync.expr). The; // evaluation of the expression must occur before we enter the; // @synchronized. We can't avoid a temp here because we need the; // value to be preserved. If the backend ever does liveness; // correctly after setjmp, this will be unnecessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:151,Safety,avoid,avoid,151,"// For @synchronized, call objc_sync_enter(sync.expr). The; // evaluation of the expression must occur before we enter the; // @synchronized. We can't avoid a temp here because we need the; // value to be preserved. If the backend ever does liveness; // correctly after setjmp, this will be unnecessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate memory for the setjmp buffer. This needs to be kept; // live throughout the try and catch blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:173,Modifiability,extend,extends,173,"// Create the fragile hazards. Note that this will not capture any; // of the allocas required for exception processing, but will; // capture the current basic block (which extends all the way to the; // setjmp call) as ""before the @try"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:22,Safety,hazard,hazards,22,"// Create the fragile hazards. Note that this will not capture any; // of the allocas required for exception processing, but will; // capture the current basic block (which extends all the way to the; // setjmp call) as ""before the @try"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:358,Modifiability,variab,variable,358,"// Create a flag indicating whether the cleanup needs to call; // objc_exception_try_exit. This is true except when; // - no catches match and we're branching through the cleanup; // just to rethrow the exception, or; // - a catch matched and we're falling out of the catch handler.; // The setjmp-safety rule here is that we should always store to this; // variable in a place that dominates the branch through the cleanup; // without passing through any setjmps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:298,Safety,safe,safety,298,"// Create a flag indicating whether the cleanup needs to call; // objc_exception_try_exit. This is true except when; // - no catches match and we're branching through the cleanup; // just to rethrow the exception, or; // - a catch matched and we're falling out of the catch handler.; // The setjmp-safety rule here is that we should always store to this; // variable in a place that dominates the branch through the cleanup; // without passing through any setjmps.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:9,Performance,optimiz,optimize,9,// Don't optimize loads of the in-scope locals across this point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:18,Performance,load,loads,18,// Don't optimize loads of the in-scope locals across this point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:10,Integrability,synchroniz,synchronized,10,"// For a @synchronized (or a @try with no catches), just branch; // through the cleanup to the rethrow block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:80,Usability,clear,clears,80,// Save the currently-propagating exception before; // objc_exception_try_enter clears the exception slot.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:82,Safety,avoid,avoid,82,// Handle catch list. As a special case we check if everything is; // matched and avoid generating code for falling off the end if; // so.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:44,Testability,test,test,44,"// If this is a catch-all, we don't need to test anything.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:26,Modifiability,variab,variable,26,// The scope of the catch variable ends right here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:38,Modifiability,variab,variable,38,// Collect any cleanups for the catch variable. The scope lasts until; // the end of the catch body.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:24,Modifiability,variab,variable,24,// Initialize the catch variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:29,Modifiability,variab,variable,29,// We're done with the catch variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:39,Safety,hazard,hazard,39,"// In theory we might now need a write hazard, but actually it's; // unnecessary because there's no local-accessing code between; // the try's write hazard and here.; //Hazards.emitWriteHazard();; // Extract the new exception and save it to the; // propagating-exception slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:149,Safety,hazard,hazard,149,"// In theory we might now need a write hazard, but actually it's; // unnecessary because there's no local-accessing code between; // the try's write hazard and here.; //Hazards.emitWriteHazard();; // Extract the new exception and save it to the; // propagating-exception slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:169,Safety,Hazard,Hazards,169,"// In theory we might now need a write hazard, but actually it's; // unnecessary because there's no local-accessing code between; // the try's write hazard and here.; //Hazards.emitWriteHazard();; // Extract the new exception and save it to the; // propagating-exception slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:106,Security,access,accessing,106,"// In theory we might now need a write hazard, but actually it's; // unnecessary because there's no local-accessing code between; // the try's write hazard and here.; //Hazards.emitWriteHazard();; // Extract the new exception and save it to the; // propagating-exception slot.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:15,Safety,hazard,hazards,15,// Insert read hazards as required in the new blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:38,Modifiability,variab,variable,38,"// If we have a propagating-exception variable, check it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Usability,Clear,Clear,3,// Clear the insertion point to indicate we are in unreachable code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:36,Performance,load,loading,36,/// EmitObjCWeakRead - Code gen for loading value of a __weak; /// object: objc_read_weak (id *src); ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:15,Integrability,Interface,Interface,15,/* *** Private Interface *** */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:138,Modifiability,variab,variable,138,// This flag is set by the dyld shared cache.; // A flag indicating that the module has no instances of a @synthesize of a; // superclass variable. This flag used to be consumed by the runtime to work; // around miscompile by gcc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:39,Performance,cache,cache,39,// This flag is set by the dyld shared cache.; // A flag indicating that the module has no instances of a @synthesize of a; // superclass variable. This flag used to be consumed by the runtime to work; // around miscompile by gcc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:39,Integrability,interface,interface,39,// We are implementing a weak imported interface. Give it external linkage,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:9,Availability,down,down,9,// Drill down into arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:23,Integrability,rout,routine,23,"/// buildBitmap - This routine does the horsework of taking the offsets of; /// strong/weak references and creating a bitmap. The bitmap is also; /// returned in the given buffer, suitable for being passed to \c dump().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:97,Performance,perform,performed,97,"// The bitmap is a series of skip/scan instructions, aligned to word; // boundaries. The skip is performed first.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:247,Testability,test,test,247,"// Ignore scan requests that start before the instance start.; // This assumes that scans never span that boundary. The boundary; // isn't the true start of the ivars, because in the fragile-ARC case; // it's rounded up to word alignment, but the test above should leave; // us ignoring that possibility.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:10,Safety,Avoid,Avoid,10,"// FIXME: Avoid std::string in ""Sel.getAsString()""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:33,Integrability,protocol,protocols,33,// Emit the dummy bodies for any protocols which were referenced but; // never defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:39,Modifiability,variab,variables,39,"// arm64 targets use ""int"" ivar offset variables. All others,; // including OS X x86_64 and Windows x86_64, use ""long"" ivar offsets.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:279,Modifiability,rewrite,rewriter,279,// I'm not sure I like this. The implicit coordination is a bit; // gross. We should solve this in a reasonable fashion because this; // is a pretty common task (match some runtime data structure with; // an LLVM data structure).; // FIXME: This is leaked.; // FIXME: Merge with rewriter code?; // struct _objc_super {; // id self;; // Class cls;; // },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Protocol,Protocol,3,// Protocol description structures; // struct _objc_protocol_extension {; // uint32_t size; // sizeof(struct _objc_protocol_extension); // struct _objc_method_description_list *optional_instance_methods;; // struct _objc_method_description_list *optional_class_methods;; // struct _objc_property_list *instance_properties;; // const char ** extendedMethodTypes;; // struct _objc_property_list *class_properties;; // },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:341,Modifiability,extend,extendedMethodTypes,341,// Protocol description structures; // struct _objc_protocol_extension {; // uint32_t size; // sizeof(struct _objc_protocol_extension); // struct _objc_method_description_list *optional_instance_methods;; // struct _objc_method_description_list *optional_class_methods;; // struct _objc_property_list *instance_properties;; // const char ** extendedMethodTypes;; // struct _objc_property_list *class_properties;; // },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:36,Integrability,Protocol,Protocol,36,// Handle recursive construction of Protocol and ProtocolList types,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:49,Integrability,Protocol,ProtocolList,49,// Handle recursive construction of Protocol and ProtocolList types,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:272,Integrability,protocol,protocols,272,// struct _objc_class {; // Class isa;; // Class super_class;; // char *name;; // long version;; // long info;; // long instance_size;; // struct _objc_ivar_list *ivars;; // struct _objc_method_list *methods;; // struct _objc_cache *cache;; // struct _objc_protocol_list *protocols;; // char *ivar_layout;; // struct _objc_class_ext *ext;; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:233,Performance,cache,cache,233,// struct _objc_class {; // Class isa;; // Class super_class;; // char *name;; // long version;; // long info;; // long instance_size;; // struct _objc_ivar_list *ivars;; // struct _objc_method_list *methods;; // struct _objc_cache *cache;; // struct _objc_protocol_list *protocols;; // char *ivar_layout;; // struct _objc_class_ext *ext;; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:197,Integrability,protocol,protocols,197,// struct _objc_category {; // char *category_name;; // char *class_name;; // struct _objc_method_list *instance_method;; // struct _objc_method_list *class_method;; // struct _objc_protocol_list *protocols;; // uint32_t size; // sizeof(struct _objc_category); // struct _objc_property_list *instance_properties;// category's @property; // struct _objc_property_list *class_properties;; // },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:142,Integrability,protocol,protocols,142,// struct _protocol_t {; // id isa; // NULL; // const char * const protocol_name;; // const struct _protocol_list_t * protocol_list; // super protocols; // const struct method_list_t * const instance_methods;; // const struct method_list_t * const class_methods;; // const struct method_list_t *optionalInstanceMethods;; // const struct method_list_t *optionalClassMethods;; // const struct _prop_list_t * properties;; // const uint32_t size; // sizeof(struct _protocol_t); // const uint32_t flags; // = 0; // const char ** extendedMethodTypes;; // const char *demangledName;; // const struct _prop_list_t * class_properties;; // }; // Holder for struct _protocol_list_t *,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:524,Modifiability,extend,extendedMethodTypes,524,// struct _protocol_t {; // id isa; // NULL; // const char * const protocol_name;; // const struct _protocol_list_t * protocol_list; // super protocols; // const struct method_list_t * const instance_methods;; // const struct method_list_t * const class_methods;; // const struct method_list_t *optionalInstanceMethods;; // const struct method_list_t *optionalClassMethods;; // const struct _prop_list_t * properties;; // const uint32_t size; // sizeof(struct _protocol_t); // const uint32_t flags; // = 0; // const char ** extendedMethodTypes;; // const char *demangledName;; // const struct _prop_list_t * class_properties;; // }; // Holder for struct _protocol_list_t *,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:97,Performance,cache,cache,97,// struct _class_t {; // struct _class_t *isa;; // struct _class_t * const superclass;; // void *cache;; // IMP *vtable;; // struct class_ro_t *ro;; // },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:240,Integrability,protocol,protocols,240,// struct _category_t {; // const char * const name;; // struct _class_t *const cls;; // const struct _method_list_t * const instance_methods;; // const struct _method_list_t * const class_methods;; // const struct _protocol_list_t * const protocols;; // const struct _prop_list_t * const properties;; // const struct _prop_list_t * const class_properties;; // const uint32_t size;; // },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Message,MessageRefTy,3,// MessageRefTy - LLVM for:; // struct _message_ref_t {; // IMP messenger;; // SEL name;; // };; // First the clang type for struct _message_ref_t,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Message,MessageRefPtrTy,3,// MessageRefPtrTy - LLVM for struct _message_ref_t*,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:39,Integrability,interface,interface,39,// We are implementing a weak imported interface. Give it external linkage,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:219,Integrability,message,message,219,"/// isVTableDispatchedSelector - Returns true if SEL is not in the list of; /// VTableDispatchMethods; false otherwise. What this means is that; /// except for the 19 selectors in the list, we generate 32bit-style; /// message dispatch call for all the rest.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:151,Performance,cache,cache,151,/// Build the metaclass object for a class.; ///; /// struct _class_t {; /// struct _class_t *isa;; /// struct _class_t * const superclass;; /// void *cache;; /// IMP *vtable;; /// struct class_ro_t *ro;; /// }; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:18,Deployability,deploy,deployment,18,// Only OS X with deployment version <10.9 use the empty vtable symbol,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:34,Performance,optimiz,optimization,34,"// Set a flag to enable a runtime optimization when a class has; // fields that require destruction but which don't require; // anything except zero-initialization during construction. This; // is most notably true of __strong and __weak types, but you can; // also imagine there being C++ types with non-trivial default; // constructors that merely set all fields to null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:47,Usability,clear,clear,47,// Make sure method definition entries are all clear for next implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:31,Integrability,rout,routine,31,/// GenerateProtocolRef - This routine is called to generate code for; /// a protocol reference expression; as in:; /// @code; /// @protocol(Proto1);; /// @endcode; /// It generates a weak reference to l_OBJC_PROTOCOL_REFERENCE_$_Proto1; /// which will hold address of the protocol meta-data.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:77,Integrability,protocol,protocol,77,/// GenerateProtocolRef - This routine is called to generate code for; /// a protocol reference expression; as in:; /// @code; /// @protocol(Proto1);; /// @endcode; /// It generates a weak reference to l_OBJC_PROTOCOL_REFERENCE_$_Proto1; /// which will hold address of the protocol meta-data.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:132,Integrability,protocol,protocol,132,/// GenerateProtocolRef - This routine is called to generate code for; /// a protocol reference expression; as in:; /// @code; /// @protocol(Proto1);; /// @endcode; /// It generates a weak reference to l_OBJC_PROTOCOL_REFERENCE_$_Proto1; /// which will hold address of the protocol meta-data.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:273,Integrability,protocol,protocol,273,/// GenerateProtocolRef - This routine is called to generate code for; /// a protocol reference expression; as in:; /// @code; /// @protocol(Proto1);; /// @endcode; /// It generates a weak reference to l_OBJC_PROTOCOL_REFERENCE_$_Proto1; /// which will hold address of the protocol meta-data.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:8,Integrability,rout,routine,8,"// This routine is called for @protocol only. So, we must build definition; // of protocol's meta-data (not a reference to it!)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:31,Integrability,protocol,protocol,31,"// This routine is called for @protocol only. So, we must build definition; // of protocol's meta-data (not a reference to it!)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:82,Integrability,protocol,protocol,82,"// This routine is called for @protocol only. So, we must build definition; // of protocol's meta-data (not a reference to it!)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:316,Integrability,protocol,protocols,316,/// GenerateCategory - Build metadata for a category implementation.; /// struct _category_t {; /// const char * const name;; /// struct _class_t *const cls;; /// const struct _method_list_t * const instance_methods;; /// const struct _method_list_t * const class_methods;; /// const struct _protocol_list_t * const protocols;; /// const struct _prop_list_t * const properties;; /// const struct _prop_list_t * const class_properties;; /// const uint32_t size;; /// }; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,Usability,clear,clear,37,// method definition entries must be clear for next implementation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Integrability,Protocol,Protocol,3,"// Protocol methods have no implementation. So, this entry is always NULL.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:53,Modifiability,variab,variable,53,/// ObjCIvarOffsetVariable - Returns the ivar offset variable for; /// the given ivar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:186,Deployability,patch,patch,186,"// If ID's layout is known, then make the global constant. This serves as a; // useful assertion: we'll never use this variable to calculate ivar offsets,; // so if the runtime tries to patch it then we should crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:119,Modifiability,variab,variable,119,"// If ID's layout is known, then make the global constant. This serves as a; // useful assertion: we'll never use this variable to calculate ivar offsets,; // so if the runtime tries to patch it then we should crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:87,Testability,assert,assertion,87,"// If ID's layout is known, then make the global constant. This serves as a; // useful assertion: we'll never use this variable to calculate ivar offsets,; // so if the runtime tries to patch it then we should crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:146,Integrability,protocol,protocols,146,// We use the initializer as a marker of whether this is a forward; // reference or not. At module finalization we add the empty; // contents for protocols which were referenced but never defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,Integrability,protocol,protocol,37,/// GetOrEmitProtocol - Generate the protocol meta-data:; /// @code; /// struct _protocol_t {; /// id isa; // NULL; /// const char * const protocol_name;; /// const struct _protocol_list_t * protocol_list; // super protocols; /// const struct method_list_t * const instance_methods;; /// const struct method_list_t * const class_methods;; /// const struct method_list_t *optionalInstanceMethods;; /// const struct method_list_t *optionalClassMethods;; /// const struct _prop_list_t * properties;; /// const uint32_t size; // sizeof(struct _protocol_t); /// const uint32_t flags; // = 0; /// const char ** extendedMethodTypes;; /// const char *demangledName;; /// const struct _prop_list_t * class_properties;; /// }; /// @endcode; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:215,Integrability,protocol,protocols,215,/// GetOrEmitProtocol - Generate the protocol meta-data:; /// @code; /// struct _protocol_t {; /// id isa; // NULL; /// const char * const protocol_name;; /// const struct _protocol_list_t * protocol_list; // super protocols; /// const struct method_list_t * const instance_methods;; /// const struct method_list_t * const class_methods;; /// const struct method_list_t *optionalInstanceMethods;; /// const struct method_list_t *optionalClassMethods;; /// const struct _prop_list_t * properties;; /// const uint32_t size; // sizeof(struct _protocol_t); /// const uint32_t flags; // = 0; /// const char ** extendedMethodTypes;; /// const char *demangledName;; /// const struct _prop_list_t * class_properties;; /// }; /// @endcode; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:605,Modifiability,extend,extendedMethodTypes,605,/// GetOrEmitProtocol - Generate the protocol meta-data:; /// @code; /// struct _protocol_t {; /// id isa; // NULL; /// const char * const protocol_name;; /// const struct _protocol_list_t * protocol_list; // super protocols; /// const struct method_list_t * const instance_methods;; /// const struct method_list_t * const class_methods;; /// const struct method_list_t *optionalInstanceMethods;; /// const struct method_list_t *optionalClassMethods;; /// const struct _prop_list_t * properties;; /// const uint32_t size; // sizeof(struct _protocol_t); /// const uint32_t flags; // = 0; /// const char ** extendedMethodTypes;; /// const char *demangledName;; /// const struct _prop_list_t * class_properties;; /// }; /// @endcode; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:11,Integrability,protocol,protocol,11,"// Use the protocol definition, if there is one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:40,Deployability,update,update,40,"// Already created, fix the linkage and update the initializer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:12,Integrability,protocol,protocol,12,"// Use this protocol meta-data to build protocol list table in section; // __DATA, __objc_protolist",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:40,Integrability,protocol,protocol,40,"// Use this protocol meta-data to build protocol list table in section; // __DATA, __objc_protolist",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:32,Integrability,protocol,protocol,32,"/// EmitProtocolList - Generate protocol list meta-data:; /// @code; /// struct _protocol_list_t {; /// long protocol_count; // Note, this is 32/64 bit; /// struct _protocol_t[protocol_count];; /// }; /// @endcode; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:30,Integrability,protocol,protocol,30,// Just return null for empty protocol lists,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:17,Integrability,protocol,protocols,17,// If all of the protocols in the protocol list are objc_non_runtime_protocol; // just return null,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:34,Integrability,protocol,protocol,34,// If all of the protocols in the protocol list are objc_non_runtime_protocol; // just return null,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:30,Integrability,protocol,protocols,30,// A null-terminated array of protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:44,Integrability,depend,depending,44,"// This could be 32bit int or 64bit integer depending on the architecture.; // Cast it to 64bit integer value, if it is a 32bit integer ivar offset value; // as this is what caller always expects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:20,Integrability,message,message,20,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:212,Performance,load,load,212,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:434,Testability,stub,stub,434,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:542,Testability,stub,stub,542,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:597,Testability,stub,stubs,597,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:454,Usability,simpl,simply,454,"/// Emit a ""vtable"" message send. We emit a weak hidden-visibility; /// struct, initially containing the selector pointer and a pointer to; /// a ""fixup"" variant of the appropriate objc_msgSend. To call, we; /// load and call the function pointer, passing the address of the; /// struct as the second parameter. The runtime determines whether; /// the selector is currently emitted using vtable dispatch; if so, it; /// substitutes a stub function which simply tail-calls through the; /// appropriate vtable slot, and if not, it substitues a stub function; /// which tail-calls objc_msgSend. Both stubs adjust the selector; /// argument to correctly point to the selector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,Integrability,message,message,37,// Second argument: a pointer to the message ref structure. Leave; // the actual argument value blank for now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:58,Integrability,message,message,58,"// Find the function to call and the mangled name for the message; // ref structure. Using a different mangled name wouldn't actually; // be a problem; it would just be a waste.; //; // The runtime currently never uses vtable dispatch for anything; // except normal, non-super message-sends.; // FIXME: don't use this for that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:277,Integrability,message,message-sends,277,"// Find the function to call and the mangled name for the message; // ref structure. Using a different mangled name wouldn't actually; // be a problem; it would just be a waste.; //; // The runtime currently never uses vtable dispatch for anything; // except normal, non-super message-sends.; // FIXME: don't use this for that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:13,Integrability,message,message,13,// Build the message ref structure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Deployability,Update,Update,3,// Update the message ref argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:14,Integrability,message,message,14,// Update the message ref argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:38,Integrability,message,message,38,// Load the function to call from the message ref table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Performance,Load,Load,3,// Load the function to call from the message ref table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:24,Integrability,message,message,24,/// Generate code for a message send expression in the nonfragile abi.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:3,Testability,Stub,Stub,3,// Stub classes are pointer-aligned. Classrefs pointing at stub classes; // must set the least significant bit set to 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:59,Testability,stub,stub,59,// Stub classes are pointer-aligned. Classrefs pointing at stub classes; // must set the least significant bit set to 1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:58,Performance,load,loaded,58,// Classrefs pointing at Objective-C stub classes must be loaded by calling; // a special runtime function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:37,Testability,stub,stub,37,// Classrefs pointing at Objective-C stub classes must be loaded by calling; // a special runtime function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:61,Integrability,interface,interface,61,/// GetClass - Return a reference to the class for the given interface; /// decl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:16,Integrability,message,message,16,/// Generates a message send where the super is the receiver. This is; /// a message send to self with special delivery semantics indicating; /// which class's method should be called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:77,Integrability,message,message,77,/// Generates a message send where the super is the receiver. This is; /// a message send to self with special delivery semantics indicating; /// which class's method should be called.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:22,Integrability,message,message,22,// If this is a class message the metaclass is passed as the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:36,Performance,load,loading,36,/// EmitObjCWeakRead - Code gen for loading value of a __weak; /// object: objc_read_weak (id *src); ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp:41,Integrability,interface,interface,41,// All other types should be Objective-C interface pointer types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCMac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:26,Integrability,Interface,Interface,26,"//==- CGObjCRuntime.cpp - Interface to Shared Objective-C Runtime Features ==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This abstract class defines the interface for Objective-C runtime-specific; // code generation. It provides some concrete helper methods for functionality; // shared between all (or most) of the Objective-C runtimes supported by clang.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:414,Integrability,interface,interface,414,"//==- CGObjCRuntime.cpp - Interface to Shared Objective-C Runtime Features ==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This abstract class defines the interface for Objective-C runtime-specific; // code generation. It provides some concrete helper methods for functionality; // shared between all (or most) of the Objective-C runtimes supported by clang.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:708,Integrability,rout,routine,708,"// We need to compute an access strategy for this bit-field. We are given the; // offset to the first byte in the bit-field, the sub-byte offset is taken; // from the original layout. We reuse the normal bit-field access strategy by; // treating this as an access to a struct where the bit-field is in byte 0,; // and adjust the containing type size as appropriate.; //; // FIXME: Note that currently we make a very conservative estimate of the; // alignment of the bit-field, because (a) it is not clear what guarantees the; // runtime makes us, and (b) we don't have a way to specify that the struct is; // at an alignment plus offset.; //; // Note, there is a subtle invariant here: we can only call this routine on; // non-synthesized ivars but we may be called for synthesized ivars. However,; // a synthesized ivar can never be a bit-field, so this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:858,Safety,safe,safe,858,"// We need to compute an access strategy for this bit-field. We are given the; // offset to the first byte in the bit-field, the sub-byte offset is taken; // from the original layout. We reuse the normal bit-field access strategy by; // treating this as an access to a struct where the bit-field is in byte 0,; // and adjust the containing type size as appropriate.; //; // FIXME: Note that currently we make a very conservative estimate of the; // alignment of the bit-field, because (a) it is not clear what guarantees the; // runtime makes us, and (b) we don't have a way to specify that the struct is; // at an alignment plus offset.; //; // Note, there is a subtle invariant here: we can only call this routine on; // non-synthesized ivars but we may be called for synthesized ivars. However,; // a synthesized ivar can never be a bit-field, so this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:25,Security,access,access,25,"// We need to compute an access strategy for this bit-field. We are given the; // offset to the first byte in the bit-field, the sub-byte offset is taken; // from the original layout. We reuse the normal bit-field access strategy by; // treating this as an access to a struct where the bit-field is in byte 0,; // and adjust the containing type size as appropriate.; //; // FIXME: Note that currently we make a very conservative estimate of the; // alignment of the bit-field, because (a) it is not clear what guarantees the; // runtime makes us, and (b) we don't have a way to specify that the struct is; // at an alignment plus offset.; //; // Note, there is a subtle invariant here: we can only call this routine on; // non-synthesized ivars but we may be called for synthesized ivars. However,; // a synthesized ivar can never be a bit-field, so this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:214,Security,access,access,214,"// We need to compute an access strategy for this bit-field. We are given the; // offset to the first byte in the bit-field, the sub-byte offset is taken; // from the original layout. We reuse the normal bit-field access strategy by; // treating this as an access to a struct where the bit-field is in byte 0,; // and adjust the containing type size as appropriate.; //; // FIXME: Note that currently we make a very conservative estimate of the; // alignment of the bit-field, because (a) it is not clear what guarantees the; // runtime makes us, and (b) we don't have a way to specify that the struct is; // at an alignment plus offset.; //; // Note, there is a subtle invariant here: we can only call this routine on; // non-synthesized ivars but we may be called for synthesized ivars. However,; // a synthesized ivar can never be a bit-field, so this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:257,Security,access,access,257,"// We need to compute an access strategy for this bit-field. We are given the; // offset to the first byte in the bit-field, the sub-byte offset is taken; // from the original layout. We reuse the normal bit-field access strategy by; // treating this as an access to a struct where the bit-field is in byte 0,; // and adjust the containing type size as appropriate.; //; // FIXME: Note that currently we make a very conservative estimate of the; // alignment of the bit-field, because (a) it is not clear what guarantees the; // runtime makes us, and (b) we don't have a way to specify that the struct is; // at an alignment plus offset.; //; // Note, there is a subtle invariant here: we can only call this routine on; // non-synthesized ivars but we may be called for synthesized ivars. However,; // a synthesized ivar can never be a bit-field, so this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:499,Usability,clear,clear,499,"// We need to compute an access strategy for this bit-field. We are given the; // offset to the first byte in the bit-field, the sub-byte offset is taken; // from the original layout. We reuse the normal bit-field access strategy by; // treating this as an access to a struct where the bit-field is in byte 0,; // and adjust the containing type size as appropriate.; //; // FIXME: Note that currently we make a very conservative estimate of the; // alignment of the bit-field, because (a) it is not clear what guarantees the; // runtime makes us, and (b) we don't have a way to specify that the struct is; // at an alignment plus offset.; //; // Note, there is a subtle invariant here: we can only call this routine on; // non-synthesized ivars but we may be called for synthesized ivars. However,; // a synthesized ivar can never be a bit-field, so this is safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:3,Energy Efficiency,Allocate,Allocate,3,"// Allocate a new CGBitFieldInfo object to describe this access.; //; // FIXME: This is incredibly wasteful, these should be uniqued or part of some; // layout object. However, this is blocked on other cleanups to the; // Objective-C code, so for now we just live with allocating a bunch of these; // objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:57,Security,access,access,57,"// Allocate a new CGBitFieldInfo object to describe this access.; //; // FIXME: This is incredibly wasteful, these should be uniqued or part of some; // layout object. However, this is blocked on other cleanups to the; // Objective-C code, so for now we just live with allocating a bunch of these; // objects.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:73,Deployability,release,release,73,// Evaluate the lock operand. This is guaranteed to dominate the; // ARC release and lock-release cleanups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:90,Deployability,release,release,90,// Evaluate the lock operand. This is guaranteed to dominate the; // ARC release and lock-release cleanups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:36,Deployability,release,release,36,// Register an all-paths cleanup to release the lock.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:52,Integrability,message,message,52,"/// Compute the pointer-to-function type to which a message send; /// should be casted in order to correctly call the given method; /// with the given arguments.; ///; /// \param method - may be null; /// \param resultType - the result type to use if there's no method; /// \param callArgs - the actual arguments, including implicit ones",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp:104,Performance,load,load,104,"// If we're emitting a method, and self is const (meaning just ARC, for now),; // and the receiver is a load of self, then self is a valid object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:29,Integrability,Interface,Interface,29,"//===----- CGObjCRuntime.h - Interface to ObjC Runtimes ---------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for Objective-C code generation. Concrete; // subclasses of this implement code generation for specific Objective-C; // runtime libraries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:63,Safety,avoid,avoid,63,// FIXME: Several methods should be pure virtual but aren't to avoid the; // partially-implemented subclass breaking.; /// Implements runtime-specific code generation functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:38,Security,access,access,38,"// Utility functions for unified ivar access. These need to; // eventually be folded into other places (the structure layout; // code).; /// Compute an offset to the given ivar, suitable for passing to; /// EmitValueForIvarAtOffset. Note that the correct handling of; /// bit-fields is carefully coordinated by these two, use caution!; ///; /// The latter overload is suitable for computing the offset of a; /// sythesized ivar.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:170,Usability,usab,usable,170,"/// Emits a try / catch statement. This function is intended to be called by; /// subclasses, and provides a generic mechanism for generating these, which; /// should be usable by all runtimes. The caller must provide the functions; /// to call when entering and exiting a \@catch() block, and the function; /// used to rethrow exceptions. If the begin and end catch functions are; /// NULL, then the function assumes that the EH personality function provides; /// the thrown object directly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:15,Integrability,synchroniz,synchronize,15,"/// Emits an \@synchronize() statement, using the \p syncEnterFn and; /// \p syncExitFn arguments as the functions called to lock and unlock; /// the object. This function can be called by subclasses that use; /// zero-cost exception handling.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:209,Availability,error,error,209,/// Get the type constant to catch for the given ObjC pointer type.; /// This is used externally to implement catching ObjC types in C++.; /// Runtimes which don't support this should add the appropriate; /// error to Sema.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:110,Integrability,protocol,protocols,110,/// Generate a category. A category contains a list of methods (and; /// accompanying metadata) and a list of protocols.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:28,Integrability,message,message,28,"/// Generate an Objective-C message send operation.; ///; /// \param Method - The method being called, this may be null if synthesizing; /// a property setter or getter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:28,Integrability,message,message,28,/// Generate an Objective-C message send operation.; ///; /// This variant allows for the call to be substituted with an optimized; /// variant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:121,Performance,optimiz,optimized,121,/// Generate an Objective-C message send operation.; ///; /// This variant allows for the call to be substituted with an optimized; /// variant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:28,Integrability,message,message,28,"/// Generate an Objective-C message send operation to the super; /// class initiated in a method for Class and with the given Self; /// object.; ///; /// \param Method - The method being called, this may be null if synthesizing; /// a property setter or getter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:21,Integrability,protocol,protocol,21,"/// Walk the list of protocol references from a class, category or; /// protocol to traverse the DAG formed from it's inheritance hierarchy. Find; /// the list of protocols that ends each walk at either a runtime; /// protocol or a non-runtime protocol with no parents. For the common case of; /// just a list of standard runtime protocols this just returns the same list; /// that was passed in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:72,Integrability,protocol,protocol,72,"/// Walk the list of protocol references from a class, category or; /// protocol to traverse the DAG formed from it's inheritance hierarchy. Find; /// the list of protocols that ends each walk at either a runtime; /// protocol or a non-runtime protocol with no parents. For the common case of; /// just a list of standard runtime protocols this just returns the same list; /// that was passed in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:163,Integrability,protocol,protocols,163,"/// Walk the list of protocol references from a class, category or; /// protocol to traverse the DAG formed from it's inheritance hierarchy. Find; /// the list of protocols that ends each walk at either a runtime; /// protocol or a non-runtime protocol with no parents. For the common case of; /// just a list of standard runtime protocols this just returns the same list; /// that was passed in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:218,Integrability,protocol,protocol,218,"/// Walk the list of protocol references from a class, category or; /// protocol to traverse the DAG formed from it's inheritance hierarchy. Find; /// the list of protocols that ends each walk at either a runtime; /// protocol or a non-runtime protocol with no parents. For the common case of; /// just a list of standard runtime protocols this just returns the same list; /// that was passed in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:244,Integrability,protocol,protocol,244,"/// Walk the list of protocol references from a class, category or; /// protocol to traverse the DAG formed from it's inheritance hierarchy. Find; /// the list of protocols that ends each walk at either a runtime; /// protocol or a non-runtime protocol with no parents. For the common case of; /// just a list of standard runtime protocols this just returns the same list; /// that was passed in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:330,Integrability,protocol,protocols,330,"/// Walk the list of protocol references from a class, category or; /// protocol to traverse the DAG formed from it's inheritance hierarchy. Find; /// the list of protocols that ends each walk at either a runtime; /// protocol or a non-runtime protocol with no parents. For the common case of; /// just a list of standard runtime protocols this just returns the same list; /// that was passed in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:118,Modifiability,inherit,inheritance,118,"/// Walk the list of protocol references from a class, category or; /// protocol to traverse the DAG formed from it's inheritance hierarchy. Find; /// the list of protocols that ends each walk at either a runtime; /// protocol or a non-runtime protocol with no parents. For the common case of; /// just a list of standard runtime protocols this just returns the same list; /// that was passed in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:38,Integrability,protocol,protocol,38,"/// Emit the code to return the named protocol as an object, as in a; /// \@protocol expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:76,Integrability,protocol,protocol,76,"/// Emit the code to return the named protocol as an object, as in a; /// \@protocol expression.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:23,Integrability,protocol,protocol,23,/// Generate the named protocol. Protocols contain method metadata but no; /// implementations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:33,Integrability,Protocol,Protocols,33,/// Generate the named protocol. Protocols contain method metadata but no; /// implementations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:32,Integrability,protocol,protocol,32,"/// GetOrEmitProtocol - Get the protocol object for the given; /// declaration, emitting it if necessary. The return value has type; /// ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:137,Integrability,Protocol,ProtocolPtrTy,137,"/// GetOrEmitProtocol - Get the protocol object for the given; /// declaration, emitting it if necessary. The return value has type; /// ProtocolPtrTy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:191,Performance,load,loads,191,"/// Generate a function preamble for a method with the specified; /// types.; // FIXME: Current this just generates the Function definition, but really this; // should also be generating the loads of the parameters, as the runtime; // should have full control over how parameters are passed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:36,Performance,optimiz,optimized,36,/// Return the runtime function for optimized setting properties.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:66,Integrability,interface,interface,66,/// GetClass - Return a reference to the class for the given; /// interface decl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:108,Safety,detect,detected,108,/// EnumerationMutationFunction - Return the function that's called by the; /// compiler when a mutation is detected during foreach iteration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h:115,Integrability,message,message,115,"/// Destroy the callee-destroyed arguments of the given method,; /// if it has any. Used for nil-receiver paths in message sends.; /// Never does anything if the method does not satisfy; /// hasParamDestroyedInCallee().; ///; /// \param callArgs - just the formal arguments, not including implicit; /// arguments such as self and cmd",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGObjCRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp:33,Integrability,Interface,Interface,33,"//===----- CGOpenCLRuntime.cpp - Interface to OpenCL Runtimes -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for OpenCL code generation. Concrete; // subclasses of this implement code generation for specific OpenCL; // runtime libraries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp:114,Modifiability,variab,variable,114,// Get the block literal from an expression derived from the block expression.; // OpenCL v2.0 s6.12.5:; // Block variable declarations are implicitly qualified with const. Therefore; // all block variables must be initialized at declaration time and may not be; // reassigned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp:197,Modifiability,variab,variables,197,// Get the block literal from an expression derived from the block expression.; // OpenCL v2.0 s6.12.5:; // Block variable declarations are implicitly qualified with const. Therefore; // all block variables must be initialized at declaration time and may not be; // reassigned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp:66,Availability,down,down,66,// The block literal may be assigned to a const variable. Chasing down; // to get the block literal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp:48,Modifiability,variab,variable,48,// The block literal may be assigned to a const variable. Chasing down; // to get the block literal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp:25,Integrability,wrap,wrapper,25,// Do not emit the block wrapper again if it has been emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h:31,Integrability,Interface,Interface,31,"//===----- CGOpenCLRuntime.h - Interface to OpenCL Runtimes -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides an abstract class for OpenCL code generation. Concrete; // subclasses of this implement code generation for specific OpenCL; // runtime libraries.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h:48,Modifiability,variab,variable,48,"/// Emit the IR required for a work-group-local variable declaration, and add; /// an entry to CGF's LocalDeclMap for D. The base class does this using; /// CodeGenFunction::EmitStaticVarDecl to emit an internal global for D.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h:168,Integrability,wrap,wrapper,168,/// Record invoke function and block literal emitted during normal; /// codegen for a block expression. The information is used by; /// emitOpenCLEnqueuedBlock to emit wrapper kernel.; ///; /// \param InvokeF invoke function emitted for the block expression.; /// \param Block block literal emitted for the block expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenCLRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:33,Integrability,Interface,Interface,33,"//===----- CGOpenMPRuntime.cpp - Interface to OpenMP Runtimes -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides a class for OpenMP runtime code generation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,Modifiability,variab,variable,10,/// Get a variable or parameter for storing global thread id; /// inside OpenMP construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:43,Modifiability,variab,variable,43,/// Get an LValue for the current ThreadID variable.; /// \return LValue for thread id variable. This LValue always has type int32*.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:87,Modifiability,variab,variable,87,/// Get an LValue for the current ThreadID variable.; /// \return LValue for thread id variable. This LValue always has type int32*.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,Modifiability,variab,variable,10,/// Get a variable or parameter for storing global thread id; /// inside OpenMP construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:6,Modifiability,variab,variable,6,/// A variable or parameter storing global thread id for OpenMP; /// constructs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,Modifiability,variab,variable,10,/// Get a variable or parameter for storing global thread id; /// inside OpenMP construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:43,Modifiability,variab,variable,43,/// Get an LValue for the current ThreadID variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:6,Modifiability,variab,variable,6,/// A variable or parameter storing global thread id for OpenMP; /// constructs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:41,Modifiability,variab,variable,41,/// Lookup the captured field decl for a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:84,Modifiability,variab,variables,84,"// If there is no outer outlined region,no need to lookup in a list of; // captured variables, we can use the original one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,Modifiability,variab,variable,10,/// Get a variable or parameter for storing global thread id; /// inside OpenMP construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:43,Modifiability,variab,variable,43,/// Get an LValue for the current ThreadID variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:127,Modifiability,variab,variable,127,// Make sure the globals captured in the provided statement are local by; // using the privatization logic. We assume the same variable is not; // captured more than once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:101,Testability,log,logic,101,// Make sure the globals captured in the provided statement are local by; // using the privatization logic. We assume the same variable is not; // captured more than once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:41,Modifiability,variab,variable,41,/// Lookup the captured field decl for a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,Modifiability,variab,variable,10,/// Get a variable or parameter for storing global thread id; /// inside OpenMP construct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:36,Modifiability,variab,variables,36,/// Private scope to capture global variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:4,Energy Efficiency,Schedul,Schedule,4,/// Schedule types for 'omp for' loops (these enumerators are taken from; /// the enum sched_type in kmp.h).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:54,Energy Efficiency,schedul,schedule,54,/// Support for OpenMP 4.5 monotonic and nonmonotonic schedule modifiers.; /// Set if the monotonic schedule modifier was present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:100,Energy Efficiency,schedul,schedule,100,/// Support for OpenMP 4.5 monotonic and nonmonotonic schedule modifiers.; /// Set if the monotonic schedule modifier was present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:28,Energy Efficiency,schedul,schedule,28,/// Set if the nonmonotonic schedule modifier was present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Performance,Perform,Perform,3,// Perform element-by-element initialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:9,Availability,down,down,9,// Drill down to the base element type on both arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:79,Modifiability,variab,variable,79,// Emit VarDecl with copy init for arrays.; // Get the address of the original variable captured in current; // captured region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:20,Modifiability,variab,variable,20,// Clean non-target variable declarations possibly used only in debug info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:19,Modifiability,variab,variable,19,"// Map ""T omp_in;"" variable to ""*omp_in_parm"" value in all expressions.; // Map ""T omp_out;"" variable to ""*omp_out_parm"" value in all expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:93,Modifiability,variab,variable,93,"// Map ""T omp_in;"" variable to ""*omp_in_parm"" value in all expressions.; // Map ""T omp_out;"" variable to ""*omp_out_parm"" value in all expressions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:30,Performance,perform,perform,30,// Temporary RAII solution to perform a push/pop stack event on the OpenMP IR; // Builder if one is present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:260,Modifiability,variab,variables,260,"// The following callback is the crucial part of clangs cleanup process.; //; // NOTE:; // Once the OpenMPIRBuilder is used to create parallel regions (and; // similar), the cancellation destination (Dest below) is determined via; // IP. That means if we have variables to finalize we split the block at IP,; // use the new block (=BB) as destination to build a JumpDest (via; // getJumpDestInCurrentScope(BB)) which then is fed to; // EmitBranchThroughCleanup. Furthermore, there will not be the need; // to push & pop an FinalizationInfo object.; // The FiniCB will still be needed but at the point where the; // OpenMPIRBuilder is asked to construct a parallel (or similar) construct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:31,Performance,cache,cached,31,// Check whether we've already cached a load of the thread id in this; // function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:40,Performance,load,load,40,// Check whether we've already cached a load of the thread id in this; // function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:54,Safety,avoid,avoid,54,"// If exceptions are enabled, do not use parameter to avoid possible crash.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:12,Performance,load,loaded,12,"// If value loaded in entry block, cache it and use it everywhere in; // function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:35,Performance,cache,cache,35,"// If value loaded in entry block, cache it and use it everywhere in; // function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:146,Performance,cache,cache,146,// This is not an outlined function region - need to call __kmpc_int32; // kmpc_global_thread_num(ident_t *loc).; // Generate thread id value and cache this value for use across the; // function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Safety,Avoid,Avoid,3,// Avoid -Wcovered-switch-default,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Safety,Avoid,Avoid,3,// Avoid -Wcovered-switch-default,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:120,Modifiability,variab,variable,120,"// Call __kmpc_threadprivate_register(&loc, &var, ctor, cctor/*NULL*/, dtor); // to register constructor/destructor for variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:104,Modifiability,variab,variable,104,// Generate function that re-emits the declaration's initializer into the; // threadprivate copy of the variable VD,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:86,Modifiability,variab,variable,86,// Generate function that emits destructor call for the threadprivate copy; // of the variable VD,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:45,Modifiability,variab,variable,45,"// Copying constructor for the threadprivate variable.; // Must be NULL - reserved by runtime, but currently it requires that this; // parameter is always NULL. Otherwise it fires assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:180,Testability,assert,assertion,180,"// Copying constructor for the threadprivate variable.; // Must be NULL - reserved by runtime, but currently it requires that this; // parameter is always NULL. Otherwise it fires assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:233,Security,access,access,233,// We need to generate a new global to hold the address of the indirectly; // called device function. Doing this allows us to keep the visibility and; // linkage of the associated function unchanged while allowing the runtime to; // access its value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:61,Safety,avoid,avoid,61,"// If the condition constant folds and can be elided, try to avoid emitting; // the condition and the dead arm of the if/else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:86,Modifiability,variab,variable,86,"// If we're inside an (outlined) parallel region, use the region info's; // thread-ID variable (it is passed in a first argument of the outlined function; // as ""kmp_int32 *gtid""). Otherwise, if we're not inside parallel region, but in; // regular serial code region, get thread ID by calling kmp_int32; // kmpc_global_thread_num(ident_t *loc), stash this thread ID in a temporary and; // return the address of that temp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:52,Availability,Mask,MaskedOpGen,52,"// if(__kmpc_masked(ident_t *, gtid, filter)) {; // MaskedOpGen();; // __kmpc_end_masked(iden_t *, gtid);; // }; // Prepare arguments and build a call to __kmpc_masked",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:34,Modifiability,variab,variables,34,"/// Given an array of pointers to variables, project the address of a; /// given variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:81,Modifiability,variab,variable,81,"/// Given an array of pointers to variables, project the address of a; /// given variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:31,Modifiability,variab,variable,31,// Pull out the pointer to the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:32,Modifiability,variab,variables,32,// Create a list of all private variables for copyprivate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:104,Energy Efficiency,schedul,schedule,104,"// Check if the loop directive is actually a doacross loop directive. In this; // case choose static, 1 schedule.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:76,Integrability,message,message,76,"// Build call void __kmpc_error(ident_t *loc, int severity, const char; // *message)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:24,Energy Efficiency,schedul,schedule,24,/// Map the OpenMP loop schedule to the runtime enumeration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:30,Energy Efficiency,schedul,schedule,30,/// Map the OpenMP distribute schedule to the runtime enumeration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:79,Energy Efficiency,schedul,schedule,79,"// OpenMP 5.0, 2.9.2 Worksharing-Loop Construct, Desription.; // If the static schedule kind is specified or if the ordered clause is; // specified, and if the nonmonotonic modifier is not specified, the effect is; // as if the monotonic modifier is specified. Otherwise, unless the monotonic; // modifier is specified, the effect is as if the nonmonotonic modifier is; // specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:73,Energy Efficiency,schedul,schedule,73,"// Call __kmpc_dispatch_init(; // ident_t *loc, kmp_int32 tid, kmp_int32 schedule,; // kmp_int[32|64] lower, kmp_int[32|64] upper,; // kmp_int[32|64] stride, kmp_int[32|64] chunk);; // If the Chunk was not specified in the clause - use default value 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Energy Efficiency,Schedul,Schedule,3,// Schedule type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Energy Efficiency,Schedul,Schedule,3,// Schedule type,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:19,Modifiability,variab,variables,19,/// List of shared variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:9,Integrability,rout,routine,9,/// Task routine.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:50,Modifiability,variab,variables,50,/// Function with call of destructors for private variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:73,Energy Efficiency,allocate,allocate,73,"// If the private variable is a local variable with lvalue ref type,; // allocate the pointer instead of the pointee type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:18,Modifiability,variab,variable,18,"// If the private variable is a local variable with lvalue ref type,; // allocate the pointer instead of the pointee type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:38,Modifiability,variab,variable,38,"// If the private variable is a local variable with lvalue ref type,; // allocate the pointer instead of the pointee type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:73,Integrability,rout,routine,73,// Build struct kmp_task_t {; // void * shareds;; // kmp_routine_entry_t routine;; // kmp_int32 part_id;; // kmp_cmplrdata_t data1;; // kmp_cmplrdata_t data2;; // For taskloops additional fields:; // kmp_uint64 lb;; // kmp_uint64 ub;; // kmp_int64 st;; // kmp_int32 liter;; // void * reductions;; // };,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:91,Modifiability,variab,variables,91,"/// Emit a privates mapping function for correct handling of private and; /// firstprivate variables.; /// \code; /// void .omp_task_privates_map.(const .privates. *noalias privs, <ty1>; /// **noalias priv1,..., <tyn> **noalias privn) {; /// *priv1 = &.privates.priv1;; /// ...;; /// *privn = &.privates.privn;; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:36,Modifiability,variab,variables,36,/// Emit initialization for private variables in task-based directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:139,Modifiability,variab,variables,139,"// For target-based directives skip 4 firstprivate arrays BasePointersArray,; // PointersArray, SizesArray, and MappersArray. The original variables for; // these arrays are not captured and we get their addresses explicitly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:16,Modifiability,variab,variable,16,"// Check if the variable is the target-based BasePointersArray,; // PointersArray, SizesArray, or MappersArray.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:38,Modifiability,variab,variables,38,// Processing for implicitly captured variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Performance,Perform,Perform,3,// Perform simple memcpy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:11,Usability,simpl,simple,11,// Perform simple memcpy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:17,Modifiability,variab,variable-sized,17,// Properly emit variable-sized array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:24,Integrability,depend,dependency,24,/// Translates internal dependency kind into the runtime kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:17,Integrability,depend,dependencies,17,// Out and InOut dependencies must use the same code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:25,Integrability,Depend,Dependencies,25,// deps[i].base_addr = &<Dependencies[i].second>;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:25,Integrability,Depend,Dependencies,25,// deps[i].len = sizeof(<Dependencies[i].second>);,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:20,Integrability,Depend,Dependencies,20,// deps[i].flags = <Dependencies[i].first>;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:11,Integrability,depend,dependency,11,// memcopy dependency data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:19,Integrability,depend,dependencies,19,// Process list of dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:30,Integrability,depend,dependencies,30,// Calculate number of depobj dependencies and regular deps with the; // iterators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:73,Modifiability,variab,variable-sized,73,// CGF.EmitVariablyModifiedType(KmpDependInfoArrayTy);; // Properly emit variable-sized array.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:16,Integrability,depend,dependencies,16,// Copy regular dependencies with iterators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:19,Integrability,depend,dependencies,19,// Process list of dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:168,Deployability,update,update,168,// Define type kmp_depend_info[<Dependencies.size()>];; // For depobj reserve one extra element to store the number of elements.; // It is required to handle depobj(x) update(in) construct.; // kmp_depend_info[<Dependencies.size()>] deps;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:32,Integrability,Depend,Dependencies,32,// Define type kmp_depend_info[<Dependencies.size()>];; // For depobj reserve one extra element to store the number of elements.; // It is required to handle depobj(x) update(in) construct.; // kmp_depend_info[<Dependencies.size()>] deps;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:211,Integrability,Depend,Dependencies,211,// Define type kmp_depend_info[<Dependencies.size()>];; // For depobj reserve one extra element to store the number of elements.; // It is required to handle depobj(x) update(in) construct.; // kmp_depend_info[<Dependencies.size()>] deps;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:11,Energy Efficiency,allocate,allocate,11,// Need to allocate on the dynamic memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:19,Integrability,depend,dependences,19,// Process list of dependences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:9,Integrability,rout,routine,9,"// NOTE: routine and part_id fields are initialized by __kmpc_omp_task_alloc(); // libcall.; // Build kmp_int32 __kmpc_omp_task_with_deps(ident_t *, kmp_int32 gtid,; // kmp_task_t *new_task, kmp_int32 ndeps, kmp_depend_info_t *dep_list,; // kmp_int32 ndeps_noalias, kmp_depend_info_t *noalias_dep_list) if dependence; // list is not empty",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:306,Integrability,depend,dependence,306,"// NOTE: routine and part_id fields are initialized by __kmpc_omp_task_alloc(); // libcall.; // Build kmp_int32 __kmpc_omp_task_with_deps(ident_t *, kmp_int32 gtid,; // kmp_task_t *new_task, kmp_int32 ndeps, kmp_depend_info_t *dep_list,; // kmp_int32 ndeps_noalias, kmp_depend_info_t *noalias_dep_list) if dependence; // list is not empty",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:182,Integrability,depend,dependence,182,"// Build void __kmpc_omp_wait_deps(ident_t *, kmp_int32 gtid,; // kmp_int32 ndeps, kmp_depend_info_t *dep_list, kmp_int32; // ndeps_noalias, kmp_depend_info_t *noalias_dep_list); if dependence info; // is specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:9,Integrability,rout,routine,9,"// NOTE: routine and part_id fields are initialized by __kmpc_omp_task_alloc(); // libcall.; // Call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t *task, int; // if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int nogroup, int; // sched, kmp_uint64 grainsize, void *task_dup);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:155,Modifiability,Variab,Variable,155,/// Emit reduction operation for each element of array (required for; /// array sections) LHS op = RHS.; /// \param Type Type of array.; /// \param LHSVar Variable on the left side of the reduction operation; /// (references element of array in original variable).; /// \param RHSVar Variable on the right side of the reduction operation; /// (references element of array in original variable).; /// \param RedOpGen Generator of reduction operation with use of LHSVar and; /// RHSVar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:254,Modifiability,variab,variable,254,/// Emit reduction operation for each element of array (required for; /// array sections) LHS op = RHS.; /// \param Type Type of array.; /// \param LHSVar Variable on the left side of the reduction operation; /// (references element of array in original variable).; /// \param RHSVar Variable on the right side of the reduction operation; /// (references element of array in original variable).; /// \param RedOpGen Generator of reduction operation with use of LHSVar and; /// RHSVar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:284,Modifiability,Variab,Variable,284,/// Emit reduction operation for each element of array (required for; /// array sections) LHS op = RHS.; /// \param Type Type of array.; /// \param LHSVar Variable on the left side of the reduction operation; /// (references element of array in original variable).; /// \param RHSVar Variable on the right side of the reduction operation; /// (references element of array in original variable).; /// \param RedOpGen Generator of reduction operation with use of LHSVar and; /// RHSVar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:384,Modifiability,variab,variable,384,/// Emit reduction operation for each element of array (required for; /// array sections) LHS op = RHS.; /// \param Type Type of array.; /// \param LHSVar Variable on the left side of the reduction operation; /// (references element of array in original variable).; /// \param RHSVar Variable on the right side of the reduction operation; /// (references element of array in original variable).; /// \param RedOpGen Generator of reduction operation with use of LHSVar and; /// RHSVar.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Performance,Perform,Perform,3,// Perform element-by-element initialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:9,Availability,down,down,9,// Drill down to the base element type on both arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:50,Usability,simpl,simple,50,"/// Emit reduction combiner. If the combiner is a simple expression emit it as; /// is, otherwise consider it as combiner of UDR decl and emit it as a call of; /// UDR combiner function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:48,Modifiability,variab,variable,48,// Emit reduction for array subscript or single variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:48,Modifiability,variab,variable,48,// Emit reduction for array subscript or single variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:888,Usability,Simpl,SimpleReduction,888,"// Next code should be emitted for reduction:; //; // static kmp_critical_name lock = { 0 };; //; // void reduce_func(void *lhs[<n>], void *rhs[<n>]) {; // *(Type0*)lhs[0] = ReductionOperation0(*(Type0*)lhs[0], *(Type0*)rhs[0]);; // ...; // *(Type<n>-1*)lhs[<n>-1] = ReductionOperation<n>-1(*(Type<n>-1*)lhs[<n>-1],; // *(Type<n>-1*)rhs[<n>-1]);; // }; //; // ...; // void *RedList[<n>] = {&<RHSExprs>[0], ..., &<RHSExprs>[<n>-1]};; // switch (__kmpc_reduce{_nowait}(<loc>, <gtid>, <n>, sizeof(RedList),; // RedList, reduce_func, &<lock>)) {; // case 1:; // ...; // <LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]);; // ...; // __kmpc_end_reduce{_nowait}(<loc>, <gtid>, &<lock>);; // break;; // case 2:; // ...; // Atomic(<LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]));; // ...; // [__kmpc_end_reduce(<loc>, <gtid>, &<lock>);]; // break;; // default:;; // }; //; // if SimpleReduction is true, only the next code is generated:; // ...; // <LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]);; // ...",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:32,Modifiability,variab,variables,32,"// 1. Build a list of reduction variables.; // void *RedList[<n>] = {<ReductionVars>[0], ..., <ReductionVars>[<n>-1]};",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:15,Deployability,update,update,15,// Try to emit update expression as a simple atomic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:38,Usability,simpl,simple,38,// Try to emit update expression as a simple atomic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:55,Modifiability,variab,variable,55,// Emit atomic reduction for array subscript or single variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:55,Modifiability,variab,variables,55,"/// Generates unique name for artificial threadprivate variables.; /// Format is: <Prefix> ""."" <Decl_mangled_name> ""_"" ""<Decl_start_loc_raw_enc>""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:92,Modifiability,variab,variable,92,"// If the size of the reduction item is non-constant, load it from global; // threadprivate variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:54,Performance,load,load,54,"// If the size of the reduction item is non-constant, load it from global; // threadprivate variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:92,Modifiability,variab,variable,92,"// If the size of the reduction item is non-constant, load it from global; // threadprivate variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:54,Performance,load,load,54,"// If the size of the reduction item is non-constant, load it from global; // threadprivate variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:21,Modifiability,variab,variables,21,// Remap lhs and rhs variables to the addresses of the function arguments.; // %lhs = bitcast void* %arg0 to <type>*; // %rhs = bitcast void* %arg1 to <type>*,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:31,Modifiability,variab,variable,31,// Pull out the pointer to the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:31,Modifiability,variab,variable,31,// Pull out the pointer to the variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:92,Modifiability,variab,variable,92,"// If the size of the reduction item is non-constant, load it from global; // threadprivate variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:54,Performance,load,load,54,"// If the size of the reduction item is non-constant, load it from global; // threadprivate variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:262,Integrability,rout,routine,262,// Build typedef struct:; // kmp_taskred_input {; // void *reduce_shar; // shared reduction item; // void *reduce_orig; // original reduction item used for initialization; // size_t reduce_size; // size of data item; // void *reduce_init; // data initialization routine; // void *reduce_fini; // data finalization routine; // void *reduce_comb; // data combiner routine; // kmp_task_red_flags_t flags; // flags for additional info from compiler; // } kmp_taskred_input_t;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:314,Integrability,rout,routine,314,// Build typedef struct:; // kmp_taskred_input {; // void *reduce_shar; // shared reduction item; // void *reduce_orig; // original reduction item used for initialization; // size_t reduce_size; // size of data item; // void *reduce_init; // data initialization routine; // void *reduce_fini; // data finalization routine; // void *reduce_comb; // data combiner routine; // kmp_task_red_flags_t flags; // flags for additional info from compiler; // } kmp_taskred_input_t;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:362,Integrability,rout,routine,362,// Build typedef struct:; // kmp_taskred_input {; // void *reduce_shar; // shared reduction item; // void *reduce_orig; // original reduction item used for initialization; // size_t reduce_size; // size of data item; // void *reduce_init; // data initialization routine; // void *reduce_fini; // data finalization routine; // void *reduce_comb; // data combiner routine; // kmp_task_red_flags_t flags; // flags for additional info from compiler; // } kmp_taskred_input_t;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:254,Modifiability,variab,variables,254,// We use delayed creation/initialization for VLAs and array sections. It is; // required because runtime does not provide the way to pass the sizes of; // VLAs/array sections to initializer/combiner/finalizer functions. Instead; // threadprivate global variables are used to store these values and use; // them in the functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:29,Modifiability,variab,variable,29,// Emit threadprivate global variable if the type is non-constant; // (Sizes.second = nullptr).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:39,Integrability,depend,dependences,39,// TODO: Need to support taskwait with dependences in the OpenMPIRBuilder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:216,Integrability,depend,dependence,216,"// Build void __kmpc_omp_taskwait_deps_51(ident_t *, kmp_int32 gtid,; // kmp_int32 ndeps, kmp_depend_info_t *dep_list, kmp_int32; // ndeps_noalias, kmp_depend_info_t *noalias_dep_list,; // kmp_int32 has_no_wait); if dependence info is specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:87,Usability,simpl,simple,87,// We can skip constant expressions.; // We can skip expressions with trivial calls or simple expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:29,Usability,clear,clear,29,"// TODO: The standard is not clear how to resolve two thread limit clauses,; // let's pick the teams one if it's present, otherwise the target one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:177,Integrability,interface,interface,177,"// Utility to handle information from clauses associated with a given; // construct that use mappable expressions (e.g. 'map' clause, 'to' clause).; // It provides a convenient interface to obtain the information and generate; // code for that information.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:8,Modifiability,variab,variable,8,/// The variable declaration used for the data mapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:29,Modifiability,variab,variables,29,"/// Set of all first private variables in the current directive.; /// bool data is set to true if the variable is implicitly marked as; /// firstprivate, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:102,Modifiability,variab,variable,102,"/// Set of all first private variables in the current directive.; /// bool data is set to true if the variable is implicitly marked as; /// firstprivate, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:13,Deployability,release,release,13,"// alloc and release is the default behavior in the runtime library, i.e.; // if we don't pass any bits alloc/release that is what the runtime is; // going to do. Therefore, we don't need to signal anything for these two; // type modifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:110,Deployability,release,release,110,"// alloc and release is the default behavior in the runtime library, i.e.; // if we don't pass any bits alloc/release that is what the runtime is; // going to do. Therefore, we don't need to signal anything for these two; // type modifiers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:194,Availability,fault,fault,194,"// If we don't have a constant dimension length, we have to consider; // the current section as having any size, so it is not necessarily; // unitary. If it happen to be unity size, that's user fault.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:5220,Energy Efficiency,allocate,allocate,5220,"eof(S2*), MEMBER_OF(1); // &(ps->ps), &(ps->ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ | FROM; //; // map(ps->ps->ps->ps); // ps, &(ps->ps), sizeof(S2*), TARGET_PARAM; // ps, &(ps->ps), sizeof(S2*), MEMBER_OF(1); // &(ps->ps), &(ps->ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ; // &(ps->ps->ps), &(ps->ps->ps->ps), sizeof(S2*), PTR_AND_OBJ | TO | FROM; //; // map(to: ps->ps->ps->s.f[:22]); // ps, &(ps->ps), sizeof(S2*), TARGET_PARAM; // ps, &(ps->ps), sizeof(S2*), MEMBER_OF(1); // &(ps->ps), &(ps->ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ; // &(ps->ps->ps), &(ps->ps->ps->s.f[0]), 22*sizeof(float), PTR_AND_OBJ | TO; //; // map(to: s.f[:22]) map(from: s.p[:33]); // &s, &(s.f[0]), 50*sizeof(float) + sizeof(struct S1) +; // sizeof(double*) (**), TARGET_PARAM; // &s, &(s.f[0]), 22*sizeof(float), MEMBER_OF(1) | TO; // &s, &(s.p), sizeof(double*), MEMBER_OF(1); // &(s.p), &(s.p[0]), 33*sizeof(double), MEMBER_OF(1) | PTR_AND_OBJ | FROM; // (*) allocate contiguous space needed to fit all mapped members even if; // we allocate space for members not mapped (in this example,; // s.f[22..49] and s.s are not mapped, yet we must allocate space for; // them as well because they fall between &s.f[0] and &s.p); //; // map(from: s.f[:22]) map(to: ps->p[:33]); // &s, &(s.f[0]), 22*sizeof(float), TARGET_PARAM | FROM; // ps, &(ps->p), sizeof(S2*), TARGET_PARAM; // ps, &(ps->p), sizeof(double*), MEMBER_OF(2) (*); // &(ps->p), &(ps->p[0]), 33*sizeof(double), MEMBER_OF(2) | PTR_AND_OBJ | TO; // (*) the struct this entry pertains to is the 2nd element in the list of; // arguments, hence MEMBER_OF(2); //; // map(from: s.f[:22], s.s) map(to: ps->p[:33]); // &s, &(s.f[0]), 50*sizeof(float) + sizeof(struct S1), TARGET_PARAM; // &s, &(s.f[0]), 22*sizeof(float), MEMBER_OF(1) | FROM; // &s, &(s.s), sizeof(struct S1), MEMBER_OF(1) | FROM; // ps, &(ps->p), sizeof(S2*), TARGET_PARAM; // ps, &(ps->p), sizeof(double*), MEMBER_OF(4) (*); // &(ps->p), &(ps->p[0]), 33*sizeof(double), MEMBER",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:5294,Energy Efficiency,allocate,allocate,5294,"eof(S2*), MEMBER_OF(1); // &(ps->ps), &(ps->ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ | FROM; //; // map(ps->ps->ps->ps); // ps, &(ps->ps), sizeof(S2*), TARGET_PARAM; // ps, &(ps->ps), sizeof(S2*), MEMBER_OF(1); // &(ps->ps), &(ps->ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ; // &(ps->ps->ps), &(ps->ps->ps->ps), sizeof(S2*), PTR_AND_OBJ | TO | FROM; //; // map(to: ps->ps->ps->s.f[:22]); // ps, &(ps->ps), sizeof(S2*), TARGET_PARAM; // ps, &(ps->ps), sizeof(S2*), MEMBER_OF(1); // &(ps->ps), &(ps->ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ; // &(ps->ps->ps), &(ps->ps->ps->s.f[0]), 22*sizeof(float), PTR_AND_OBJ | TO; //; // map(to: s.f[:22]) map(from: s.p[:33]); // &s, &(s.f[0]), 50*sizeof(float) + sizeof(struct S1) +; // sizeof(double*) (**), TARGET_PARAM; // &s, &(s.f[0]), 22*sizeof(float), MEMBER_OF(1) | TO; // &s, &(s.p), sizeof(double*), MEMBER_OF(1); // &(s.p), &(s.p[0]), 33*sizeof(double), MEMBER_OF(1) | PTR_AND_OBJ | FROM; // (*) allocate contiguous space needed to fit all mapped members even if; // we allocate space for members not mapped (in this example,; // s.f[22..49] and s.s are not mapped, yet we must allocate space for; // them as well because they fall between &s.f[0] and &s.p); //; // map(from: s.f[:22]) map(to: ps->p[:33]); // &s, &(s.f[0]), 22*sizeof(float), TARGET_PARAM | FROM; // ps, &(ps->p), sizeof(S2*), TARGET_PARAM; // ps, &(ps->p), sizeof(double*), MEMBER_OF(2) (*); // &(ps->p), &(ps->p[0]), 33*sizeof(double), MEMBER_OF(2) | PTR_AND_OBJ | TO; // (*) the struct this entry pertains to is the 2nd element in the list of; // arguments, hence MEMBER_OF(2); //; // map(from: s.f[:22], s.s) map(to: ps->p[:33]); // &s, &(s.f[0]), 50*sizeof(float) + sizeof(struct S1), TARGET_PARAM; // &s, &(s.f[0]), 22*sizeof(float), MEMBER_OF(1) | FROM; // &s, &(s.s), sizeof(struct S1), MEMBER_OF(1) | FROM; // ps, &(ps->p), sizeof(S2*), TARGET_PARAM; // ps, &(ps->p), sizeof(double*), MEMBER_OF(4) (*); // &(ps->p), &(ps->p[0]), 33*sizeof(double), MEMBER",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:5402,Energy Efficiency,allocate,allocate,5402,"T_PARAM; // ps, &(ps->ps), sizeof(S2*), MEMBER_OF(1); // &(ps->ps), &(ps->ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ; // &(ps->ps->ps), &(ps->ps->ps->ps), sizeof(S2*), PTR_AND_OBJ | TO | FROM; //; // map(to: ps->ps->ps->s.f[:22]); // ps, &(ps->ps), sizeof(S2*), TARGET_PARAM; // ps, &(ps->ps), sizeof(S2*), MEMBER_OF(1); // &(ps->ps), &(ps->ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ; // &(ps->ps->ps), &(ps->ps->ps->s.f[0]), 22*sizeof(float), PTR_AND_OBJ | TO; //; // map(to: s.f[:22]) map(from: s.p[:33]); // &s, &(s.f[0]), 50*sizeof(float) + sizeof(struct S1) +; // sizeof(double*) (**), TARGET_PARAM; // &s, &(s.f[0]), 22*sizeof(float), MEMBER_OF(1) | TO; // &s, &(s.p), sizeof(double*), MEMBER_OF(1); // &(s.p), &(s.p[0]), 33*sizeof(double), MEMBER_OF(1) | PTR_AND_OBJ | FROM; // (*) allocate contiguous space needed to fit all mapped members even if; // we allocate space for members not mapped (in this example,; // s.f[22..49] and s.s are not mapped, yet we must allocate space for; // them as well because they fall between &s.f[0] and &s.p); //; // map(from: s.f[:22]) map(to: ps->p[:33]); // &s, &(s.f[0]), 22*sizeof(float), TARGET_PARAM | FROM; // ps, &(ps->p), sizeof(S2*), TARGET_PARAM; // ps, &(ps->p), sizeof(double*), MEMBER_OF(2) (*); // &(ps->p), &(ps->p[0]), 33*sizeof(double), MEMBER_OF(2) | PTR_AND_OBJ | TO; // (*) the struct this entry pertains to is the 2nd element in the list of; // arguments, hence MEMBER_OF(2); //; // map(from: s.f[:22], s.s) map(to: ps->p[:33]); // &s, &(s.f[0]), 50*sizeof(float) + sizeof(struct S1), TARGET_PARAM; // &s, &(s.f[0]), 22*sizeof(float), MEMBER_OF(1) | FROM; // &s, &(s.s), sizeof(struct S1), MEMBER_OF(1) | FROM; // ps, &(ps->p), sizeof(S2*), TARGET_PARAM; // ps, &(ps->p), sizeof(double*), MEMBER_OF(4) (*); // &(ps->p), &(ps->p[0]), 33*sizeof(double), MEMBER_OF(4) | PTR_AND_OBJ | TO; // (*) the struct this entry pertains to is the 4th element in the list; // of arguments, hence MEMBER_OF(4); // Track if the map informati",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:1939,Performance,optimiz,optimizes,1939,"R_AND_OBJ; // in unified shared memory mode or for local pointers; // p, &p[1], 24*sizeof(float), TARGET_PARAM | TO | FROM; //; // map((*a)[0:3]); // &(*a), &(*a), sizeof(pointer), TARGET_PARAM | TO | FROM; // &(*a), &(*a)[0], 3*sizeof(int), PTR_AND_OBJ | TO | FROM; //; // map(**a); // &(*a), &(*a), sizeof(pointer), TARGET_PARAM | TO | FROM; // &(*a), &(**a), sizeof(int), PTR_AND_OBJ | TO | FROM; //; // map(s); // &s, &s, sizeof(S2), TARGET_PARAM | TO | FROM; //; // map(s.i); // &s, &(s.i), sizeof(int), TARGET_PARAM | TO | FROM; //; // map(s.s.f); // &s, &(s.s.f[0]), 50*sizeof(float), TARGET_PARAM | TO | FROM; //; // map(s.p); // &s, &(s.p), sizeof(double*), TARGET_PARAM | TO | FROM; //; // map(to: s.p[:22]); // &s, &(s.p), sizeof(double*), TARGET_PARAM (*); // &s, &(s.p), sizeof(double*), MEMBER_OF(1) (**); // &(s.p), &(s.p[0]), 22*sizeof(double),; // MEMBER_OF(1) | PTR_AND_OBJ | TO (***); // (*) alloc space for struct members, only this is a target parameter; // (**) map the pointer (nothing to be mapped in this example) (the compiler; // optimizes this entry out, same in the examples below); // (***) map the pointee (map: to); //; // map(to: s.ref); // &s, &(s.ref), sizeof(int*), TARGET_PARAM (*); // &s, &(s.ref), sizeof(int), MEMBER_OF(1) | PTR_AND_OBJ | TO (***); // (*) alloc space for struct members, only this is a target parameter; // (**) map the pointer (nothing to be mapped in this example) (the compiler; // optimizes this entry out, same in the examples below); // (***) map the pointee (map: to); //; // map(s.ps); // &s, &(s.ps), sizeof(S2*), TARGET_PARAM | TO | FROM; //; // map(from: s.ps->s.i); // &s, &(s.ps), sizeof(S2*), TARGET_PARAM; // &s, &(s.ps), sizeof(S2*), MEMBER_OF(1); // &(s.ps), &(s.ps->s.i), sizeof(int), MEMBER_OF(1) | PTR_AND_OBJ | FROM; //; // map(to: s.ps->ps); // &s, &(s.ps), sizeof(S2*), TARGET_PARAM; // &s, &(s.ps), sizeof(S2*), MEMBER_OF(1); // &(s.ps), &(s.ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ | TO; //; // map(s.ps->ps->p",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:2324,Performance,optimiz,optimizes,2324," TO | FROM; //; // map(s); // &s, &s, sizeof(S2), TARGET_PARAM | TO | FROM; //; // map(s.i); // &s, &(s.i), sizeof(int), TARGET_PARAM | TO | FROM; //; // map(s.s.f); // &s, &(s.s.f[0]), 50*sizeof(float), TARGET_PARAM | TO | FROM; //; // map(s.p); // &s, &(s.p), sizeof(double*), TARGET_PARAM | TO | FROM; //; // map(to: s.p[:22]); // &s, &(s.p), sizeof(double*), TARGET_PARAM (*); // &s, &(s.p), sizeof(double*), MEMBER_OF(1) (**); // &(s.p), &(s.p[0]), 22*sizeof(double),; // MEMBER_OF(1) | PTR_AND_OBJ | TO (***); // (*) alloc space for struct members, only this is a target parameter; // (**) map the pointer (nothing to be mapped in this example) (the compiler; // optimizes this entry out, same in the examples below); // (***) map the pointee (map: to); //; // map(to: s.ref); // &s, &(s.ref), sizeof(int*), TARGET_PARAM (*); // &s, &(s.ref), sizeof(int), MEMBER_OF(1) | PTR_AND_OBJ | TO (***); // (*) alloc space for struct members, only this is a target parameter; // (**) map the pointer (nothing to be mapped in this example) (the compiler; // optimizes this entry out, same in the examples below); // (***) map the pointee (map: to); //; // map(s.ps); // &s, &(s.ps), sizeof(S2*), TARGET_PARAM | TO | FROM; //; // map(from: s.ps->s.i); // &s, &(s.ps), sizeof(S2*), TARGET_PARAM; // &s, &(s.ps), sizeof(S2*), MEMBER_OF(1); // &(s.ps), &(s.ps->s.i), sizeof(int), MEMBER_OF(1) | PTR_AND_OBJ | FROM; //; // map(to: s.ps->ps); // &s, &(s.ps), sizeof(S2*), TARGET_PARAM; // &s, &(s.ps), sizeof(S2*), MEMBER_OF(1); // &(s.ps), &(s.ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ | TO; //; // map(s.ps->ps->ps); // &s, &(s.ps), sizeof(S2*), TARGET_PARAM; // &s, &(s.ps), sizeof(S2*), MEMBER_OF(1); // &(s.ps), &(s.ps->ps), sizeof(S2*), MEMBER_OF(1) | PTR_AND_OBJ; // &(s.ps->ps), &(s.ps->ps->ps), sizeof(S2*), PTR_AND_OBJ | TO | FROM; //; // map(to: s.ps->ps->s.f[:22]); // &s, &(s.ps), sizeof(S2*), TARGET_PARAM; // &s, &(s.ps), sizeof(S2*), MEMBER_OF(1); // &(s.ps), &(s.ps->ps), sizeof(S2*), ME",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:12,Modifiability,variab,variable,12,"// When the variable is on a declare target link or in a to clause with; // unified memory, a reference is needed to hold the host/device address; // of the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:157,Modifiability,variab,variable,157,"// When the variable is on a declare target link or in a to clause with; // unified memory, a reference is needed to hold the host/device address; // of the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:36,Modifiability,variab,variable,36,// The base is the reference to the variable.; // BP = &Var.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,Modifiability,variab,variable,10,"// If the variable is a pointer and is being dereferenced (i.e. is not; // the last component), the base has to be the pointer itself, not its; // reference. References are ignored for mapping purposes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:192,Modifiability,variab,variable,192,"// No need to generate individual map information for the pointer, it; // can be associated with the combined storage if shared memory mode is; // active or the base declaration is not global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:615,Modifiability,variab,variable,615,"// Track whether a component of the list should be marked as MEMBER_OF some; // combined entry (for partial structs). Only the first PTR_AND_OBJ entry; // in a component list should be marked as MEMBER_OF, all subsequent entries; // do not belong to the base struct. E.g.; // struct S2 s;; // s.ps->ps->ps->f[:]; // (1) (2) (3) (4); // ps(1) is a member pointer, ps(2) is a pointee of ps(1), so it is a; // PTR_AND_OBJ entry; the PTR is ps(1), so MEMBER_OF the base struct. ps(3); // is the pointee of ps(2) which is not member of struct s, so it should not; // be marked as such (it is still PTR_AND_OBJ).; // The variable is initialized to false so that PTR_AND_OBJ entries which; // are not struct members are not considered (e.g. array of pointers to; // data).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Modifiability,Variab,Variable,3,"// Variable keeping track of whether or not we have encountered a component; // in the component list which is a member expression. Useful when we have a; // pointer or a final array section, in which case it is the previous; // component in the list which tells us whether we have a member expression.; // E.g. X.f[:]; // While processing the final array section ""[:]"" it is ""f"" which tells us; // whether we are dealing with a member of a declared struct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:42,Modifiability,inherit,inherits,42,"// If Mapper is valid, the last component inherits the mapper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:86,Deployability,update,updated,86,// Set placeholder value MEMBER_OF=FFFF to indicate that the flag; // should be later updated with the correct value of MEMBER_OF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Deployability,Update,Update,3,// Update info about the lowest and highest elements for this struct,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:37,Energy Efficiency,allocate,allocate,37,// If ran into the whole component - allocate the space for the whole; // record.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:415,Deployability,update,update,415,"// Collect info for non-contiguous. Notice that offset, count, and stride; // are only meaningful for array-section, so we insert a null for anything; // other than array-section.; // Also, the size of offset, count, and stride are not the same as; // pointers, base_pointers, sizes, or dims. Instead, the size of offset,; // count, and stride are the same as the number of non-contiguous; // declaration in target update to/from clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:19,Modifiability,variab,variable,19,// A first private variable captured by reference will use only the; // 'private ptr' and 'map to' flag. Return the right flags if the captured; // declaration is known as first-private in this handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:291,Availability,fault,fault,291,"// Look at the use_device_ptr and use_device_addr clauses information and; // mark the existing map entries as such. If there is no map information for; // an entry in the use_device_ptr and use_device_addr list, we create one; // with map type 'alloc' and zero size section. It is the user fault if that; // was not mapped before. If there is no map information and the pointer is; // a struct member, then we defer the emission of that entry until the whole; // struct has been processed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:250,Availability,fault,fault,250,"// Look at the use_device_ptr clause information and mark the existing map; // entries as such. If there is no map information for an entry in the; // use_device_ptr list, we create one with map type 'alloc' and zero size; // section. It is the user fault if that was not mapped before. If there is; // no map information and the pointer is a struct member, then we defer the; // emission of that entry until the whole struct has been processed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:82,Availability,error,error,82,// Check whether a value was added to either CurInfo or; // StructBaseCurInfo and error if no value was added to either of; // them:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:33,Deployability,update,updated,33,"// If StructBaseCurInfo has been updated this iteration then work on; // the first new entry added to it i.e. make sure that when multiple; // values are added to any of the lists, the first value added is; // being modified by the assignments below (not the last value; // added).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:104,Deployability,update,updated,104,"// Entry is RETURN_PARAM. Also, set the placeholder value; // MEMBER_OF=FFFF so that the entry is later updated with the; // correct value of MEMBER_OF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:124,Deployability,update,updated,124,"// Entry is PTR_AND_OBJ and RETURN_PARAM. Also, set the; // placeholder value MEMBER_OF=FFFF so that the entry is later; // updated with the correct value of MEMBER_OF.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:106,Modifiability,variab,variable,106,"// OpenMP 5.2 148:21:; // If the target construct is within a class non-static member function,; // and a variable is an accessible data member of the object for which the; // non-static data member function is invoked, the variable is treated as; // if the this[:1] expression had appeared in a map clause with a map-type; // of tofrom.; // Emit this[:1]",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:224,Modifiability,variab,variable,224,"// OpenMP 5.2 148:21:; // If the target construct is within a class non-static member function,; // and a variable is an accessible data member of the object for which the; // non-static data member function is invoked, the variable is treated as; // if the this[:1] expression had appeared in a map clause with a map-type; // of tofrom.; // Emit this[:1]",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:121,Security,access,accessible,121,"// OpenMP 5.2 148:21:; // If the target construct is within a class non-static member function,; // and a variable is an accessible data member of the object for which the; // non-static data member function is invoked, the variable is treated as; // if the this[:1] expression had appeared in a map clause with a map-type; // of tofrom.; // Emit this[:1]",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:94,Energy Efficiency,allocate,allocate,94,"// If any element has the present modifier, then make sure the runtime; // doesn't attempt to allocate the struct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:38,Modifiability,variab,variables,38,/// Emit capture info for lambdas for variables captured by reference.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:33,Modifiability,variab,variables,33,// Are we dealing with different variables/fields?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:33,Modifiability,variab,variables,33,// Are we dealing with different variables/fields?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:56,Integrability,depend,depend,56,"// Associated with a capture, because the mapping flags depend on it.; // Go through all of the elements with the overlapped elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:292,Energy Efficiency,Allocate,Allocate,292,"/// Emit the user-defined mapper function. The code generation follows the; /// pattern in the example below.; /// \code; /// void .omp_mapper.<type_name>.<mapper_id>.(void *rt_mapper_handle,; /// void *base, void *begin,; /// int64_t size, int64_t type,; /// void *name = nullptr) {; /// // Allocate space for an array section first or add a base/begin for; /// // pointer dereference.; /// if ((size > 1 || (base != begin && maptype.IsPtrAndObj)) &&; /// !maptype.IsDelete); /// __tgt_push_mapper_component(rt_mapper_handle, base, begin,; /// size*sizeof(Ty), clearToFromMember(type));; /// // Map members.; /// for (unsigned i = 0; i < size; i++) {; /// // For each component specified by this mapper:; /// for (auto c : begin[i]->all_components) {; /// if (c.hasMapper()); /// (*c.Mapper())(rt_mapper_handle, c.arg_base, c.arg_begin, c.arg_size,; /// c.arg_type, c.arg_name);; /// else; /// __tgt_push_mapper_component(rt_mapper_handle, c.arg_base,; /// c.arg_begin, c.arg_size, c.arg_type,; /// c.arg_name);; /// }; /// }; /// // Delete the array section.; /// if (size > 1 && maptype.IsDelete); /// __tgt_push_mapper_component(rt_mapper_handle, base, begin,; /// size*sizeof(Ty), clearToFromMember(type));; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:562,Usability,clear,clearToFromMember,562,"/// Emit the user-defined mapper function. The code generation follows the; /// pattern in the example below.; /// \code; /// void .omp_mapper.<type_name>.<mapper_id>.(void *rt_mapper_handle,; /// void *base, void *begin,; /// int64_t size, int64_t type,; /// void *name = nullptr) {; /// // Allocate space for an array section first or add a base/begin for; /// // pointer dereference.; /// if ((size > 1 || (base != begin && maptype.IsPtrAndObj)) &&; /// !maptype.IsDelete); /// __tgt_push_mapper_component(rt_mapper_handle, base, begin,; /// size*sizeof(Ty), clearToFromMember(type));; /// // Map members.; /// for (unsigned i = 0; i < size; i++) {; /// // For each component specified by this mapper:; /// for (auto c : begin[i]->all_components) {; /// if (c.hasMapper()); /// (*c.Mapper())(rt_mapper_handle, c.arg_base, c.arg_begin, c.arg_size,; /// c.arg_type, c.arg_name);; /// else; /// __tgt_push_mapper_component(rt_mapper_handle, c.arg_base,; /// c.arg_begin, c.arg_size, c.arg_type,; /// c.arg_name);; /// }; /// }; /// // Delete the array section.; /// if (size > 1 && maptype.IsDelete); /// __tgt_push_mapper_component(rt_mapper_handle, base, begin,; /// size*sizeof(Ty), clearToFromMember(type));; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:1186,Usability,clear,clearToFromMember,1186,"/// Emit the user-defined mapper function. The code generation follows the; /// pattern in the example below.; /// \code; /// void .omp_mapper.<type_name>.<mapper_id>.(void *rt_mapper_handle,; /// void *base, void *begin,; /// int64_t size, int64_t type,; /// void *name = nullptr) {; /// // Allocate space for an array section first or add a base/begin for; /// // pointer dereference.; /// if ((size > 1 || (base != begin && maptype.IsPtrAndObj)) &&; /// !maptype.IsDelete); /// __tgt_push_mapper_component(rt_mapper_handle, base, begin,; /// size*sizeof(Ty), clearToFromMember(type));; /// // Map members.; /// for (unsigned i = 0; i < size; i++) {; /// // For each component specified by this mapper:; /// for (auto c : begin[i]->all_components) {; /// if (c.hasMapper()); /// (*c.Mapper())(rt_mapper_handle, c.arg_base, c.arg_begin, c.arg_size,; /// c.arg_type, c.arg_name);; /// else; /// __tgt_push_mapper_component(rt_mapper_handle, c.arg_base,; /// c.arg_begin, c.arg_size, c.arg_type,; /// c.arg_name);; /// }; /// }; /// // Delete the array section.; /// if (size > 1 && maptype.IsDelete); /// __tgt_push_mapper_component(rt_mapper_handle, base, begin,; /// size*sizeof(Ty), clearToFromMember(type));; /// }; /// \endcode",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:26,Modifiability,variab,variable,26,// Privatize the declared variable of mapper to be the current array element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:66,Modifiability,variab,variables,66,// Get map clause information. Fill up the arrays with all mapped variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:391,Deployability,release,release,391,"// Combine the map type inherited from user-defined mapper with that; // specified in the program. According to the OMP_MAP_TO and OMP_MAP_FROM; // bits of the \a MapType, which is the input argument of the mapper; // function, the following code will set the OMP_MAP_TO and OMP_MAP_FROM; // bits of MemberMapType.; // [OpenMP 5.0], 1.2.6. map-type decay.; // | alloc | to | from | tofrom | release | delete; // ----------------------------------------------------------; // alloc | alloc | alloc | alloc | alloc | release | delete; // to | alloc | to | alloc | to | release | delete; // from | alloc | alloc | from | from | release | delete; // tofrom | alloc | to | from | tofrom | release | delete",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:515,Deployability,release,release,515,"// Combine the map type inherited from user-defined mapper with that; // specified in the program. According to the OMP_MAP_TO and OMP_MAP_FROM; // bits of the \a MapType, which is the input argument of the mapper; // function, the following code will set the OMP_MAP_TO and OMP_MAP_FROM; // bits of MemberMapType.; // [OpenMP 5.0], 1.2.6. map-type decay.; // | alloc | to | from | tofrom | release | delete; // ----------------------------------------------------------; // alloc | alloc | alloc | alloc | alloc | release | delete; // to | alloc | to | alloc | to | release | delete; // from | alloc | alloc | from | from | release | delete; // tofrom | alloc | to | from | tofrom | release | delete",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:567,Deployability,release,release,567,"// Combine the map type inherited from user-defined mapper with that; // specified in the program. According to the OMP_MAP_TO and OMP_MAP_FROM; // bits of the \a MapType, which is the input argument of the mapper; // function, the following code will set the OMP_MAP_TO and OMP_MAP_FROM; // bits of MemberMapType.; // [OpenMP 5.0], 1.2.6. map-type decay.; // | alloc | to | from | tofrom | release | delete; // ----------------------------------------------------------; // alloc | alloc | alloc | alloc | alloc | release | delete; // to | alloc | to | alloc | to | release | delete; // from | alloc | alloc | from | from | release | delete; // tofrom | alloc | to | from | tofrom | release | delete",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:625,Deployability,release,release,625,"// Combine the map type inherited from user-defined mapper with that; // specified in the program. According to the OMP_MAP_TO and OMP_MAP_FROM; // bits of the \a MapType, which is the input argument of the mapper; // function, the following code will set the OMP_MAP_TO and OMP_MAP_FROM; // bits of MemberMapType.; // [OpenMP 5.0], 1.2.6. map-type decay.; // | alloc | to | from | tofrom | release | delete; // ----------------------------------------------------------; // alloc | alloc | alloc | alloc | alloc | release | delete; // to | alloc | to | alloc | to | release | delete; // from | alloc | alloc | from | from | release | delete; // tofrom | alloc | to | from | tofrom | release | delete",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:684,Deployability,release,release,684,"// Combine the map type inherited from user-defined mapper with that; // specified in the program. According to the OMP_MAP_TO and OMP_MAP_FROM; // bits of the \a MapType, which is the input argument of the mapper; // function, the following code will set the OMP_MAP_TO and OMP_MAP_FROM; // bits of MemberMapType.; // [OpenMP 5.0], 1.2.6. map-type decay.; // | alloc | to | from | tofrom | release | delete; // ----------------------------------------------------------; // alloc | alloc | alloc | alloc | alloc | release | delete; // to | alloc | to | alloc | to | release | delete; // from | alloc | alloc | from | from | release | delete; // tofrom | alloc | to | from | tofrom | release | delete",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:24,Modifiability,inherit,inherited,24,"// Combine the map type inherited from user-defined mapper with that; // specified in the program. According to the OMP_MAP_TO and OMP_MAP_FROM; // bits of the \a MapType, which is the input argument of the mapper; // function, the following code will set the OMP_MAP_TO and OMP_MAP_FROM; // bits of MemberMapType.; // [OpenMP 5.0], 1.2.6. map-type decay.; // | alloc | to | from | tofrom | release | delete; // ----------------------------------------------------------; // alloc | alloc | alloc | alloc | alloc | release | delete; // to | alloc | to | alloc | to | release | delete; // from | alloc | alloc | from | from | release | delete; // tofrom | alloc | to | from | tofrom | release | delete",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:21,Usability,clear,clear,21,"// In case of alloc, clear OMP_MAP_TO and OMP_MAP_FROM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:18,Usability,clear,clear,18,"// In case of to, clear OMP_MAP_FROM.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:20,Usability,clear,clear,20,"// In case of from, clear OMP_MAP_TO.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:3,Deployability,Update,Update,3,"// Update the pointer to point to the next element that needs to be mapped,; // and check whether we have mapped all elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:44,Modifiability,variab,variables,44,// Fill up the arrays with all the captured variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:32,Modifiability,variab,variables,32,// Generate correct mapping for variables captured by reference in; // lambdas.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:253,Availability,error,error,253,"// Reverse offloading is not supported, so just execute on the host.; // FIXME: This fallback solution is incorrect since it ignores the; // OMP_TARGET_OFFLOAD environment variable. Instead it would be better to; // assert here and ensure SEMA emits an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:172,Modifiability,variab,variable,172,"// Reverse offloading is not supported, so just execute on the host.; // FIXME: This fallback solution is incorrect since it ignores the; // OMP_TARGET_OFFLOAD environment variable. Instead it would be better to; // assert here and ensure SEMA emits an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:216,Testability,assert,assert,216,"// Reverse offloading is not supported, so just execute on the host.; // FIXME: This fallback solution is incorrect since it ignores the; // OMP_TARGET_OFFLOAD environment variable. Instead it would be better to; // assert here and ensure SEMA emits an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:10,Safety,detect,detect,10,// Try to detect target regions in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:18,Modifiability,variab,variable,18,// Do not to emit variable if it is not marked as declare target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:23,Modifiability,variab,variables,23,// Register non-target variables being emitted in device code (debug info; // may cause this).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:249,Availability,error,error,249,// TODO: check for other requires clauses.; // The requires directive takes effect only when a target region is; // present in the compilation unit. Otherwise it is ignored and not; // passed to the runtime. This avoids the runtime from throwing an error; // for mismatching requires clauses across compilation units that don't; // contain at least 1 target region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:213,Safety,avoid,avoids,213,// TODO: check for other requires clauses.; // The requires directive takes effect only when a target region is; // present in the compilation unit. Otherwise it is ignored and not; // passed to the runtime. This avoids the runtime from throwing an error; // for mismatching requires clauses across compilation units that don't; // contain at least 1 target region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:42,Modifiability,variab,variables,42,// Fill up the arrays with all the mapped variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:42,Modifiability,variab,variables,42,// Fill up the arrays with all the mapped variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:200,Energy Efficiency,power,power,200,"// Every vector variant of a SIMD-enabled function has a vector length (VLEN).; // If OpenMP clause ""simdlen"" is used, the VLEN is the value of the argument; // of that clause. The VLEN value must be power of 2.; // In other case the notion of the function`s ""characteristic data type"" (CDT); // is used to compute the vector length.; // CDT is defined in the following order:; // a) For non-void function, the CDT is the return type.; // b) If the function has any non-uniform, non-linear parameters, then the; // CDT is the type of the first such parameter.; // c) If the CDT determined by a) or b) above is struct, union, or class; // type which is pass-by-value (except for the type that maps to the; // built-in complex data type), the characteristic data type is int.; // d) If none of the above three cases is applicable, the CDT is int.; // The VLEN is then determined based on the CDT and the size of vector; // register of that ISA for which current vector version is generated. The; // VLEN is computed using the formula below:; // VLEN = sizeof(vector_register) / sizeof(CDT),; // where vector register size specified in section 3.2.1 Registers and the; // Stack Frame of original AMD64 ABI document.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:212,Availability,avail,available,212,"// This are the Functions that are needed to mangle the name of the; // vector functions generated by the compiler, according to the rules; // defined in the ""Vector Function ABI specifications for AArch64"",; // available at; // https://developer.arm.com/products/software-development-tools/hpc/arm-compiler-for-hpc/vector-function-abi.; /// Maps To Vector (MTV), as defined in 4.1.1 of the AAVFABI (2021Q1).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:63,Energy Efficiency,power,power,63,"// The LS of a function parameter / return value can only be a power; // of 2, starting from 8 bits, up to 128.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:116,Performance,scalab,scalable,116,"// Function used to add the attribute. The parameter `VLEN` is; // templated to allow the use of ""x"" when targeting scalable functions; // for SVE.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:55,Integrability,depend,depending,55,// Helper function to generate the Advanced SIMD names depending on; // the value of the NDS when simdlen is not present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:50,Energy Efficiency,power,power,50,"// 2. Section 3.3.1, item 1: user input must be a power of 2 for; // Advanced SIMD output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:24,Availability,mask,masked,24,// SVE generates only a masked function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:49,Integrability,depend,depending,49,"// Advanced SIMD generates one or two functions, depending on; // the `[not]inbranch` clause.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:86,Integrability,depend,depending,86,"// Advanced SIMD, Section 3.3.1 of the AAVFABI, generates one or; // two vector names depending on the use of the clause; // `[not]inbranch`.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:33,Energy Efficiency,allocate,allocate,33,/// Return the alignment from an allocate directive if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:22,Energy Efficiency,allocate,allocate,22,// Cleanup action for allocate support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:42,Modifiability,variab,variable,42,/// Checks if the lastprivate conditional variable is referenced in LHS.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:8,Deployability,update,updated,8,// Last updated loop counter for the lastprivate conditional var.; // int<xx> last_iv = 0;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:46,Deployability,update,updated,46,// (last_iv <= iv) ? Check if the variable is updated and store new; // value in global var.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:34,Modifiability,variab,variable,34,// (last_iv <= iv) ? Check if the variable is updated and store new; // value in global var.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:24,Deployability,update,updated,24,// The variable was not updated in the region - exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp:7,Modifiability,variab,variable,7,// The variable was not updated in the region - exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:31,Integrability,Interface,Interface,31,"//===----- CGOpenMPRuntime.h - Interface to OpenMP Runtimes -----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides a class for OpenMP runtime code generation.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Usability,simpl,simple,33,"/// Class provides a way to call simple version of codegen for OpenMP region, or; /// an advanced with possible pre|post-actions in codegen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:50,Energy Efficiency,reduce,reduce,50,/// Reference to the item shared between tasks to reduce into.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:32,Modifiability,variab,variables,32,/// List of addresses of shared variables/expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:34,Modifiability,variab,variables,34,/// List of addresses of original variables/expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:219,Modifiability,variab,variable,219,/// Performs aggregate initialization.; /// \param N Number of reduction item in the common list.; /// \param PrivateAddr Address of the corresponding private item.; /// \param SharedAddr Address of the original shared variable.; /// \param DRD Declare reduction construct used for reduction item.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:4,Performance,Perform,Performs,4,/// Performs aggregate initialization.; /// \param N Number of reduction item in the common list.; /// \param PrivateAddr Address of the corresponding private item.; /// \param SharedAddr Address of the original shared variable.; /// \param DRD Declare reduction construct used for reduction item.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:27,Modifiability,variab,variable-modified,27,"/// Emits the code for the variable-modified type, if required.; /// \param N Number of the reduction item.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:27,Modifiability,variab,variable-modified,27,"/// Emits the code for the variable-modified type, if required.; /// \param N Number of the reduction item.; /// \param Size Size of the type in chars.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:373,Modifiability,variab,variable,373,/// Performs initialization of the private copy for the reduction item.; /// \param N Number of the reduction item.; /// \param PrivateAddr Address of the corresponding private item.; /// \param DefaultInit Default initialization sequence that should be; /// performed if no reduction specific initialization is found.; /// \param SharedAddr Address of the original shared variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:4,Performance,Perform,Performs,4,/// Performs initialization of the private copy for the reduction item.; /// \param N Number of the reduction item.; /// \param PrivateAddr Address of the corresponding private item.; /// \param DefaultInit Default initialization sequence that should be; /// performed if no reduction specific initialization is found.; /// \param SharedAddr Address of the original shared variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:259,Performance,perform,performed,259,/// Performs initialization of the private copy for the reduction item.; /// \param N Number of the reduction item.; /// \param PrivateAddr Address of the corresponding private item.; /// \param DefaultInit Default initialization sequence that should be; /// performed if no reduction specific initialization is found.; /// \param SharedAddr Address of the original shared variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:62,Modifiability,variab,variable,62,/// Adjusts \p PrivatedAddr for using instead of the original variable; /// address in normal operations.; /// \param N Number of the reduction item.; /// \param PrivateAddr Address of the corresponding private item.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:44,Modifiability,variab,variable,44,"/// Maps the expression for the lastprivate variable to the global copy used; /// to store new value because original variables are not mapped in inner; /// parallel regions. Only private copies are captured but we need also to; /// store private copy in shared address.; /// Also, stores the expression for the private loop counter and it; /// threaprivate name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:118,Modifiability,variab,variables,118,"/// Maps the expression for the lastprivate variable to the global copy used; /// to store new value because original variables are not mapped in inner; /// parallel regions. Only private copies are captured but we need also to; /// store private copy in shared address.; /// Also, stores the expression for the private loop counter and it; /// threaprivate name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:43,Integrability,depend,depending,43,"/// Returns default flags for the barriers depending on the directive, for; /// which this barier is going to be emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:15,Modifiability,variab,variables,15,/// Maps local variables marked as lastprivate conditional to their internal; /// types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:37,Modifiability,variab,variables,37,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:85,Modifiability,variab,variables,85,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:301,Modifiability,variab,variables,301,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:260,Performance,cache,cache,260,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:272,Performance,cache,cache,272,"/// An ordered map of auto-generated variables to their unique names.; /// It stores variables with the following names: 1) "".gomp_critical_user_"" +; /// <critical_section_name> + "".var"" for ""omp critical"" directives; 2); /// <mangled_name_for_global_var> + "".cache."" for cache for threadprivate; /// variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:138,Integrability,rout,routine,138,/// Type typedef struct kmp_task {; /// void * shareds; /**< pointer to block of pointers to; /// shared vars */; /// kmp_routine_entry_t routine; /**< pointer to routine to call for; /// executing task */; /// kmp_int32 part_id; /**< part id for the task */; /// kmp_routine_entry_t destructors; /* pointer to function to invoke; /// deconstructors of firstprivate C++ objects */; /// } kmp_task_t;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:163,Integrability,rout,routine,163,/// Type typedef struct kmp_task {; /// void * shareds; /**< pointer to block of pointers to; /// shared vars */; /// kmp_routine_entry_t routine; /**< pointer to routine to call for; /// executing task */; /// kmp_int32 part_id; /**< part id for the task */; /// kmp_routine_entry_t destructors; /* pointer to function to invoke; /// deconstructors of firstprivate C++ objects */; /// } kmp_task_t;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:23,Modifiability,variab,variables,23,/// List of the global variables with their addresses that should not be; /// emitted for the target.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:12,Modifiability,variab,variables,12,"/// List of variables that can become declare target implicitly and, thus,; /// must be emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:47,Integrability,rout,routine,47,/// Flag for keeping track of weather a device routine has been emitted.; /// Device routines are specific to the,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:85,Integrability,rout,routines,85,/// Flag for keeping track of weather a device routine has been emitted.; /// Device routines are specific to the,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:232,Modifiability,variab,variable,232,"/// If the specified mangled name is not in the module, create and; /// return threadprivate cache object. This object is a pointer's worth of; /// storage that's reserved for use by the OpenMP runtime.; /// \param VD Threadprivate variable.; /// \return Cache variable for the specified threadprivate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:261,Modifiability,variab,variable,261,"/// If the specified mangled name is not in the module, create and; /// return threadprivate cache object. This object is a pointer's worth of; /// storage that's reserved for use by the OpenMP runtime.; /// \param VD Threadprivate variable.; /// \return Cache variable for the specified threadprivate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:93,Performance,cache,cache,93,"/// If the specified mangled name is not in the module, create and; /// return threadprivate cache object. This object is a pointer's worth of; /// storage that's reserved for use by the OpenMP runtime.; /// \param VD Threadprivate variable.; /// \return Cache variable for the specified threadprivate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:255,Performance,Cache,Cache,255,"/// If the specified mangled name is not in the module, create and; /// return threadprivate cache object. This object is a pointer's worth of; /// storage that's reserved for use by the OpenMP runtime.; /// \param VD Threadprivate variable.; /// \return Cache variable for the specified threadprivate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:25,Modifiability,variab,variables,25,/// Set of threadprivate variables with the generated initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,Modifiability,variab,variables,26,/// Set of declare target variables with the generated initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:52,Modifiability,variab,variables,52,/// Emits initialization code for the threadprivate variables.; /// \param VDAddr Address of the global variable \a VD.; /// \param Ctor Pointer to a global init function for \a VD.; /// \param CopyCtor Pointer to a global copy function for \a VD.; /// \param Dtor Pointer to a global destructor function for \a VD.; /// \param Loc Location of threadprivate declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:104,Modifiability,variab,variable,104,/// Emits initialization code for the threadprivate variables.; /// \param VDAddr Address of the global variable \a VD.; /// \param Ctor Pointer to a global init function for \a VD.; /// \param CopyCtor Pointer to a global copy function for \a VD.; /// \param Dtor Pointer to a global destructor function for \a VD.; /// \param Loc Location of threadprivate declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:509,Modifiability,variab,variables,509,"/// Emit task region for the task directive. The task region is emitted in; /// several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:967,Modifiability,variab,variables,967,"/// Emit task region for the task directive. The task region is emitted in; /// several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1030,Modifiability,variab,variables,1030,"/// Emit task region for the task directive. The task region is emitted in; /// several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:9,Deployability,update,update,9,/// Emit update for lastprivate conditional data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:74,Integrability,depend,dependency,74,/// Returns the number of the elements and the address of the depobj; /// dependency array.; /// \return Number of elements in depobj array and the pointer to the array of; /// dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:177,Integrability,depend,dependencies,177,/// Returns the number of the elements and the address of the depobj; /// dependency array.; /// \return Number of elements in depobj array and the pointer to the array of; /// dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:17,Modifiability,variab,variable,17,/// Check if the variable length declaration is delayed:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:92,Testability,log,logic,92,/// Emits code for OpenMP 'if' clause using specified \a CodeGen; /// function. Here is the logic:; /// if (Cond) {; /// ThenGen();; /// } else {; /// ElseGen();; /// },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:301,Modifiability,Variab,Variable,301,"/// Emits outlined function for the specified OpenMP parallel directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:413,Usability,simpl,simple,413,"/// Emits outlined function for the specified OpenMP parallel directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:298,Modifiability,Variab,Variable,298,"/// Emits outlined function for the specified OpenMP teams directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:410,Usability,simpl,simple,410,"/// Emits outlined function for the specified OpenMP teams directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:213,Modifiability,Variab,Variable,213,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:288,Modifiability,Variab,Variable,288,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:382,Modifiability,Variab,Variable,382,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:471,Usability,simpl,simple,471,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:74,Modifiability,variab,variables,74,"/// Emits code for parallel or serial call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run in parallel threads. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; /// \param IfCond Condition in the associated 'if' clause, if it was; /// specified, nullptr otherwise.; /// \param NumThreads The value corresponding to the num_threads clause, if; /// any, or nullptr.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:390,Modifiability,variab,variables,390,"/// Emits code for parallel or serial call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run in parallel threads. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; /// \param IfCond Condition in the associated 'if' clause, if it was; /// specified, nullptr otherwise.; /// \param NumThreads The value corresponding to the num_threads clause, if; /// any, or nullptr.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:12,Availability,mask,masked,12,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:39,Availability,Mask,MaskedOpGen,39,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:110,Availability,mask,masked,110,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:31,Availability,error,error,31,"/// Emit __kmpc_error call for error directive; /// extern void __kmpc_error(ident_t *loc, int severity, const char *message);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:117,Integrability,message,message,117,"/// Emit __kmpc_error call for error directive; /// extern void __kmpc_error(ident_t *loc, int severity, const char *message);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:311,Usability,simpl,simple,311,"/// Emit an implicit/explicit barrier for OpenMP threads.; /// \param Kind Directive for which this implicit barrier call must be; /// generated. Must be OMPD_barrier for explicit barrier generation.; /// \param EmitChecks true if need to emit checks for cancellation barriers.; /// \param ForceSimpleCall true simple barrier call must be emitted, false if; /// runtime class decides which one to emit (simple or with cancellation; /// checks).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:403,Usability,simpl,simple,403,"/// Emit an implicit/explicit barrier for OpenMP threads.; /// \param Kind Directive for which this implicit barrier call must be; /// generated. Must be OMPD_barrier for explicit barrier generation.; /// \param EmitChecks true if need to emit checks for cancellation barriers.; /// \param ForceSimpleCall true simple barrier call must be emitted, false if; /// runtime class decides which one to emit (simple or with cancellation; /// checks).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:30,Energy Efficiency,Schedul,ScheduleKind,30,/// Check if the specified \a ScheduleKind is static non-chunked.; /// This kind of worksharing directive is emitted without outer loop.; /// \param ScheduleKind Schedule kind specified in the 'schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:149,Energy Efficiency,Schedul,ScheduleKind,149,/// Check if the specified \a ScheduleKind is static non-chunked.; /// This kind of worksharing directive is emitted without outer loop.; /// \param ScheduleKind Schedule kind specified in the 'schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:162,Energy Efficiency,Schedul,Schedule,162,/// Check if the specified \a ScheduleKind is static non-chunked.; /// This kind of worksharing directive is emitted without outer loop.; /// \param ScheduleKind Schedule kind specified in the 'schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:194,Energy Efficiency,schedul,schedule,194,/// Check if the specified \a ScheduleKind is static non-chunked.; /// This kind of worksharing directive is emitted without outer loop.; /// \param ScheduleKind Schedule kind specified in the 'schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:30,Energy Efficiency,Schedul,ScheduleKind,30,/// Check if the specified \a ScheduleKind is static non-chunked.; /// This kind of distribute directive is emitted without outer loop.; /// \param ScheduleKind Schedule kind specified in the 'dist_schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:148,Energy Efficiency,Schedul,ScheduleKind,148,/// Check if the specified \a ScheduleKind is static non-chunked.; /// This kind of distribute directive is emitted without outer loop.; /// \param ScheduleKind Schedule kind specified in the 'dist_schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:161,Energy Efficiency,Schedul,Schedule,161,/// Check if the specified \a ScheduleKind is static non-chunked.; /// This kind of distribute directive is emitted without outer loop.; /// \param ScheduleKind Schedule kind specified in the 'dist_schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:30,Energy Efficiency,Schedul,ScheduleKind,30,/// Check if the specified \a ScheduleKind is static chunked.; /// \param ScheduleKind Schedule kind specified in the 'schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:74,Energy Efficiency,Schedul,ScheduleKind,74,/// Check if the specified \a ScheduleKind is static chunked.; /// \param ScheduleKind Schedule kind specified in the 'schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:87,Energy Efficiency,Schedul,Schedule,87,/// Check if the specified \a ScheduleKind is static chunked.; /// \param ScheduleKind Schedule kind specified in the 'schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:119,Energy Efficiency,schedul,schedule,119,/// Check if the specified \a ScheduleKind is static chunked.; /// \param ScheduleKind Schedule kind specified in the 'schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:30,Energy Efficiency,Schedul,ScheduleKind,30,/// Check if the specified \a ScheduleKind is static non-chunked.; /// \param ScheduleKind Schedule kind specified in the 'dist_schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:78,Energy Efficiency,Schedul,ScheduleKind,78,/// Check if the specified \a ScheduleKind is static non-chunked.; /// \param ScheduleKind Schedule kind specified in the 'dist_schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:91,Energy Efficiency,Schedul,Schedule,91,/// Check if the specified \a ScheduleKind is static non-chunked.; /// \param ScheduleKind Schedule kind specified in the 'dist_schedule' clause.; /// \param Chunked True if chunk is specified in the clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:30,Energy Efficiency,Schedul,ScheduleKind,30,/// Check if the specified \a ScheduleKind is dynamic.; /// This kind of worksharing directive is emitted without outer loop.; /// \param ScheduleKind Schedule Kind specified in the 'schedule' clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:138,Energy Efficiency,Schedul,ScheduleKind,138,/// Check if the specified \a ScheduleKind is dynamic.; /// This kind of worksharing directive is emitted without outer loop.; /// \param ScheduleKind Schedule Kind specified in the 'schedule' clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:151,Energy Efficiency,Schedul,Schedule,151,/// Check if the specified \a ScheduleKind is dynamic.; /// This kind of worksharing directive is emitted without outer loop.; /// \param ScheduleKind Schedule Kind specified in the 'schedule' clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:183,Energy Efficiency,schedul,schedule,183,/// Check if the specified \a ScheduleKind is dynamic.; /// This kind of worksharing directive is emitted without outer loop.; /// \param ScheduleKind Schedule Kind specified in the 'schedule' clause.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:32,Energy Efficiency,schedul,schedule,32,/// Chunk size specified using 'schedule' clause (nullptr if chunk; /// was not specified),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:118,Energy Efficiency,schedul,scheduled,118,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:228,Energy Efficiency,schedul,schedule,228,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:506,Energy Efficiency,Schedul,ScheduleKind,506,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:519,Energy Efficiency,Schedul,Schedule,519,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:552,Energy Efficiency,schedul,schedule,552,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Integrability,rout,routine,33,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:206,Integrability,Depend,Depending,206,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:280,Integrability,rout,routine,280,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:611,Modifiability,variab,variable,611,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:672,Modifiability,variab,variable,672,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; /// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,Modifiability,variab,variable,26,/// Size of the iteration variable in bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,Modifiability,variab,variable,26,/// Sign of the iteration variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,Modifiability,variab,variable,26,/// Address of the output variable in which the flag of the last iteration; /// is returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,Modifiability,variab,variable,26,/// Address of the output variable in which the lower iteration number is; /// returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,Modifiability,variab,variable,26,/// Address of the output variable in which the upper iteration number is; /// returned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:120,Energy Efficiency,schedul,scheduled,120,/// Address of the output variable in which the stride value is returned; /// necessary to generated the static_chunked scheduled loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:26,Modifiability,variab,variable,26,/// Address of the output variable in which the stride value is returned; /// necessary to generated the static_chunked scheduled loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:46,Energy Efficiency,schedul,scheduled,46,"/// Value of the chunk for the static_chunked scheduled loop. For the; /// default (nullptr) value, the chunk 1 will be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:131,Energy Efficiency,schedul,schedule,131,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:243,Energy Efficiency,schedul,schedule,243,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:553,Energy Efficiency,Schedul,ScheduleKind,553,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:566,Energy Efficiency,Schedul,Schedule,566,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:599,Energy Efficiency,schedul,schedule,599,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Integrability,rout,routine,33,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:221,Integrability,Depend,Depending,221,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:295,Integrability,rout,routine,295,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:119,Energy Efficiency,Schedul,Schedule,119,"///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param SchedKind Schedule kind, specified by the 'dist_schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:120,Energy Efficiency,schedul,scheduling,120,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Integrability,rout,routine,33,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:271,Modifiability,variab,variable,271,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:332,Modifiability,variab,variable,332,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Integrability,rout,routine,33,/// Call the appropriate runtime routine to notify that we finished; /// all the work with current loop.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive for which the static finish is emitted.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:216,Modifiability,variab,variable,216,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:277,Modifiability,variab,variable,277,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:324,Modifiability,variab,variable,324,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:428,Modifiability,variab,variable,428,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:528,Modifiability,variab,variable,528,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:628,Modifiability,variab,variable,628,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:41,Modifiability,variab,variable,41,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:108,Modifiability,variab,variable,108,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:159,Modifiability,variab,variable,159,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:281,Modifiability,variab,variable,281,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:31,Modifiability,variab,variable,31,/// Returns the address of the variable marked as declare target with link; /// clause OR as declare target with to clause and unified memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:52,Modifiability,variab,variable,52,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:167,Modifiability,variab,variable,167,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:238,Modifiability,variab,variable,238,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:286,Modifiability,variab,variable,286,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:337,Modifiability,variab,variable,337,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:420,Performance,Perform,PerformInit,420,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:166,Performance,Perform,PerformInit,166,/// Emit code for handling declare target functions in the runtime.; /// \param FD Declare target function.; /// \param Addr Address of the global \a FD.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:37,Modifiability,variab,variable,37,/// Creates artificial threadprivate variable with name \p Name and type \p; /// VarType.; /// \param VarType Type of the artificial threadprivate variable.; /// \param Name Name of the artificial threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:147,Modifiability,variab,variable,147,/// Creates artificial threadprivate variable with name \p Name and type \p; /// VarType.; /// \param VarType Type of the artificial threadprivate variable.; /// \param Name Name of the artificial threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:211,Modifiability,variab,variable,211,/// Creates artificial threadprivate variable with name \p Name and type \p; /// VarType.; /// \param VarType Type of the artificial threadprivate variable.; /// \param Name Name of the artificial threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:22,Modifiability,variab,variables,22,/// Emit flush of the variables specified in 'omp flush' directive.; /// \param Vars List of variables to flush.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:93,Modifiability,variab,variables,93,/// Emit flush of the variables specified in 'omp flush' directive.; /// \param Vars List of variables to flush.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:509,Modifiability,variab,variables,509,"/// Emit task region for the task directive. The task region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to kmp_int32 __kmpc_omp_task(ident_t *, kmp_int32 gtid,; /// kmp_task_t *new_task), where new_task is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1137,Modifiability,variab,variables,1137,"/// Emit task region for the task directive. The task region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to kmp_int32 __kmpc_omp_task(ident_t *, kmp_int32 gtid,; /// kmp_task_t *new_task), where new_task is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1200,Modifiability,variab,variables,1200,"/// Emit task region for the task directive. The task region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to kmp_int32 __kmpc_omp_task(ident_t *, kmp_int32 gtid,; /// kmp_task_t *new_task), where new_task is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:517,Modifiability,variab,variables,517,"/// Emit task region for the taskloop directive. The taskloop region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t; /// *task, int if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int; /// nogroup, int sched, kmp_uint64 grainsize, void *task_dup ), where new_task; /// is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1264,Modifiability,variab,variables,1264,"/// Emit task region for the taskloop directive. The taskloop region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t; /// *task, int if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int; /// nogroup, int sched, kmp_uint64 grainsize, void *task_dup ), where new_task; /// is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1327,Modifiability,variab,variables,1327,"/// Emit task region for the taskloop directive. The taskloop region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t; /// *task, int if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int; /// nogroup, int sched, kmp_uint64 grainsize, void *task_dup ), where new_task; /// is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:129,Usability,simpl,simple,129,"/// Emit code for the directive that does not require outlining.; ///; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param HasCancel true if region has inner cancel directive, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:42,Energy Efficiency,Reduce,ReducerName,42,"/// Emits reduction function.; /// \param ReducerName Name of the function calling the reduction.; /// \param ArgsElemType Array type containing pointers to reduction variables.; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:167,Modifiability,variab,variables,167,"/// Emits reduction function.; /// \param ReducerName Name of the function calling the reduction.; /// \param ArgsElemType Array type containing pointers to reduction variables.; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1446,Performance,perform,perform,1446,"/// Emit a code for reduction clause. Next code should be emitted for; /// reduction:; /// \code; ///; /// static kmp_critical_name lock = { 0 };; ///; /// void reduce_func(void *lhs[<n>], void *rhs[<n>]) {; /// ...; /// *(Type<i>*)lhs[i] = RedOp<i>(*(Type<i>*)lhs[i], *(Type<i>*)rhs[i]);; /// ...; /// }; ///; /// ...; /// void *RedList[<n>] = {&<RHSExprs>[0], ..., &<RHSExprs>[<n>-1]};; /// switch (__kmpc_reduce{_nowait}(<loc>, <gtid>, <n>, sizeof(RedList),; /// RedList, reduce_func, &<lock>)) {; /// case 1:; /// ...; /// <LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]);; /// ...; /// __kmpc_end_reduce{_nowait}(<loc>, <gtid>, &<lock>);; /// break;; /// case 2:; /// ...; /// Atomic(<LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]));; /// ...; /// break;; /// default:;; /// }; /// \endcode; ///; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.; /// \param Options List of options for reduction codegen:; /// WithNowait true if parent directive has also nowait clause, false; /// otherwise.; /// SimpleReduction Emit reduction operation only. Used for omp simd; /// directive on the host.; /// ReductionKind The kind of reduction to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1309,Usability,Simpl,SimpleReduction,1309,"/// Emit a code for reduction clause. Next code should be emitted for; /// reduction:; /// \code; ///; /// static kmp_critical_name lock = { 0 };; ///; /// void reduce_func(void *lhs[<n>], void *rhs[<n>]) {; /// ...; /// *(Type<i>*)lhs[i] = RedOp<i>(*(Type<i>*)lhs[i], *(Type<i>*)rhs[i]);; /// ...; /// }; ///; /// ...; /// void *RedList[<n>] = {&<RHSExprs>[0], ..., &<RHSExprs>[<n>-1]};; /// switch (__kmpc_reduce{_nowait}(<loc>, <gtid>, <n>, sizeof(RedList),; /// RedList, reduce_func, &<lock>)) {; /// case 1:; /// ...; /// <LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]);; /// ...; /// __kmpc_end_reduce{_nowait}(<loc>, <gtid>, &<lock>);; /// break;; /// case 2:; /// ...; /// Atomic(<LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]));; /// ...; /// break;; /// default:;; /// }; /// \endcode; ///; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.; /// \param Options List of options for reduction codegen:; /// WithNowait true if parent directive has also nowait clause, false; /// otherwise.; /// SimpleReduction Emit reduction operation only. Used for omp simd; /// directive on the host.; /// ReductionKind The kind of reduction to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:83,Modifiability,variab,variables,83,/// Required to resolve existing problems in the runtime. Emits threadprivate; /// variables to store the size of the VLAs/array sections for; /// initializer/combiner/finalizer functions.; /// \param RCG Allows to reuse an existing data for the reductions.; /// \param N Reduction item for which fixups must be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:152,Availability,failure,failure,152,"/// Emit the target offloading code associated with \a D. The emitted; /// code attempts offloading the execution to the device, an the event of; /// a failure it executes the host version outlined in \a OutlinedFn.; /// \param D Directive to emit.; /// \param OutlinedFn Host version of the code to be offloaded.; /// \param OutlinedFnID ID of host version of the code to be offloaded.; /// \param IfCond Expression evaluated in if clause associated with the target; /// directive, or null if no if clause is used.; /// \param Device Expression evaluated in device clause associated with the; /// target directive, or null if no device clause is used and device modifier.; /// \param SizeEmitter Callback to emit number of iterations for loop-based; /// directives.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:20,Modifiability,variab,variable,20,/// Emit the global variable if it is a valid device global variable.; /// Returns true if \a GD was dealt with successfully.; /// \param GD Variable declaration to emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:60,Modifiability,variab,variable,60,/// Emit the global variable if it is a valid device global variable.; /// Returns true if \a GD was dealt with successfully.; /// \param GD Variable declaration to emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:141,Modifiability,Variab,Variable,141,/// Emit the global variable if it is a valid device global variable.; /// Returns true if \a GD was dealt with successfully.; /// \param GD Variable declaration to emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:65,Modifiability,variab,variable,65,/// Checks if the provided global decl \a GD is a declare target variable and; /// registers it when emitting code for the host.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:61,Modifiability,variab,variables,61,"/// Emits code for teams call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run by team masters. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:373,Modifiability,variab,variables,373,"/// Emits code for teams call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run by team masters. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:136,Deployability,update,update,136,"/// Emit the data mapping/movement code associated with the directive; /// \a D that should be of the form 'target [{enter|exit} data | update]'.; /// \param D Directive to emit.; /// \param IfCond Expression evaluated in if clause associated with the target; /// directive, or null if no if clause is used.; /// \param Device Expression evaluated in device clause associated with the; /// target directive, or null if no device clause is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:51,Integrability,depend,depend,51,/// Emit code for doacross ordered directive with 'depend' clause.; /// \param C 'depend' clause with 'sink|source' dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:82,Integrability,depend,depend,82,/// Emit code for doacross ordered directive with 'depend' clause.; /// \param C 'depend' clause with 'sink|source' dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:116,Integrability,depend,dependency,116,/// Emit code for doacross ordered directive with 'depend' clause.; /// \param C 'depend' clause with 'sink|source' dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:120,Integrability,depend,dependence,120,/// Emit code for doacross ordered directive with 'doacross' clause.; /// \param C 'doacross' clause with 'sink|source' dependence type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:19,Energy Efficiency,schedul,schedule,19,/// Choose default schedule type and chunk value for the; /// dist_schedule clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:19,Energy Efficiency,schedul,schedule,19,/// Choose default schedule type and chunk value for the; /// schedule clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:62,Energy Efficiency,schedul,schedule,62,/// Choose default schedule type and chunk value for the; /// schedule clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:50,Modifiability,variab,variable,50,/// Gets the OpenMP-specific address of the local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Modifiability,variab,variables,33,/// Emit deferred declare target variables marked for deferred emission.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:87,Modifiability,variab,variables,87,"/// Adjust some parameters for the target-based directives, like addresses of; /// the variables captured by reference in lambdas.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:4,Performance,Perform,Perform,4,/// Perform check on requires decl to ensure that target architecture; /// supports unified addressing,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:18,Modifiability,variab,variable,18,/// Checks if the variable has associated OMPAllocateDeclAttr attribute with; /// the predefined allocator and translates it into the corresponding address; /// space.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:24,Modifiability,variab,variable,24,/// Checks if the \p VD variable is marked as nontemporal declaration in; /// current context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:89,Deployability,update,update,89,/// Checks if the provided \p LVal is lastprivate conditional and emits the; /// code to update the value of the original variable.; /// \code; /// lastprivate(conditional: a); /// ...; /// <type> a;; /// lp_a = ...;; /// #pragma omp critical(a); /// if (last_iv_a <= iv) {; /// last_iv_a = iv;; /// global_a = lp_a;; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:122,Modifiability,variab,variable,122,/// Checks if the provided \p LVal is lastprivate conditional and emits the; /// code to update the value of the original variable.; /// \code; /// lastprivate(conditional: a); /// ...; /// <type> a;; /// lp_a = ...;; /// #pragma omp critical(a); /// if (last_iv_a <= iv) {; /// last_iv_a = iv;; /// global_a = lp_a;; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:46,Deployability,update,updated,46,/// Checks if the lastprivate conditional was updated in inner region and; /// writes the value.; /// \code; /// lastprivate(conditional: a); /// ...; /// <type> a;bool Fired = false;; /// #pragma omp ... shared(a); /// {; /// lp_a = ...;; /// Fired = true;; /// }; /// if (Fired) {; /// #pragma omp critical(a); /// if (last_iv_a <= iv) {; /// last_iv_a = iv;; /// global_a = lp_a;; /// }; /// Fired = false;; /// }; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:78,Deployability,update,update,78,"/// Gets the address of the global copy used for lastprivate conditional; /// update, if any.; /// \param PrivLVal LValue for the private copy.; /// \param VD Original lastprivate declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:18,Integrability,depend,dependecies,18,/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs).; /// \returns Pointer to the first element of the array casted to VoidPtr type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:72,Integrability,depend,dependence,72,/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs).; /// \returns Pointer to the first element of the array casted to VoidPtr type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:158,Energy Efficiency,allocate,allocated,158,"/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs) for depobj construct. In this case, the; /// variable is allocated in dynamically. \returns Pointer to the first; /// element of the array casted to VoidPtr type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:18,Integrability,depend,dependecies,18,"/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs) for depobj construct. In this case, the; /// variable is allocated in dynamically. \returns Pointer to the first; /// element of the array casted to VoidPtr type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:72,Integrability,depend,dependence,72,"/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs) for depobj construct. In this case, the; /// variable is allocated in dynamically. \returns Pointer to the first; /// element of the array casted to VoidPtr type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:146,Modifiability,variab,variable,146,"/// Emits list of dependecies based on the provided data (array of; /// dependence/expression pairs) for depobj construct. In this case, the; /// variable is allocated in dynamically. \returns Pointer to the first; /// element of the array casted to VoidPtr type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:34,Integrability,depend,dependency,34,/// Emits the code to destroy the dependency object provided in depobj; /// directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:4,Deployability,Update,Updates,4,/// Updates the dependency kind in the specified depobj object.; /// \param DepobjLVal LValue for the main depobj object.; /// \param NewDepKind New dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:16,Integrability,depend,dependency,16,/// Updates the dependency kind in the specified depobj object.; /// \param DepobjLVal LValue for the main depobj object.; /// \param NewDepKind New dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:149,Integrability,depend,dependency,149,/// Updates the dependency kind in the specified depobj object.; /// \param DepobjLVal LValue for the main depobj object.; /// \param NewDepKind New dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:24,Modifiability,variab,variable,24,/// Returns true if the variable is a local variable in untied task.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:44,Modifiability,variab,variable,44,/// Returns true if the variable is a local variable in untied task.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:301,Modifiability,Variab,Variable,301,"/// Emits outlined function for the specified OpenMP parallel directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:413,Usability,simpl,simple,413,"/// Emits outlined function for the specified OpenMP parallel directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:298,Modifiability,Variab,Variable,298,"/// Emits outlined function for the specified OpenMP teams directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:410,Usability,simpl,simple,410,"/// Emits outlined function for the specified OpenMP teams directive; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:213,Modifiability,Variab,Variable,213,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:288,Modifiability,Variab,Variable,288,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:382,Modifiability,Variab,Variable,382,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:471,Usability,simpl,simple,471,"/// Emits outlined function for the OpenMP task directive \a D. This; /// outlined function has type void(*)(kmp_int32 ThreadID, struct task_t*; /// TaskT).; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param PartIDVar Variable for partition id in the current OpenMP untied; /// task region.; /// \param TaskTVar Variable for task_t argument.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.; /// \param Tied true if task is generated for tied task, false otherwise.; /// \param NumberOfParts Number of parts in untied task. Ignored for tied; /// tasks.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:74,Modifiability,variab,variables,74,"/// Emits code for parallel or serial call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run in parallel threads. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; /// \param IfCond Condition in the associated 'if' clause, if it was; /// specified, nullptr otherwise.; /// \param NumThreads The value corresponding to the num_threads clause, if; /// any, or nullptr.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:390,Modifiability,variab,variables,390,"/// Emits code for parallel or serial call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run in parallel threads. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; /// \param IfCond Condition in the associated 'if' clause, if it was; /// specified, nullptr otherwise.; /// \param NumThreads The value corresponding to the num_threads clause, if; /// any, or nullptr.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:12,Availability,mask,masked,12,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:39,Availability,Mask,MaskedOpGen,39,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:110,Availability,mask,masked,110,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:12,Availability,mask,masked,12,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.; /// Emits code for a taskyield directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:39,Availability,Mask,MaskedOpGen,39,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.; /// Emits code for a taskyield directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:110,Availability,mask,masked,110,/// Emits a masked region.; /// \param MaskedOpGen Generator for the statement associated with the given; /// masked region.; /// Emits code for a taskyield directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:311,Usability,simpl,simple,311,"/// Emit an implicit/explicit barrier for OpenMP threads.; /// \param Kind Directive for which this implicit barrier call must be; /// generated. Must be OMPD_barrier for explicit barrier generation.; /// \param EmitChecks true if need to emit checks for cancellation barriers.; /// \param ForceSimpleCall true simple barrier call must be emitted, false if; /// runtime class decides which one to emit (simple or with cancellation; /// checks).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:403,Usability,simpl,simple,403,"/// Emit an implicit/explicit barrier for OpenMP threads.; /// \param Kind Directive for which this implicit barrier call must be; /// generated. Must be OMPD_barrier for explicit barrier generation.; /// \param EmitChecks true if need to emit checks for cancellation barriers.; /// \param ForceSimpleCall true simple barrier call must be emitted, false if; /// runtime class decides which one to emit (simple or with cancellation; /// checks).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:32,Energy Efficiency,schedul,scheduled,32,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:142,Energy Efficiency,schedul,schedule,142,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:420,Energy Efficiency,Schedul,ScheduleKind,420,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:433,Energy Efficiency,Schedul,Schedule,433,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:466,Energy Efficiency,schedul,schedule,466,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:120,Integrability,Depend,Depending,120,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:194,Integrability,rout,routine,194,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:525,Modifiability,variab,variable,525,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:586,Modifiability,variab,variable,586,"/// This is used for non static scheduled types and when the ordered; /// clause is present on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds \a LB and \a UB and stride \a ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param Ordered true if loop is ordered, false otherwise.; /// \param DispatchValues struct containing llvm values for lower bound, upper; /// bound, and chunk expression.; /// For the default (nullptr) value, the chunk 1 will be used.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:131,Energy Efficiency,schedul,schedule,131,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:243,Energy Efficiency,schedul,schedule,243,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:553,Energy Efficiency,Schedul,ScheduleKind,553,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:566,Energy Efficiency,Schedul,Schedule,566,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:599,Energy Efficiency,schedul,schedule,599,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Integrability,rout,routine,33,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:221,Integrability,Depend,Depending,221,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:295,Integrability,rout,routine,295,"/// Call the appropriate runtime routine to initialize it before start; /// of loop.; ///; /// This is used only in case of static schedule, when the user did not; /// specify a ordered clause on the loop construct.; /// Depending on the loop schedule, it is necessary to call some runtime; /// routine before start of the OpenMP loop to get the loop upper / lower; /// bounds LB and UB and stride ST.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive.; /// \param ScheduleKind Schedule kind, specified by the 'schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:119,Energy Efficiency,Schedul,Schedule,119,"///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param SchedKind Schedule kind, specified by the 'dist_schedule' clause.; /// \param Values Input arguments for the construct.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:120,Energy Efficiency,schedul,scheduling,120,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Integrability,rout,routine,33,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:271,Modifiability,variab,variable,271,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:332,Modifiability,variab,variable,332,/// Call the appropriate runtime routine to notify that we finished; /// iteration of the ordered loop with the dynamic scheduling.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:33,Integrability,rout,routine,33,/// Call the appropriate runtime routine to notify that we finished; /// all the work with current loop.; ///; /// \param CGF Reference to current CodeGenFunction.; /// \param Loc Clang source location.; /// \param DKind Kind of the directive for which the static finish is emitted.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:216,Modifiability,variab,variable,216,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:277,Modifiability,variab,variable,277,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:324,Modifiability,variab,variable,324,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:428,Modifiability,variab,variable,428,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:528,Modifiability,variab,variable,528,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:628,Modifiability,variab,variable,628,"/// Call __kmpc_dispatch_next(; /// ident_t *loc, kmp_int32 tid, kmp_int32 *p_lastiter,; /// kmp_int[32|64] *p_lower, kmp_int[32|64] *p_upper,; /// kmp_int[32|64] *p_stride);; /// \param IVSize Size of the iteration variable in bits.; /// \param IVSigned Sign of the iteration variable.; /// \param IL Address of the output variable in which the flag of the; /// last iteration is returned.; /// \param LB Address of the output variable in which the lower iteration; /// number is returned.; /// \param UB Address of the output variable in which the upper iteration; /// number is returned.; /// \param ST Address of the output variable in which the stride value is; /// returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:41,Modifiability,variab,variable,41,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:108,Modifiability,variab,variable,108,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:159,Modifiability,variab,variable,159,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:281,Modifiability,variab,variable,281,/// Returns address of the threadprivate variable for the current; /// thread.; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of the reference to threadprivate var.; /// \return Address of the threadprivate variable for the current thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:52,Modifiability,variab,variable,52,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:167,Modifiability,variab,variable,167,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:238,Modifiability,variab,variable,238,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:286,Modifiability,variab,variable,286,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:337,Modifiability,variab,variable,337,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:420,Performance,Perform,PerformInit,420,/// Emit a code for initialization of threadprivate variable. It emits; /// a call to runtime library which adds initial value to the newly created; /// threadprivate variable (if it is not constant) and registers destructor; /// for the variable (if any).; /// \param VD Threadprivate variable.; /// \param VDAddr Address of the global variable \a VD.; /// \param Loc Location of threadprivate declaration.; /// \param PerformInit true if initialization expression is not constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:37,Modifiability,variab,variable,37,/// Creates artificial threadprivate variable with name \p Name and type \p; /// VarType.; /// \param VarType Type of the artificial threadprivate variable.; /// \param Name Name of the artificial threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:147,Modifiability,variab,variable,147,/// Creates artificial threadprivate variable with name \p Name and type \p; /// VarType.; /// \param VarType Type of the artificial threadprivate variable.; /// \param Name Name of the artificial threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:211,Modifiability,variab,variable,211,/// Creates artificial threadprivate variable with name \p Name and type \p; /// VarType.; /// \param VarType Type of the artificial threadprivate variable.; /// \param Name Name of the artificial threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:22,Modifiability,variab,variables,22,/// Emit flush of the variables specified in 'omp flush' directive.; /// \param Vars List of variables to flush.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:93,Modifiability,variab,variables,93,/// Emit flush of the variables specified in 'omp flush' directive.; /// \param Vars List of variables to flush.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:509,Modifiability,variab,variables,509,"/// Emit task region for the task directive. The task region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to kmp_int32 __kmpc_omp_task(ident_t *, kmp_int32 gtid,; /// kmp_task_t *new_task), where new_task is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1137,Modifiability,variab,variables,1137,"/// Emit task region for the task directive. The task region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to kmp_int32 __kmpc_omp_task(ident_t *, kmp_int32 gtid,; /// kmp_task_t *new_task), where new_task is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1200,Modifiability,variab,variables,1200,"/// Emit task region for the task directive. The task region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to kmp_int32 __kmpc_omp_task(ident_t *, kmp_int32 gtid,; /// kmp_task_t *new_task), where new_task is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:517,Modifiability,variab,variables,517,"/// Emit task region for the taskloop directive. The taskloop region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t; /// *task, int if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int; /// nogroup, int sched, kmp_uint64 grainsize, void *task_dup ), where new_task; /// is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1264,Modifiability,variab,variables,1264,"/// Emit task region for the taskloop directive. The taskloop region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t; /// *task, int if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int; /// nogroup, int sched, kmp_uint64 grainsize, void *task_dup ), where new_task; /// is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1327,Modifiability,variab,variables,1327,"/// Emit task region for the taskloop directive. The taskloop region is; /// emitted in several steps:; /// 1. Emit a call to kmp_task_t *__kmpc_omp_task_alloc(ident_t *, kmp_int32; /// gtid, kmp_int32 flags, size_t sizeof_kmp_task_t, size_t sizeof_shareds,; /// kmp_routine_entry_t *task_entry). Here task_entry is a pointer to the; /// function:; /// kmp_int32 .omp_task_entry.(kmp_int32 gtid, kmp_task_t *tt) {; /// TaskFunction(gtid, tt->part_id, tt->shareds);; /// return 0;; /// }; /// 2. Copy a list of shared variables to field shareds of the resulting; /// structure kmp_task_t returned by the previous call (if any).; /// 3. Copy a pointer to destructions function to field destructions of the; /// resulting structure kmp_task_t.; /// 4. Emit a call to void __kmpc_taskloop(ident_t *loc, int gtid, kmp_task_t; /// *task, int if_val, kmp_uint64 *lb, kmp_uint64 *ub, kmp_int64 st, int; /// nogroup, int sched, kmp_uint64 grainsize, void *task_dup ), where new_task; /// is a resulting structure from; /// previous items.; /// \param D Current task directive.; /// \param TaskFunction An LLVM function with type void (*)(i32 /*gtid*/, i32; /// /*part_id*/, captured_struct */*__context*/);; /// \param SharedsTy A type which contains references the shared variables.; /// \param Shareds Context with the list of shared variables from the \p; /// TaskFunction.; /// \param IfCond Not a nullptr if 'if' clause was specified, nullptr; /// otherwise.; /// \param Data Additional data for task generation like tiednsee, final; /// state, list of privates etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1446,Performance,perform,perform,1446,"/// Emit a code for reduction clause. Next code should be emitted for; /// reduction:; /// \code; ///; /// static kmp_critical_name lock = { 0 };; ///; /// void reduce_func(void *lhs[<n>], void *rhs[<n>]) {; /// ...; /// *(Type<i>*)lhs[i] = RedOp<i>(*(Type<i>*)lhs[i], *(Type<i>*)rhs[i]);; /// ...; /// }; ///; /// ...; /// void *RedList[<n>] = {&<RHSExprs>[0], ..., &<RHSExprs>[<n>-1]};; /// switch (__kmpc_reduce{_nowait}(<loc>, <gtid>, <n>, sizeof(RedList),; /// RedList, reduce_func, &<lock>)) {; /// case 1:; /// ...; /// <LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]);; /// ...; /// __kmpc_end_reduce{_nowait}(<loc>, <gtid>, &<lock>);; /// break;; /// case 2:; /// ...; /// Atomic(<LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]));; /// ...; /// break;; /// default:;; /// }; /// \endcode; ///; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.; /// \param Options List of options for reduction codegen:; /// WithNowait true if parent directive has also nowait clause, false; /// otherwise.; /// SimpleReduction Emit reduction operation only. Used for omp simd; /// directive on the host.; /// ReductionKind The kind of reduction to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:1309,Usability,Simpl,SimpleReduction,1309,"/// Emit a code for reduction clause. Next code should be emitted for; /// reduction:; /// \code; ///; /// static kmp_critical_name lock = { 0 };; ///; /// void reduce_func(void *lhs[<n>], void *rhs[<n>]) {; /// ...; /// *(Type<i>*)lhs[i] = RedOp<i>(*(Type<i>*)lhs[i], *(Type<i>*)rhs[i]);; /// ...; /// }; ///; /// ...; /// void *RedList[<n>] = {&<RHSExprs>[0], ..., &<RHSExprs>[<n>-1]};; /// switch (__kmpc_reduce{_nowait}(<loc>, <gtid>, <n>, sizeof(RedList),; /// RedList, reduce_func, &<lock>)) {; /// case 1:; /// ...; /// <LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]);; /// ...; /// __kmpc_end_reduce{_nowait}(<loc>, <gtid>, &<lock>);; /// break;; /// case 2:; /// ...; /// Atomic(<LHSExprs>[i] = RedOp<i>(*<LHSExprs>[i], *<RHSExprs>[i]));; /// ...; /// break;; /// default:;; /// }; /// \endcode; ///; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.; /// \param Options List of options for reduction codegen:; /// WithNowait true if parent directive has also nowait clause, false; /// otherwise.; /// SimpleReduction Emit reduction operation only. Used for omp simd; /// directive on the host.; /// ReductionKind The kind of reduction to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:83,Modifiability,variab,variables,83,/// Required to resolve existing problems in the runtime. Emits threadprivate; /// variables to store the size of the VLAs/array sections for; /// initializer/combiner/finalizer functions + emits threadprivate variable to; /// store the pointer to the original reduction item for the custom; /// initializer defined by declare reduction construct.; /// \param RCG Allows to reuse an existing data for the reductions.; /// \param N Reduction item for which fixups must be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:210,Modifiability,variab,variable,210,/// Required to resolve existing problems in the runtime. Emits threadprivate; /// variables to store the size of the VLAs/array sections for; /// initializer/combiner/finalizer functions + emits threadprivate variable to; /// store the pointer to the original reduction item for the custom; /// initializer defined by declare reduction construct.; /// \param RCG Allows to reuse an existing data for the reductions.; /// \param N Reduction item for which fixups must be emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:152,Availability,failure,failure,152,"/// Emit the target offloading code associated with \a D. The emitted; /// code attempts offloading the execution to the device, an the event of; /// a failure it executes the host version outlined in \a OutlinedFn.; /// \param D Directive to emit.; /// \param OutlinedFn Host version of the code to be offloaded.; /// \param OutlinedFnID ID of host version of the code to be offloaded.; /// \param IfCond Expression evaluated in if clause associated with the target; /// directive, or null if no if clause is used.; /// \param Device Expression evaluated in device clause associated with the; /// target directive, or null if no device clause is used and device modifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:20,Modifiability,variab,variable,20,/// Emit the global variable if it is a valid device global variable.; /// Returns true if \a GD was dealt with successfully.; /// \param GD Variable declaration to emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:60,Modifiability,variab,variable,60,/// Emit the global variable if it is a valid device global variable.; /// Returns true if \a GD was dealt with successfully.; /// \param GD Variable declaration to emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:141,Modifiability,Variab,Variable,141,/// Emit the global variable if it is a valid device global variable.; /// Returns true if \a GD was dealt with successfully.; /// \param GD Variable declaration to emit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:61,Modifiability,variab,variables,61,"/// Emits code for teams call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run by team masters. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:373,Modifiability,variab,variables,373,"/// Emits code for teams call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run by team masters. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:136,Deployability,update,update,136,"/// Emit the data mapping/movement code associated with the directive; /// \a D that should be of the form 'target [{enter|exit} data | update]'.; /// \param D Directive to emit.; /// \param IfCond Expression evaluated in if clause associated with the target; /// directive, or null if no if clause is used.; /// \param Device Expression evaluated in device clause associated with the; /// target directive, or null if no device clause is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:51,Integrability,depend,depend,51,/// Emit code for doacross ordered directive with 'depend' clause.; /// \param C 'depend' clause with 'sink|source' dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:82,Integrability,depend,depend,82,/// Emit code for doacross ordered directive with 'depend' clause.; /// \param C 'depend' clause with 'sink|source' dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:116,Integrability,depend,dependency,116,/// Emit code for doacross ordered directive with 'depend' clause.; /// \param C 'depend' clause with 'sink|source' dependency kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:120,Integrability,depend,dependence,120,/// Emit code for doacross ordered directive with 'doacross' clause.; /// \param C 'doacross' clause with 'sink|source' dependence type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h:50,Modifiability,variab,variable,50,/// Gets the OpenMP-specific address of the local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntime.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:35,Integrability,Interface,Interface,35,"//===---- CGOpenMPRuntimeGPU.cpp - Interface to OpenMP GPU Runtimes ----===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides a generalized class for OpenMP runtime code generation; // specialized by GPU targets NVPTX and AMDGCN.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:241,Performance,optimiz,optimized,241,/// A class to track the execution mode when codegening directives within; /// a target region. The appropriate mode (SPMD|NON-SPMD) is set on entry; /// to the target region and used by containing directives such as 'parallel'; /// to emit optimized code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:20,Modifiability,variab,variables,20,/// Get the list of variables that can escape their declaration context.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:35,Modifiability,variab,variables,35,// Do not globalize declare target variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Modifiability,Variab,Variables,3,// Variables captured by value must be globalized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:32,Modifiability,variab,variable,32,// Check if need to capture the variable that was already captured by; // value in the outer region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:20,Modifiability,variab,variables,20,// Do not globalize variables with reference type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:72,Modifiability,variab,variable,72,// If not captured at the target region level then mark the escaped; // variable as delayed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:16,Modifiability,variab,variable,16,// Check if the variable is privatized in the combined construct and; // those private copies must be shared in the inner parallel; // directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:58,Modifiability,variab,variables,58,/// Returns the record that handles all the escaped local variables and used; /// instead of their original storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:63,Modifiability,variab,variable,63,/// Returns the field in the globalized record for the escaped variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:42,Modifiability,variab,variables,42,/// Returns the list of the escaped local variables/parameters.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:32,Modifiability,variab,variable,32,/// Checks if the escaped local variable is actually a parameter passed by; /// value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:36,Modifiability,variab,variables,36,/// Returns the list of the escaped variables with the variably modified; /// types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:55,Modifiability,variab,variably,55,/// Returns the list of the escaped variables with the variably modified; /// types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:36,Modifiability,variab,variables,36,/// Returns the list of the delayed variables with the variably modified; /// types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:55,Modifiability,variab,variably,55,/// Returns the list of the delayed variables with the variably modified; /// types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:174,Energy Efficiency,efficient,efficient,174,"// anonymous namespace; /// Get the id of the warp in the block.; /// We assume that the warp size is 32, which is always the case; /// on the NVPTX device, to generate more efficient code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:157,Energy Efficiency,efficient,efficient,157,"/// Get the id of the current lane in the Warp.; /// We assume that the warp size is 32, which is always the case; /// on the NVPTX device, to generate more efficient code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,Modifiability,variab,variables,28,/// Get list of lastprivate variables from the teams distribute ... or; /// teams {distribute ...} directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:26,Modifiability,variab,variables,26,/// Get list of reduction variables from the teams ... directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:29,Modifiability,variab,variable,29,// Globalize team reductions variable unconditionally in all modes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:46,Modifiability,variab,variable,46,// Get the local allocation of a firstprivate variable before sharing,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for the variable to be globalized,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:26,Modifiability,variab,variable,26,// Allocate space for the variable to be globalized,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,Modifiability,variab,variables,28,// FIXME: We should use the variables actual alignment as an argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:63,Modifiability,variab,variable,63,// Cast the void pointer and get the address of the globalized variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9,Modifiability,variab,variable,9,// Check variable declaration is delayed:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Allocate,Allocate,3,// Allocate space for this VLA object to be globalized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:15,Usability,simpl,simple,15,// Always emit simple barriers!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:15,Usability,simpl,simple,15,// Always emit simple barriers!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:11,Availability,mask,mask,11,// Get the mask of active threads in the warp.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:26,Modifiability,variab,variable,26,// Initialize the counter variable for the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9,Testability,test,tests,9,"// Block tests which single thread should execute region, and which threads; // should go straight to synchronisation point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:215,Modifiability,variab,variable,215,"// After the body surrounded by the critical region, the single executing; // thread will jump to the synchronisation point.; // Block waits for all threads in current team to finish then increments the; // counter variable and returns to the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:77,Modifiability,variab,variables,77,/// This function creates calls to one of two shuffle functions to copy; /// variables between lanes in a warp.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:65,Integrability,rout,routines,65,// Cast all types to 32- or 64-bit values before calling shuffle routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:35,Energy Efficiency,Reduce,Reduce,35,// RemoteLaneToThread: Copy over a Reduce list from a remote lane in; // the warp using shuffle instructions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:32,Energy Efficiency,Reduce,Reduce,32,// ThreadCopy: Make a copy of a Reduce list on the thread's stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:32,Energy Efficiency,Reduce,Reduce,32,"/// Emit instructions to copy a Reduce list, which contains partially; /// aggregated values, in the specified direction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:52,Energy Efficiency,Reduce,Reduce,52,"// Iterates, element-by-element, through the source Reduce list and; // make a copy.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:18,Deployability,update,update,18,// Set to true to update the pointer in the dest Reduce list to a; // newly created element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:49,Energy Efficiency,Reduce,Reduce,49,// Set to true to update the pointer in the dest Reduce list to a; // newly created element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:56,Energy Efficiency,Reduce,Reduce,56,// Step 1.1: Get the address for the src element in the Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:76,Energy Efficiency,Reduce,Reduce,76,// Step 1.2: Create a temporary to store the element in the destination; // Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:56,Energy Efficiency,Reduce,Reduce,56,// Step 1.1: Get the address for the src element in the Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:51,Performance,load,load,51,"// Regardless of src and dest of copy, we emit the load of src; // element as this is required in all directions",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:62,Energy Efficiency,Reduce,Reduce,62,"// Now that all active lanes have read the element in the; // Reduce list, shuffle over the value from the remote lane.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:38,Energy Efficiency,Reduce,Reduce,38,"// Step 3.1: Modify reference in dest Reduce list as needed.; // Modifying the reference in Reduce list to point to the newly; // created element. The element is live in the current function; // scope and that of functions it invokes (i.e., reduce_function).; // RemoteReduceData[i] = (void*)&RemoteElem",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:92,Energy Efficiency,Reduce,Reduce,92,"// Step 3.1: Modify reference in dest Reduce list as needed.; // Modifying the reference in Reduce list to point to the newly; // created element. The element is live in the current function; // scope and that of functions it invokes (i.e., reduce_function).; // RemoteReduceData[i] = (void*)&RemoteElem",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:46,Energy Efficiency,Reduce,Reduce,46,"/// This function emits a helper that gathers Reduce lists from the first; /// lane of every active warp to lanes in the first warp.; ///; /// void inter_warp_copy_func(void* reduce_data, num_warps); /// shared smem[warp_size];; /// For all data entries D in reduce_data:; /// sync; /// If (I am the first lane in each warp); /// Copy my local D to smem[warp_id]; /// sync; /// if (I am the first warp); /// Copy smem[thread_id] to my local D",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Reduce,ReduceList,3,"// ReduceList: thread local Reduce list.; // At the stage of the computation when this function is called, partially; // aggregated values reside in the first lane of every active warp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,Energy Efficiency,Reduce,Reduce,28,"// ReduceList: thread local Reduce list.; // At the stage of the computation when this function is called, partially; // aggregated values reside in the first lane of every active warp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:51,Energy Efficiency,reduce,reduce,51,"// This array is used as a medium to transfer, one reduce element at a time,; // the data from the first lane of every warp to lanes in the first warp; // in order to perform the final step of a reduction in a parallel region; // (reduction across warps). The array is placed in NVPTX __shared__ memory; // for reduced latency, as well as to have a distinct copy for concurrently; // executing target regions. The array is declared with common linkage so; // as to be shared across compilation units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:311,Energy Efficiency,reduce,reduced,311,"// This array is used as a medium to transfer, one reduce element at a time,; // the data from the first lane of every warp to lanes in the first warp; // in order to perform the final step of a reduction in a parallel region; // (reduction across warps). The array is placed in NVPTX __shared__ memory; // for reduced latency, as well as to have a distinct copy for concurrently; // executing target regions. The array is declared with common linkage so; // as to be shared across compilation units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:167,Performance,perform,perform,167,"// This array is used as a medium to transfer, one reduce element at a time,; // the data from the first lane of every warp to lanes in the first warp; // in order to perform the final step of a reduction in a parallel region; // (reduction across warps). The array is placed in NVPTX __shared__ memory; // for reduced latency, as well as to have a distinct copy for concurrently; // executing target regions. The array is declared with common linkage so; // as to be shared across compilation units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:319,Performance,latency,latency,319,"// This array is used as a medium to transfer, one reduce element at a time,; // the data from the first lane of every warp to lanes in the first warp; // in order to perform the final step of a reduction in a parallel region; // (reduction across warps). The array is placed in NVPTX __shared__ memory; // for reduced latency, as well as to have a distinct copy for concurrently; // executing target regions. The array is declared with common linkage so; // as to be shared across compilation units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:367,Performance,concurren,concurrently,367,"// This array is used as a medium to transfer, one reduce element at a time,; // the data from the first lane of every warp to lanes in the first warp; // in order to perform the final step of a reduction in a parallel region; // (reduction across warps). The array is placed in NVPTX __shared__ memory; // for reduced latency, as well as to have a distinct copy for concurrently; // executing target regions. The array is declared with common linkage so; // as to be shared across compilation units.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:26,Energy Efficiency,reduce,reduce,26,//; // Warp master copies reduce element to transfer medium in __shared__; // memory.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Reduce,Reduce,3,// Reduce element = LocalReduceList[i],MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:21,Energy Efficiency,reduce,reduce,21,//; // Warp 0 copies reduce element from transfer medium.; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1707,Availability,Alive,Alive,1707,"roth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1929,Availability,alive,alive,1929,"/ All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2019,Availability,alive,alive,2019,"ems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2048,Availability,alive,alive,2048,"ower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2390,Availability,alive,alive,2390,"ed across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Red",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:23,Energy Efficiency,reduce,reduces,23,"/// Emit a helper that reduces data across two OpenMP threads (lanes); /// in the same warp. It uses shuffle instructions to copy over data from; /// a remote lane's stack. The reduction algorithm performed is specified; /// by the fourth parameter.; ///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:295,Energy Efficiency,Reduce,Reduce,295,"/// Emit a helper that reduces data across two OpenMP threads (lanes); /// in the same warp. It uses shuffle instructions to copy over data from; /// a remote lane's stack. The reduction algorithm performed is specified; /// by the fourth parameter.; ///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:487,Energy Efficiency,Reduce,Reduce,487,"/// Emit a helper that reduces data across two OpenMP threads (lanes); /// in the same warp. It uses shuffle instructions to copy over data from; /// a remote lane's stack. The reduction algorithm performed is specified; /// by the fourth parameter.; ///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:809,Energy Efficiency,Reduce,Reduce,809,"/// Emit a helper that reduces data across two OpenMP threads (lanes); /// in the same warp. It uses shuffle instructions to copy over data from; /// a remote lane's stack. The reduction algorithm performed is specified; /// by the fourth parameter.; ///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:920,Energy Efficiency,reduce,reduced,920,"/// Emit a helper that reduces data across two OpenMP threads (lanes); /// in the same warp. It uses shuffle instructions to copy over data from; /// a remote lane's stack. The reduction algorithm performed is specified; /// by the fourth parameter.; ///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1193,Energy Efficiency,Reduce,Reduce,1193,"///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Ef",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1214,Energy Efficiency,Reduce,Reduce,1214,"///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Ef",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1315,Energy Efficiency,reduce,reduced,1315,"///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Ef",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1344,Energy Efficiency,Reduce,Reduce,1344,"; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1362,Energy Efficiency,Reduce,Reduce,1362,"; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1427,Energy Efficiency,reduce,reduce,1427,"; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1456,Energy Efficiency,Reduce,Reduce,1456,"):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The ot",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1481,Energy Efficiency,Reduce,Reduce,1481,"):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The ot",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1564,Energy Efficiency,reduce,reduce,1564,"):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The ot",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2732,Energy Efficiency,Reduce,Reduce,2732,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2833,Energy Efficiency,Reduce,Reduce,2833,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2862,Energy Efficiency,Reduce,Reduce,2862,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2920,Energy Efficiency,Reduce,Reduce,2920,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3207,Energy Efficiency,Reduce,Reduce,3207,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3317,Energy Efficiency,Reduce,Reduce,3317,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:197,Performance,perform,performed,197,"/// Emit a helper that reduces data across two OpenMP threads (lanes); /// in the same warp. It uses shuffle instructions to copy over data from; /// a remote lane's stack. The reduction algorithm performed is specified; /// by the fourth parameter.; ///; /// Algorithm Versions.; /// Full Warp Reduce (argument value 0):; /// This algorithm assumes that all 32 lanes are active and gathers; /// data from these 32 lanes, producing a single resultant value.; /// Contiguous Partial Warp Reduce (argument value 1):; /// This algorithm assumes that only a *contiguous* subset of lanes; /// are active. This happens for the last warp in a parallel region; /// when the user specified num_threads is not an integer multiple of; /// 32. This contiguous subset always starts with the zeroth lane.; /// Partial Warp Reduce (argument value 2):; /// This algorithm gathers data from any number of lanes at any position.; /// All reduced values are stored in the lowest possible lane. The set; /// of problems every algorithm addresses is a super set of those; /// addressable by algorithms with a lower version number. Overhead; /// increases as algorithm version increases.; ///; /// Terminology; /// Reduce element:; /// Reduce element refers to the individual data field with primitive; /// data types to be combined and reduced across threads.; /// Reduce list:; /// Reduce list refers to a collection of local, thread-private; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2427,Performance,perform,perform,2427,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2524,Usability,simpl,simply,2524,"te; /// reduce elements.; /// Remote Reduce list:; /// Remote Reduce list refers to a collection of remote (relative to; /// the current thread) reduce elements.; ///; /// We distinguish between three states of threads that are important to; /// the implementation of this function.; /// Alive threads:; /// Threads in a warp executing the SIMT instruction, as distinguished from; /// threads that are inactive due to divergent control flow.; /// Active threads:; /// The minimal set of threads that has to be alive upon entry to this; /// function. The computation is correct iff active threads are alive.; /// Some threads are alive but they are not active because they do not; /// contribute to the computation in any useful manner. Turning them off; /// may introduce control flow overheads without any tangible benefits.; /// Effective threads:; /// In order to comply with the argument requirements of the shuffle; /// function, we must keep all lanes holding data alive. But at most; /// half of them perform value aggregation; we refer to this half of; /// threads as effective. The other half is simply handing off their; /// data.; ///; /// Procedure; /// Value shuffle:; /// In this step active threads transfer data from higher lane positions; /// in the warp to lower lane positions, creating Remote Reduce list.; /// Value aggregation:; /// In this step, effective threads combine their thread local Reduce list; /// with Remote Reduce list and store the result in the thread local; /// Reduce list.; /// Value copy:; /// In this step, we deal with the assumption made by algorithm 2; /// (i.e. contiguity assumption). When we have an odd number of lanes; /// active, say 2k+1, only k threads will be effective and therefore k; /// new values will be produced. However, the Reduce list owned by the; /// (2k+1)th thread is ignored in the value aggregation. Therefore; /// we copy the Reduce list from the (2k+1)th lane to (k+1)th lane so; /// that the contiguity assumption still holds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:16,Energy Efficiency,Reduce,Reduce,16,// Thread local Reduce list used to host the values of data to be reduced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:66,Energy Efficiency,reduce,reduced,66,// Thread local Reduce list used to host the values of data to be reduced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:29,Testability,log,logical,29,// Current lane id; could be logical.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:54,Energy Efficiency,Reduce,Reduce,54,// Create a local thread-private variable to host the Reduce list; // from a remote lane.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:33,Modifiability,variab,variable,33,// Create a local thread-private variable to host the Reduce list; // from a remote lane.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:42,Energy Efficiency,reduce,reduce,42,"// This loop iterates through the list of reduce elements and copies,; // element by element, from a remote lane in the warp to RemoteReduceList,; // hosted on the thread's stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:45,Energy Efficiency,Reduce,Reduce,45,"// The actions to be performed on the Remote Reduce list is dependent; // on the algorithm version.; //; // if (AlgoVer==0) || (AlgoVer==1 && (LaneId < Offset)) || (AlgoVer==2 &&; // LaneId % 2 == 0 && Offset > 0):; // do the reduction value aggregation; //; // The thread local variable Reduce list is mutated in place to host the; // reduced data, which is the aggregated value produced from local and; // remote lanes.; //; // Note that AlgoVer is expected to be a constant integer known at compile; // time.; // When AlgoVer==0, the first conjunction evaluates to true, making; // the entire predicate true during compile time.; // When AlgoVer==1, the second conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.; // When AlgoVer==2, the third conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:288,Energy Efficiency,Reduce,Reduce,288,"// The actions to be performed on the Remote Reduce list is dependent; // on the algorithm version.; //; // if (AlgoVer==0) || (AlgoVer==1 && (LaneId < Offset)) || (AlgoVer==2 &&; // LaneId % 2 == 0 && Offset > 0):; // do the reduction value aggregation; //; // The thread local variable Reduce list is mutated in place to host the; // reduced data, which is the aggregated value produced from local and; // remote lanes.; //; // Note that AlgoVer is expected to be a constant integer known at compile; // time.; // When AlgoVer==0, the first conjunction evaluates to true, making; // the entire predicate true during compile time.; // When AlgoVer==1, the second conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.; // When AlgoVer==2, the third conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:336,Energy Efficiency,reduce,reduced,336,"// The actions to be performed on the Remote Reduce list is dependent; // on the algorithm version.; //; // if (AlgoVer==0) || (AlgoVer==1 && (LaneId < Offset)) || (AlgoVer==2 &&; // LaneId % 2 == 0 && Offset > 0):; // do the reduction value aggregation; //; // The thread local variable Reduce list is mutated in place to host the; // reduced data, which is the aggregated value produced from local and; // remote lanes.; //; // Note that AlgoVer is expected to be a constant integer known at compile; // time.; // When AlgoVer==0, the first conjunction evaluates to true, making; // the entire predicate true during compile time.; // When AlgoVer==1, the second conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.; // When AlgoVer==2, the third conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:60,Integrability,depend,dependent,60,"// The actions to be performed on the Remote Reduce list is dependent; // on the algorithm version.; //; // if (AlgoVer==0) || (AlgoVer==1 && (LaneId < Offset)) || (AlgoVer==2 &&; // LaneId % 2 == 0 && Offset > 0):; // do the reduction value aggregation; //; // The thread local variable Reduce list is mutated in place to host the; // reduced data, which is the aggregated value produced from local and; // remote lanes.; //; // Note that AlgoVer is expected to be a constant integer known at compile; // time.; // When AlgoVer==0, the first conjunction evaluates to true, making; // the entire predicate true during compile time.; // When AlgoVer==1, the second conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.; // When AlgoVer==2, the third conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:279,Modifiability,variab,variable,279,"// The actions to be performed on the Remote Reduce list is dependent; // on the algorithm version.; //; // if (AlgoVer==0) || (AlgoVer==1 && (LaneId < Offset)) || (AlgoVer==2 &&; // LaneId % 2 == 0 && Offset > 0):; // do the reduction value aggregation; //; // The thread local variable Reduce list is mutated in place to host the; // reduced data, which is the aggregated value produced from local and; // remote lanes.; //; // Note that AlgoVer is expected to be a constant integer known at compile; // time.; // When AlgoVer==0, the first conjunction evaluates to true, making; // the entire predicate true during compile time.; // When AlgoVer==1, the second conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.; // When AlgoVer==2, the third conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:21,Performance,perform,performed,21,"// The actions to be performed on the Remote Reduce list is dependent; // on the algorithm version.; //; // if (AlgoVer==0) || (AlgoVer==1 && (LaneId < Offset)) || (AlgoVer==2 &&; // LaneId % 2 == 0 && Offset > 0):; // do the reduction value aggregation; //; // The thread local variable Reduce list is mutated in place to host the; // reduced data, which is the aggregated value produced from local and; // remote lanes.; //; // Note that AlgoVer is expected to be a constant integer known at compile; // time.; // When AlgoVer==0, the first conjunction evaluates to true, making; // the entire predicate true during compile time.; // When AlgoVer==1, the second conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.; // When AlgoVer==2, the third conjunction has only the second part to be; // evaluated during runtime. Other conjunctions evaluates to false; // during compile time.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:53,Energy Efficiency,Reduce,Reduce,53,// if (AlgoVer==1 && (LaneId >= Offset)) copy Remote Reduce list to local; // Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:78,Energy Efficiency,Reduce,Reduce,78,// if (AlgoVer==1 && (LaneId >= Offset)) copy Remote Reduce list to local; // Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:63,Modifiability,variab,variables,63,"/// This function emits a helper that copies all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_copy_func(void *buffer, int Idx, void *reduce_data); /// For all data entries D in reduce_data:; /// Copy local D to buffer.D[Idx]",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:142,Modifiability,variab,variables,142,"/// This function emits a helper that copies all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_copy_func(void *buffer, int Idx, void *reduce_data); /// For all data entries D in reduce_data:; /// Copy local D to buffer.D[Idx]",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Reduce,ReduceList,3,// ReduceList: thread local Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,Energy Efficiency,Reduce,Reduce,28,// ReduceList: thread local Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Reduce,Reduce,3,// Reduce element = LocalReduceList[i],MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:38,Energy Efficiency,reduce,reduces,38,"/// This function emits a helper that reduces all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_reduce_func(void *buffer, int Idx, void *reduce_data); /// void *GlobPtrs[];; /// GlobPtrs[0] = (void*)&buffer.D0[Idx];; /// ...; /// GlobPtrs[N] = (void*)&buffer.DN[Idx];; /// reduce_function(GlobPtrs, reduce_data);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:64,Modifiability,variab,variables,64,"/// This function emits a helper that reduces all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_reduce_func(void *buffer, int Idx, void *reduce_data); /// void *GlobPtrs[];; /// GlobPtrs[0] = (void*)&buffer.D0[Idx];; /// ...; /// GlobPtrs[N] = (void*)&buffer.DN[Idx];; /// reduce_function(GlobPtrs, reduce_data);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:143,Modifiability,variab,variables,143,"/// This function emits a helper that reduces all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_reduce_func(void *buffer, int Idx, void *reduce_data); /// void *GlobPtrs[];; /// GlobPtrs[0] = (void*)&buffer.D0[Idx];; /// ...; /// GlobPtrs[N] = (void*)&buffer.DN[Idx];; /// reduce_function(GlobPtrs, reduce_data);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Reduce,ReduceList,3,// ReduceList: thread local Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,Energy Efficiency,Reduce,Reduce,28,// ReduceList: thread local Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:32,Modifiability,variab,variables,32,"// 1. Build a list of reduction variables.; // void *RedList[<n>] = {<ReductionVars>[0], ..., <ReductionVars>[<n>-1]};",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:42,Energy Efficiency,Reduce,ReduceList,42,"// Call reduce_function(GlobalReduceList, ReduceList)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:63,Modifiability,variab,variables,63,"/// This function emits a helper that copies all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_copy_func(void *buffer, int Idx, void *reduce_data); /// For all data entries D in reduce_data:; /// Copy buffer.D[Idx] to local D;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:142,Modifiability,variab,variables,142,"/// This function emits a helper that copies all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void list_to_global_copy_func(void *buffer, int Idx, void *reduce_data); /// For all data entries D in reduce_data:; /// Copy buffer.D[Idx] to local D;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Reduce,ReduceList,3,// ReduceList: thread local Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,Energy Efficiency,Reduce,Reduce,28,// ReduceList: thread local Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Reduce,Reduce,3,// Reduce element = LocalReduceList[i],MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:38,Energy Efficiency,reduce,reduces,38,"/// This function emits a helper that reduces all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void global_to_list_reduce_func(void *buffer, int Idx, void *reduce_data); /// void *GlobPtrs[];; /// GlobPtrs[0] = (void*)&buffer.D0[Idx];; /// ...; /// GlobPtrs[N] = (void*)&buffer.DN[Idx];; /// reduce_function(reduce_data, GlobPtrs);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:64,Modifiability,variab,variables,64,"/// This function emits a helper that reduces all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void global_to_list_reduce_func(void *buffer, int Idx, void *reduce_data); /// void *GlobPtrs[];; /// GlobPtrs[0] = (void*)&buffer.D0[Idx];; /// ...; /// GlobPtrs[N] = (void*)&buffer.DN[Idx];; /// reduce_function(reduce_data, GlobPtrs);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:143,Modifiability,variab,variables,143,"/// This function emits a helper that reduces all the reduction variables from; /// the team into the provided global buffer for the reduction variables.; ///; /// void global_to_list_reduce_func(void *buffer, int Idx, void *reduce_data); /// void *GlobPtrs[];; /// GlobPtrs[0] = (void*)&buffer.D0[Idx];; /// ...; /// GlobPtrs[N] = (void*)&buffer.DN[Idx];; /// reduce_function(reduce_data, GlobPtrs);",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3,Energy Efficiency,Reduce,ReduceList,3,// ReduceList: thread local Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:28,Energy Efficiency,Reduce,Reduce,28,// ReduceList: thread local Reduce list.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:32,Modifiability,variab,variables,32,"// 1. Build a list of reduction variables.; // void *RedList[<n>] = {<ReductionVars>[0], ..., <ReductionVars>[<n>-1]};",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:24,Energy Efficiency,Reduce,ReduceList,24,"// Call reduce_function(ReduceList, GlobalReduceList)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:6343,Availability,mask,mask,6343,"n, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// #reduce_elem refers to an element in the local lane's data structure; /// #remote_elem is retrieved from a remote lane; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// reduce_elem = reduce_elem REDUCE_OP remote_elem;; ///; /// Contiguous Partial Warp Reduction; ///; /// This reduce algorithm is used within a warp where only the first; /// 'n' (n <= WARPSIZE) lanes are active. It is typically used when the; /// number of OpenMP threads in a parallel region is not a multiple of; /// WARPSIZE. The algorithm is implemented in the runtime as follows:; ///; /// void; /// contiguous_partial_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn,; /// int size, int lane_id) {; /// int curr_size;; /// int offset;; /// curr_size = size;; /// mask = curr_size/2;; /// while (offset>0) {; /// ShuffleReduceFn(reduce_data, lane_id, offset, 1);; /// curr_size = (curr_size+1)/2;; /// offset = curr_size/2;; /// }; /// }; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id < offset); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; /// This algorithm assumes that the data to be reduced are located in a; /// contiguous subset of lanes starting from the first. When there is; /// an odd number of active lanes, the data in the last lane is not; /// aggregated with any other lane's dat but is instead copied over.; ///; /// Dispersed Partial Warp Reduction; ///; /// This algorithm is used within a warp when any discontiguous subset of; /// lanes are active. It is used to implement the reduction operation; /// across lanes in an OpenMP simd region or in a nested parallel region.; ///; /// void; /// dispersed_partial_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// int size, remote_id;; /// int logical_la",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:375,Energy Efficiency,reduce,reduced,375,"///; /// Design of OpenMP reductions on the GPU; ///; /// Consider a typical OpenMP program with one or more reduction; /// clauses:; ///; /// float foo;; /// double bar;; /// #pragma omp target teams distribute parallel for \; /// reduction(+:foo) reduction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduc",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:636,Energy Efficiency,efficient,efficiently,636,"///; /// Design of OpenMP reductions on the GPU; ///; /// Consider a typical OpenMP program with one or more reduction; /// clauses:; ///; /// float foo;; /// double bar;; /// #pragma omp target teams distribute parallel for \; /// reduction(+:foo) reduction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduc",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:805,Energy Efficiency,efficient,efficiently,805,"///; /// Design of OpenMP reductions on the GPU; ///; /// Consider a typical OpenMP program with one or more reduction; /// clauses:; ///; /// float foo;; /// double bar;; /// #pragma omp target teams distribute parallel for \; /// reduction(+:foo) reduction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduc",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1549,Energy Efficiency,reduce,reduces,1549,"threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1724,Energy Efficiency,reduce,reduce,1724,"se, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1850,Energy Efficiency,reduce,reduceData,1850,"eadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1924,Energy Efficiency,Reduce,ReduceData,1924,"eadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1980,Energy Efficiency,reduce,reduceData,1980,"eadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1996,Energy Efficiency,reduce,reduceData,1996,"eadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2031,Energy Efficiency,reduce,reduceData,2031,"///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2221,Energy Efficiency,Reduce,ReduceData,2221,"ion variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Diff",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2373,Energy Efficiency,reduce,reduces,2373,"r is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// c",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2400,Energy Efficiency,Reduce,ReduceData,2400,"r is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// c",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2543,Energy Efficiency,Reduce,ReduceData,2543,"ces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduce",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2741,Energy Efficiency,Reduce,ReduceData,2741,"ce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2767,Energy Efficiency,reduce,reduced,2767,"ce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2941,Energy Efficiency,efficient,efficient,2941,"; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scrat",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2978,Energy Efficiency,reduce,reduces,2978,"; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scrat",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3548,Energy Efficiency,reduce,reduced,3548,"ariable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceDat",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3658,Energy Efficiency,Reduce,ReduceData,3658,"erate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms impl",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3775,Energy Efficiency,reduce,reduce,3775,"e reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3833,Energy Efficiency,reduce,reduced,3833," which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3917,Energy Efficiency,reduce,reduceData,3917," the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offs",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4055,Energy Efficiency,reduce,reduced,4055," the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offs",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4230,Energy Efficiency,reduce,reduces,4230,"ime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4459,Energy Efficiency,reduce,reduced,4459,"ifferent circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id set to 0 because it is; /// not used therefore we save instructions by not retrieving lane_id; /// from the corresponding special registers. The 4th parameter, which; /// represents the version of the algorithm being used, is set to 0 to; /// sig",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4517,Energy Efficiency,reduce,reduceData,4517," a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id set to 0 because it is; /// not used therefore we save instructions by not retrieving lane_id; /// from the corresponding special registers. The 4th parameter, which; /// represents the version of the algorithm being used, is set to 0 to; /// signify full warp reduction.; ///; /// In this version, 'ShuffleReduc",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4540,Energy Efficiency,reduce,reduceData,4540,"ers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id set to 0 because it is; /// not used therefore we save instructions by not retrieving lane_id; /// from the corresponding special registers. The 4th parameter, which; /// represents the version of the algorithm being used, is set to 0 to; /// signify full warp reduction.; ///; /// In this version, 'ShuffleReduceFn' behaves, per elemen",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4774,Energy Efficiency,reduce,reduce,4774,"memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id set to 0 because it is; /// not used therefore we save instructions by not retrieving lane_id; /// from the corresponding special registers. The 4th parameter, which; /// represents the version of the algorithm being used, is set to 0 to; /// signify full warp reduction.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// #reduce_elem refers to an element in the local lane's data structure; /// #remote_elem is retrieved from a remote lane; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// reduce_elem = reduce_elem REDUCE_OP remote_elem;; ///; /// Contiguous Partial Warp Reduction; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:5861,Energy Efficiency,reduce,reduce,5861,"ive lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id set to 0 because it is; /// not used therefore we save instructions by not retrieving lane_id; /// from the corresponding special registers. The 4th parameter, which; /// represents the version of the algorithm being used, is set to 0 to; /// signify full warp reduction.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// #reduce_elem refers to an element in the local lane's data structure; /// #remote_elem is retrieved from a remote lane; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// reduce_elem = reduce_elem REDUCE_OP remote_elem;; ///; /// Contiguous Partial Warp Reduction; ///; /// This reduce algorithm is used within a warp where only the first; /// 'n' (n <= WARPSIZE) lanes are active. It is typically used when the; /// number of OpenMP threads in a parallel region is not a multiple of; /// WARPSIZE. The algorithm is implemented in the runtime as follows:; ///; /// void; /// contiguous_partial_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn,; /// int size, int lane_id) {; /// int curr_size;; /// int offset;; /// curr_size = size;; /// mask = curr_size/2;; /// while (offset>0) {; /// ShuffleReduceFn(reduce_data, lane_id, offset, 1);; /// curr_size = (curr_size+1)/2;; /// offset = curr_size/2;; /// }; /// }; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id < offset); /// reduce_elem = reduce_e",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:6839,Energy Efficiency,reduce,reduced,6839,"n, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// #reduce_elem refers to an element in the local lane's data structure; /// #remote_elem is retrieved from a remote lane; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// reduce_elem = reduce_elem REDUCE_OP remote_elem;; ///; /// Contiguous Partial Warp Reduction; ///; /// This reduce algorithm is used within a warp where only the first; /// 'n' (n <= WARPSIZE) lanes are active. It is typically used when the; /// number of OpenMP threads in a parallel region is not a multiple of; /// WARPSIZE. The algorithm is implemented in the runtime as follows:; ///; /// void; /// contiguous_partial_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn,; /// int size, int lane_id) {; /// int curr_size;; /// int offset;; /// curr_size = size;; /// mask = curr_size/2;; /// while (offset>0) {; /// ShuffleReduceFn(reduce_data, lane_id, offset, 1);; /// curr_size = (curr_size+1)/2;; /// offset = curr_size/2;; /// }; /// }; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id < offset); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; /// This algorithm assumes that the data to be reduced are located in a; /// contiguous subset of lanes starting from the first. When there is; /// an odd number of active lanes, the data in the last lane is not; /// aggregated with any other lane's dat but is instead copied over.; ///; /// Dispersed Partial Warp Reduction; ///; /// This algorithm is used within a warp when any discontiguous subset of; /// lanes are active. It is used to implement the reduction operation; /// across lanes in an OpenMP simd region or in a nested parallel region.; ///; /// void; /// dispersed_partial_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// int size, remote_id;; /// int logical_la",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:8635,Energy Efficiency,reduce,reduces,8635," lane; /// # is present right after the current lane.; /// size = number_of_active_lanes_in_this_warp();; /// logical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '_",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:8739,Energy Efficiency,reduce,reduced,8739,"f_active_lanes_in_this_warp();; /// logical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:8936,Energy Efficiency,reduce,reduced,8936,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:8988,Energy Efficiency,reduce,reduces,8988,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9184,Energy Efficiency,reduce,reduced,9184,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9413,Energy Efficiency,reduce,reduce,9413,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9538,Energy Efficiency,reduce,reduce,9538,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9595,Energy Efficiency,reduce,reduces,9595,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9709,Energy Efficiency,reduce,reduce,9709,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9754,Energy Efficiency,reduce,reduced,9754,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1228,Integrability,interface,interface,1228,"ction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtim",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4689,Integrability,depend,depending,4689,"memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id set to 0 because it is; /// not used therefore we save instructions by not retrieving lane_id; /// from the corresponding special registers. The 4th parameter, which; /// represents the version of the algorithm being used, is set to 0 to; /// signify full warp reduction.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// #reduce_elem refers to an element in the local lane's data structure; /// #remote_elem is retrieved from a remote lane; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// reduce_elem = reduce_elem REDUCE_OP remote_elem;; ///; /// Contiguous Partial Warp Reduction; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1141,Modifiability,variab,variables,1141,"h one or more reduction; /// clauses:; ///; /// float foo;; /// double bar;; /// #pragma omp target teams distribute parallel for \; /// reduction(+:foo) reduction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'i",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1455,Modifiability,variab,variables,1455,"ce an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It ta",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2202,Modifiability,variab,variables,2202,"ion variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Diff",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2525,Modifiability,variab,variable,2525,"ces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduce",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2723,Modifiability,variab,variable,2723,"ce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3556,Modifiability,variab,variables,3556,"ariable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceDat",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:795,Performance,perform,performed,795,"///; /// Design of OpenMP reductions on the GPU; ///; /// Consider a typical OpenMP program with one or more reduction; /// clauses:; ///; /// float foo;; /// double bar;; /// #pragma omp target teams distribute parallel for \; /// reduction(+:foo) reduction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduc",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1289,Performance,perform,performance,1289,"ction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtim",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:2255,Performance,perform,perform,2255,"l attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essen",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3251,Performance,perform,perform,3251,"les of type 'ReduceData'. They aid the runtime perform; /// algorithmic steps in a data agnostic manner.; ///; /// 'shuffleReduceFn' is a pointer to a function that reduces data; /// of type 'ReduceData' across two OpenMP threads (lanes) in the; /// same warp. It takes the following arguments as input:; ///; /// a. variable of type 'ReduceData' on the calling lane,; /// b. its lane_id,; /// c. an offset relative to the current lane_id to generate a; /// remote_lane_id. The remote lane contains the second; /// variable of type 'ReduceData' that is to be reduced.; /// d. an algorithm version parameter determining which reduction; /// algorithm to use.; ///; /// 'shuffleReduceFn' retrieves data from the remote lane using; /// efficient GPU shuffle intrinsics and reduces, using the; /// algorithm specified by the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:3985,Performance,load,loadAndReduceFn,3985," the 4th parameter, the two operands; /// element-wise. The result is written to the first operand.; ///; /// Different reduction algorithms are implemented in different; /// runtime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offs",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4150,Performance,load,loadAndReduceFn,4150,"ime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:4184,Performance,load,loads,4184,"ime functions, all calling 'shuffleReduceFn' to perform; /// the essential reduction step. Therefore, based on the 4th; /// parameter, this function behaves slightly differently to; /// cooperate with the runtime to ensure correctness under; /// different circumstances.; ///; /// 'InterWarpCpyFn' is a pointer to a function that transfers; /// reduced variables across warps. It tunnels, through CUDA; /// shared memory, the thread-private data of type 'ReduceData'; /// from lane 0 of each warp to a lane in the first warp.; /// 4. Call the OpenMP runtime on the GPU to reduce across teams.; /// The last team writes the global reduced value to memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9505,Performance,load,loadAndReduceDataFn,9505,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:9529,Performance,load,load,9529,"gical_lane_id /= 2;; /// ShuffleReduceFn(reduce_data, logical_lane_id,; /// remote_id-1-threadIdx.x, 2);; /// } while (logical_lane_id % 2 == 0 && size > 1);; /// }; ///; /// There is no assumption made about the initial state of the reduction.; /// Any number of lanes (>=1) could be active at any position. The reduction; /// result is returned in the first active lane.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// if (lane_id % 2 == 0 && offset > 0); /// reduce_elem = reduce_elem REDUCE_OP remote_elem; /// else; /// reduce_elem = remote_elem; ///; ///; /// Intra-Team Reduction; ///; /// This function, as implemented in the runtime call; /// '__kmpc_nvptx_parallel_reduce_nowait_v2', aggregates data across OpenMP; /// threads in a team. It first reduces within a warp using the; /// aforementioned algorithms. We then proceed to gather all such; /// reduced values at the first warp.; ///; /// The runtime makes use of the function 'InterWarpCpyFn', which copies; /// data from each of the ""warp master"" (zeroth lane of each warp, where; /// warp-reduced data is held) to the zeroth warp. This step reduces (in; /// a mathematical sense) the problem of reduction across warp masters in; /// a block to the problem of warp reduction.; ///; ///; /// Inter-Team Reduction; ///; /// Once a team has reduced its data to a single value, it is stored in; /// a global scratchpad array. Since each team has a distinct slot, this; /// can be done without locking.; ///; /// The last team to write to the scratchpad array proceeds to reduce the; /// scratchpad array. One or more workers in the last team use the helper; /// 'loadAndReduceDataFn' to load and reduce values from the array, i.e.,; /// the k'th worker reduces every k'th element.; ///; /// Finally, a call is made to '__kmpc_nvptx_parallel_reduce_nowait_v2' to; /// reduce across workers and compute a globally reduced value.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:748,Testability,log,logically,748,"///; /// Design of OpenMP reductions on the GPU; ///; /// Consider a typical OpenMP program with one or more reduction; /// clauses:; ///; /// float foo;; /// double bar;; /// #pragma omp target teams distribute parallel for \; /// reduction(+:foo) reduction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduc",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:5126,Testability,log,log,5126,"memory.; ///; /// ret = __kmpc_nvptx_teams_reduce_nowait(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn,; /// scratchpadCopyFn, loadAndReduceFn); ///; /// 'scratchpadCopyFn' is a helper that stores reduced; /// data from the team master to a scratchpad array in; /// global memory.; ///; /// 'loadAndReduceFn' is a helper that loads data from; /// the scratchpad array and reduces it with the input; /// operand.; ///; /// These compiler generated functions hide address; /// calculation and alignment information from the runtime.; /// 5. if ret == 1:; /// The team master of the last team stores the reduced; /// result to the globals in memory.; /// foo += reduceData.foo; bar *= reduceData.bar; ///; ///; /// Warp Reduction Algorithms; ///; /// On the warp level, we have three algorithms implemented in the; /// OpenMP runtime depending on the number of active lanes:; ///; /// Full Warp Reduction; ///; /// The reduce algorithm within a warp where all lanes are active; /// is implemented in the runtime as follows:; ///; /// full_warp_reduce(void *reduce_data,; /// kmp_ShuffleReductFctPtr ShuffleReduceFn) {; /// for (int offset = WARPSIZE/2; offset > 0; offset /= 2); /// ShuffleReduceFn(reduce_data, 0, offset, 0);; /// }; ///; /// The algorithm completes in log(2, WARPSIZE) steps.; ///; /// 'ShuffleReduceFn' is used here with lane_id set to 0 because it is; /// not used therefore we save instructions by not retrieving lane_id; /// from the corresponding special registers. The 4th parameter, which; /// represents the version of the algorithm being used, is set to 0 to; /// signify full warp reduction.; ///; /// In this version, 'ShuffleReduceFn' behaves, per element, as follows:; ///; /// #reduce_elem refers to an element in the local lane's data structure; /// #remote_elem is retrieved from a remote lane; /// remote_elem = shuffle_down(reduce_elem, offset, WARPSIZE);; /// reduce_elem = reduce_elem REDUCE_OP remote_elem;; ///; /// Contiguous Partial Warp Reduction; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:1220,Usability,simpl,simpler,1220,"ction(*:bar); /// for (int i = 0; i < N; i++) {; /// foo += A[i]; bar *= B[i];; /// }; ///; /// where 'foo' and 'bar' are reduced across all OpenMP threads in; /// all teams. In our OpenMP implementation on the NVPTX device an; /// OpenMP team is mapped to a CUDA threadblock and OpenMP threads; /// within a team are mapped to CUDA threads within a threadblock.; /// Our goal is to efficiently aggregate values across all OpenMP; /// threads such that:; ///; /// - the compiler and runtime are logically concise, and; /// - the reduction is performed efficiently in a hierarchical; /// manner as follows: within OpenMP threads in the same warp,; /// across warps in a threadblock, and finally across teams on; /// the NVPTX device.; ///; /// Introduction to Decoupling; ///; /// We would like to decouple the compiler and the runtime so that the; /// latter is ignorant of the reduction variables (number, data types); /// and the reduction operators. This allows a simpler interface; /// and implementation while still attaining good performance.; ///; /// Pseudocode for the aforementioned OpenMP program generated by the; /// compiler is as follows:; ///; /// 1. Create private copies of reduction variables on each OpenMP; /// thread: 'foo_private', 'bar_private'; /// 2. Each OpenMP thread reduces the chunk of 'A' and 'B' assigned; /// to it and writes the result in 'foo_private' and 'bar_private'; /// respectively.; /// 3. Call the OpenMP runtime on the GPU to reduce within a team; /// and store the result on the team master:; ///; /// __kmpc_nvptx_parallel_reduce_nowait_v2(...,; /// reduceData, shuffleReduceFn, interWarpCpyFn); ///; /// where:; /// struct ReduceData {; /// double *foo;; /// double *bar;; /// } reduceData; /// reduceData.foo = &foo_private; /// reduceData.bar = &bar_private; ///; /// 'shuffleReduceFn' and 'interWarpCpyFn' are pointers to two; /// auxiliary functions generated by the compiler that operate on; /// variables of type 'ReduceData'. They aid the runtim",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:32,Modifiability,variab,variables,32,"// 1. Build a list of reduction variables.; // void *RedList[<n>] = {<ReductionVars>[0], ..., <ReductionVars>[<n>-1]};",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:39,Energy Efficiency,reduce,reduced,39,// 6. Build then branch: where we have reduced values in the master; // thread in each team.; // __kmpc_end_reduce{_nowait}(<gtid>);; // break;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:24,Integrability,wrap,wraps,24,/// Emit function which wraps the outline parallel region; /// and controls the arguments which are passed to this function.; /// The wrapper ensures that the outlined function is called; /// with the correct arguments when data is shared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:134,Integrability,wrap,wrapper,134,/// Emit function which wraps the outline parallel region; /// and controls the arguments which are passed to this function.; /// The wrapper ensures that the outlined function is called; /// with the correct arguments when data is shared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:23,Modifiability,variab,variables,23,// Retrieve the shared variables from the list of references returned; // by the runtime. Pass the variables to the outlined function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:99,Modifiability,variab,variables,99,// Retrieve the shared variables from the list of references returned; // by the runtime. Pass the variables to the outlined function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp:11,Modifiability,variab,variables,11,// Capture variables captured by reference in lambdas for target-based; // directives.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:35,Integrability,Interface,Interface,35,"//===------ CGOpenMPRuntimeGPU.h - Interface to OpenMP GPU Runtimes ------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This provides a generalized class for OpenMP runtime code generation; // specialized by GPU targets NVPTX and AMDGCN.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:97,Modifiability,variab,variables,97,"/// Target codegen is specialized based on two data-sharing modes: CUDA, in; /// which the local variables are actually global threadlocal, and Generic, in; /// which the local variables are placed in global memory if they may escape; /// their declaration context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:177,Modifiability,variab,variables,177,"/// Target codegen is specialized based on two data-sharing modes: CUDA, in; /// which the local variables are actually global threadlocal, and Generic, in; /// which the local variables are placed in global memory if they may escape; /// their declaration context.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:19,Integrability,synchroniz,synchronize,19,/// Get barrier to synchronize all threads in a block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:23,Modifiability,variab,variables,23,/// Helper for generic variables globalization prolog.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:23,Modifiability,variab,variables,23,/// Helper for generic variables globalization epilog.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:87,Performance,optimiz,optimization,87,/// Check if the default location must be constant.; /// Constant for NVPTX for better optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:169,Modifiability,variab,variable,169,/// Declare generalized virtual functions which need to be defined; /// by all specializations of OpenMPGPURuntime Targets like AMDGCN; /// and NVPTX.; /// Check if the variable length declaration is delayed:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:207,Deployability,configurat,configuration,207,"/// This function ought to emit, in the general case, a call to; // the openmp runtime kmpc_push_num_teams. In NVPTX backend it is not needed; // as these numbers are obtained through the PTX grid and block configuration.; /// \param NumTeams An integer expression of teams.; /// \param ThreadLimit An integer expression of threads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:207,Modifiability,config,configuration,207,"/// This function ought to emit, in the general case, a call to; // the openmp runtime kmpc_push_num_teams. In NVPTX backend it is not needed; // as these numbers are obtained through the PTX grid and block configuration.; /// \param NumTeams An integer expression of teams.; /// \param ThreadLimit An integer expression of threads.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:305,Modifiability,Variab,Variable,305,"/// Emits inlined function for the specified OpenMP parallel; // directive.; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:417,Usability,simpl,simple,417,"/// Emits inlined function for the specified OpenMP parallel; // directive.; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:302,Modifiability,Variab,Variable,302,"/// Emits inlined function for the specified OpenMP teams; // directive.; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:414,Usability,simpl,simple,414,"/// Emits inlined function for the specified OpenMP teams; // directive.; /// \a D. This outlined function has type void(*)(kmp_int32 *ThreadID,; /// kmp_int32 BoundID, struct context_vars*).; /// \param CGF Reference to current CodeGenFunction.; /// \param D OpenMP directive.; /// \param ThreadIDVar Variable for thread id in the current OpenMP region.; /// \param InnermostKind Kind of innermost directive (for simple directives it; /// is a directive itself, for combined - its innermost directive).; /// \param CodeGen Code generation sequence for the \a D directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:61,Modifiability,variab,variables,61,"/// Emits code for teams call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run by team masters. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:373,Modifiability,variab,variables,373,"/// Emits code for teams call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run by team masters. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:74,Modifiability,variab,variables,74,"/// Emits code for parallel or serial call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run in parallel threads. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; /// \param IfCond Condition in the associated 'if' clause, if it was; /// specified, nullptr otherwise.; /// \param NumThreads The value corresponding to the num_threads clause, if; /// any,; /// or nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:390,Modifiability,variab,variables,390,"/// Emits code for parallel or serial call of the \a OutlinedFn with; /// variables captured in a record which address is stored in \a; /// CapturedStruct.; /// \param OutlinedFn Outlined function to be run in parallel threads. Type of; /// this function is void(*)(kmp_int32 *, kmp_int32, struct context_vars*).; /// \param CapturedVars A pointer to the record with the references to; /// variables used in \a OutlinedFn function.; /// \param IfCond Condition in the associated 'if' clause, if it was; /// specified, nullptr otherwise.; /// \param NumThreads The value corresponding to the num_threads clause, if; /// any,; /// or nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:311,Usability,simpl,simple,311,"/// Emit an implicit/explicit barrier for OpenMP threads.; /// \param Kind Directive for which this implicit barrier call must be; /// generated. Must be OMPD_barrier for explicit barrier generation.; /// \param EmitChecks true if need to emit checks for cancellation barriers.; /// \param ForceSimpleCall true simple barrier call must be emitted, false if; /// runtime class decides which one to emit (simple or with cancellation; /// checks).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:403,Usability,simpl,simple,403,"/// Emit an implicit/explicit barrier for OpenMP threads.; /// \param Kind Directive for which this implicit barrier call must be; /// generated. Must be OMPD_barrier for explicit barrier generation.; /// \param EmitChecks true if need to emit checks for cancellation barriers.; /// \param ForceSimpleCall true simple barrier call must be emitted, false if; /// runtime class decides which one to emit (simple or with cancellation; /// checks).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:671,Performance,perform,perform,671,"/// Emit a code for reduction clause.; ///; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.; /// \param Options List of options for reduction codegen:; /// WithNowait true if parent directive has also nowait clause, false; /// otherwise.; /// SimpleReduction Emit reduction operation only. Used for omp simd; /// directive on the host.; /// ReductionKind The kind of reduction to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:534,Usability,Simpl,SimpleReduction,534,"/// Emit a code for reduction clause.; ///; /// \param Privates List of private copies for original reduction arguments.; /// \param LHSExprs List of LHS in \a ReductionOps reduction operations.; /// \param RHSExprs List of RHS in \a ReductionOps reduction operations.; /// \param ReductionOps List of reduction operations in form 'LHS binop RHS'; /// or 'operator binop(LHS, RHS)'.; /// \param Options List of options for reduction codegen:; /// WithNowait true if parent directive has also nowait clause, false; /// otherwise.; /// SimpleReduction Emit reduction operation only. Used for omp simd; /// directive on the host.; /// ReductionKind The kind of reduction to perform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:50,Modifiability,variab,variable,50,/// Gets the OpenMP-specific address of the local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:35,Energy Efficiency,schedul,schedule,35,/// Choose a default value for the schedule clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:87,Modifiability,variab,variables,87,"/// Adjust some parameters for the target-based directives, like addresses of; /// the variables captured by reference in lambdas.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:4,Performance,Perform,Perform,4,/// Perform check on requires decl to ensure that target architecture; /// supports unified addressing,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:18,Modifiability,variab,variable,18,/// Checks if the variable has associated OMPAllocateDeclAttr attribute with; /// the predefined allocator and translates it into the corresponding address; /// space.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:230,Performance,optimiz,optimized,230,/// Track the execution mode when codegening directives within a target; /// region. The appropriate mode (SPMD/NON-SPMD) is set on entry to the; /// target region and used by containing directives such as 'parallel'; /// to emit optimized code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:45,Integrability,wrap,wrapper,45,/// Map between an outlined function and its wrapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:24,Integrability,wrap,wraps,24,/// Emit function which wraps the outline parallel region; /// and controls the parameters which are passed to this function.; /// The wrapper ensures that the outlined function is called; /// with the correct arguments when data is shared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:135,Integrability,wrap,wrapper,135,/// Emit function which wraps the outline parallel region; /// and controls the parameters which are passed to this function.; /// The wrapper ensures that the outlined function is called; /// with the correct arguments when data is shared.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:39,Modifiability,variab,variable,39,/// The data for the single globalized variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:21,Modifiability,variab,variables,21,/// The map of local variables to their addresses in the global memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:52,Modifiability,variab,variables,52,/// Maps the function to the list of the globalized variables with their; /// addresses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h:49,Modifiability,variab,variables,49,/// Pair of the Non-SPMD team and all reductions variables in this team; /// region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGOpenMPRuntimeGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:624,Availability,mask,masking,624,"/// Structure with information about how a bitfield should be accessed.; ///; /// Often we layout a sequence of bitfields as a contiguous sequence of bits.; /// When the AST record layout does this, we represent it in the LLVM IR's type; /// as either a sequence of i8 members or a byte array to reserve the number of; /// bytes touched without forcing any particular alignment beyond the basic; /// character alignment.; ///; /// Then accessing a particular bitfield involves converting this byte array; /// into a single integer of that size (i24 or i40 -- may not be power-of-two; /// size), loading it, and shifting and masking to extract the particular; /// subsequence of bits which make up that particular bitfield. This structure; /// encodes the information used to construct the extraction code sequences.; /// The CGRecordLayout also has a field index which encodes which byte-sequence; /// this bitfield falls within. Let's assume the following C struct:; ///; /// struct S {; /// char a, b, c;; /// unsigned bits : 3;; /// unsigned more_bits : 4;; /// unsigned still_more_bits : 7;; /// };; ///; /// This will end up as the following LLVM type. The first array is the; /// bitfield, and the second is the padding out to a 4-byte alignment.; ///; /// %t = type { i8, i8, i8, i8, i8, [3 x i8] }; ///; /// When generating code to access more_bits, we'll generate something; /// essentially like this:; ///; /// define i32 @foo(%t* %base) {; /// %0 = gep %t* %base, i32 0, i32 3; /// %2 = load i8* %1; /// %3 = lshr i8 %2, 3; /// %4 = and i8 %3, 15; /// %5 = zext i8 %4 to i32; /// ret i32 %i; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:570,Energy Efficiency,power,power-of-two,570,"/// Structure with information about how a bitfield should be accessed.; ///; /// Often we layout a sequence of bitfields as a contiguous sequence of bits.; /// When the AST record layout does this, we represent it in the LLVM IR's type; /// as either a sequence of i8 members or a byte array to reserve the number of; /// bytes touched without forcing any particular alignment beyond the basic; /// character alignment.; ///; /// Then accessing a particular bitfield involves converting this byte array; /// into a single integer of that size (i24 or i40 -- may not be power-of-two; /// size), loading it, and shifting and masking to extract the particular; /// subsequence of bits which make up that particular bitfield. This structure; /// encodes the information used to construct the extraction code sequences.; /// The CGRecordLayout also has a field index which encodes which byte-sequence; /// this bitfield falls within. Let's assume the following C struct:; ///; /// struct S {; /// char a, b, c;; /// unsigned bits : 3;; /// unsigned more_bits : 4;; /// unsigned still_more_bits : 7;; /// };; ///; /// This will end up as the following LLVM type. The first array is the; /// bitfield, and the second is the padding out to a 4-byte alignment.; ///; /// %t = type { i8, i8, i8, i8, i8, [3 x i8] }; ///; /// When generating code to access more_bits, we'll generate something; /// essentially like this:; ///; /// define i32 @foo(%t* %base) {; /// %0 = gep %t* %base, i32 0, i32 3; /// %2 = load i8* %1; /// %3 = lshr i8 %2, 3; /// %4 = and i8 %3, 15; /// %5 = zext i8 %4 to i32; /// ret i32 %i; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:595,Performance,load,loading,595,"/// Structure with information about how a bitfield should be accessed.; ///; /// Often we layout a sequence of bitfields as a contiguous sequence of bits.; /// When the AST record layout does this, we represent it in the LLVM IR's type; /// as either a sequence of i8 members or a byte array to reserve the number of; /// bytes touched without forcing any particular alignment beyond the basic; /// character alignment.; ///; /// Then accessing a particular bitfield involves converting this byte array; /// into a single integer of that size (i24 or i40 -- may not be power-of-two; /// size), loading it, and shifting and masking to extract the particular; /// subsequence of bits which make up that particular bitfield. This structure; /// encodes the information used to construct the extraction code sequences.; /// The CGRecordLayout also has a field index which encodes which byte-sequence; /// this bitfield falls within. Let's assume the following C struct:; ///; /// struct S {; /// char a, b, c;; /// unsigned bits : 3;; /// unsigned more_bits : 4;; /// unsigned still_more_bits : 7;; /// };; ///; /// This will end up as the following LLVM type. The first array is the; /// bitfield, and the second is the padding out to a 4-byte alignment.; ///; /// %t = type { i8, i8, i8, i8, i8, [3 x i8] }; ///; /// When generating code to access more_bits, we'll generate something; /// essentially like this:; ///; /// define i32 @foo(%t* %base) {; /// %0 = gep %t* %base, i32 0, i32 3; /// %2 = load i8* %1; /// %3 = lshr i8 %2, 3; /// %4 = and i8 %3, 15; /// %5 = zext i8 %4 to i32; /// ret i32 %i; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:1498,Performance,load,load,1498,"/// Structure with information about how a bitfield should be accessed.; ///; /// Often we layout a sequence of bitfields as a contiguous sequence of bits.; /// When the AST record layout does this, we represent it in the LLVM IR's type; /// as either a sequence of i8 members or a byte array to reserve the number of; /// bytes touched without forcing any particular alignment beyond the basic; /// character alignment.; ///; /// Then accessing a particular bitfield involves converting this byte array; /// into a single integer of that size (i24 or i40 -- may not be power-of-two; /// size), loading it, and shifting and masking to extract the particular; /// subsequence of bits which make up that particular bitfield. This structure; /// encodes the information used to construct the extraction code sequences.; /// The CGRecordLayout also has a field index which encodes which byte-sequence; /// this bitfield falls within. Let's assume the following C struct:; ///; /// struct S {; /// char a, b, c;; /// unsigned bits : 3;; /// unsigned more_bits : 4;; /// unsigned still_more_bits : 7;; /// };; ///; /// This will end up as the following LLVM type. The first array is the; /// bitfield, and the second is the padding out to a 4-byte alignment.; ///; /// %t = type { i8, i8, i8, i8, i8, [3 x i8] }; ///; /// When generating code to access more_bits, we'll generate something; /// essentially like this:; ///; /// define i32 @foo(%t* %base) {; /// %0 = gep %t* %base, i32 0, i32 3; /// %2 = load i8* %1; /// %3 = lshr i8 %2, 3; /// %4 = and i8 %3, 15; /// %5 = zext i8 %4 to i32; /// ret i32 %i; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:62,Security,access,accessed,62,"/// Structure with information about how a bitfield should be accessed.; ///; /// Often we layout a sequence of bitfields as a contiguous sequence of bits.; /// When the AST record layout does this, we represent it in the LLVM IR's type; /// as either a sequence of i8 members or a byte array to reserve the number of; /// bytes touched without forcing any particular alignment beyond the basic; /// character alignment.; ///; /// Then accessing a particular bitfield involves converting this byte array; /// into a single integer of that size (i24 or i40 -- may not be power-of-two; /// size), loading it, and shifting and masking to extract the particular; /// subsequence of bits which make up that particular bitfield. This structure; /// encodes the information used to construct the extraction code sequences.; /// The CGRecordLayout also has a field index which encodes which byte-sequence; /// this bitfield falls within. Let's assume the following C struct:; ///; /// struct S {; /// char a, b, c;; /// unsigned bits : 3;; /// unsigned more_bits : 4;; /// unsigned still_more_bits : 7;; /// };; ///; /// This will end up as the following LLVM type. The first array is the; /// bitfield, and the second is the padding out to a 4-byte alignment.; ///; /// %t = type { i8, i8, i8, i8, i8, [3 x i8] }; ///; /// When generating code to access more_bits, we'll generate something; /// essentially like this:; ///; /// define i32 @foo(%t* %base) {; /// %0 = gep %t* %base, i32 0, i32 3; /// %2 = load i8* %1; /// %3 = lshr i8 %2, 3; /// %4 = and i8 %3, 15; /// %5 = zext i8 %4 to i32; /// ret i32 %i; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:436,Security,access,accessing,436,"/// Structure with information about how a bitfield should be accessed.; ///; /// Often we layout a sequence of bitfields as a contiguous sequence of bits.; /// When the AST record layout does this, we represent it in the LLVM IR's type; /// as either a sequence of i8 members or a byte array to reserve the number of; /// bytes touched without forcing any particular alignment beyond the basic; /// character alignment.; ///; /// Then accessing a particular bitfield involves converting this byte array; /// into a single integer of that size (i24 or i40 -- may not be power-of-two; /// size), loading it, and shifting and masking to extract the particular; /// subsequence of bits which make up that particular bitfield. This structure; /// encodes the information used to construct the extraction code sequences.; /// The CGRecordLayout also has a field index which encodes which byte-sequence; /// this bitfield falls within. Let's assume the following C struct:; ///; /// struct S {; /// char a, b, c;; /// unsigned bits : 3;; /// unsigned more_bits : 4;; /// unsigned still_more_bits : 7;; /// };; ///; /// This will end up as the following LLVM type. The first array is the; /// bitfield, and the second is the padding out to a 4-byte alignment.; ///; /// %t = type { i8, i8, i8, i8, i8, [3 x i8] }; ///; /// When generating code to access more_bits, we'll generate something; /// essentially like this:; ///; /// define i32 @foo(%t* %base) {; /// %0 = gep %t* %base, i32 0, i32 3; /// %2 = load i8* %1; /// %3 = lshr i8 %2, 3; /// %4 = and i8 %3, 15; /// %5 = zext i8 %4 to i32; /// ret i32 %i; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:1340,Security,access,access,1340,"/// Structure with information about how a bitfield should be accessed.; ///; /// Often we layout a sequence of bitfields as a contiguous sequence of bits.; /// When the AST record layout does this, we represent it in the LLVM IR's type; /// as either a sequence of i8 members or a byte array to reserve the number of; /// bytes touched without forcing any particular alignment beyond the basic; /// character alignment.; ///; /// Then accessing a particular bitfield involves converting this byte array; /// into a single integer of that size (i24 or i40 -- may not be power-of-two; /// size), loading it, and shifting and masking to extract the particular; /// subsequence of bits which make up that particular bitfield. This structure; /// encodes the information used to construct the extraction code sequences.; /// The CGRecordLayout also has a field index which encodes which byte-sequence; /// this bitfield falls within. Let's assume the following C struct:; ///; /// struct S {; /// char a, b, c;; /// unsigned bits : 3;; /// unsigned more_bits : 4;; /// unsigned still_more_bits : 7;; /// };; ///; /// This will end up as the following LLVM type. The first array is the; /// bitfield, and the second is the padding out to a 4-byte alignment.; ///; /// %t = type { i8, i8, i8, i8, i8, [3 x i8] }; ///; /// When generating code to access more_bits, we'll generate something; /// essentially like this:; ///; /// define i32 @foo(%t* %base) {; /// %0 = gep %t* %base, i32 0, i32 3; /// %2 = load i8* %1; /// %3 = lshr i8 %2, 3; /// %4 = and i8 %3, 15; /// %5 = zext i8 %4 to i32; /// ret i32 %i; /// }; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:55,Security,access,accessing,55,/// The storage size in bits which should be used when accessing this; /// bitfield.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:55,Security,access,accessing,55,/// The storage size in bits which should be used when accessing this; /// bitfield.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h:72,Security,access,accessing,72,"/// Given a bit-field decl, build an appropriate helper object for; /// accessing that field (which is expected to have the given offset and; /// size).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayout.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:2344,Deployability,update,updated,2344,"is isn't always possible because i24 has storage size of 32 bit; /// and if it is possible to use that extra byte of padding we must use; /// [i8 x 3] instead of i24. The function clipTailPadding does this.; /// C++ examples that require clipping:; /// struct { int a : 24; char b; }; // a must be clipped, b goes at offset 3; /// struct A { int a : 24; }; // a must be clipped because a struct like B; // could exist: struct B : A { char b; }; // b goes at offset 3; /// * Clang ignores 0 sized bitfields and 0 sized bases but *not* zero sized; /// fields. The existing asserts suggest that LLVM assumes that *every* field; /// has an underlying storage type. Therefore empty structures containing; /// zero sized subobjects such as empty records or zero sized arrays still get; /// a zero sized (empty struct) storage type.; /// * Clang reads the complete type rather than the base type when generating; /// code to access fields. Bitfields in tail position with tail padding may; /// be clipped in the base class but not the complete class (we may discover; /// that the tail padding is not used in the complete class.) However,; /// because LLVM reads from the complete type it can generate incorrect code; /// if we do not clip the tail padding off of the bitfield in the complete; /// layout. This introduces a somewhat awkward extra unnecessary clip stage.; /// The location of the clip is stored internally as a sentinel of type; /// SCISSOR. If LLVM were updated to read base types (which it probably; /// should because locations of things such as VBases are bogus in the llvm; /// type anyway) then we could eliminate the SCISSOR.; /// * Itanium allows nearly empty primary virtual bases. These bases don't get; /// get their own storage because they're laid out as part of another base; /// or at the beginning of the structure. Determining if a VBase actually; /// gets storage awkwardly involves a walk of all bases.; /// * VFPtrs and VBPtrs do *not* make a record NotZeroInitializable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:500,Energy Efficiency,allocate,allocated,500,"/// The CGRecordLowering is responsible for lowering an ASTRecordLayout to an; /// llvm::Type. Some of the lowering is straightforward, some is not. Here we; /// detail some of the complexities and weirdnesses here.; /// * LLVM does not have unions - Unions can, in theory be represented by any; /// llvm::Type with correct size. We choose a field via a specific heuristic; /// and add padding if necessary.; /// * LLVM does not have bitfields - Bitfields are collected into contiguous; /// runs and allocated as a single storage type for the run. ASTRecordLayout; /// contains enough information to determine where the runs break. Microsoft; /// and Itanium follow different rules and use different codepaths.; /// * It is desired that, when possible, bitfields use the appropriate iN type; /// when lowered to llvm types. For example unsigned x : 24 gets lowered to; /// i24. This isn't always possible because i24 has storage size of 32 bit; /// and if it is possible to use that extra byte of padding we must use; /// [i8 x 3] instead of i24. The function clipTailPadding does this.; /// C++ examples that require clipping:; /// struct { int a : 24; char b; }; // a must be clipped, b goes at offset 3; /// struct A { int a : 24; }; // a must be clipped because a struct like B; // could exist: struct B : A { char b; }; // b goes at offset 3; /// * Clang ignores 0 sized bitfields and 0 sized bases but *not* zero sized; /// fields. The existing asserts suggest that LLVM assumes that *every* field; /// has an underlying storage type. Therefore empty structures containing; /// zero sized subobjects such as empty records or zero sized arrays still get; /// a zero sized (empty struct) storage type.; /// * Clang reads the complete type rather than the base type when generating; /// code to access fields. Bitfields in tail position with tail padding may; /// be clipped in the base class but not the complete class (we may discover; /// that the tail padding is not used in the complete class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:1798,Security,access,access,1798,"elds use the appropriate iN type; /// when lowered to llvm types. For example unsigned x : 24 gets lowered to; /// i24. This isn't always possible because i24 has storage size of 32 bit; /// and if it is possible to use that extra byte of padding we must use; /// [i8 x 3] instead of i24. The function clipTailPadding does this.; /// C++ examples that require clipping:; /// struct { int a : 24; char b; }; // a must be clipped, b goes at offset 3; /// struct A { int a : 24; }; // a must be clipped because a struct like B; // could exist: struct B : A { char b; }; // b goes at offset 3; /// * Clang ignores 0 sized bitfields and 0 sized bases but *not* zero sized; /// fields. The existing asserts suggest that LLVM assumes that *every* field; /// has an underlying storage type. Therefore empty structures containing; /// zero sized subobjects such as empty records or zero sized arrays still get; /// a zero sized (empty struct) storage type.; /// * Clang reads the complete type rather than the base type when generating; /// code to access fields. Bitfields in tail position with tail padding may; /// be clipped in the base class but not the complete class (we may discover; /// that the tail padding is not used in the complete class.) However,; /// because LLVM reads from the complete type it can generate incorrect code; /// if we do not clip the tail padding off of the bitfield in the complete; /// layout. This introduces a somewhat awkward extra unnecessary clip stage.; /// The location of the clip is stored internally as a sentinel of type; /// SCISSOR. If LLVM were updated to read base types (which it probably; /// should because locations of things such as VBases are bogus in the llvm; /// type anyway) then we could eliminate the SCISSOR.; /// * Itanium allows nearly empty primary virtual bases. These bases don't get; /// get their own storage because they're laid out as part of another base; /// or at the beginning of the structure. Determining if a VBase actually; /// g",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:1451,Testability,assert,asserts,1451,"// runs and allocated as a single storage type for the run. ASTRecordLayout; /// contains enough information to determine where the runs break. Microsoft; /// and Itanium follow different rules and use different codepaths.; /// * It is desired that, when possible, bitfields use the appropriate iN type; /// when lowered to llvm types. For example unsigned x : 24 gets lowered to; /// i24. This isn't always possible because i24 has storage size of 32 bit; /// and if it is possible to use that extra byte of padding we must use; /// [i8 x 3] instead of i24. The function clipTailPadding does this.; /// C++ examples that require clipping:; /// struct { int a : 24; char b; }; // a must be clipped, b goes at offset 3; /// struct A { int a : 24; }; // a must be clipped because a struct like B; // could exist: struct B : A { char b; }; // b goes at offset 3; /// * Clang ignores 0 sized bitfields and 0 sized bases but *not* zero sized; /// fields. The existing asserts suggest that LLVM assumes that *every* field; /// has an underlying storage type. Therefore empty structures containing; /// zero sized subobjects such as empty records or zero sized arrays still get; /// a zero sized (empty struct) storage type.; /// * Clang reads the complete type rather than the base type when generating; /// code to access fields. Bitfields in tail position with tail padding may; /// be clipped in the base class but not the complete class (we may discover; /// that the tail padding is not used in the complete class.) However,; /// because LLVM reads from the complete type it can generate incorrect code; /// if we do not clip the tail padding off of the bitfield in the complete; /// layout. This introduces a somewhat awkward extra unnecessary clip stage.; /// The location of the clip is stored internally as a sentinel of type; /// SCISSOR. If LLVM were updated to read base types (which it probably; /// should because locations of things such as VBases are bogus in the llvm; /// type anyway) then",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:16,Integrability,rout,routines,16,// Short helper routines.; /// Constructs a MemberInfo instance from an offset and llvm::Type *.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:270,Deployability,continuous,continuous,270,/// The Microsoft bitfield layout rule allocates discrete storage; /// units of the field's formal type and only combines adjacent; /// fields of the same formal type. We want to emit a layout with; /// these discrete storage units instead of combining them into a; /// continuous run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:39,Energy Efficiency,allocate,allocates,39,/// The Microsoft bitfield layout rule allocates discrete storage; /// units of the field's formal type and only combines adjacent; /// fields of the same formal type. We want to emit a layout with; /// these discrete storage units instead of combining them into a; /// continuous run.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:4,Integrability,Wrap,Wraps,4,/// Wraps llvm::Type::getIntNTy with some implicit arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:10,Integrability,rout,routines,10,// Layout routines.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:114,Performance,load,load,114,"// Reverse the bit offsets for big endian machines. Because we represent; // a bitfield as a single large integer load, we can imagine the bits; // counting from the most-significant-bit instead of the; // least-significant-bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:698,Deployability,update,updates,698,"// The lowering process implemented in this function takes a variety of; // carefully ordered phases.; // 1) Store all members (fields and bases) in a list and sort them by offset.; // 2) Add a 1-byte capstone member at the Size of the structure.; // 3) Clip bitfield storages members if their tail padding is or might be; // used by another field or base. The clipping process uses the capstone; // by treating it as another object that occurs after the record.; // 4) Determine if the llvm-struct requires packing. It's important that this; // phase occur after clipping, because clipping changes the llvm type.; // This phase reads the offset of the capstone when determining packedness; // and updates the alignment of the capstone to be equal of the alignment; // of the record after doing so.; // 5) Insert padding everywhere it is needed. This phase requires 'Packed' to; // have been computed and needs to know the alignment of the record in; // order to understand if explicit tail padding is needed.; // 6) Remove the capstone, we don't need it anymore.; // 7) Determine if this record can be zero-initialized. This phase could have; // been placed anywhere after phase 1.; // 8) Format the complete list of members in a way that can be consumed by; // CodeGenTypes::ComputeRecordLayout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:340,Testability,test,tests,340,"// Iterate through the fields setting bitFieldInfo and the Fields array. Also; // locate the ""most appropriate"" storage type. The heuristic for finding the; // storage type isn't necessary, the first (non-0-length-bitfield) field's; // type would work fine and be simpler but would be different than what we've; // been doing and cause lit tests to change.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:264,Usability,simpl,simpler,264,"// Iterate through the fields setting bitFieldInfo and the Fields array. Also; // locate the ""most appropriate"" storage type. The heuristic for finding the; // storage type isn't necessary, the first (non-0-length-bitfield) field's; // type would work fine and be simpler but would be different than what we've; // been doing and cause lit tests to change.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:17,Deployability,update,update,17,"// Conditionally update our storage type if we've got a new ""better"" one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:75,Energy Efficiency,allocate,allocated,75,"// If we don't have a run yet, or don't live within the previous run's; // allocated storage then we allocate some storage and start a new run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:101,Energy Efficiency,allocate,allocate,101,"// If we don't have a run yet, or don't live within the previous run's; // allocated storage then we allocate some storage and start a new run.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:280,Security,access,accessed,280,"// Check if OffsetInRecord (the size in bits of the current run) is better; // as a single field run. When OffsetInRecord has legal integer width, and; // its bitfield offset is naturally aligned, it is better to make the; // bitfield a separate storage component so as it can be accessed directly; // with lower cost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:74,Security,access,accessed,74,"/// The AAPCS that defines that, when possible, bit-fields should; /// be accessed using containers of the declared type width:; /// When a volatile bit-field is read, and its container does not overlap with; /// any non-bit-field member or any zero length bit-field member, its container; /// must be read exactly once using the access width appropriate to the type of; /// the container. When a volatile bit-field is written, and its container does; /// not overlap with any non-bit-field member or any zero-length bit-field; /// member, its container must be read exactly once and written exactly once; /// using the access width appropriate to the type of the container. The two; /// accesses are not atomic.; ///; /// Enforcing the width restriction can be disabled using; /// -fno-aapcs-bitfield-width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:330,Security,access,access,330,"/// The AAPCS that defines that, when possible, bit-fields should; /// be accessed using containers of the declared type width:; /// When a volatile bit-field is read, and its container does not overlap with; /// any non-bit-field member or any zero length bit-field member, its container; /// must be read exactly once using the access width appropriate to the type of; /// the container. When a volatile bit-field is written, and its container does; /// not overlap with any non-bit-field member or any zero-length bit-field; /// member, its container must be read exactly once and written exactly once; /// using the access width appropriate to the type of the container. The two; /// accesses are not atomic.; ///; /// Enforcing the width restriction can be disabled using; /// -fno-aapcs-bitfield-width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:620,Security,access,access,620,"/// The AAPCS that defines that, when possible, bit-fields should; /// be accessed using containers of the declared type width:; /// When a volatile bit-field is read, and its container does not overlap with; /// any non-bit-field member or any zero length bit-field member, its container; /// must be read exactly once using the access width appropriate to the type of; /// the container. When a volatile bit-field is written, and its container does; /// not overlap with any non-bit-field member or any zero-length bit-field; /// member, its container must be read exactly once and written exactly once; /// using the access width appropriate to the type of the container. The two; /// accesses are not atomic.; ///; /// Enforcing the width restriction can be disabled using; /// -fno-aapcs-bitfield-width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:688,Security,access,accesses,688,"/// The AAPCS that defines that, when possible, bit-fields should; /// be accessed using containers of the declared type width:; /// When a volatile bit-field is read, and its container does not overlap with; /// any non-bit-field member or any zero length bit-field member, its container; /// must be read exactly once using the access width appropriate to the type of; /// the container. When a volatile bit-field is written, and its container does; /// not overlap with any non-bit-field member or any zero-length bit-field; /// member, its container must be read exactly once and written exactly once; /// using the access width appropriate to the type of the container. The two; /// accesses are not atomic.; ///; /// Enforcing the width restriction can be disabled using; /// -fno-aapcs-bitfield-width.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:87,Performance,load,load,87,"// If the record alignment is less than the type width, we can't enforce a; // aligned load, bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:237,Usability,undo,undo,237,"// CGRecordLowering::setBitFieldInfo() pre-adjusts the bit-field offsets; // for big-endian targets, but it assumes a container of width; // Info.StorageSize. Since AAPCS uses a different container size (width; // of the type), we first undo that calculation here and redo it once; // the bit-field offset within the new container is calculated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:24,Security,access,access,24,// Nothing to do if the access uses the desired; // container width and is naturally aligned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:26,Performance,load,load,26,"// Bail out if an aligned load of the container cannot cover the entire; // bit-field. This can happen for example, if the bit-field is part of a; // packed struct. AAPCS does not define access rules for such cases, we let; // clang to follow its own rules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:187,Security,access,access,187,"// Bail out if an aligned load of the container cannot cover the entire; // bit-field. This can happen for example, if the bit-field is part of a; // packed struct. AAPCS does not define access rules for such cases, we let; // clang to follow its own rules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:9,Security,access,access,9,"// If we access outside memory outside the record, than bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:15,Performance,perform,performing,15,// Bail out if performing this load would access non-bit-fields members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:31,Performance,load,load,31,// Bail out if performing this load would access non-bit-fields members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:42,Security,access,access,42,// Bail out if performing this load would access non-bit-fields members.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:105,Performance,race condition,race condition,105,"// As C11 defines, a zero sized bit-field defines a barrier, so; // fields after and before it should be race condition free.; // The AAPCS acknowledges it and imposes no restritions when the; // natural container overlaps a zero-length bit-field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:15,Performance,load,load,15,"// The desired load overlaps a non-bit-field member, bail out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:27,Security,access,access,27,"// Write the new bit-field access parameters.; // As the storage offset now is defined as the number of elements from the; // start of the structure, we should divide the Offset by the element size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:3,Deployability,Update,Update,3,// Update the alignment of the sentinel.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp:114,Performance,load,load,114,"// Reverse the bit offsets for big endian machines. Because we represent; // a bitfield as a single large integer load, we can imagine the bits; // counting from the most-significant-bit instead of the; // least-significant-bit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGRecordLayoutBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:258,Deployability,update,update,258,"// If so, and the statement doesn't contain a label, then we do not need to; // generate actual code. This is safe because (1) the current point is; // unreachable, so we don't need to execute the code, and (2) we've already; // handled the statements which update internal data structures (like the; // local variable map) which could be used by subsequent statements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:310,Modifiability,variab,variable,310,"// If so, and the statement doesn't contain a label, then we do not need to; // generate actual code. This is safe because (1) the current point is; // unreachable, so we don't need to execute the code, and (2) we've already; // handled the statements which update internal data structures (like the; // local variable map) which could be used by subsequent statements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:110,Safety,safe,safe,110,"// If so, and the statement doesn't contain a label, then we do not need to; // generate actual code. This is safe because (1) the current point is; // unreachable, so we don't need to execute the code, and (2) we've already; // handled the statements which update internal data structures (like the; // local variable map) which could be used by subsequent statements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:51,Usability,simpl,simple,51,"// Verify that any decl statements were handled as simple, they may be in; // scope of subsequent reachable statements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:436,Testability,test,test,436,"// The expression emitters assume (reasonably!) that the insertion; // point is always set. To maintain that, the call-emission code; // for noreturn functions has to enter a new block with no; // predecessors. We want to kill that block and mark the current; // insertion point unreachable in the common case of a call like; // ""exit();"". Since expression emission doesn't otherwise create; // blocks with no predecessors, we can just test for that.; // However, we must be careful not to do this to our incoming; // block, because *statement* emission does sometimes create; // reachable blocks which will have no predecessors until later in; // the function. This occurs with, e.g., labels that are not; // reachable by fallthrough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:10,Deployability,Update,Update,10,// FIXME: Update this if we ever have attributes that affect the; // semantics of an expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:69,Usability,simpl,simplify,69,"// If there is a cleanup stack, then we it isn't worth trying to; // simplify this block (we would need to remove it from the scope map; // and cleanup entry).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:12,Usability,simpl,simplify,12,// Can only simplify direct branches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:12,Usability,simpl,simplify,12,// Can only simplify empty blocks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:171,Integrability,rout,routed,171,"// Add this label to the current lexical scope if we're within any; // normal cleanups. Jumps ""in"" to this label --- when permitted by; // the language --- may need to be routed around such cleanups.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:140,Usability,simpl,simple,140,"// If this code is reachable then emit a stop point (if generating; // debug info). We have to do this ourselves because we are on the; // ""simple"" statement path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:61,Safety,avoid,avoid,61,"// If the condition constant folds and can be elided, try to avoid emitting; // the condition and the dead arm of the if/else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:84,Safety,avoid,avoids,84,"// If the skipped block has no labels in it, just emit the executed block.; // This avoids emitting dead code and simplifies the CFG substantially.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:114,Usability,simpl,simplifies,114,"// If the skipped block has no labels in it, just emit the executed block.; // This avoids emitting dead code and simplifies the CFG substantially.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:88,Performance,optimiz,optimized,88,"// Prefer the PGO based weights over the likelihood attribute.; // When the build isn't optimized the metadata isn't used, so don't generate; // it.; // Also, differentiate between disabled PGO and a never executed branch with; // PGO. Assuming PGO is in use:; // - we want to ignore the [[likely]] attribute if the branch is never; // executed,; // - assuming the profile is poor, preserving the attribute may still be; // beneficial.; // As an approximation, preserve the attribute only if both the branch and the; // parent context were not executed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:139,Deployability,update,updated,139,"// When measuring MC/DC, always fully evaluate the condition up front using; // EvaluateExprAsBool() so that the test vector bitmap can be updated prior to; // executing the body of the if.then or if.else. This is useful for when; // there is a 'return' within the body, but this is particularly beneficial; // when one if-stmt is nested within another if-stmt so that all of the MC/DC; // updates are kept linear and consistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:390,Deployability,update,updates,390,"// When measuring MC/DC, always fully evaluate the condition up front using; // EvaluateExprAsBool() so that the test vector bitmap can be updated prior to; // executing the body of the if.then or if.else. This is useful for when; // there is a 'return' within the body, but this is particularly beneficial; // when one if-stmt is nested within another if-stmt so that all of the MC/DC; // updates are kept linear and consistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:113,Testability,test,test,113,"// When measuring MC/DC, always fully evaluate the condition up front using; // EvaluateExprAsBool() so that the test vector bitmap can be updated prior to; // executing the body of the if.then or if.else. This is useful for when; // there is a 'return' within the body, but this is particularly beneficial; // when one if-stmt is nested within another if-stmt so that all of the MC/DC; // updates are kept linear and consistent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:106,Modifiability,variab,variable,106,"// C++ [stmt.while]p2:; // When the condition of a while statement is a declaration, the; // scope of the variable that is declared extends from its point; // of declaration (3.3.2) to the end of the while statement.; // [...]; // The object created in a condition is destroyed and created; // with each iteration of the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:132,Modifiability,extend,extends,132,"// C++ [stmt.while]p2:; // When the condition of a while statement is a declaration, the; // scope of the variable that is declared extends from its point; // of declaration (3.3.2) to the end of the while statement.; // [...]; // The object created in a condition is destroyed and created; // with each iteration of the loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:23,Safety,avoid,avoid,23,"// while(1) is common, avoid extra exit blocks. Be sure; // to correctly handle break/continue though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:42,Safety,avoid,avoid,42,"// ""do {} while (0)"" is common in macros, avoid extra blocks. Be sure; // to correctly handle break/continue though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:36,Testability,test,tests,36,"// Start the loop with a block that tests the condition.; // If there's an increment, the continue scope will be overwritten; // later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:44,Modifiability,variab,variable,44,// Create a cleanup scope for the condition variable cleanups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:138,Modifiability,variab,variable,138,"// If the for loop doesn't have an increment we can just use the condition as; // the continue block. Otherwise, if there is no condition variable, we can; // form the continue block now. If there is a condition variable, we can't; // form the continue block until after we've emitted the condition, because; // the condition is in scope in the increment, but Sema's jump diagnostics; // ensure that there are no continues from the condition variable that jump; // to the loop increment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:212,Modifiability,variab,variable,212,"// If the for loop doesn't have an increment we can just use the condition as; // the continue block. Otherwise, if there is no condition variable, we can; // form the continue block now. If there is a condition variable, we can't; // form the continue block until after we've emitted the condition, because; // the condition is in scope in the increment, but Sema's jump diagnostics; // ensure that there are no continues from the condition variable that jump; // to the loop increment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:442,Modifiability,variab,variable,442,"// If the for loop doesn't have an increment we can just use the condition as; // the continue block. Otherwise, if there is no condition variable, we can; // form the continue block now. If there is a condition variable, we can't; // form the continue block until after we've emitted the condition, because; // the condition is in scope in the increment, but Sema's jump diagnostics; // ensure that there are no continues from the condition variable that jump; // to the loop increment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:62,Modifiability,variab,variable,62,"// If the for statement has a condition scope, emit the local variable; // declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:33,Modifiability,variab,variable,33,"// We have entered the condition variable's scope, so we're now able to; // jump to the continue block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:36,Testability,test,tests,36,"// Start the loop with a block that tests the condition.; // If there's an increment, the continue scope will be overwritten; // later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:64,Modifiability,variab,variable,64,"// The loop body, consisting of the specified body and the loop variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:48,Modifiability,variab,variable,48,// Create a separate cleanup scope for the loop variable and body.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:173,Modifiability,variab,variable,173,"// Apply the named return value optimization for this return statement,; // which means doing nothing: the appropriate result has already been; // constructed into the NRVO variable.; // If there is an NRVO flag for this variable, set it to 1 into indicate; // that the cleanup code should not destroy the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:221,Modifiability,variab,variable,221,"// Apply the named return value optimization for this return statement,; // which means doing nothing: the appropriate result has already been; // constructed into the NRVO variable.; // If there is an NRVO flag for this variable, set it to 1 into indicate; // that the cleanup code should not destroy the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:306,Modifiability,variab,variable,306,"// Apply the named return value optimization for this return statement,; // which means doing nothing: the appropriate result has already been; // constructed into the NRVO variable.; // If there is an NRVO flag for this variable, set it to 1 into indicate; // that the cleanup code should not destroy the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:32,Performance,optimiz,optimization,32,"// Apply the named return value optimization for this return statement,; // which means doing nothing: the appropriate result has already been; // constructed into the NRVO variable.; // If there is an NRVO flag for this variable, set it to 1 into indicate; // that the cleanup code should not destroy the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:140,Usability,simpl,simple,140,"// If this code is reachable then emit a stop point (if generating; // debug info). We have to do this ourselves because we are on the; // ""simple"" statement path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:140,Usability,simpl,simple,140,"// If this code is reachable then emit a stop point (if generating; // debug info). We have to do this ourselves because we are on the; // ""simple"" statement path.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:13,Testability,test,test,13,// Push this test onto the chain of range checks (which terminates; // in the default basic block). The switch's default will be changed; // to the top of this chain after switch emission is complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:89,Deployability,update,update,89,"// Since we're chaining the switch default through each large case range, we; // need to update the weight for the default, ie, the first case, to include; // this case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:114,Performance,optimiz,optimizing,114,"// If the body of the case is just a 'break', try to not emit an empty block.; // If we're profiling or we're not optimizing, leave the block in for better; // debug and coverage analysis.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:16,Performance,optimiz,optimization,16,// Only do this optimization if there are no cleanups that need emitting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:413,Safety,unsafe,unsafe,413,"/// CollectStatementsForCase - Given the body of a 'switch' statement and a; /// constant value that is being switched on, see if we can dead code eliminate; /// the body of the switch to a simple series of statements to emit. Basically,; /// on a switch (5) we want to find these statements:; /// case 5:; /// printf(...); <--; /// ++i; <--; /// break;; ///; /// and add them to the ResultStmts vector. If it is unsafe to do this; /// transformation (for example, one of the elided statements contains a label; /// that might be jumped to), return CSFC_Failure. If we handled it and 'S'; /// should include statements after it (e.g. the printf() line is a substmt of; /// the case) then return CSFC_FallThrough. If we handled it and found a break; /// statement, then return CSFC_Success.; ///; /// If Case is non-null, then we are looking for the specified case, checking; /// that nothing we jump over contains labels. If Case is null, then we found; /// the case and are looking for the break.; ///; /// If the recursive walk actually finds our Case, then we set FoundCase to; /// true.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:190,Usability,simpl,simple,190,"/// CollectStatementsForCase - Given the body of a 'switch' statement and a; /// constant value that is being switched on, see if we can dead code eliminate; /// the body of the switch to a simple series of statements to emit. Basically,; /// on a switch (5) we want to find these statements:; /// case 5:; /// printf(...); <--; /// ++i; <--; /// break;; ///; /// and add them to the ResultStmts vector. If it is unsafe to do this; /// transformation (for example, one of the elided statements contains a label; /// that might be jumped to), return CSFC_Failure. If we handled it and 'S'; /// should include statements after it (e.g. the printf() line is a substmt of; /// the case) then return CSFC_FallThrough. If we handled it and found a break; /// statement, then return CSFC_Success.; ///; /// If Case is non-null, then we are looking for the specified case, checking; /// that nothing we jump over contains labels. If Case is null, then we found; /// the case and are looking for the break.; ///; /// If the recursive walk actually finds our Case, then we set FoundCase to; /// true.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:134,Performance,optimiz,optimize,134,"// Keep track of whether we see a skipped declaration. The code could be; // using the declaration even if it is skipped, so we can't optimize out; // the decl if the kept statements might refer to it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:70,Performance,optimiz,optimization,70,"// If we found the case and skipped declarations, we can't do the; // optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:70,Performance,optimiz,optimization,70,"// If we found the case and skipped declarations, we can't do the; // optimization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:53,Usability,simpl,simple,53,"// A fallthrough result means that the statement was simple and just; // included in ResultStmt, keep adding them afterwards.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:82,Performance,perform,perform,82,"// If we're about to fall out of a scope without hitting a 'break;', we; // can't perform the optimization if there were any decls in that scope; // (we'd lose their end-of-lifetime).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:94,Performance,optimiz,optimization,94,"// If we're about to fall out of a scope without hitting a 'break;', we; // can't perform the optimization if there were any decls in that scope; // (we'd lose their end-of-lifetime).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:82,Energy Efficiency,efficient,efficiently,82,"// First step, find the switch case that is being branched to. We can do this; // efficiently by scanning the SwitchCase list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:9,Safety,safe,safe,9,"// It is safe to elide the body of the switch if it doesn't contain labels; // etc. If it is safe, return successfully with an empty ResultStmts list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:93,Safety,safe,safe,93,"// It is safe to elide the body of the switch if it doesn't contain labels; // etc. If it is safe, return successfully with an empty ResultStmts list.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:75,Performance,optimiz,optimization,75,// When multiple cases share the same code they can be combined during; // optimization. In that case the weights of the branch will be the sum of; // the individual weights. Make sure the combined sum of all neutral cases; // doesn't exceed the value of a single likely attribute.; // The additions both avoid divisions by 0 and make sure the weights of None; // don't exceed the weight of Likely.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:305,Safety,avoid,avoid,305,// When multiple cases share the same code they can be combined during; // optimization. In that case the weights of the branch will be the sum of; // the individual weights. Make sure the combined sum of all neutral cases; // doesn't exceed the value of a single likely attribute.; // The additions both avoid divisions by 0 and make sure the weights of None; // don't exceed the weight of Likely.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:22,Modifiability,variab,variable,22,// Emit the condition variable if needed inside the entire cleanup scope; // used by this special case for constant folded switches.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:192,Availability,failure,failure,192,// Create basic block to hold stuff that comes after switch; // statement. We also need to create a default block now so that; // explicit case ranges tests can have a place to jump to on; // failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:151,Testability,test,tests,151,// Create basic block to hold stuff that comes after switch; // statement. We also need to create a default block now so that; // explicit case ranges tests can have a place to jump to on; // failure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:3,Usability,Clear,Clear,3,// Clear the insertion point to indicate we are in unreachable code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:3,Deployability,Update,Update,3,// Update the default block in case explicit case range tests have; // been chained on top.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:56,Testability,test,tests,56,// Update the default block in case explicit case range tests have; // been chained on top.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:33,Integrability,wrap,wrapped,33,"// If the switch has a condition wrapped by __builtin_unpredictable,; // create metadata that specifies that the switch is unpredictable.; // Don't bother if not optimizing because that metadata would not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:162,Performance,optimiz,optimizing,162,"// If the switch has a condition wrapped by __builtin_unpredictable,; // create metadata that specifies that the switch is unpredictable.; // Don't bother if not optimizing because that metadata would not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:60,Modifiability,variab,variable,60,/// AddVariableConstraints - Look at AsmExpr and if it is a variable declared; /// as using a particular register add that as a constraint that will be used; /// in this asm stmt.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:15,Security,validat,validateOutputConstraint,15,// We're using validateOutputConstraint here because we only care if; // this is a register constraint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:186,Performance,optimiz,optimizations,186,"// Conservatively, mark all inline asm blocks in CUDA or OpenCL as; // convergent (meaning, they may call an intrinsically convergent op, such; // as bar.sync, and so can't have certain optimizations applied around; // them).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:3,Usability,Simpl,Simplify,3,// Simplify the output constraint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:11,Availability,error,error,11,// Give an error on multiple outputs to same physreg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:3,Deployability,Update,Update,3,// Update largest vector width for any vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:174,Deployability,update,update,174,"// Matrix types in memory are represented by arrays, but accessed through; // vector pointers, with the alignment specified on the access operation.; // For inline assembly, update pointer arguments to use vector pointers.; // Otherwise there will be a mis-match if the matrix is also an; // input-argument which is represented as vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:57,Security,access,accessed,57,"// Matrix types in memory are represented by arrays, but accessed through; // vector pointers, with the alignment specified on the access operation.; // For inline assembly, update pointer arguments to use vector pointers.; // Otherwise there will be a mis-match if the matrix is also an; // input-argument which is represented as vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:131,Security,access,access,131,"// Matrix types in memory are represented by arrays, but accessed through; // vector pointers, with the alignment specified on the access operation.; // For inline assembly, update pointer arguments to use vector pointers.; // Otherwise there will be a mis-match if the matrix is also an; // input-argument which is represented as vector.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:3,Deployability,Update,Update,3,// Update largest vector width for any vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:3,Usability,Simpl,Simplify,3,// Simplify the input constraint.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:61,Modifiability,extend,extend,61,"// If this input argument is tied to a larger output result, extend the; // input to be the same size as the output. The LLVM backend wants to see; // the input and output of a matching constraint be the same size. Note; // that GCC does not define what the top bits are here. We use zext because; // that is usually cheaper, but LLVM IR should really get an anyext someday.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:3,Deployability,Update,Update,3,// Update largest vector width for any vector types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:90,Modifiability,variab,variables,90,"/// Generate an outlined function for the body of a CapturedStmt, store any; /// captured variables into the captured struct, and call the outlined function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:14,Modifiability,variab,variable-length,14,// Initialize variable-length arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp:26,Performance,load,load,26,"// If 'this' is captured, load it into CXXThisValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmt.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:32,Modifiability,variab,variables,32,"// Emit init, __range and __end variables for C++ range loops.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:75,Performance,load,load,75,"// If the field is not a pointer, we need to save the actual value; // and load it as a void pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Performance,Load,Load,3,// Load the value using the destination type pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:49,Modifiability,variab,variables,49,/// true if cast to/from UIntPtr is required for variables captured by; /// value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:42,Performance,optimiz,optimizations,42,// Always inline the outlined function if optimizations are enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:26,Performance,load,load,26,"// If 'this' is captured, load it into CXXThisValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Performance,Perform,Perform,3,// Perform element-by-element initialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:9,Availability,down,down,9,// Drill down to the base element type on both arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Performance,Perform,Perform,3,// Perform simple memcpy for simple copying.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:11,Usability,simpl,simple,11,// Perform simple memcpy for simple copying.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:29,Usability,simpl,simple,29,// Perform simple memcpy for simple copying.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:41,Performance,perform,perform,41,// For arrays with complex element types perform element by element; // copying.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:86,Modifiability,variab,variables,86,"// Working with the single array element, so have to remap; // destination and source variables to corresponding array; // elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:23,Modifiability,variab,variable,23,// Remap pseudo source variable to private copy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:29,Modifiability,variab,variable,29,// Emit copying of the whole variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:46,Modifiability,variab,variables,46,"// Do not emit copy for firstprivate constant variables in target regions,; // captured by reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:29,Modifiability,variab,variable,29,// Check if the firstprivate variable is just a constant value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:79,Modifiability,variab,variable,79,// Emit VarDecl with copy init for arrays.; // Get the address of the original variable captured in current; // captured region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Performance,Perform,Perform,3,// Perform simple memcpy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:11,Usability,simpl,simple,11,// Perform simple memcpy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:62,Modifiability,variab,variable,62,// Emit private VarDecl with copy init.; // Remap temp VDInit variable to the address of the original; // variable (for proper handling of captured global variables).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:106,Modifiability,variab,variable,106,// Emit private VarDecl with copy init.; // Remap temp VDInit variable to the address of the original; // variable (for proper handling of captured global variables).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:155,Modifiability,variab,variables,155,// Emit private VarDecl with copy init.; // Remap temp VDInit variable to the address of the original; // variable (for proper handling of captured global variables).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:23,Modifiability,variab,variable,23,// Create/init special variable for lastprivate conditionals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Modifiability,variab,variable,36,// Silence the warning about unused variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Modifiability,variab,variable,36,// Silence the warning about unused variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:33,Modifiability,variab,variable,33,"// Get the address of the master variable. If we are emitting code with; // TLS support, the address is passed from the master as field in the; // captured declaration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:40,Modifiability,variab,variable,40,// Get the address of the threadprivate variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:9,Safety,Avoid,Avoid,9,// TODO: Avoid ptrtoint conversion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:56,Deployability,update,update,56,// Keep the address of the original variable for future update at the end; // of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Modifiability,variab,variable,36,// Keep the address of the original variable for future update at the end; // of the loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:16,Modifiability,variab,variable,16,// Check if the variable is also a firstprivate: in this case IInit is; // not generated. Initialization of this variable will happen in codegen; // for 'firstprivate' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:113,Modifiability,variab,variable,113,// Check if the variable is also a firstprivate: in this case IInit is; // not generated. Initialization of this variable will happen in codegen; // for 'firstprivate' clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:84,Deployability,update,update,84,"// If lastprivate variable is a loop control variable for loop-based; // directive, update its value before copyin back to original; // variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:18,Modifiability,variab,variable,18,"// If lastprivate variable is a loop control variable for loop-based; // directive, update its value before copyin back to original; // variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:45,Modifiability,variab,variable,45,"// If lastprivate variable is a loop control variable for loop-based; // directive, update its value before copyin back to original; // variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:136,Modifiability,variab,variable,136,"// If lastprivate variable is a loop control variable for loop-based; // directive, update its value before copyin back to original; // variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:34,Modifiability,variab,variable,34,// Get the address of the private variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:35,Modifiability,variab,variable,35,// Get the address of the original variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Modifiability,variab,variable,36,// Silence the warning about unused variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Modifiability,variab,variable,37,// Store the address of the original variable associated with the LHS; // implicit variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:83,Modifiability,variab,variable,83,// Store the address of the original variable associated with the LHS; // implicit variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Modifiability,variab,variable,37,// Store the address of the original variable associated with the LHS; // implicit variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:83,Modifiability,variab,variable,83,// Store the address of the original variable associated with the LHS; // implicit variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Modifiability,variab,variable,37,// Store the address of the original variable associated with the LHS; // implicit variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:83,Modifiability,variab,variable,83,// Store the address of the original variable associated with the LHS; // implicit variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:21,Deployability,update,update,21,"// If the first post-update expression is found, emit conditional; // block if it was requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:219,Deployability,update,updated,219,// Privates should ne analyzed since they are not captured at all.; // Task reductions may be skipped - tasks are ignored.; // Firstprivates do not return value but may be passed by reference - no need; // to check for updated lastprivate conditional.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Integrability,synchroniz,synchronize,28,// Emit implicit barrier to synchronize threads and avoid data races on; // propagation master's thread values of threadprivate variables to local; // instances of that variables of all other implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:128,Modifiability,variab,variables,128,// Emit implicit barrier to synchronize threads and avoid data races on; // propagation master's thread values of threadprivate variables to local; // instances of that variables of all other implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:169,Modifiability,variab,variables,169,// Emit implicit barrier to synchronize threads and avoid data races on; // propagation master's thread values of threadprivate variables to local; // instances of that variables of all other implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:52,Safety,avoid,avoid,52,// Emit implicit barrier to synchronize threads and avoid data races on; // propagation master's thread values of threadprivate variables to local; // instances of that variables of all other implicit threads.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Modifiability,variab,variabels,43,"// The cleanup callback that finalizes all variabels at the given location,; // thus calls destructors etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:118,Modifiability,variab,variables,118,// Privatization callback that performs appropriate action for; // shared/private/firstprivate/lastprivate/copyin/... variables.; //; // TODO: This defaults to shared right now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:31,Performance,perform,performs,31,// Privatization callback that performs appropriate action for; // shared/private/firstprivate/lastprivate/copyin/... variables.; //; // TODO: This defaults to shared right now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:41,Modifiability,variab,variables,41,"// The next line is appropriate only for variables (Val) with the; // data-sharing attribute ""shared"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Deployability,Update,Update,3,// Update counters values on current iteration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Deployability,Update,Update,3,"// Update the linear variables.; // In distribute directives only loop counters may be marked as linear, no; // need to generate the code for them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:21,Modifiability,variab,variables,21,"// Update the linear variables.; // In distribute directives only loop counters may be marked as linear, no; // need to generate the code for them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:93,Integrability,depend,depending,93,"// Need to remember the block before and after scan directive; // to dispatch them correctly depending on the clause used in; // this directive, inclusive or exclusive. For inclusive scan the natural; // order of the blocks is used, for exclusive clause the blocks must be; // executed in reverse order.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:14,Energy Efficiency,allocate,allocate,14,"// No need to allocate inscan exit block, in simd mode it is selected in the; // codegen for the scan directive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:13,Modifiability,variab,variables,13,// Emit loop variables for C++ range loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:12,Deployability,update,updates,12,// The end (updates/cleanups).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:66,Modifiability,variab,variable,66,// Emit init statements. The Distance/LoopVar funcs may reference variable; // declarations they contain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:76,Modifiability,variab,variable,76,// Emit the loop body: Convert the logical iteration number to the loop; // variable and emit the body.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:35,Testability,log,logical,35,// Emit the loop body: Convert the logical iteration number to the loop; // variable and emit the body.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Testability,test,tests,36,// Start the loop with a block that tests the condition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:29,Modifiability,variab,variables,29,// Emit inits for the linear variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:39,Modifiability,variab,variables,39,// Emit the final values of the linear variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:21,Deployability,update,update,21,"// If the first post-update expression is found, emit conditional; // block if it was requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:23,Modifiability,variab,variables,23,// Override only those variables that can be captured to avoid re-emission; // of the variables declared within the loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:86,Modifiability,variab,variables,86,// Override only those variables that can be captured to avoid re-emission; // of the variables declared within the loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:57,Safety,avoid,avoid,57,// Override only those variables that can be captured to avoid re-emission; // of the variables declared within the loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Modifiability,variab,variables,28,// Create temp loop control variables with their init values to support; // non-rectangular loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Modifiability,variab,variable,36,// Silence the warning about unused variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:128,Integrability,depend,dependences,128,"// In presence of finite 'safelen', it may be unsafe to mark all; // the memory instructions parallel, because loop-carried; // dependences of 'safelen' iterations are possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:26,Safety,safe,safelen,26,"// In presence of finite 'safelen', it may be unsafe to mark all; // the memory instructions parallel, because loop-carried; // dependences of 'safelen' iterations are possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:46,Safety,unsafe,unsafe,46,"// In presence of finite 'safelen', it may be unsafe to mark all; // the memory instructions parallel, because loop-carried; // dependences of 'safelen' iterations are possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:144,Safety,safe,safelen,144,"// In presence of finite 'safelen', it may be unsafe to mark all; // the memory instructions parallel, because loop-carried; // dependences of 'safelen' iterations are possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:128,Integrability,depend,dependences,128,"// In presence of finite 'safelen', it may be unsafe to mark all; // the memory instructions parallel, because loop-carried; // dependences of 'safelen' iterations are possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:26,Safety,safe,safelen,26,"// In presence of finite 'safelen', it may be unsafe to mark all; // the memory instructions parallel, because loop-carried; // dependences of 'safelen' iterations are possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:46,Safety,unsafe,unsafe,46,"// In presence of finite 'safelen', it may be unsafe to mark all; // the memory instructions parallel, because loop-carried; // dependences of 'safelen' iterations are possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:144,Safety,safe,safelen,144,"// In presence of finite 'safelen', it may be unsafe to mark all; // the memory instructions parallel, because loop-carried; // dependences of 'safelen' iterations are possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Safety,safe,safelen,28,// Walk clauses and process safelen/lastprivate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:20,Security,access,access,20,// Disable parallel access in case of prefix sum.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:21,Deployability,update,update,21,"// If the first post-update expression is found, emit conditional; // block if it was requested.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:18,Modifiability,variab,variable,18,/// Emit a helper variable and return corresponding lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:88,Deployability,update,updates,88,// if (PreCond) {; // for (IV in 0..LastIteration) BODY;; // <Final counter/linear vars updates>;; // }; //,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:86,Safety,avoid,avoid,86,"// Emit: if (PreCond) - begin.; // If the condition constant folds and can be elided, avoid emitting the; // whole loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,Modifiability,variab,variable,27,// Emit the loop iteration variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:29,Modifiability,variab,variable,29,"// Emit the iterations count variable.; // If it is not a variable, Sema decided to calculate iterations count on; // each iteration (e.g., it is foldable into a constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:58,Modifiability,variab,variable,58,"// Emit the iterations count variable.; // If it is not a variable, Sema decided to calculate iterations count on; // each iteration (e.g., it is foldable into a constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:38,Modifiability,variab,variables,38,// Emit final copy of the lastprivate variables at the end of loops.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Safety,safe,safelen,37,"// Currently only order, simdlen and safelen clauses are supported",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:24,Usability,Clear,Clear,24,// Consume nested loop. Clear the entire remaining loop stack because a; // fully unrolled loop is non-transformable. For partial unrolling the; // generated outer loop is pushed back to the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Testability,test,tests,36,// Start the loop with a block that tests the condition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Energy Efficiency,schedul,schedule,37,"// Emit ""IV = LB"" (in case of static schedule, we have already calculated new; // LB for loop condition and emitted it above).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:96,Energy Efficiency,schedul,scheduling,96,// Generate !llvm.loop.parallel metadata for loads and stores for loops; // with dynamic/guided scheduling and without ordered clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:45,Performance,load,loads,45,// Generate !llvm.loop.parallel metadata for loads and stores for loops; // with dynamic/guided scheduling and without ordered clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:89,Usability,guid,guided,89,// Generate !llvm.loop.parallel metadata for loads and stores for loops; // with dynamic/guided scheduling and without ordered clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:11,Energy Efficiency,schedul,scheduling,11,"// Dynamic scheduling of the outer loop (dynamic, guided, auto, runtime).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:50,Usability,guid,guided,50,"// Dynamic scheduling of the outer loop (dynamic, guided, auto, runtime).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:92,Energy Efficiency,schedul,schedule,92,"// Emit outer loop.; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(dynamic,chunk_size) is specified, the iterations are; // distributed to threads in the team in chunks as the threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be distributed. Each chunk contains chunk_size; // iterations, except for the last chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Cons",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:548,Energy Efficiency,schedul,schedule,548,"// Emit outer loop.; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(dynamic,chunk_size) is specified, the iterations are; // distributed to threads in the team in chunks as the threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be distributed. Each chunk contains chunk_size; // iterations, except for the last chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Cons",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:1277,Energy Efficiency,schedul,schedule,1277,"remain to be distributed. Each chunk contains chunk_size; // iterations, except for the last chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(static, chunk_size) is specified, iterations are divided into; // chunks of size chunk_size, and the chunks are assigned to the threads in; // the team in a round-robin fashion in the order of the thread number.; //; // while(UB = min(UB, GlobalUB), idx = LB, idx < UB) {; // whi",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:1329,Energy Efficiency,schedul,scheduling,1329,"remain to be distributed. Each chunk contains chunk_size; // iterations, except for the last chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(static, chunk_size) is specified, iterations are divided into; // chunks of size chunk_size, and the chunks are assigned to the threads in; // the team in a round-robin fashion in the order of the thread number.; //; // while(UB = min(UB, GlobalUB), idx = LB, idx < UB) {; // whi",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:1538,Energy Efficiency,schedul,schedule,1538,"t chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(static, chunk_size) is specified, iterations are divided into; // chunks of size chunk_size, and the chunks are assigned to the threads in; // the team in a round-robin fashion in the order of the thread number.; //; // while(UB = min(UB, GlobalUB), idx = LB, idx < UB) {; // while (idx <= UB) { BODY; ++idx; } // inner loop; // LB = LB + ST;; // UB = UB + ST;; // }; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:1593,Energy Efficiency,schedul,scheduling,1593,"t chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(static, chunk_size) is specified, iterations are divided into; // chunks of size chunk_size, and the chunks are assigned to the threads in; // the team in a round-robin fashion in the order of the thread number.; //; // while(UB = min(UB, GlobalUB), idx = LB, idx < UB) {; // while (idx <= UB) { BODY; ++idx; } // inner loop; // LB = LB + ST;; // UB = UB + ST;; // }; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:1644,Energy Efficiency,schedul,schedule,1644,"t chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(static, chunk_size) is specified, iterations are divided into; // chunks of size chunk_size, and the chunks are assigned to the threads in; // the team in a round-robin fashion in the order of the thread number.; //; // while(UB = min(UB, GlobalUB), idx = LB, idx < UB) {; // while (idx <= UB) { BODY; ++idx; } // inner loop; // LB = LB + ST;; // UB = UB + ST;; // }; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:1741,Energy Efficiency,schedul,schedule,1741,"t chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(static, chunk_size) is specified, iterations are divided into; // chunks of size chunk_size, and the chunks are assigned to the threads in; // the team in a round-robin fashion in the order of the thread number.; //; // while(UB = min(UB, GlobalUB), idx = LB, idx < UB) {; // while (idx <= UB) { BODY; ++idx; } // inner loop; // LB = LB + ST;; // UB = UB + ST;; // }; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:2041,Energy Efficiency,schedul,schedule,2041,"t chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(static, chunk_size) is specified, iterations are divided into; // chunks of size chunk_size, and the chunks are assigned to the threads in; // the team in a round-robin fashion in the order of the thread number.; //; // while(UB = min(UB, GlobalUB), idx = LB, idx < UB) {; // while (idx <= UB) { BODY; ++idx; } // inner loop; // LB = LB + ST;; // UB = UB + ST;; // }; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:557,Usability,guid,guided,557,"// Emit outer loop.; //; // OpenMP [2.7.1, Loop Construct, Description, table 2-1]; // When schedule(dynamic,chunk_size) is specified, the iterations are; // distributed to threads in the team in chunks as the threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be distributed. Each chunk contains chunk_size; // iterations, except for the last chunk to be distributed, which may have; // fewer iterations. When no chunk_size is specified, it defaults to 1.; //; // When schedule(guided,chunk_size) is specified, the iterations are assigned; // to threads in the team in chunks as the executing threads request them.; // Each thread executes a chunk of iterations, then requests another chunk,; // until no chunks remain to be assigned. For a chunk_size of 1, the size of; // each chunk is proportional to the number of unassigned iterations divided; // by the number of threads in the team, decreasing to 1. For a chunk_size; // with value k (greater than 1), the size of each chunk is determined in the; // same way, with the restriction that the chunks do not contain fewer than k; // iterations (except for the last chunk to be assigned, which may have fewer; // than k iterations).; //; // When schedule(auto) is specified, the decision regarding scheduling is; // delegated to the compiler and/or runtime system. The programmer gives the; // implementation the freedom to choose any possible mapping of iterations to; // threads in the team.; //; // When schedule(runtime) is specified, the decision regarding scheduling is; // deferred until run time, and the schedule and chunk size are taken from the; // run-sched-var ICV. If the ICV is set to auto, the schedule is; // implementation defined; //; // while(__kmpc_dispatch_next(&LB, &UB)) {; // idx = LB;; // while (idx <= UB) { BODY; ++idx;; // __kmpc_dispatch_fini_(4|8)[u](); // For ordered loops only.; // } // inner loop; // }; //; // OpenMP [2.7.1, Loop Cons",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:72,Energy Efficiency,schedul,schedule,72,"// Emit outer loop.; // Same behavior as a OMPForOuterLoop, except that schedule cannot be; // dynamic; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:8,Integrability,rout,routine,8,// this routine is shared by 'omp distribute parallel for' and; // 'omp distribute': select the right EUB expression depending on the; // directive,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:117,Integrability,depend,depending,117,// this routine is shared by 'omp distribute parallel for' and; // 'omp distribute': select the right EUB expression depending on the; // directive,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:302,Energy Efficiency,schedul,schedule,302,// When composing 'distribute' with 'for' (e.g. as in 'distribute; // parallel for') we need to use the 'distribute'; // chunk lower and upper bounds rather than the whole loop iteration; // space. These are parameters to the outlined function for 'parallel'; // and we copy the bounds of the previous schedule into the; // the current ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Energy Efficiency,schedul,schedule,37,"/// if the 'for' loop has a dispatch schedule (e.g. dynamic, guided) then; /// we need to use the LB and UB expressions generated by the worksharing; /// code generation support, whereas in non combined situations we would; /// just emit 0 and the LastIteration expression; /// This function is necessary due to the difference of the LB and UB; /// types for the RT emission routines for 'for_static_init' and; /// 'for_dispatch_init'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:375,Integrability,rout,routines,375,"/// if the 'for' loop has a dispatch schedule (e.g. dynamic, guided) then; /// we need to use the LB and UB expressions generated by the worksharing; /// code generation support, whereas in non combined situations we would; /// just emit 0 and the LastIteration expression; /// This function is necessary due to the difference of the LB and UB; /// types for the RT emission routines for 'for_static_init' and; /// 'for_dispatch_init'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:61,Usability,guid,guided,61,"/// if the 'for' loop has a dispatch schedule (e.g. dynamic, guided) then; /// we need to use the LB and UB expressions generated by the worksharing; /// code generation support, whereas in non combined situations we would; /// just emit 0 and the LastIteration expression; /// This function is necessary due to the difference of the LB and UB; /// types for the RT emission routines for 'for_static_init' and; /// 'for_dispatch_init'",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:31,Energy Efficiency,schedul,schedule,31,"// when implementing a dynamic schedule for a 'for' combined with a; // 'distribute' (e.g. 'distribute parallel for'), the 'for' loop; // is not normalized as each team only executes its own assigned; // distribute chunk",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,Modifiability,variab,variable,27,// Emit the loop iteration variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:29,Modifiability,variab,variable,29,"// Emit the iterations count variable.; // If it is not a variable, Sema decided to calculate iterations count on each; // iteration (e.g., it is foldable into a constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:58,Modifiability,variab,variable,58,"// Emit the iterations count variable.; // If it is not a variable, Sema decided to calculate iterations count on each; // iteration (e.g., it is foldable into a constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:114,Safety,avoid,avoid,114,"// Skip the entire loop if we don't meet the precondition.; // If the condition constant folds and can be elided, avoid emitting the; // whole loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:126,Deployability,update,update,126,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Integrability,synchroniz,synchronize,28,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:107,Modifiability,variab,variables,107,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:152,Modifiability,variab,variables,152,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:52,Safety,avoid,avoid,52,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:19,Energy Efficiency,schedul,schedule,19,// Detect the loop schedule kind and chunk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Safety,Detect,Detect,3,// Detect the loop schedule kind and chunk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:25,Energy Efficiency,schedul,schedule,25,// Default behaviour for schedule clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:68,Energy Efficiency,schedul,schedule,68,"// OpenMP 4.5, 2.7.1 Loop Construct, Description.; // If the static schedule kind is specified or if the ordered clause is; // specified, and if no monotonic modifier is specified, the effect will; // be as if the monotonic modifier was specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:24,Energy Efficiency,schedul,schedule,24,// For unchunked static schedule generate:; //; // while (idx <= UB) {; // BODY;; // ++idx;; // }; //; // For static schedule with chunk one:; //; // while (IV <= PrevUB) {; // BODY;; // IV += ST;; // },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:117,Energy Efficiency,schedul,schedule,117,// For unchunked static schedule generate:; //; // while (idx <= UB) {; // BODY;; // ++idx;; // }; //; // For static schedule with chunk one:; //; // while (IV <= PrevUB) {; // BODY;; // IV += ST;; // },MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:13,Deployability,update,update,13,// Emit post-update of the reduction variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Modifiability,variab,variables,37,// Emit post-update of the reduction variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:38,Modifiability,variab,variables,38,// Emit final copy of the lastprivate variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:135,Energy Efficiency,schedul,schedule,135,/// The following two functions generate expressions for the loop lower; /// and upper bounds in case of static and dynamic (dispatch) schedule; /// of the associated 'for' or 'distribute' loop.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:31,Energy Efficiency,schedul,schedules,31,"/// When dealing with dispatch schedules (e.g. dynamic, guided) we do not; /// consider the lower and upper bound expressions generated by the; /// worksharing loop support, but we use 0 and the iteration space size as; /// constants",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:56,Usability,guid,guided,56,"/// When dealing with dispatch schedules (e.g. dynamic, guided) we do not; /// consider the lower and upper bound expressions generated by the; /// worksharing loop support, but we use 0 and the iteration space size as; /// constants",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:35,Modifiability,variab,variables,35,// Emit buffers for each reduction variables.; // ReductionCodeGen is required to emit correctly the code for array; // reductions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:8,Modifiability,variab,variably,8,"// Emit variably modified arrays, used for arrays/array sections; // reductions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:58,Modifiability,variab,variables,58,/// Copies final inscan reductions values to the original variables.; /// The code is the following:; /// \code; /// <orig_var> = buffer[num_iters-1];; /// \endcode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:2,Usability,Simpl,SimpleReduction,2,/*SimpleReduction=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:126,Deployability,update,update,126,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of lastprivate; // variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Integrability,synchroniz,synchronize,28,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of lastprivate; // variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:107,Modifiability,variab,variables,107,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of lastprivate; // variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:152,Modifiability,variab,variables,152,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of lastprivate; // variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:52,Safety,avoid,avoid,52,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables and post-update of lastprivate; // variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:13,Deployability,update,update,13,// Emit post-update of the reduction variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Modifiability,variab,variables,37,// Emit post-update of the reduction variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:38,Modifiability,variab,variables,38,// Emit final copy of the lastprivate variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Integrability,synchroniz,synchronize,28,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:107,Modifiability,variab,variables,107,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:52,Safety,avoid,avoid,52,// Emit implicit barrier to synchronize threads and avoid data races on; // initialization of firstprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:118,Modifiability,variab,variables,118,// Privatization callback that performs appropriate action for; // shared/private/firstprivate/lastprivate/copyin/... variables.; //; // TODO: This defaults to shared right now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:31,Performance,perform,performs,31,// Privatization callback that performs appropriate action for; // shared/private/firstprivate/lastprivate/copyin/... variables.; //; // TODO: This defaults to shared right now.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:41,Modifiability,variab,variables,41,"// The next line is appropriate only for variables (Val) with the; // data-sharing attribute ""shared"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:125,Modifiability,variab,variables,125,"// Check if there are any 'copyprivate' clauses associated with this; // 'single' construct.; // Build a list of copyprivate variables along with helper expressions; // (<source>, <destination>, <destination>=<source> expressions)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Safety,avoid,avoid,43,// Emit an implicit barrier at the end (to avoid data race on firstprivate; // init or if no 'nowait' clause was specified and no 'copyprivate' clause).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:105,Availability,mask,masked,105,// Emit directive as a combined directive that consists of two implicit; // directives: 'parallel' with 'masked' directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:20,Modifiability,variab,variables,20,/// Get the list of variables declared in the context of the untied tasks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:148,Usability,simpl,simplify,148,"// Since both OMPC_DEPEND_outallmemory and OMPC_DEPEND_inoutallmemory are; // equivalent to the runtime, always use OMPC_DEPEND_outallmemory to; // simplify.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:25,Usability,simpl,simplify,25,// Add a nullptr Expr to simplify the codegen in emitDependData.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:17,Integrability,depend,dependences,17,// Add remaining dependences skipping any 'out' or 'inout' if they are; // overridden by 'omp_all_memory'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:61,Safety,avoid,avoid,61,"// If the condition constant folds and can be elided, try to avoid emitting; // the condition and the dead arm of the if/else.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:23,Modifiability,variab,variables,23,// Get list of private variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Modifiability,variab,variables,28,// Get list of firstprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,Modifiability,variab,variables,27,// Get list of lastprivate variables (for taskloops).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:17,Integrability,depend,dependences,17,// Build list of dependences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,Modifiability,variab,variables,27,// Generate debug info for variables present in shared clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:14,Modifiability,variab,variables,14,"// The shared variables are packed together as members of structure.; // So the address of each shared variable can be computed by adding; // offset of it (within record) to the base address of record. For each; // shared variable, debug intrinsic llvm.dbg.declare is generated with; // appropriate expressions (DIExpression).; // Ex:; // %12 = load %struct.anon*, %struct.anon** %__context.addr.i; // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar1,; // metadata !DIExpression(DW_OP_deref)); // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar2,; // metadata !DIExpression(DW_OP_plus_uconst, 8, DW_OP_deref))",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:103,Modifiability,variab,variable,103,"// The shared variables are packed together as members of structure.; // So the address of each shared variable can be computed by adding; // offset of it (within record) to the base address of record. For each; // shared variable, debug intrinsic llvm.dbg.declare is generated with; // appropriate expressions (DIExpression).; // Ex:; // %12 = load %struct.anon*, %struct.anon** %__context.addr.i; // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar1,; // metadata !DIExpression(DW_OP_deref)); // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar2,; // metadata !DIExpression(DW_OP_plus_uconst, 8, DW_OP_deref))",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:222,Modifiability,variab,variable,222,"// The shared variables are packed together as members of structure.; // So the address of each shared variable can be computed by adding; // offset of it (within record) to the base address of record. For each; // shared variable, debug intrinsic llvm.dbg.declare is generated with; // appropriate expressions (DIExpression).; // Ex:; // %12 = load %struct.anon*, %struct.anon** %__context.addr.i; // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar1,; // metadata !DIExpression(DW_OP_deref)); // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar2,; // metadata !DIExpression(DW_OP_plus_uconst, 8, DW_OP_deref))",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:345,Performance,load,load,345,"// The shared variables are packed together as members of structure.; // So the address of each shared variable can be computed by adding; // offset of it (within record) to the base address of record. For each; // shared variable, debug intrinsic llvm.dbg.declare is generated with; // appropriate expressions (DIExpression).; // Ex:; // %12 = load %struct.anon*, %struct.anon** %__context.addr.i; // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar1,; // metadata !DIExpression(DW_OP_deref)); // call void @llvm.dbg.declare(metadata %struct.anon* %12,; // metadata !svar2,; // metadata !DIExpression(DW_OP_plus_uconst, 8, DW_OP_deref))",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:60,Deployability,update,update,60,// Get the call dbg.declare instruction we just created and update; // its DIExpression to add offset to base address.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:17,Deployability,update,update,17,// If key exists update in place.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:95,Modifiability,variab,variables,95,// FIXME: This must removed once the runtime library is fixed.; // Emit required threadprivate variables for; // initializer/combiner/finalizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:25,Modifiability,variab,variables,25,// Privatize all private variables except for in_reduction items.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Modifiability,variab,variable,28,// The taskgroup descriptor variable is always implicit firstprivate and; // privatized already during processing of the firstprivates.; // FIXME: This must removed once the runtime library is fixed.; // Emit required threadprivate variables for; // initializer/combiner/finalizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:232,Modifiability,variab,variables,232,// The taskgroup descriptor variable is always implicit firstprivate and; // privatized already during processing of the firstprivates.; // FIXME: This must removed once the runtime library is fixed.; // Emit required threadprivate variables for; // initializer/combiner/finalizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Modifiability,variab,variables,28,// Get list of firstprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:95,Modifiability,variab,variables,95,// FIXME: This must removed once the runtime library is fixed.; // Emit required threadprivate variables for; // initializer/combiner/finalizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:95,Modifiability,variab,variables,95,// FIXME: This must removed once the runtime library is fixed.; // Emit required threadprivate variables for; // initializer/combiner/finalizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:17,Integrability,depend,dependences,17,// Build list of dependences,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:58,Modifiability,variab,variables,58,// New scope for correct construction/destruction of temp variables for; // exclusive scan.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:2,Usability,Simpl,SimpleReduction,2,/*SimpleReduction=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,Modifiability,variab,variable,27,// Emit the loop iteration variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:29,Modifiability,variab,variable,29,"// Emit the iterations count variable.; // If it is not a variable, Sema decided to calculate iterations count on each; // iteration (e.g., it is foldable into a constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:58,Modifiability,variab,variable,58,"// Emit the iterations count variable.; // If it is not a variable, Sema decided to calculate iterations count on each; // iteration (e.g., it is foldable into a constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:114,Safety,avoid,avoid,114,"// Skip the entire loop if we don't meet the precondition.; // If the condition constant folds and can be elided, avoid emitting the; // whole loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:126,Deployability,update,update,126,// Emit implicit barrier to synchronize threads and avoid data races; // on initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:28,Integrability,synchroniz,synchronize,28,// Emit implicit barrier to synchronize threads and avoid data races; // on initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:107,Modifiability,variab,variables,107,// Emit implicit barrier to synchronize threads and avoid data races; // on initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:152,Modifiability,variab,variables,152,// Emit implicit barrier to synchronize threads and avoid data races; // on initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:52,Safety,avoid,avoid,52,// Emit implicit barrier to synchronize threads and avoid data races; // on initialization of firstprivate variables and post-update of; // lastprivate variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:25,Energy Efficiency,schedul,schedule,25,// Detect the distribute schedule kind and chunk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Safety,Detect,Detect,3,// Detect the distribute schedule kind and chunk.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:24,Energy Efficiency,schedul,schedules,24,"// For static unchunked schedules generate:; //; // 1. For distribute alone, codegen; // while (idx <= UB) {; // BODY;; // ++idx;; // }; //; // 2. When combined with 'for' (e.g. as in 'distribute parallel for'); // while (idx <= UB) {; // <CodeGen rest of pragma>(LB, UB);; // idx += ST;; // }; //; // For static chunk one schedule generate:; //; // while (IV <= GlobalUB) {; // <CodeGen rest of pragma>(LB, UB);; // LB += ST;; // UB += ST;; // UB = min(UB, GlobalUB);; // IV = LB;; // }; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:323,Energy Efficiency,schedul,schedule,323,"// For static unchunked schedules generate:; //; // 1. For distribute alone, codegen; // while (idx <= UB) {; // BODY;; // ++idx;; // }; //; // 2. When combined with 'for' (e.g. as in 'distribute parallel for'); // while (idx <= UB) {; // <CodeGen rest of pragma>(LB, UB);; // idx += ST;; // }; //; // For static chunk one schedule generate:; //; // while (IV <= GlobalUB) {; // <CodeGen rest of pragma>(LB, UB);; // LB += ST;; // UB += ST;; // UB = min(UB, GlobalUB);; // IV = LB;; // }; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:13,Deployability,update,update,13,// Emit post-update of the reduction variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Modifiability,variab,variables,37,// Emit post-update of the reduction variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:38,Modifiability,variab,variables,38,// Emit final copy of the lastprivate variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:30,Integrability,depend,depend,30,// The ordered directive with depend clause.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:54,Deployability,update,update,54,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:101,Deployability,release,release,101,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:223,Deployability,release,release,223,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Deployability,update,update,36,"// Allow atomicrmw only if 'x' and 'update' are integer values, lvalue for 'x'; // expression is simple and atomic is allowed for the given type for the; // target platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:97,Usability,simpl,simple,97,"// Allow atomicrmw only if 'x' and 'update' are integer values, lvalue for 'x'; // expression is simple and atomic is allowed for the given type for the; // target platform.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Deployability,Update,Update,3,"// Update expressions are allowed to have the following forms:; // x binop= expr; -> xrval + expr;; // x++, ++x -> xrval + 1;; // x--, --x -> xrval - 1;; // x = x binop expr; -> xrval binop expr; // x = expr Op x; - > expr binop xrval;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:11,Deployability,update,update,11,// Emit an update expression: 'xrval' binop 'expr' or 'expr' binop; // 'xrval'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Performance,Perform,Perform,3,// Perform compare-and-swap procedure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Deployability,Update,Update,3,"// Update expressions are allowed to have the following forms:; // x binop= expr; -> xrval + expr;; // x++, ++x -> xrval + 1;; // x--, --x -> xrval - 1;; // x = x binop expr; -> xrval binop expr; // x = expr Op x; - > expr binop xrval;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:54,Deployability,update,update,54,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:101,Deployability,release,release,101,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:223,Deployability,release,release,223,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:10,Deployability,update,updated,10,// 'x' is updated with some additional value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:3,Deployability,Update,Update,3,"// Update expressions are allowed to have the following forms:; // x binop= expr; -> xrval + expr;; // x++, ++x -> xrval + 1;; // x--, --x -> xrval - 1;; // x = x binop expr; -> xrval binop expr; // x = expr Op x; - > expr binop xrval;",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:10,Usability,simpl,simply,10,// 'x' is simply rewritten with some 'expr'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:10,Performance,perform,perform,10,"// Try to perform atomicrmw xchg, otherwise simple exchange.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:44,Usability,simpl,simple,44,"// Try to perform atomicrmw xchg, otherwise simple exchange.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:13,Deployability,update,update,13,// Emit post-update store to 'v' of old/new 'x' value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:54,Deployability,update,update,54,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.; // If the read or capture clause is specified and the acquire, acq_rel, or; // seq_cst clause is specified then the strong flush on exit from the atomic; // operation is also an acquire flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:101,Deployability,release,release,101,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.; // If the read or capture clause is specified and the acquire, acq_rel, or; // seq_cst clause is specified then the strong flush on exit from the atomic; // operation is also an acquire flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:223,Deployability,release,release,223,"// OpenMP, 2.17.7, atomic Construct; // If the write, update, or capture clause is specified and the release,; // acq_rel, or seq_cst clause is specified then the strong flush on entry to; // the atomic operation is also a release flush.; // If the read or capture clause is specified and the acquire, acq_rel, or; // seq_cst clause is specified then the strong flush on exit from the atomic; // operation is also an acquire flush.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:51,Deployability,release,release,51,"// Find first clause (skip seq_cst|acq_rel|aqcuire|release|relaxed clause,; // if it is first).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:23,Integrability,depend,dependences,23,// Build list and emit dependences,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:103,Testability,log,logic,103,// In order to identify the right initializer we need to match the; // declaration used by the mapping logic. In some cases we may get; // OMPCapturedExprDecl that refers to the original declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:37,Modifiability,variab,variable,37,// Return the address of the private variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:36,Modifiability,variab,variable,36,// Silence the warning about unused variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:103,Testability,log,logic,103,// In order to identify the right initializer we need to match the; // declaration used by the mapping logic. In some cases we may get; // OMPCapturedExprDecl that refers to the original declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:20,Modifiability,variab,variable,20,"// For declrefs and variable length array need to load the pointer for; // correct mapping, since the pointer to the data was passed to the runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:50,Performance,load,load,50,"// For declrefs and variable length array need to load the pointer for; // correct mapping, since the pointer to the data was passed to the runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:18,Modifiability,variab,variable,18,/// Emit a helper variable and return corresponding lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:7,Energy Efficiency,schedul,scheduling,7,// Set scheduling for taskloop,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:88,Deployability,update,updates,88,"// if (PreCond) {; // for (IV in 0..LastIteration) BODY;; // <Final counter/linear vars updates>;; // }; //; // Emit: if (PreCond) - begin.; // If the condition constant folds and can be elided, avoid emitting the; // whole loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:195,Safety,avoid,avoid,195,"// if (PreCond) {; // for (IV in 0..LastIteration) BODY;; // <Final counter/linear vars updates>;; // }; //; // Emit: if (PreCond) - begin.; // If the condition constant folds and can be elided, avoid emitting the; // whole loop.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,Modifiability,variab,variable,27,// Emit the loop iteration variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:29,Modifiability,variab,variable,29,"// Emit the iterations count variable.; // If it is not a variable, Sema decided to calculate iterations count on; // each iteration (e.g., it is foldable into a constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:58,Modifiability,variab,variable,58,"// Emit the iterations count variable.; // If it is not a variable, Sema decided to calculate iterations count on; // each iteration (e.g., it is foldable into a constant).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:38,Modifiability,variab,variables,38,// Emit final copy of the lastprivate variables if IsLastIter != 0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:53,Deployability,update,update,53,// Generate the instructions for '#pragma omp target update' directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:27,Modifiability,variab,variable,27,// Emit the loop iteration variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:35,Safety,avoid,avoid,35,// Capture global firstprivates to avoid crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp:43,Deployability,update,update,43,// Check for outer lastprivate conditional update.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGStmtOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:33,Integrability,wrap,wrappers,33,"//===-- CGValue.h - LLVM CodeGen wrappers for llvm::Value* ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These classes implement wrappers around llvm::Value in order to; // fully represent the range of values for C L- and R- values.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:407,Integrability,wrap,wrappers,407,"//===-- CGValue.h - LLVM CodeGen wrappers for llvm::Value* ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These classes implement wrappers around llvm::Value in order to; // fully represent the range of values for C L- and R- values.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:156,Usability,simpl,simple,156,"/// RValue - This trivial value class is used to represent the result of an; /// expression that is evaluated. It can be one of three things: either a; /// simple LLVM SSA value, a pair of SSA values for complex numbers, or the; /// address of an aggregate value in memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:119,Energy Efficiency,allocate,allocated,119,"/// The l-value was an access to a declared entity or something; /// equivalently strong, like the address of an array allocated by a; /// language runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:23,Security,access,access,23,"/// The l-value was an access to a declared entity or something; /// equivalently strong, like the address of an array allocated by a; /// language runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:101,Usability,simpl,simple,101,"/// LValue - This represents an lvalue references. Because C/C++ allow; /// bitfields, this is not a simple LLVM pointer, it may be a pointer plus a; /// bitrange.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:14,Modifiability,extend,extended,14,"// This is an extended vector subset, use getExtVectorComp",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:29,Security,access,accessing,29,"// The alignment to use when accessing this lvalue. (For vector elements,; // this is the alignment of the whole vector.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:82,Modifiability,variab,variable,82,"// LValue is non-gc'able for any reason, including being a parameter or local; // variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:36,Performance,load,load,36,// This flag shows if a nontemporal load/stores should be used when accessing; // this lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:68,Security,access,accessing,68,// This flag shows if a nontemporal load/stores should be used when accessing; // this lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:3,Usability,simpl,simple,3,// simple lvalue,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:3,Modifiability,extend,extended,3,// extended vector elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:208,Performance,perform,perform,208,/// Create a new object to represent a bit-field access.; ///; /// \param Addr - The base address of the bit-field sequence this; /// bit-field refers to.; /// \param Info - The information describing how to perform the bit-field; /// access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:49,Security,access,access,49,/// Create a new object to represent a bit-field access.; ///; /// \param Addr - The base address of the bit-field sequence this; /// bit-field refers to.; /// \param Info - The information describing how to perform the bit-field; /// access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:235,Security,access,access,235,/// Create a new object to represent a bit-field access.; ///; /// \param Addr - The base address of the bit-field sequence this; /// bit-field refers to.; /// \param Info - The information describing how to perform the bit-field; /// access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:107,Security,access,access,107,"/// AliasedFlag - This is set to true if the slot might be aliased; /// and it's not undefined behavior to access it through such an; /// alias. Note that it's always undefined behavior to access a C++; /// object that's under construction through an alias derived from; /// outside the construction process.; ///; /// This flag controls whether calls that produce the aggregate; /// value may be evaluated directly into the slot, or whether they; /// must be evaluated into an unaliased temporary and then memcpy'ed; /// over. Since it's invalid in general to memcpy a non-POD C++; /// object, it's important that this flag never be set when; /// evaluating an expression which constructs such an object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:189,Security,access,access,189,"/// AliasedFlag - This is set to true if the slot might be aliased; /// and it's not undefined behavior to access it through such an; /// alias. Note that it's always undefined behavior to access a C++; /// object that's under construction through an alias derived from; /// outside the construction process.; ///; /// This flag controls whether calls that produce the aggregate; /// value may be evaluated directly into the slot, or whether they; /// must be evaluated into an unaliased temporary and then memcpy'ed; /// over. Since it's invalid in general to memcpy a non-POD C++; /// object, it's important that this flag never be set when; /// evaluating an expression which constructs such an object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:23,Security,sanitiz,sanitizer,23,"/// If is set to true, sanitizer checks are already generated for this address; /// or not required. For instance, if this address represents an object; /// created in 'new' expression, sanitizer checks for memory is made as a part; /// of 'operator new' emission and object constructor should not generate; /// them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h:186,Security,sanitiz,sanitizer,186,"/// If is set to true, sanitizer checks are already generated for this address; /// or not required. For instance, if this address represents an object; /// created in 'new' expression, sanitizer checks for memory is made as a part; /// of 'operator new' emission and object constructor should not generate; /// them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGValue.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGValue.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:787,Modifiability,variab,variable,787,"// This function does roughly the same thing as GenerateThunk, but in a; // very different way, so that va_start and va_end work correctly.; // FIXME: This function assumes ""this"" is the first non-sret LLVM argument of; // a function, and that there is an alloca built in the entry block; // for all accesses to ""this"".; // FIXME: This function assumes there is only one ""ret"" statement per function.; // FIXME: Cloning isn't correct in the presence of indirect goto!; // FIXME: This implementation of thunks bloats codesize by duplicating the; // function definition. There are alternatives:; // 1. Add some sort of stub support to LLVM for cases where we can; // do a this adjustment, then a sibcall.; // 2. We could transform the definition to take a va_list instead of an; // actual variable argument list, then have the thunks (including a; // no-op thunk for the regular definition) call va_start/va_end.; // There's a bit of per-call overhead for this solution, but it's; // better for codesize if the definition is long.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:300,Security,access,accesses,300,"// This function does roughly the same thing as GenerateThunk, but in a; // very different way, so that va_start and va_end work correctly.; // FIXME: This function assumes ""this"" is the first non-sret LLVM argument of; // a function, and that there is an alloca built in the entry block; // for all accesses to ""this"".; // FIXME: This function assumes there is only one ""ret"" statement per function.; // FIXME: Cloning isn't correct in the presence of indirect goto!; // FIXME: This implementation of thunks bloats codesize by duplicating the; // function definition. There are alternatives:; // 1. Add some sort of stub support to LLVM for cases where we can; // do a this adjustment, then a sibcall.; // 2. We could transform the definition to take a va_list instead of an; // actual variable argument list, then have the thunks (including a; // no-op thunk for the regular definition) call va_start/va_end.; // There's a bit of per-call overhead for this solution, but it's; // better for codesize if the definition is long.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:617,Testability,stub,stub,617,"// This function does roughly the same thing as GenerateThunk, but in a; // very different way, so that va_start and va_end work correctly.; // FIXME: This function assumes ""this"" is the first non-sret LLVM argument of; // a function, and that there is an alloca built in the entry block; // for all accesses to ""this"".; // FIXME: This function assumes there is only one ""ret"" statement per function.; // FIXME: Cloning isn't correct in the presence of indirect goto!; // FIXME: This implementation of thunks bloats codesize by duplicating the; // function definition. There are alternatives:; // 1. Add some sort of stub support to LLVM for cases where we can; // do a this adjustment, then a sibcall.; // 2. We could transform the definition to take a va_list instead of an; // actual variable argument list, then have the thunks (including a; // no-op thunk for the regular definition) call va_start/va_end.; // There's a bit of per-call overhead for this solution, but it's; // better for codesize if the definition is long.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:119,Availability,avail,available,119,// Cloning can't work if we don't have a definition. The Microsoft ABI may; // require thunks when a definition is not available. Emit an error in these; // cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:138,Availability,error,error,138,// Cloning can't work if we don't have a definition. The Microsoft ABI may; // require thunks when a definition is not available. Emit an error in these; // cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:3,Usability,Clear,Clear,3,// Clear these to restore the invariants expected by; // StartFunction/FinishFunction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:133,Availability,error,error,133,"// If perfect forwarding is required a variadic method, a method using; // inalloca, or an unprototyped thunk, use musttail. Emit an error if this; // thunk requires a return adjustment, since that is impossible with musttail.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:170,Performance,optimiz,optimization,170,"// In the Itanium C++ ABI, vtable thunks are provided by TUs that provide; // definitions of the main method. Therefore, emitting thunks with the vtable; // is purely an optimization. Emit the thunk if optimizations are enabled and; // all of the parameter types are complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:202,Performance,optimiz,optimizations,202,"// In the Itanium C++ ABI, vtable thunks are provided by TUs that provide; // definitions of the main method. Therefore, emitting thunks with the vtable; // is purely an optimization. Emit the thunk if optimizations are enabled and; // all of the parameter types are complete.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:89,Testability,stub,stub,89,// We don't want to copy the linkage of the vtable exactly because we still; // want the stub/proxy to be emitted for properly calculating the offset.; // Examples where there would be no symbol emitted are available_externally; // and private linkages.; //; // `internal` linkage results in STB_LOCAL Elf binding while still manifesting a; // local symbol.; //; // `linkonce_odr` linkage results in a STB_DEFAULT Elf binding but also allows for; // the rtti_proxy to be transparently replaced with a GOTPCREL reloc by a; // target that supports this replacement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:82,Availability,error,error,82,"// Do not instrument the rtti proxies with hwasan to avoid a duplicate; // symbol error. Aliases generated by hwasan will retain the same namebut; // the addresses they are set to may have different tags from different; // compilation units. We don't run into this without hwasan because the; // proxies are in comdat groups, but those aren't propagated to the alias.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:53,Safety,avoid,avoid,53,"// Do not instrument the rtti proxies with hwasan to avoid a duplicate; // symbol error. Aliases generated by hwasan will retain the same namebut; // the addresses they are set to may have different tags from different; // compilation units. We don't run into this without hwasan because the; // proxies are in comdat groups, but those aren't propagated to the alias.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:277,Integrability,depend,depending,277,"// FIXME(PR43094): When merging comdat groups, lld can select a local; // symbol as the signature symbol even though it cannot be accessed; // outside that symbol's TU. The relative vtables ABI would make; // __cxa_pure_virtual and __cxa_deleted_virtual local symbols, and; // depending on link order, the comdat groups could resolve to the one; // with the local symbol. As a temporary solution, fill these components; // with zero. We shouldn't be calling these in the first place anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:130,Security,access,accessed,130,"// FIXME(PR43094): When merging comdat groups, lld can select a local; // symbol as the signature symbol even though it cannot be accessed; // outside that symbol's TU. The relative vtables ABI would make; // __cxa_pure_virtual and __cxa_deleted_virtual local symbols, and; // depending on link order, the comdat groups could resolve to the one; // with the local symbol. As a temporary solution, fill these components; // with zero. We shouldn't be calling these in the first place anyway.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:118,Availability,avail,available,118,"// Construction vtable symbols are not part of the Itanium ABI, so we cannot; // guarantee that they actually will be available externally. Instead, when; // emitting an available_externally VTT, we provide references to an internal; // linkage construction vtable. The ABI only requires complete-object vtables; // to be the same for all instances of a type, not construction vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:14,Modifiability,variab,variable,14,// Create the variable that will hold the construction vtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:62,Security,expose,expose,62,// We should at least make this hidden since we don't want to expose it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:24,Availability,avail,available,24,// Imported vtables are available externally.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:431,Safety,avoid,avoid,431,"/// At this point in the translation unit, does it appear that can we; /// rely on the vtable being defined elsewhere in the program?; ///; /// The response is really only definitive when called at the end of; /// the translation unit.; ///; /// The only semantic restriction here is that the object file should; /// not contain a vtable definition when that vtable is defined; /// strongly elsewhere. Otherwise, we'd just like to avoid emitting; /// vtables when unnecessary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp:191,Modifiability,variab,variables,191,"// Emit type metadata on vtables with LTO or IR instrumentation.; // In IR instrumentation, the type metadata is used to find out vtable; // definitions (for type profiling) among all global variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.h:4,Performance,Cache,Cache,4,/// Cache for the pure virtual member call function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.h:4,Performance,Cache,Cache,4,/// Cache for the deleted virtual member call function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CGVTables.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CGVTables.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp:411,Integrability,interface,interface,411,"//==--- CodeGenABITypes.cpp - Convert Clang types to LLVM types for ABI ----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeGenABITypes is a simple interface for getting LLVM types for; // the parameters and the return value of a function given the Clang; // types.; //; // The class is implemented as a public wrapper around the private; // CodeGenTypes class in lib/CodeGen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp:574,Integrability,wrap,wrapper,574,"//==--- CodeGenABITypes.cpp - Convert Clang types to LLVM types for ABI ----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeGenABITypes is a simple interface for getting LLVM types for; // the parameters and the return value of a function given the Clang; // types.; //; // The class is implemented as a public wrapper around the private; // CodeGenTypes class in lib/CodeGen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp:404,Usability,simpl,simple,404,"//==--- CodeGenABITypes.cpp - Convert Clang types to LLVM types for ABI ----==//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // CodeGenABITypes is a simple interface for getting LLVM types for; // the parameters and the return value of a function given the Clang; // types.; //; // The class is implemented as a public wrapper around the private; // CodeGenTypes class in lib/CodeGen.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenABITypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:31,Deployability,install,installing,31,// This constructor is used in installing an empty BackendConsumer; // to use the clang diagnostic handler for IR input files. It avoids; // initializing the OS field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:130,Safety,avoid,avoids,130,// This constructor is used in installing an empty BackendConsumer; // to use the clang diagnostic handler for IR input files. It avoids; // initializing the OS field.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:68,Availability,error,error,68,// Links each entry in LinkModules into our module. Returns true on error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:29,Deployability,update,updated,29,"// TODO: If CloneModule() is updated to support cloning of unmaterialized; // modules, we can remove this",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:38,Availability,avail,available,38,// TODO: use a fast content hash when available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:28,Security,hash,hash,28,// TODO: use a fast content hash when available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:34,Availability,avail,available,34,"// Access to the AST is no longer available after this.; // Other things that the ASTContext manages are still available, e.g.; // the SourceManager. It'd be nice if we could separate out all the; // things in ASTContext used after this point and null out the; // ASTContext, but too many various parts of the ASTContext are still; // used in various parts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:111,Availability,avail,available,111,"// Access to the AST is no longer available after this.; // Other things that the ASTContext manages are still available, e.g.; // the SourceManager. It'd be nice if we could separate out all the; // things in ASTContext used after this point and null out the; // ASTContext, but too many various parts of the ASTContext are still; // used in various parts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Security,Access,Access,3,"// Access to the AST is no longer available after this.; // Other things that the ASTContext manages are still available, e.g.; // the SourceManager. It'd be nice if we could separate out all the; // things in ASTContext used after this point and null out the; // ASTContext, but too many various parts of the ASTContext are still; // used in various parts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:77,Safety,Avoid,Avoid,77,// Create the copy and transfer ownership to clang::SourceManager.; // TODO: Avoid copying files into memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:44,Availability,error,errors,44,"// There are a couple of different kinds of errors we could get here.; // First, we re-format the SMDiagnostic in terms of a clang diagnostic.; // Strip ""error: "" off the start of the message string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:154,Availability,error,error,154,"// There are a couple of different kinds of errors we could get here.; // First, we re-format the SMDiagnostic in terms of a clang diagnostic.; // Strip ""error: "" off the start of the message string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:184,Integrability,message,message,184,"// There are a couple of different kinds of errors we could get here.; // First, we re-format the SMDiagnostic in terms of a clang diagnostic.; // Strip ""error: "" off the start of the message string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:23,Availability,avail,available,23,"// If a location isn't available, try to approximate it using the associated; // function definition. We use the definition's right brace to differentiate; // from diagnostics that genuinely relate to the function itself.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:31,Availability,error,errors,31,// We only support warnings or errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:78,Integrability,message,message,78,"// Context will be nullptr for IR input files, we will construct the diag; // message from llvm::DiagnosticInfoUnsupported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:80,Integrability,message,message,80,"// Context will be nullptr for IR input files, we will construct the remark; // message from llvm::DiagnosticInfoOptimizationBase.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are active only if the -Rpass flag has a regular; // expression that matches the name of the pass name in \p D.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:10,Performance,optimiz,optimization,10,// Missed optimization remarks are active only if the -Rpass-missed; // flag has a regular expression that matches the name of the pass; // name in \p D.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization analysis remarks are active if the pass name is set to; // llvm::DiagnosticInfo::AlwasyPrint or if the -Rpass-analysis flag has a; // regular expression that matches the name of the pass name in \p D.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization analysis remarks are active if the pass name is set to; // llvm::DiagnosticInfo::AlwasyPrint or if the -Rpass-analysis flag has a; // regular expression that matches the name of the pass name in \p D.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:86,Testability,assert,assert,86,"// FIXME: we can't yet diagnose indirect calls. When/if we can, we; // should instead assert that LocCookie.isValid().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are always handled completely by this; // handler. There is no generic way of emitting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are always handled completely by this; // handler. There is no generic way of emitting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are always handled completely by this; // handler. There is no generic way of emitting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are always handled completely by this; // handler. There is no generic way of emitting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are always handled completely by this; // handler. There is no generic way of emitting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are always handled completely by this; // handler. There is no generic way of emitting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are always handled completely by this; // handler. There is no generic way of emitting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization remarks are always handled completely by this; // handler. There is no generic way of emitting them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:16,Availability,failure,failures,16,// Optimization failures are always handled completely by this; // handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Optimiz,Optimization,3,// Optimization failures are always handled completely by this; // handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Modifiability,Plugin,Plugin,3,// Plugin IDs are not bound to any value as they are set dynamically.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:22,Integrability,message,message,22,// Report the backend message using the usual diagnostic mechanism.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Load,Load,3,"// Load bitcode modules to link with, if we need to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:3,Performance,Load,Load,3,"// Load bitcode modules to link with, if we need to.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:34,Availability,error,error,34,"// If BMsOrErr fails, consume the error and use the error message from; // parseIR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:52,Availability,error,error,52,"// If BMsOrErr fails, consume the error and use the error message from; // parseIR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:58,Integrability,message,message,58,"// If BMsOrErr fails, consume the error and use the error message from; // parseIR.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp:75,Availability,avail,available,75,// Translate from the diagnostic info to the SourceManager location if; // available.; // TODO: Unify this with ConvertBackendLocation(),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenAction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:3,Security,Sanitiz,Sanitizers,3,// Sanitizers may use markers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:20,Performance,optimiz,optimized,20,"// For now, only in optimized builds.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:30,Safety,avoid,avoid,30,"// For cleanliness, we try to avoid emitting the return block for; // simple cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:70,Usability,simpl,simple,70,"// For cleanliness, we try to avoid emitting the return block for; // simple cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:37,Usability,simpl,simple,37,// Record/return the DebugLoc of the simple 'return' expression to be used; // later by the actual 'ret' instruction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:342,Safety,safe,safe,342,"// Usually the return expression is evaluated before the cleanup; // code. If the function contains only a simple return statement,; // such as a constant, the location before the cleanup code becomes; // the last useful breakpoint in the function, because the simple; // return expression will be evaluated after the cleanup code. To be; // safe, set the debug location for cleanup code to the location of; // the return statement. Otherwise the cleanup code should be at the; // end of the function's lexical scope.; //; // If there are multiple branches to the return block, the branch; // instructions will get the location of the return statements and; // all will be fine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:107,Usability,simpl,simple,107,"// Usually the return expression is evaluated before the cleanup; // code. If the function contains only a simple return statement,; // such as a constant, the location before the cleanup code becomes; // the last useful breakpoint in the function, because the simple; // return expression will be evaluated after the cleanup code. To be; // safe, set the debug location for cleanup code to the location of; // the return statement. Otherwise the cleanup code should be at the; // end of the function's lexical scope.; //; // If there are multiple branches to the return block, the branch; // instructions will get the location of the return statements and; // all will be fine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:261,Usability,simpl,simple,261,"// Usually the return expression is evaluated before the cleanup; // code. If the function contains only a simple return statement,; // such as a constant, the location before the cleanup code becomes; // the last useful breakpoint in the function, because the simple; // return expression will be evaluated after the cleanup code. To be; // safe, set the debug location for cleanup code to the location of; // the return statement. Otherwise the cleanup code should be at the; // end of the function's lexical scope.; //; // If there are multiple branches to the return block, the branch; // instructions will get the location of the return statements and; // all will be fine.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:43,Usability,simpl,simple,43,"// Reset the debug location to that of the simple 'return' expression, if any; // rather than that of the end of the function's scope '}'.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:45,Usability,simpl,simple,45,// Invert the map from local to index into a simple vector. There should be; // no holes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:245,Performance,optimiz,optimizations,245,// Eliminate CleanupDestSlot alloca by replacing it with SSA values and; // PHIs if the current function is a coroutine. We don't do it for all; // functions as it may result in slight increase in numbers of instructions; // if compiled with no optimizations. We do it for coroutine as the lifetime; // of CleanupDestSlot alloca make correct coroutine frame building very; // difficult.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:3,Deployability,Update,Update,3,// Update vector width based on return type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:56,Security,sanitiz,sanitization,56,/// Check if the return value of this function requires sanitization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:60,Availability,avail,available,60,/// Return the UBSan prologue signature for \p FD if one is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:54,Security,sanitiz,sanitizers,54,"// If this function is ignored for any of the enabled sanitizers,; // disable the sanitizer for the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:82,Security,sanitiz,sanitizer,82,"// If this function is ignored for any of the enabled sanitizers,; // disable the sanitizer for the function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:3,Security,Sanitiz,SanitizeCoverage,3,// SanitizeCoverage is not handled by SanOpts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:9,Security,sanitiz,sanitizer,9,// Apply sanitizer attributes to the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:33,Energy Efficiency,allocate,allocate,33,// Ignore unrelated casts in STL allocate() since the allocator must cast; // from void* to T* before object initialization completes. Don't match on the; // namespace because not all allocators are in std::,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:77,Deployability,patch,patchable,77,"// Instruct that functions for COFF/CodeView targets should start with a; // patchable instruction, but only on x86/x64. Don't forward this to ARM/ARM64; // backends as they don't need it -- instructions on these architectures are; // always atomically patchable at runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:253,Deployability,patch,patchable,253,"// Instruct that functions for COFF/CodeView targets should start with a; // patchable instruction, but only on x86/x64. Don't forward this to ARM/ARM64; // backends as they don't need it -- instructions on these architectures are; // always atomically patchable at runtime.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:39,Energy Efficiency,allocate,allocate,39,"// If we're checking the return value, allocate space for a pointer to a; // precise source location of the checked return statement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:248,Integrability,depend,dependent,248,"// Since emitting the mcount call here impacts optimizations such as function; // inlining, we just add an attribute to insert a mcount call in backend.; // The attribute ""counting-function"" is set to mcount function name which is; // architecture dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:47,Performance,optimiz,optimizations,47,"// Since emitting the mcount call here impacts optimizations such as function; // inlining, we just add an attribute to insert a mcount call in backend.; // The attribute ""counting-function"" is set to mcount function name which is; // architecture dependent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:74,Energy Efficiency,reduce,reduces,74,"// Indirect return; emit returned value directly into sret slot.; // This reduces code size, and affects correctness in C++.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:3,Performance,Load,Load,3,// Load the sret pointer from the argument struct and return into that.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:3,Performance,Load,Load,3,"// Load the lvalue pointed to by the field, since '*this' was captured; // by reference.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:89,Performance,load,load,89,// Not in a lambda; just use 'this' from the method.; // FIXME: Should we generate a new load for each use of 'this'? The; // fast register allocator would be happier...,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:55,Availability,avail,available,55,"// Check the 'this' pointer once per function, if it's available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:34,Modifiability,variab,variably,34,"// If any of the arguments have a variably modified type, make sure to; // emit the type size, but only if the function is not naked. Naked functions; // have no prolog to run this evaluation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:26,Modifiability,inherit,inheriting,26,// The base version of an inheriting constructor whose constructed base is a; // virtual base is not passed any arguments (because it doesn't actually call; // the inherited constructor).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:164,Modifiability,inherit,inherited,164,// The base version of an inheriting constructor whose constructed base is a; // virtual base is not passed any arguments (because it doesn't actually call; // the inherited constructor).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:3,Safety,Detect,Detect,3,"// Detect the unusual situation where an inline version is shadowed by a; // non-inline version. In that case we should pick the external one; // everywhere. That's GCC behavior too. Unfortunately, I cannot find a way; // to detect that situation before we reach codegen, so do some late; // replacement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:225,Safety,detect,detect,225,"// Detect the unusual situation where an inline version is shadowed by a; // non-inline version. In that case we should pick the external one; // everywhere. That's GCC behavior too. Unfortunately, I cannot find a way; // to detect that situation before we reach codegen, so do some late; // replacement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:3,Usability,Clear,Clear,3,// Clear non-distinct debug info that was possibly attached to the function; // due to an earlier declaration without the nodebug attribute,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:32,Safety,detect,detect,32,// Initialize helper which will detect jumps which can cause invalid; // lifetime markers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:104,Performance,optimiz,optimizations,104,"// Ensure that the function adheres to the forward progress guarantee, which; // is required by certain optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:103,Testability,test,test,103,"// If MC/DC is enabled, disable folding so that we can instrument all; // conditions to yield complete test vectors. We still keep track of; // folded conditions during region mapping and visualization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:37,Testability,log,logical-NOT,37,/// Strip parentheses and simplistic logical-NOT operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:26,Usability,simpl,simplistic,26,/// Strip parentheses and simplistic logical-NOT operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:147,Testability,log,logical,147,/// EmitBranchToCounterBlock - Emit a conditional branch to a new block that; /// increments a profile counter based on the semantics of the given logical; /// operator opcode. This is used to instrument branch condition coverage for; /// logical operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:239,Testability,log,logical,239,/// EmitBranchToCounterBlock - Emit a conditional branch to a new block that; /// increments a profile counter based on the semantics of the given logical; /// operator opcode. This is used to instrument branch condition coverage for; /// logical operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:35,Testability,Log,Logical-AND,35,// Set block pointers according to Logical-AND (BO_LAnd) semantics. This; // means we need to evaluate the condition and increment the counter on TRUE:; //; // if (Cond); // goto CounterIncrBlock;; // else; // goto FalseBlock;; //; // CounterIncrBlock:; // Counter++;; // goto TrueBlock;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:35,Testability,Log,Logical-OR,35,// Set block pointers according to Logical-OR (BO_LOr) semantics. This means; // we need to evaluate the condition and increment the counter on FALSE:; //; // if (Cond); // goto TrueBlock;; // else; // goto CounterIncrBlock;; //; // CounterIncrBlock:; // Counter++;; // goto FalseBlock;,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:168,Usability,simpl,simplify,168,"/// EmitBranchOnBoolExpr - Emit a branch on a boolean condition (e.g. for an if; /// statement) to the specified blocks. Based on the condition, this might try; /// to simplify the codegen of the conditional based on the branch.; /// \param LH The value of the likelihood attribute on the True branch.; /// \param ConditionalOp Used by MC/DC code coverage to track the result of the; /// ConditionalOperator (ternary) through a recursive call for the operator's; /// LHS and RHS nodes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:24,Usability,simpl,simplify,24,"// If we have ""1 && X"", simplify the code. ""0 && X"" would have constant; // folded if the case was simple enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:99,Usability,simpl,simple,99,"// If we have ""1 && X"", simplify the code. ""0 && X"" would have constant; // folded if the case was simple enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:24,Usability,simpl,simplify,24,"// If we have ""X && 1"", simplify the code to use an uncond branch.; // ""X && 0"" would have been constant folded to 0.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:24,Usability,simpl,simplify,24,"// If we have ""0 || X"", simplify the code. ""1 || X"" would have constant; // folded if the case was simple enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:99,Usability,simpl,simple,99,"// If we have ""0 || X"", simplify the code. ""1 || X"" would have constant; // folded if the case was simple enough.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:24,Usability,simpl,simplify,24,"// If we have ""X || 0"", simplify the code to use an uncond branch.; // ""X || 1"" would have been constant folded to 1.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:52,Performance,optimiz,optimization,52,"// br(!x, t, f) -> br(x, f, t); // Avoid doing this optimization when instrumenting a condition for MC/DC.; // LNot is taken as part of the condition for simplicity, and changing its; // sense negatively impacts test vector tracking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:35,Safety,Avoid,Avoid,35,"// br(!x, t, f) -> br(x, f, t); // Avoid doing this optimization when instrumenting a condition for MC/DC.; // LNot is taken as part of the condition for simplicity, and changing its; // sense negatively impacts test vector tracking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:212,Testability,test,test,212,"// br(!x, t, f) -> br(x, f, t); // Avoid doing this optimization when instrumenting a condition for MC/DC.; // LNot is taken as part of the condition for simplicity, and changing its; // sense negatively impacts test vector tracking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:154,Usability,simpl,simplicity,154,"// br(!x, t, f) -> br(x, f, t); // Avoid doing this optimization when instrumenting a condition for MC/DC.; // LNot is taken as part of the condition for simplicity, and changing its; // sense negatively impacts test vector tracking.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:219,Availability,avail,available,219,"// When computing PGO branch weights, we only know the overall count for; // the true block. This code is essentially doing tail duplication of the; // naive code-gen, introducing new edges for which counts are not; // available. Divide the counts proportionally between the LHS and RHS of; // the conditional operator.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:51,Deployability,update,update,51,"// If not at the top of the logical operator nest, update MCDC temp with the; // boolean result of the evaluated condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:28,Testability,log,logical,28,"// If not at the top of the logical operator nest, update MCDC temp with the; // boolean result of the evaluated condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:33,Integrability,wrap,wrapped,33,"// If the branch has a condition wrapped by __builtin_unpredictable,; // create metadata that specifies that the branch is unpredictable.; // Don't bother if not optimizing because that metadata would not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:162,Performance,optimiz,optimizing,162,"// If the branch has a condition wrapped by __builtin_unpredictable,; // create metadata that specifies that the branch is unpredictable.; // Don't bother if not optimizing because that metadata would not be used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:83,Performance,optimiz,optimizing,83,"// If there is a Likelihood knowledge for the cond, lower it.; // Note that if not optimizing this won't emit anything.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:4,Availability,Error,ErrorUnsupported,4,/// ErrorUnsupported - Print out an error that codegen doesn't support the; /// specified stmt yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:36,Availability,error,error,36,/// ErrorUnsupported - Print out an error that codegen doesn't support the; /// specified stmt yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:66,Modifiability,variab,variable-length,66,"/// emitNonZeroVLAInit - Emit the ""zero"" initialization of a; /// variable-length array whose elements have a non-zero bit-pattern.; ///; /// \param baseType the inner-most element type of the array; /// \param src - a char* pointing to the bit-pattern for a single; /// base element of the array; /// \param sizeInChars - the total size of the VLA, in chars",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:29,Performance,load,load,29,"// If it's a VLA, we have to load the stored size. Note that; // this is the size of the VLA in bytes, not its size in elements.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:131,Availability,down,down,131,"// We have some number of constant-length arrays, so addr should; // have LLVM type [M x [N x [...]]]*. Build a GEP that walks; // down to the first element of addr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:7,Availability,down,down,7,// GEP down to the array type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:35,Integrability,wrap,wraps,35,"// It's undefined behavior if this wraps around, so mark it that way.; // FIXME: Teach -fsanitize=undefined to trap this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:23,Availability,down,down,23,// We're going to walk down into the type and look for VLA; // expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:25,Modifiability,variab,variably-modified,25,// These types are never variably-modified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:129,Modifiability,extend,extend,129,"// At the moment, the only aggressive peephole we do in IR gen; // is trunc(zext) folding, but if we add more, we can easily; // extend this protection.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:12,Availability,error,error,12,// Emits an error if we don't have a valid set of target features for the; // called function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:12,Availability,error,error,12,// Emits an error if we don't have a valid set of target features for the; // called function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:139,Availability,error,error,139,"// When compiling in HipStdPar mode we have to be conservative in rejecting; // target specific features in the FE, and defer the possible error to the; // AcceleratorCodeSelection pass, wherein iff an unsupported target builtin is; // referenced by an accelerator executable function, we emit an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:297,Availability,error,error,297,"// When compiling in HipStdPar mode we have to be conservative in rejecting; // target specific features in the FE, and defer the possible error to the; // AcceleratorCodeSelection pass, wherein iff an unsupported target builtin is; // referenced by an accelerator executable function, we emit an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:58,Testability,test,test,58,"// If arch= specifies an x86-64 micro-architecture level, test the feature; // with __builtin_cpu_supports, otherwise use __builtin_cpu_is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:133,Performance,optimiz,optimizations,133,"// We need to temorairly remove the assumption so we can insert the; // sanitizer check before it, else the check will be dropped by optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp:72,Security,sanitiz,sanitizer,72,"// We need to temorairly remove the assumption so we can insert the; // sanitizer check before it, else the check will be dropped by optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:30,Performance,perform,perform,30,"/// The kind of evaluation to perform on values of a particular; /// type. Basically, is the code in CGExprScalar, CGExprComplex, or; /// CGExprAgg?; ///; /// TODO: should vectors maybe be split out into their own thing?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:10,Modifiability,variab,variables,10,// Stores variables for which we can't generate correct lifetime markers; // because of jumps.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:759,Modifiability,extend,extend,759,"/// List of recently emitted OMPCanonicalLoops.; ///; /// Since OMPCanonicalLoops are nested inside other statements (in particular; /// CapturedStmt generated by OMPExecutableDirective and non-perfectly nested; /// loops), we cannot directly call OMPEmitOMPCanonicalLoop and receive its; /// llvm::CanonicalLoopInfo. Instead, we call EmitStmt and any; /// OMPEmitOMPCanonicalLoop called by it will add its CanonicalLoopInfo to; /// this stack when done. Entering a new loop requires clearing this list; it; /// either means we start parsing a new loop nest (in which case the previous; /// loop nest goes out of scope) or a second loop in the same level in which; /// case it would be ambiguous into which of the two (or more) loops the loop; /// nest would extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:484,Usability,clear,clearing,484,"/// List of recently emitted OMPCanonicalLoops.; ///; /// Since OMPCanonicalLoops are nested inside other statements (in particular; /// CapturedStmt generated by OMPExecutableDirective and non-perfectly nested; /// loops), we cannot directly call OMPEmitOMPCanonicalLoop and receive its; /// llvm::CanonicalLoopInfo. Instead, we call EmitStmt and any; /// OMPEmitOMPCanonicalLoop called by it will add its CanonicalLoopInfo to; /// this stack when done. Entering a new loop requires clearing this list; it; /// either means we start parsing a new loop nest (in which case the previous; /// loop nest goes out of scope) or a second loop in the same level in which; /// case it would be ambiguous into which of the two (or more) loops the loop; /// nest would extend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:23,Testability,Log,Logical,23,/// Stack to track the Logical Operator recursion nest for MC/DC.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:77,Integrability,wrap,wrapper,77,"// Holds coroutine data if the current function is a coroutine. We use a; // wrapper to manage its lifetime, so that we don't have to define CGCoroData; // in this header.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,Modifiability,variab,variable,41,/// Lookup the captured field decl for a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:52,Integrability,message,message,52,/// An abstract representation of regular/ObjC call/message targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Security,Sanitiz,Sanitizers,4,/// Sanitizers enabled for this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:54,Security,sanitiz,sanitizer,54,/// True if CodeGen currently emits code implementing sanitizer checks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:59,Security,access,access,59,/// True if CodeGen currently emits code inside presereved access index; /// region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:282,Integrability,synchroniz,synchronization,282,"// C++11 and later guarantees that a thread eventually will do one of the; // following (C++11 [intro.multithread]p24 and C++17 [intro.progress]p1):; // - terminate,; // - make a call to a library I/O function,; // - perform an access through a volatile glvalue, or; // - perform a synchronization operation or an atomic operation.; //; // Hence each function is 'mustprogress' in C++11 or later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:217,Performance,perform,perform,217,"// C++11 and later guarantees that a thread eventually will do one of the; // following (C++11 [intro.multithread]p24 and C++17 [intro.progress]p1):; // - terminate,; // - make a call to a library I/O function,; // - perform an access through a volatile glvalue, or; // - perform a synchronization operation or an atomic operation.; //; // Hence each function is 'mustprogress' in C++11 or later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:272,Performance,perform,perform,272,"// C++11 and later guarantees that a thread eventually will do one of the; // following (C++11 [intro.multithread]p24 and C++17 [intro.progress]p1):; // - terminate,; // - make a call to a library I/O function,; // - perform an access through a volatile glvalue, or; // - perform a synchronization operation or an atomic operation.; //; // Hence each function is 'mustprogress' in C++11 or later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:228,Security,access,access,228,"// C++11 and later guarantees that a thread eventually will do one of the; // following (C++11 [intro.multithread]p24 and C++17 [intro.progress]p1):; // - terminate,; // - make a call to a library I/O function,; // - perform an access through a volatile glvalue, or; // - perform a synchronization operation or an atomic operation.; //; // Hence each function is 'mustprogress' in C++11 or later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:24,Modifiability,variab,variables,24,/// A mapping from NRVO variables to the flags used to indicate; /// when the NRVO has been applied to this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:108,Modifiability,variab,variable,108,/// A mapping from NRVO variables to the flags used to indicate; /// when the NRVO has been applied to this variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:63,Usability,resume,resume,63,/// EHResumeBlock - Unified block containing a call to llvm.eh.resume.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:151,Performance,load,loads,151,/// A stack of exception code slots. Entering an __except block pushes a slot; /// on the stack and leaving pops one. The __exception_code() intrinsic loads; /// a value from the top of the stack.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:10,Modifiability,variab,variable,10,/// An i1 variable indicating whether or not the @finally is; /// running for an exception.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:11,Modifiability,variab,variable,11,/// An i8* variable into which the exception pointer to rethrow; /// has been saved.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:99,Safety,Safe,Safe,99,/// pushFullExprCleanup - Push a cleanup to be run at the end of the; /// current full-expression. Safe against the possibility that; /// we're currently inside a conditionally-evaluated expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Performance,Queue,Queue,4,"/// Queue a cleanup to be pushed after finishing the current full-expression,; /// potentially with an active flag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:158,Availability,avail,available,158,"/// Force the emission of cleanups now, instead of waiting; /// until this object is destroyed.; /// \param ValuesToReload - A list of values that need to be available at; /// the insertion point after cleanup emission. If cleanup emission created; /// a shared cleanup block, these value pointers will be rewritten.; /// Otherwise, they not will be modified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:16,Performance,perform,perform,16,"// If we should perform a cleanup, force them now. Note that; // this ends the cleanup scope before rescoping any labels.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:34,Modifiability,variab,variables,34,/// The class used to assign some variables some temporarily addresses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:28,Modifiability,variab,variable,28,"/// Sets the address of the variable \p LocalVD to be \p TempAddr in; /// function \p CGF.; /// \return true if at least one variable was set already, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:125,Modifiability,variab,variable,125,"/// Sets the address of the variable \p LocalVD to be \p TempAddr in; /// function \p CGF.; /// \return true if at least one variable was set already, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:45,Modifiability,variab,variables,45,"/// Applies new addresses to the list of the variables.; /// \return true if at least one variable is using new address, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:90,Modifiability,variab,variable,90,"/// Applies new addresses to the list of the variables.; /// \return true if at least one variable is using new address, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:39,Modifiability,variab,variables,39,/// Restores original addresses of the variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:33,Modifiability,variab,variables,33,"/// The scope used to remap some variables as private in the OpenMP loop body; /// (or other captured region emitted without outlining), and to restore old; /// vars back on exit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:25,Modifiability,variab,variable,25,"/// Registers \p LocalVD variable as a private with \p Addr as the address; /// of the corresponding private variable. \p; /// PrivateGen is the address of the generated private variable.; /// \return true if the variable is registered as private, false if it has; /// been privatized already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:109,Modifiability,variab,variable,109,"/// Registers \p LocalVD variable as a private with \p Addr as the address; /// of the corresponding private variable. \p; /// PrivateGen is the address of the generated private variable.; /// \return true if the variable is registered as private, false if it has; /// been privatized already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:178,Modifiability,variab,variable,178,"/// Registers \p LocalVD variable as a private with \p Addr as the address; /// of the corresponding private variable. \p; /// PrivateGen is the address of the generated private variable.; /// \return true if the variable is registered as private, false if it has; /// been privatized already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:213,Modifiability,variab,variable,213,"/// Registers \p LocalVD variable as a private with \p Addr as the address; /// of the corresponding private variable. \p; /// PrivateGen is the address of the generated private variable.; /// \return true if the variable is registered as private, false if it has; /// been privatized already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:21,Modifiability,variab,variables,21,"/// Privatizes local variables previously registered as private.; /// Registration is separate from the actual privatization to allow; /// initializers use values of the original variables, not the private one.; /// This is important, for example, if the private variable is a class; /// variable initialized by a constructor that references other private; /// variables. But at initialization original variables must be used, not; /// private copies.; /// \return true if at least one variable was privatized, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:179,Modifiability,variab,variables,179,"/// Privatizes local variables previously registered as private.; /// Registration is separate from the actual privatization to allow; /// initializers use values of the original variables, not the private one.; /// This is important, for example, if the private variable is a class; /// variable initialized by a constructor that references other private; /// variables. But at initialization original variables must be used, not; /// private copies.; /// \return true if at least one variable was privatized, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:263,Modifiability,variab,variable,263,"/// Privatizes local variables previously registered as private.; /// Registration is separate from the actual privatization to allow; /// initializers use values of the original variables, not the private one.; /// This is important, for example, if the private variable is a class; /// variable initialized by a constructor that references other private; /// variables. But at initialization original variables must be used, not; /// private copies.; /// \return true if at least one variable was privatized, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:288,Modifiability,variab,variable,288,"/// Privatizes local variables previously registered as private.; /// Registration is separate from the actual privatization to allow; /// initializers use values of the original variables, not the private one.; /// This is important, for example, if the private variable is a class; /// variable initialized by a constructor that references other private; /// variables. But at initialization original variables must be used, not; /// private copies.; /// \return true if at least one variable was privatized, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:361,Modifiability,variab,variables,361,"/// Privatizes local variables previously registered as private.; /// Registration is separate from the actual privatization to allow; /// initializers use values of the original variables, not the private one.; /// This is important, for example, if the private variable is a class; /// variable initialized by a constructor that references other private; /// variables. But at initialization original variables must be used, not; /// private copies.; /// \return true if at least one variable was privatized, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:403,Modifiability,variab,variables,403,"/// Privatizes local variables previously registered as private.; /// Registration is separate from the actual privatization to allow; /// initializers use values of the original variables, not the private one.; /// This is important, for example, if the private variable is a class; /// variable initialized by a constructor that references other private; /// variables. But at initialization original variables must be used, not; /// private copies.; /// \return true if at least one variable was privatized, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:486,Modifiability,variab,variable,486,"/// Privatizes local variables previously registered as private.; /// Registration is separate from the actual privatization to allow; /// initializers use values of the original variables, not the private one.; /// This is important, for example, if the private variable is a class; /// variable initialized by a constructor that references other private; /// variables. But at initialization original variables must be used, not; /// private copies.; /// \return true if at least one variable was privatized, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:32,Modifiability,variab,variables,32,/// Exit scope - all the mapped variables are restored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:25,Modifiability,variab,variable,25,/// Checks if the global variable is captured in current function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:23,Modifiability,variab,variables,23,"/// Restore all mapped variables w/o clean up. This is usefully when we want; /// to reference the original variables but don't want the clean up because; /// that could emit lifetime end too early, causing backend issue #56913.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:108,Modifiability,variab,variables,108,"/// Restore all mapped variables w/o clean up. This is usefully when we want; /// to reference the original variables but don't want the clean up because; /// that could emit lifetime end too early, causing backend issue #56913.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:116,Modifiability,extend,extended,116,"/// Takes the old cleanup stack size and emits the cleanup blocks; /// that have been added, then adds all lifetime-extended cleanups from; /// the given position to the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:160,Performance,perform,perform,160,"/// The given basic block lies in the current EH scope, but may be a; /// target of a potentially scope-crossing jump; get a stable handle; /// to which we can perform this jump later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:160,Performance,perform,perform,160,"/// The given basic block lies in the current EH scope, but may be a; /// target of a potentially scope-crossing jump; get a stable handle; /// to which we can perform this jump later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:98,Performance,optimiz,optimizations,98,/// An object which temporarily prevents a value from being; /// destroyed by aggressive peephole optimizations that assume that; /// all uses of a value have been realized in the IR.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:122,Integrability,wrap,wrapper,122,"/// A non-RAII class containing all the information about a bound; /// opaque value. OpaqueValueMapping, below, is a RAII wrapper for; /// this which makes individual mappings very simple; using this; /// class directly is useful when you have a variable number of; /// opaque values or don't want the RAII functionality for some; /// reason.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:246,Modifiability,variab,variable,246,"/// A non-RAII class containing all the information about a bound; /// opaque value. OpaqueValueMapping, below, is a RAII wrapper for; /// this which makes individual mappings very simple; using this; /// class directly is useful when you have a variable number of; /// opaque values or don't want the RAII functionality for some; /// reason.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:181,Usability,simpl,simple,181,"/// A non-RAII class containing all the information about a bound; /// opaque value. OpaqueValueMapping, below, is a RAII wrapper for; /// this which makes individual mappings very simple; using this; /// class directly is useful when you have a variable number of; /// opaque values or don't want the RAII functionality for some; /// reason.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:48,Performance,optimiz,optimization,48,// Work around an extremely aggressive peephole optimization in; // EmitScalarConversion which assumes that all other uses of a; // value are extant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:36,Usability,clear,clear,36,/// An RAII object to set (and then clear) a mapping for an OpaqueValueExpr.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:67,Modifiability,variab,variables,67,/// Used to create unique names for artificial VLA size debug info variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:71,Safety,avoid,avoid,71,/// DidCallStackSave - Whether llvm.stacksave has been called. Used to avoid; /// calling llvm.stacksave for multiple VLAs in the same scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:24,Modifiability,variab,variables,24,/// Track escaped local variables with auto storage. Used during SEH; /// outlining to produce a call to llvm.localescape.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Energy Efficiency,Allocate,Allocate,4,/// Allocate a temp value on the stack that MCDC can use to track condition; /// results.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Deployability,Update,Update,4,/// Update the MCDC temp value with the condition's evaluated result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:24,Usability,simpl,simple,24,/// Count the number of simple (constant) return expressions in the function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:23,Energy Efficiency,allocate,allocate,23,/// Cleanup action for allocate support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,Modifiability,variab,variable,41,/// Returns address of the threadprivate variable for the current; /// thread. This Also create any necessary OMP runtime calls.; ///; /// \param VD VarDecl for Threadprivate variable.; /// \param VDAddr Address of the Vardecl; /// \param Loc The location where the barrier directive was encountered,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:175,Modifiability,variab,variable,175,/// Returns address of the threadprivate variable for the current; /// thread. This Also create any necessary OMP runtime calls.; ///; /// \param VD VarDecl for Threadprivate variable.; /// \param VDAddr Address of the Vardecl; /// \param Loc The location where the barrier directive was encountered,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:50,Modifiability,variab,variable,50,/// Gets the OpenMP-specific address of the local variable /p VD.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:39,Modifiability,variab,variable,39,"/// BlockByrefInfos - For each __block variable, contains; /// information about the layout of the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:99,Modifiability,variab,variable,99,"/// BlockByrefInfos - For each __block variable, contains; /// information about the layout of the variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:56,Security,sanitiz,sanitization,56,/// Check if the return value of this function requires sanitization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:361,Modifiability,variab,variables,361,"//===--------------------------------------------------------------------===//; // Block Bits; //===--------------------------------------------------------------------===//; /// Emit block literal.; /// \return an LLVM value which is a pointer to a struct which contains; /// information about the block, including the block invoke function, the; /// captured variables, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,Modifiability,variab,variable,41,"/// Enter a cleanup to destroy a __block variable. Note that this; /// cleanup should be a no-op if the variable hasn't left the stack; /// yet; if a cleanup is required for the variable itself, that needs; /// to be done externally.; ///; /// \param Kind Cleanup kind.; ///; /// \param Addr When \p LoadBlockVarAddr is false, the address of the __block; /// structure that will be passed to _Block_object_dispose. When; /// \p LoadBlockVarAddr is true, the address of the field of the block; /// structure that holds the address of the __block structure.; ///; /// \param Flags The flag that will be passed to _Block_object_dispose.; ///; /// \param LoadBlockVarAddr Indicates whether we need to emit a load from; /// \p Addr to get the address of the __block structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:104,Modifiability,variab,variable,104,"/// Enter a cleanup to destroy a __block variable. Note that this; /// cleanup should be a no-op if the variable hasn't left the stack; /// yet; if a cleanup is required for the variable itself, that needs; /// to be done externally.; ///; /// \param Kind Cleanup kind.; ///; /// \param Addr When \p LoadBlockVarAddr is false, the address of the __block; /// structure that will be passed to _Block_object_dispose. When; /// \p LoadBlockVarAddr is true, the address of the field of the block; /// structure that holds the address of the __block structure.; ///; /// \param Flags The flag that will be passed to _Block_object_dispose.; ///; /// \param LoadBlockVarAddr Indicates whether we need to emit a load from; /// \p Addr to get the address of the __block structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:178,Modifiability,variab,variable,178,"/// Enter a cleanup to destroy a __block variable. Note that this; /// cleanup should be a no-op if the variable hasn't left the stack; /// yet; if a cleanup is required for the variable itself, that needs; /// to be done externally.; ///; /// \param Kind Cleanup kind.; ///; /// \param Addr When \p LoadBlockVarAddr is false, the address of the __block; /// structure that will be passed to _Block_object_dispose. When; /// \p LoadBlockVarAddr is true, the address of the field of the block; /// structure that holds the address of the __block structure.; ///; /// \param Flags The flag that will be passed to _Block_object_dispose.; ///; /// \param LoadBlockVarAddr Indicates whether we need to emit a load from; /// \p Addr to get the address of the __block structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:300,Performance,Load,LoadBlockVarAddr,300,"/// Enter a cleanup to destroy a __block variable. Note that this; /// cleanup should be a no-op if the variable hasn't left the stack; /// yet; if a cleanup is required for the variable itself, that needs; /// to be done externally.; ///; /// \param Kind Cleanup kind.; ///; /// \param Addr When \p LoadBlockVarAddr is false, the address of the __block; /// structure that will be passed to _Block_object_dispose. When; /// \p LoadBlockVarAddr is true, the address of the field of the block; /// structure that holds the address of the __block structure.; ///; /// \param Flags The flag that will be passed to _Block_object_dispose.; ///; /// \param LoadBlockVarAddr Indicates whether we need to emit a load from; /// \p Addr to get the address of the __block structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:428,Performance,Load,LoadBlockVarAddr,428,"/// Enter a cleanup to destroy a __block variable. Note that this; /// cleanup should be a no-op if the variable hasn't left the stack; /// yet; if a cleanup is required for the variable itself, that needs; /// to be done externally.; ///; /// \param Kind Cleanup kind.; ///; /// \param Addr When \p LoadBlockVarAddr is false, the address of the __block; /// structure that will be passed to _Block_object_dispose. When; /// \p LoadBlockVarAddr is true, the address of the field of the block; /// structure that holds the address of the __block structure.; ///; /// \param Flags The flag that will be passed to _Block_object_dispose.; ///; /// \param LoadBlockVarAddr Indicates whether we need to emit a load from; /// \p Addr to get the address of the __block structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:651,Performance,Load,LoadBlockVarAddr,651,"/// Enter a cleanup to destroy a __block variable. Note that this; /// cleanup should be a no-op if the variable hasn't left the stack; /// yet; if a cleanup is required for the variable itself, that needs; /// to be done externally.; ///; /// \param Kind Cleanup kind.; ///; /// \param Addr When \p LoadBlockVarAddr is false, the address of the __block; /// structure that will be passed to _Block_object_dispose. When; /// \p LoadBlockVarAddr is true, the address of the field of the block; /// structure that holds the address of the __block structure.; ///; /// \param Flags The flag that will be passed to _Block_object_dispose.; ///; /// \param LoadBlockVarAddr Indicates whether we need to emit a load from; /// \p Addr to get the address of the __block structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:704,Performance,load,load,704,"/// Enter a cleanup to destroy a __block variable. Note that this; /// cleanup should be a no-op if the variable hasn't left the stack; /// yet; if a cleanup is required for the variable itself, that needs; /// to be done externally.; ///; /// \param Kind Cleanup kind.; ///; /// \param Addr When \p LoadBlockVarAddr is false, the address of the __block; /// structure that will be passed to _Block_object_dispose. When; /// \p LoadBlockVarAddr is true, the address of the field of the block; /// structure that holds the address of the __block structure.; ///; /// \param Flags The flag that will be passed to _Block_object_dispose.; ///; /// \param LoadBlockVarAddr Indicates whether we need to emit a load from; /// \p Addr to get the address of the __block structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:73,Modifiability,variab,variable,73,/// BuildBlockByrefAddress - Computes the location of the; /// data in a variable which is declared as __block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:45,Safety,avoid,avoid,45,"/// Emit the unified return block, trying to avoid its emission when; /// possible.; /// \return The debug location of the user written return statement if the; /// return block is avoided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:181,Safety,avoid,avoided,181,"/// Emit the unified return block, trying to avoid its emission when; /// possible.; /// \return The debug location of the user written return statement if the; /// return block is avoided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:88,Modifiability,polymorphi,polymorphic,88,"/// Derived is the presumed address of an object of type T after a; /// cast. If T is a polymorphic class type, emit a check that the virtual; /// table for Derived belongs to a class derived from T.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:103,Testability,test,test,103,/// EmitVTablePtrCheck - Emit a check that VTable is a valid virtual table for; /// RD using llvm.type.test.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:35,Performance,optimiz,optimization,35,"/// If whole-program virtual table optimization is enabled, emit an assumption; /// that VTable is a member of RD's type identifier. Or, if vptr CFI is; /// enabled, emit a check that VTable is a member of RD's type identifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:30,Performance,perform,perform,30,/// Returns whether we should perform a type checked load when loading a; /// virtual function for virtual calls to members of RD. This is generally; /// true when both vcall CFI and whole-program-vtables are enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:53,Performance,load,load,53,/// Returns whether we should perform a type checked load when loading a; /// virtual function for virtual calls to members of RD. This is generally; /// true when both vcall CFI and whole-program-vtables are enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:63,Performance,load,loading,63,/// Returns whether we should perform a type checked load when loading a; /// virtual function for virtual calls to members of RD. This is generally; /// true when both vcall CFI and whole-program-vtables are enabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:24,Performance,load,load,24,/// Emit a type checked load from the given vtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:114,Security,sanitiz,sanitizers,114,/// ShouldSkipSanitizerInstrumentation - Return true if the current function; /// should not be instrumented with sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:18,Security,hash,hash,18,/// Return a type hash constant for a function instrumented by; /// -fsanitize=function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:63,Performance,load,load,63,/// EmitFunctionProlog - Emit the target specific LLVM code to load the; /// arguments for the given function. This is also responsible for naming the; /// LLVM function arguments.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:11,Testability,test,test,11,/// Emit a test that checks if the return value \p RV is nonnull.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Performance,Load,LoadObjCSelf,4,/// LoadObjCSelf - Load the value of self. This function is only valid while; /// generating code for an Objective-C method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:19,Performance,Load,Load,19,/// LoadObjCSelf - Load the value of self. This function is only valid while; /// generating code for an Objective-C method.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Usability,Simpl,SimplifyForwardingBlocks,4,"/// SimplifyForwardingBlocks - If the given basic block is only a branch to; /// another basic block, simplify it. This assumes that no other code could; /// potentially reference the basic block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:102,Usability,simpl,simplify,102,"/// SimplifyForwardingBlocks - If the given basic block is only a branch to; /// another basic block, simplify it. This assumes that no other code could; /// potentially reference the basic block.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:111,Safety,avoid,avoid,111,"/// EmitBranch - Emit a branch to the specified basic block from the current; /// insert block, taking care to avoid creation of branches from dummy; /// blocks. It is legal to call this function even if there is no current; /// insertion point.; ///; /// This function clears the current insertion point. The caller should follow; /// calls to this function with calls to Emit*Block prior to generation new; /// code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:270,Usability,clear,clears,270,"/// EmitBranch - Emit a branch to the specified basic block from the current; /// insert block, taking care to avoid creation of branches from dummy; /// blocks. It is legal to call this function even if there is no current; /// insertion point.; ///; /// This function clears the current insertion point. The caller should follow; /// calls to this function with calls to Emit*Block prior to generation new; /// code.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:234,Safety,detect,detect,234,"/// EnsureInsertPoint - Ensure that an insertion point is defined so that; /// emitted IR has a place to go. Note that by definition, if this function; /// creates a block then that block is unreachable; callers may do better to; /// detect when no insertion point is defined and simply skip IR generation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:280,Usability,simpl,simply,280,"/// EnsureInsertPoint - Ensure that an insertion point is defined so that; /// emitted IR has a place to go. Note that by definition, if this function; /// creates a block then that block is unreachable; callers may do better to; /// detect when no insertion point is defined and simply skip IR generation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Availability,Error,ErrorUnsupported,4,/// ErrorUnsupported - Print out an error that codegen doesn't support the; /// specified stmt yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:36,Availability,error,error,36,/// ErrorUnsupported - Print out an error that codegen doesn't support the; /// specified stmt yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Performance,Load,Load,4,"/// Load a pointer with type \p PtrTy stored at address \p Ptr.; /// Note that \p PtrTy is the type of the loaded pointer, not the addresses; /// it is loaded from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:107,Performance,load,loaded,107,"/// Load a pointer with type \p PtrTy stored at address \p Ptr.; /// Note that \p PtrTy is the type of the loaded pointer, not the addresses; /// it is loaded from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:152,Performance,load,loaded,152,"/// Load a pointer with type \p PtrTy stored at address \p Ptr.; /// Note that \p PtrTy is the type of the loaded pointer, not the addresses; /// it is loaded from.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:525,Deployability,configurat,configurations,525,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:337,Energy Efficiency,allocate,allocated,337,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:1353,Energy Efficiency,efficient,efficient,1353,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:442,Modifiability,variab,variables,442,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:525,Modifiability,config,configurations,525,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:1159,Performance,perform,perform,1159,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:1292,Performance,perform,performaed,1292,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:477,Security,expose,exposed,477,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:1095,Security,expose,exposed,1095,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:1412,Security,expose,exposed,1412,"/// CreateTempAlloca - This creates an alloca and inserts it into the entry; /// block if \p ArraySize is nullptr, otherwise inserts it at the current; /// insertion point of the builder. The caller is responsible for setting an; /// appropriate alignment on; /// the alloca.; ///; /// \p ArraySize is the number of array elements to be allocated if it; /// is not nullptr.; ///; /// LangAS::Default is the address space of pointers to local variables and; /// temporaries, as exposed in the source language. In certain; /// configurations, this is not the same as the alloca address space, and a; /// cast is needed to lift the pointer from the alloca AS into; /// LangAS::Default. This can happen when the target uses a restricted; /// address space for the stack but the source language requires; /// LangAS::Default to be a generic address space. The latter condition is; /// common for most programming languages; OpenCL is an exception in that; /// LangAS::Default is the private address space, which naturally maps; /// to the stack.; ///; /// Because the address of a temporary is often exposed to the program in; /// various ways, this function will perform the cast. The original alloca; /// instruction is returned through \p Alloca if it is not nullptr.; ///; /// The cast is not performaed in CreateTempAllocaWithoutCast. This is; /// more efficient if the caller knows that the address will not be exposed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:446,Integrability,rout,routines,446,"/// CreateDefaultAlignedTempAlloca - This creates an alloca with the; /// default ABI alignment of the given LLVM type.; ///; /// IMPORTANT NOTE: This is *not* generally the right alignment for; /// any given AST type that happens to have been lowered to the; /// given IR type. This should only ever be used for function-local,; /// IR-driven manipulations like saving and restoring a value. Do; /// not hand this address off to arbitrary IRGen routines, and especially; /// do not pass it as an argument to a function that might expect a; /// properly ABI-aligned value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:105,Integrability,rout,routine,105,"/// CreateIRTemp - Create a temporary IR object of the given type, with; /// appropriate alignment. This routine should only be used when an temporary; /// value needs to be stored into an alloca (for example, to avoid explicit; /// PHI construction), but the type is the IR type, not the type appropriate; /// for storing in memory.; ///; /// That is, this is exactly equivalent to CreateMemTemp, but calling; /// ConvertType instead of ConvertTypeForMem.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:213,Safety,avoid,avoid,213,"/// CreateIRTemp - Create a temporary IR object of the given type, with; /// appropriate alignment. This routine should only be used when an temporary; /// value needs to be stored into an alloca (for example, to avoid explicit; /// PHI construction), but the type is the IR type, not the type appropriate; /// for storing in memory.; ///; /// That is, this is exactly equivalent to CreateMemTemp, but calling; /// ConvertType instead of ConvertTypeForMem.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:25,Performance,Perform,Perform,25,"/// EvaluateExprAsBool - Perform the usual unary conversions on the specified; /// expression and compare the result against zero, returning an Int1Ty value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:115,Integrability,depend,depending,115,"// EmitVAListRef - Emit a ""reference"" to a va_list; this is either the address; // or the value of the expression, depending on how va_list is defined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:92,Security,access,accessible,92,"/// EmitAnyExprToTemp - Similarly to EmitAnyExpr(), however, the result will; /// always be accessible even if no aggregate location is provided.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:134,Integrability,depend,depending,134,// FIXME: Assuming no overlap here breaks guaranteed copy elision for base; // class subobjects. These cases may need to be revisited depending on the; // resolution of the relevant core issue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:260,Energy Efficiency,efficient,efficient,260,/// EmitAggregateCopy - Emit an aggregate copy.; ///; /// \param isVolatile \c true iff either the source or the destination is; /// volatile.; /// \param MayOverlap Whether the tail padding of the destination might be; /// occupied by some other object. More efficient code can often be; /// generated if not.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:54,Modifiability,variab,variable,54,/// GetAddrOfLocalVar - Return the address of a local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:110,Security,access,accessed,110,"/// getAccessedFieldNo - Given an encoded value and a result number, return; /// the input field number being accessed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:42,Integrability,wrap,wrapped,42,"/// Check if \p E is a C++ ""this"" pointer wrapped in value-preserving casts.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:28,Modifiability,variab,variable-argument,28,"/// Emits a call to an LLVM variable-argument intrinsic, either; /// \c llvm.va_start or \c llvm.va_end.; /// \param ArgValue A reference to the \c va_list as emitted by either; /// \c EmitVAListRef or \c EmitMSVAListRef.; /// \param IsStart If \c true, emits a call to \c llvm.va_start; otherwise,; /// calls \c llvm.va_end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:73,Deployability,update,update,73,/// Generate code to get an argument from the passed in pointer; /// and update it accordingly.; /// \param VE The \c VAArgExpr for which to generate code.; /// \param VAListAddr Receives a reference to the \c va_list as emitted by; /// either \c EmitVAListRef or \c EmitMSVAListRef.; /// \returns A pointer to the argument.; // FIXME: We should be able to get rid of this method and use the va_arg; // instruction in LLVM instead once it works well enough.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:89,Availability,down,down,89,"/// emitArrayLength - Compute the length of an array, even if it's a; /// VLA, and drill down to the base element type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:82,Modifiability,variab,variably-modified,82,/// EmitVLASize - Capture all the sizes for the VLA expressions in; /// the given variably-modified type and store them in the VLASizeMap.; ///; /// This function can be called with a null (unreachable) insert point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:68,Modifiability,variab,variably-sized,68,"/// Returns an LLVM value that corresponds to the size,; /// in non-variably-sized elements, of a variable length array type,; /// plus that largest non-variably-sized element type. Assumes that; /// the type has already been emitted with EmitVariablyModifiedType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:98,Modifiability,variab,variable,98,"/// Returns an LLVM value that corresponds to the size,; /// in non-variably-sized elements, of a variable length array type,; /// plus that largest non-variably-sized element type. Assumes that; /// the type has already been emitted with EmitVariablyModifiedType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:153,Modifiability,variab,variably-sized,153,"/// Returns an LLVM value that corresponds to the size,; /// in non-variably-sized elements, of a variable length array type,; /// plus that largest non-variably-sized element type. Assumes that; /// the type has already been emitted with EmitVariablyModifiedType.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Performance,Load,LoadCXXThis,4,/// LoadCXXThis - Load the value of 'this'. This function is only valid while; /// generating code for an C++ member function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:18,Performance,Load,Load,18,/// LoadCXXThis - Load the value of 'this'. This function is only valid while; /// generating code for an C++ member function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Performance,Load,LoadCXXVTT,4,/// LoadCXXVTT - Load the VTT parameter to base constructors/destructors have; /// virtual bases.; // FIXME: Every place that calls LoadCXXVTT is something; // that needs to be abstracted properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:17,Performance,Load,Load,17,/// LoadCXXVTT - Load the VTT parameter to base constructors/destructors have; /// virtual bases.; // FIXME: Every place that calls LoadCXXVTT is something; // that needs to be abstracted properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:132,Performance,Load,LoadCXXVTT,132,/// LoadCXXVTT - Load the VTT parameter to base constructors/destructors have; /// virtual bases.; // FIXME: Every place that calls LoadCXXVTT is something; // that needs to be abstracted properly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:83,Performance,load,load,83,/// GetAddressOfBaseClass - This function will add the necessary delta to the; /// load of 'this' and returns address of the base class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:169,Energy Efficiency,reduce,reduce,169,// It's important not to confuse this and the previous function. Delegating; // constructors are the C++0x feature. The constructor delegate optimization; // is used to reduce duplication in the base and complete consturctors where; // they are substantially the same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:141,Performance,optimiz,optimization,141,// It's important not to confuse this and the previous function. Delegating; // constructors are the C++0x feature. The constructor delegate optimization; // is used to reduce duplication in the base and complete consturctors where; // they are substantially the same.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:22,Modifiability,inherit,inheriting,22,"/// Emit a call to an inheriting constructor (that is, one that invokes a; /// constructor inherited from a base class) by inlining its definition. This; /// is necessary if the ABI does not support forwarding the arguments to the; /// base class constructor (because they're variadic or similar).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:91,Modifiability,inherit,inherited,91,"/// Emit a call to an inheriting constructor (that is, one that invokes a; /// constructor inherited from a base class) by inlining its definition. This; /// is necessary if the ABI does not support forwarding the arguments to the; /// base class constructor (because they're variadic or similar).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:33,Modifiability,inherit,inherited,33,"/// Emit a call to a constructor inherited from a base class, passing the; /// current constructor's arguments along unmodified (without even making; /// a copy).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:20,Performance,load,load,20,/// Emit assumption load for all bases. Requires to be called only on; /// most-derived class and not under construction of the object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:30,Performance,load,load,30,/// Emit assumption that vptr load == global vtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:30,Performance,load,load,30,/// Checking the operand of a load. Must be suitably sized and aligned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:63,Security,access,access,63,/// Checking the object expression in a non-static data member access. Must; /// be an object within its lifetime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:30,Security,sanitiz,sanitizers,30,"/// Whether any type-checking sanitizers are enabled. If \c false,; /// calls to EmitTypeCheck can be skipped.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:77,Security,access,access,77,"/// Emit a check that \p Base points into an array object, which; /// we can access at index \p Index. \p Accessed should be \c false if we; /// this expression is used as an lvalue, for instance in ""&Arr[Idx]"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:106,Security,Access,Accessed,106,"/// Emit a check that \p Base points into an array object, which; /// we can access at index \p Index. \p Accessed should be \c false if we; /// this expression is used as an lvalue, for instance in ""&Arr[Idx]"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:19,Modifiability,flexible,flexible,19,"// Find a struct's flexible array member. It may be embedded inside multiple; // sub-structs, but must still be the last field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:24,Security,access,accessing,24,"/// Build an expression accessing the ""counted_by"" field.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:31,Modifiability,variab,variable,31,/// EmitVarDecl - Emit a local variable declaration.; ///; /// This function can be called with a null (unreachable) insert point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:35,Modifiability,variab,variable,35,/// EmitAutoVarDecl - Emit an auto variable declaration.; ///; /// This function can be called with a null (unreachable) insert point.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:196,Modifiability,variab,variable,196,/// The address of the alloca for languages with explicit address space; /// (e.g. OpenCL) or alloca casted to generic pointer for address space; /// agnostic languages (e.g. C++). Invalid if the variable was emitted; /// as a global constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:16,Modifiability,variab,variable,16,/// True if the variable is a __block variable that is captured by an; /// escaping block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:38,Modifiability,variab,variable,38,/// True if the variable is a __block variable that is captured by an; /// escaping block.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:16,Modifiability,variab,variable,16,/// True if the variable is of aggregate type and has a constant; /// initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:61,Modifiability,variab,variable,61,/// Address with original alloca instruction. Invalid if the variable was; /// emitted as a global constant.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:21,Energy Efficiency,allocate,allocated,21,"/// Returns the raw, allocated address, which is not necessarily; /// the address of the object itself. It is casted to default; /// address space for address space agnostic languages.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:162,Performance,optimiz,optimizations,162,"/// protectFromPeepholes - Protect a value that we're intending to; /// store to the side, but which will probably be used later, from; /// aggressive peepholing optimizations that might delete it.; ///; /// Pass the result to unprotectFromPeepholes to declare that; /// protection is no longer required.; ///; /// There's no particular reason why this shouldn't apply to; /// l-values, it's just that no existing peepholes work on pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:167,Usability,clear,clear,167,"/// EmitStmt - Emit the code for the statement \arg S. It is legal to call; /// this function even if there is no current insertion point.; ///; /// This function may clear the current insertion point; callers should use; /// EnsureInsertPoint if they wish to subsequently generate code without first; /// calling EmitBlock, EmitBranch, or EmitStmt.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:36,Usability,simpl,simple,36,"/// EmitSimpleStmt - Try to emit a ""simple"" statement which does not; /// necessarily require an insertion point or debug information; typically; /// because the statement amounts to a jump or a container of other; /// statements.; ///; /// \return True if the statement was handled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:9,Usability,simpl,simple,9,/// Emit simple code for OpenMP directives in Simd-only mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Availability,Recover,Recovers,4,/// Recovers the address of a local in a parent function. ParentVar is the; /// address of the variable used in the immediate parent function. It can; /// either be an alloca or a call to llvm.localrecover if there are nested; /// outlined functions. ParentFP is the frame pointer of the outermost parent; /// frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:95,Modifiability,variab,variable,95,/// Recovers the address of a local in a parent function. ParentVar is the; /// address of the variable used in the immediate parent function. It can; /// either be an alloca or a call to llvm.localrecover if there are nested; /// outlined functions. ParentFP is the frame pointer of the outermost parent; /// frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Safety,Recover,Recovers,4,/// Recovers the address of a local in a parent function. ParentVar is the; /// address of the variable used in the immediate parent function. It can; /// either be an alloca or a call to llvm.localrecover if there are nested; /// outlined functions. ParentFP is the frame pointer of the outermost parent; /// frame.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Performance,Perform,Perform,4,/// Perform element by element copying of arrays with type \a; /// OriginalType from \a SrcAddr to \a DestAddr using copying procedure; /// generated by \a CopyGen.; ///; /// \param DestAddr Address of the destination array.; /// \param SrcAddr Address of the source array.; /// \param OriginalType Type of destination and source arrays.; /// \param CopyGen Copying procedure that copies value of single array element; /// to another single array element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,Modifiability,variab,variable,41,"/// Emit proper copying of data from one variable to another.; ///; /// \param OriginalType Original type of the copied variables.; /// \param DestAddr Destination address.; /// \param SrcAddr Source address.; /// \param DestVD Destination variable used in \a CopyExpr (for arrays, has; /// type of the base array element).; /// \param SrcVD Source variable used in \a CopyExpr (for arrays, has type of; /// the base array element).; /// \param Copy Actual copygin expression for copying data from \a SrcVD to \a; /// DestVD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:120,Modifiability,variab,variables,120,"/// Emit proper copying of data from one variable to another.; ///; /// \param OriginalType Original type of the copied variables.; /// \param DestAddr Destination address.; /// \param SrcAddr Source address.; /// \param DestVD Destination variable used in \a CopyExpr (for arrays, has; /// type of the base array element).; /// \param SrcVD Source variable used in \a CopyExpr (for arrays, has type of; /// the base array element).; /// \param Copy Actual copygin expression for copying data from \a SrcVD to \a; /// DestVD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:240,Modifiability,variab,variable,240,"/// Emit proper copying of data from one variable to another.; ///; /// \param OriginalType Original type of the copied variables.; /// \param DestAddr Destination address.; /// \param SrcAddr Source address.; /// \param DestVD Destination variable used in \a CopyExpr (for arrays, has; /// type of the base array element).; /// \param SrcVD Source variable used in \a CopyExpr (for arrays, has type of; /// the base array element).; /// \param Copy Actual copygin expression for copying data from \a SrcVD to \a; /// DestVD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:349,Modifiability,variab,variable,349,"/// Emit proper copying of data from one variable to another.; ///; /// \param OriginalType Original type of the copied variables.; /// \param DestAddr Destination address.; /// \param SrcAddr Source address.; /// \param DestVD Destination variable used in \a CopyExpr (for arrays, has; /// type of the base array element).; /// \param SrcVD Source variable used in \a CopyExpr (for arrays, has type of; /// the base array element).; /// \param Copy Actual copygin expression for copying data from \a SrcVD to \a; /// DestVD.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:16,Deployability,update,update,16,"/// Emit atomic update code for constructs: \a X = \a X \a BO \a E or; /// \a X = \a E \a BO \a E.; ///; /// \param X Value to be updated.; /// \param E Update value.; /// \param BO Binary operation for update operation.; /// \param IsXLHSInRHSPart true if \a X is LHS in RHS part of the update; /// expression, false otherwise.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param CommonGen Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \returns <true, OldAtomicValue> if simple 'atomicrmw' instruction was; /// generated, <false, RValue::get(nullptr)> otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:130,Deployability,update,updated,130,"/// Emit atomic update code for constructs: \a X = \a X \a BO \a E or; /// \a X = \a E \a BO \a E.; ///; /// \param X Value to be updated.; /// \param E Update value.; /// \param BO Binary operation for update operation.; /// \param IsXLHSInRHSPart true if \a X is LHS in RHS part of the update; /// expression, false otherwise.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param CommonGen Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \returns <true, OldAtomicValue> if simple 'atomicrmw' instruction was; /// generated, <false, RValue::get(nullptr)> otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:153,Deployability,Update,Update,153,"/// Emit atomic update code for constructs: \a X = \a X \a BO \a E or; /// \a X = \a E \a BO \a E.; ///; /// \param X Value to be updated.; /// \param E Update value.; /// \param BO Binary operation for update operation.; /// \param IsXLHSInRHSPart true if \a X is LHS in RHS part of the update; /// expression, false otherwise.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param CommonGen Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \returns <true, OldAtomicValue> if simple 'atomicrmw' instruction was; /// generated, <false, RValue::get(nullptr)> otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:203,Deployability,update,update,203,"/// Emit atomic update code for constructs: \a X = \a X \a BO \a E or; /// \a X = \a E \a BO \a E.; ///; /// \param X Value to be updated.; /// \param E Update value.; /// \param BO Binary operation for update operation.; /// \param IsXLHSInRHSPart true if \a X is LHS in RHS part of the update; /// expression, false otherwise.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param CommonGen Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \returns <true, OldAtomicValue> if simple 'atomicrmw' instruction was; /// generated, <false, RValue::get(nullptr)> otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:288,Deployability,update,update,288,"/// Emit atomic update code for constructs: \a X = \a X \a BO \a E or; /// \a X = \a E \a BO \a E.; ///; /// \param X Value to be updated.; /// \param E Update value.; /// \param BO Binary operation for update operation.; /// \param IsXLHSInRHSPart true if \a X is LHS in RHS part of the update; /// expression, false otherwise.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param CommonGen Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \returns <true, OldAtomicValue> if simple 'atomicrmw' instruction was; /// generated, <false, RValue::get(nullptr)> otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:560,Usability,simpl,simple,560,"/// Emit atomic update code for constructs: \a X = \a X \a BO \a E or; /// \a X = \a E \a BO \a E.; ///; /// \param X Value to be updated.; /// \param E Update value.; /// \param BO Binary operation for update operation.; /// \param IsXLHSInRHSPart true if \a X is LHS in RHS part of the update; /// expression, false otherwise.; /// \param AO Atomic ordering of the generated atomic instructions.; /// \param CommonGen Code generator for complex expressions that cannot be; /// expressed through atomicrmw instruction.; /// \returns <true, OldAtomicValue> if simple 'atomicrmw' instruction was; /// generated, <false, RValue::get(nullptr)> otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:435,Modifiability,variab,variable,435,"/// Emit code for copyin clause in \a D directive. The next code is; /// generated at the start of outlined functions for directives:; /// \code; /// threadprivate_var1 = master_threadprivate_var1;; /// operator=(threadprivate_var2, master_threadprivate_var2);; /// ...; /// __kmpc_barrier(&loc, global_tid);; /// \endcode; ///; /// \param D OpenMP directive possibly with 'copyin' clause(s).; /// \returns true if at least one copyin variable is found, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:38,Modifiability,variab,variables,38,"/// Emit initial code for lastprivate variables. If some variable is; /// not also firstprivate, then the default initialization is used. Otherwise; /// initialization of this variable is performed by EmitOMPFirstprivateClause; /// method.; ///; /// \param D Directive that may have 'lastprivate' directives.; /// \param PrivateScope Private scope for capturing lastprivate variables for; /// proper codegen in internal captured statement.; ///; /// \returns true if there is at least one lastprivate variable, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:57,Modifiability,variab,variable,57,"/// Emit initial code for lastprivate variables. If some variable is; /// not also firstprivate, then the default initialization is used. Otherwise; /// initialization of this variable is performed by EmitOMPFirstprivateClause; /// method.; ///; /// \param D Directive that may have 'lastprivate' directives.; /// \param PrivateScope Private scope for capturing lastprivate variables for; /// proper codegen in internal captured statement.; ///; /// \returns true if there is at least one lastprivate variable, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:176,Modifiability,variab,variable,176,"/// Emit initial code for lastprivate variables. If some variable is; /// not also firstprivate, then the default initialization is used. Otherwise; /// initialization of this variable is performed by EmitOMPFirstprivateClause; /// method.; ///; /// \param D Directive that may have 'lastprivate' directives.; /// \param PrivateScope Private scope for capturing lastprivate variables for; /// proper codegen in internal captured statement.; ///; /// \returns true if there is at least one lastprivate variable, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:374,Modifiability,variab,variables,374,"/// Emit initial code for lastprivate variables. If some variable is; /// not also firstprivate, then the default initialization is used. Otherwise; /// initialization of this variable is performed by EmitOMPFirstprivateClause; /// method.; ///; /// \param D Directive that may have 'lastprivate' directives.; /// \param PrivateScope Private scope for capturing lastprivate variables for; /// proper codegen in internal captured statement.; ///; /// \returns true if there is at least one lastprivate variable, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:501,Modifiability,variab,variable,501,"/// Emit initial code for lastprivate variables. If some variable is; /// not also firstprivate, then the default initialization is used. Otherwise; /// initialization of this variable is performed by EmitOMPFirstprivateClause; /// method.; ///; /// \param D Directive that may have 'lastprivate' directives.; /// \param PrivateScope Private scope for capturing lastprivate variables for; /// proper codegen in internal captured statement.; ///; /// \returns true if there is at least one lastprivate variable, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:188,Performance,perform,performed,188,"/// Emit initial code for lastprivate variables. If some variable is; /// not also firstprivate, then the default initialization is used. Otherwise; /// initialization of this variable is performed by EmitOMPFirstprivateClause; /// method.; ///; /// \param D Directive that may have 'lastprivate' directives.; /// \param PrivateScope Private scope for capturing lastprivate variables for; /// proper codegen in internal captured statement.; ///; /// \returns true if there is at least one lastprivate variable, false; /// otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:57,Modifiability,variab,variables,57,"/// Emit final copying of lastprivate values to original variables at; /// the end of the worksharing or simd directive.; ///; /// \param D Directive that has at least one 'lastprivate' directives.; /// \param IsLastIterCond Boolean condition that must be set to 'i1 true' if; /// it is the last iteration of the loop code in associated directive, or to; /// 'i1 false' otherwise. If this item is nullptr, no final check is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:36,Modifiability,variab,variables,36,/// Emit initial code for reduction variables. Creates reduction copies; /// and initializes them with the values according to OpenMP standard.; ///; /// \param D Directive (possibly) with the 'reduction' clause.; /// \param PrivateScope Private scope for capturing reduction variables for; /// proper codegen in internal captured statement.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:276,Modifiability,variab,variables,276,/// Emit initial code for reduction variables. Creates reduction copies; /// and initializes them with the values according to OpenMP standard.; ///; /// \param D Directive (possibly) with the 'reduction' clause.; /// \param PrivateScope Private scope for capturing reduction variables for; /// proper codegen in internal captured statement.; ///,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:15,Deployability,update,update,15,/// Emit final update of reduction values to original variables at; /// the end of the directive.; ///; /// \param D Directive that has at least one 'reduction' directives.; /// \param ReductionKind The kind of reduction to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:54,Modifiability,variab,variables,54,/// Emit final update of reduction values to original variables at; /// the end of the directive.; ///; /// \param D Directive that has at least one 'reduction' directives.; /// \param ReductionKind The kind of reduction to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:224,Performance,perform,perform,224,/// Emit final update of reduction values to original variables at; /// the end of the directive.; ///; /// \param D Directive that has at least one 'reduction' directives.; /// \param ReductionKind The kind of reduction to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:33,Modifiability,variab,variables,33,"/// Emit initial code for linear variables. Creates private copies; /// and initializes them with the values according to OpenMP standard.; ///; /// \param D Directive (possibly) with the 'linear' clause.; /// \return true if at least one linear variable is found that should be; /// initialized with the value of the original variable, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:246,Modifiability,variab,variable,246,"/// Emit initial code for linear variables. Creates private copies; /// and initializes them with the values according to OpenMP standard.; ///; /// \param D Directive (possibly) with the 'linear' clause.; /// \return true if at least one linear variable is found that should be; /// initialized with the value of the original variable, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:327,Modifiability,variab,variable,327,"/// Emit initial code for linear variables. Creates private copies; /// and initializes them with the values according to OpenMP standard.; ///; /// \param D Directive (possibly) with the 'linear' clause.; /// \return true if at least one linear variable is found that should be; /// initialized with the value of the original variable, false otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:207,Modifiability,variab,variables,207,"/// Emit inner loop of the worksharing/simd construct.; ///; /// \param S Directive, for which the inner loop must be emitted.; /// \param RequiresCleanup true, if directive has some associated private; /// variables.; /// \param LoopCond Bollean condition for loop continuation.; /// \param IncExpr Increment expression for loop control variable.; /// \param BodyGen Generator for the inner body of the inner loop.; /// \param PostIncGen Genrator for post-increment code (required for ordered; /// loop directvies).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:338,Modifiability,variab,variable,338,"/// Emit inner loop of the worksharing/simd construct.; ///; /// \param S Directive, for which the inner loop must be emitted.; /// \param RequiresCleanup true, if directive has some associated private; /// variables.; /// \param LoopCond Bollean condition for loop continuation.; /// \param IncExpr Increment expression for loop control variable.; /// \param BodyGen Generator for the inner body of the inner loop.; /// \param PostIncGen Genrator for post-increment code (required for ordered; /// loop directvies).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:63,Modifiability,variab,variable,63,/// Emits the lvalue for the expression with possibly captured variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Deployability,Update,Update,4,/// Update of LB after a whole chunk has been executed,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:4,Deployability,Update,Update,4,/// Update of UB after a whole chunk has been executed,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:87,Availability,Error,ErrorUnsupported,87,/// EmitUnsupportedRValue - Emit a dummy r-value using the type of E; /// and issue an ErrorUnsupported style diagnostic (using the; /// provided Name).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:87,Availability,Error,ErrorUnsupported,87,/// EmitUnsupportedLValue - Emit a dummy l-value using the type of E and issue; /// an ErrorUnsupported style diagnostic (using the provided Name).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:708,Modifiability,variab,variable,708,"/// EmitLValue - Emit code to compute a designator that specifies the location; /// of the expression.; ///; /// This can return one of two things: a simple address or a bitfield; /// reference. In either case, the LLVM Value* in the LValue structure is; /// guaranteed to be an LLVM pointer type.; ///; /// If this returns a bitfield reference, nothing about the pointee type of; /// the LLVM value is known: For example, it may not be a pointer to an; /// integer.; ///; /// If this returns a normal address, and if the lvalue's C type is fixed; /// size, this method guarantees that the returned pointer type will point to; /// an LLVM type of the same size of the lvalue's type. If the lvalue has a; /// variable length type, this is not possible.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:150,Usability,simpl,simple,150,"/// EmitLValue - Emit code to compute a designator that specifies the location; /// of the expression.; ///; /// This can return one of two things: a simple address or a bitfield; /// reference. In either case, the LLVM Value* in the LValue structure is; /// guaranteed to be an LLVM pointer type.; ///; /// If this returns a bitfield reference, nothing about the pointee type of; /// the LLVM value is known: For example, it may not be a pointer to an; /// integer.; ///; /// If this returns a normal address, and if the lvalue's C type is fixed; /// size, this method guarantees that the returned pointer type will point to; /// an LLVM type of the same size of the lvalue's type. If the lvalue has a; /// variable length type, this is not possible.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:181,Security,access,access,181,/// Same as EmitLValue but additionally we generate checking code to; /// guard against undefined behavior. This is only suitable when we know; /// that the address will be used to access the object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:23,Performance,Load,Load,23,"/// EmitLoadOfScalar - Load a scalar value from an address, taking; /// care to appropriately convert from the memory representation to; /// the LLVM value representation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:23,Performance,Load,Load,23,"/// EmitLoadOfScalar - Load a scalar value from an address, taking; /// care to appropriately convert from the memory representation to; /// the LLVM value representation. The l-value must be a simple; /// l-value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:194,Usability,simpl,simple,194,"/// EmitLoadOfScalar - Load a scalar value from an address, taking; /// care to appropriately convert from the memory representation to; /// the LLVM value representation. The l-value must be a simple; /// l-value.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:194,Usability,simpl,simple,194,"/// EmitStoreOfScalar - Store a scalar value to an address, taking; /// care to appropriately convert from the memory representation to; /// the LLVM value representation. The l-value must be a simple; /// l-value. The isInit flag indicates whether this is an initialization.; /// If so, atomic qualifiers are ignored and the store is always non-atomic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:130,Performance,load,loads,130,"/// EmitLoadOfLValue - Given an expression that represents a value lvalue,; /// this method emits the address of the lvalue, then loads the result as an; /// rvalue, returning the rvalue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:39,Usability,simpl,simple,39,/// Emit an l-value for an assignment (simple or compound) of complex type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:14,Availability,avail,available,14,// Note: only available for agg return types,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:14,Availability,avail,available,14,// Note: only available for agg return types,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:14,Availability,avail,available,14,// Note: only available for agg return types,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:78,Security,access,access,78,/// SVEBuiltinMemEltTy - Returns the memory element type for this memory; /// access builtin. Only required if it can't be inferred from the base; /// pointer operand.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:194,Availability,error,error,194,/// FormSVEBuiltinResult - Returns the struct of scalable vectors as a wider; /// vector. It extracts the scalable vector from the struct and inserts into; /// the wider vector. This avoids the error when allocating space in llvm; /// for struct of scalable vectors if a function returns struct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:49,Performance,scalab,scalable,49,/// FormSVEBuiltinResult - Returns the struct of scalable vectors as a wider; /// vector. It extracts the scalable vector from the struct and inserts into; /// the wider vector. This avoids the error when allocating space in llvm; /// for struct of scalable vectors if a function returns struct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:106,Performance,scalab,scalable,106,/// FormSVEBuiltinResult - Returns the struct of scalable vectors as a wider; /// vector. It extracts the scalable vector from the struct and inserts into; /// the wider vector. This avoids the error when allocating space in llvm; /// for struct of scalable vectors if a function returns struct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:249,Performance,scalab,scalable,249,/// FormSVEBuiltinResult - Returns the struct of scalable vectors as a wider; /// vector. It extracts the scalable vector from the struct and inserts into; /// the wider vector. This avoids the error when allocating space in llvm; /// for struct of scalable vectors if a function returns struct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:183,Safety,avoid,avoids,183,/// FormSVEBuiltinResult - Returns the struct of scalable vectors as a wider; /// vector. It extracts the scalable vector from the struct and inserts into; /// the wider vector. This avoids the error when allocating space in llvm; /// for struct of scalable vectors if a function returns struct.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:24,Performance,Load,Load,24,/// EmitLoadOfComplex - Load a complex number from the specified l-value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:83,Modifiability,variab,variable,83,"/// AddInitializerToStaticVarDecl - Add the initializer for 'D' to the; /// global variable that has already been created for it. If the initializer; /// has a different type than GV does, this may free GV and return a different; /// one. Otherwise it just returns GV.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:69,Modifiability,variab,variable,69,/// EmitCXXGlobalVarDeclInit - Create the initializer for a C++; /// variable with global storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:52,Modifiability,variab,variable,52,"/// Emit code in this function to perform a guarded variable; /// initialization. Guarded initializations are used when it's not; /// possible to prove that an initialization will be done exactly; /// once, e.g. with a static local variable or a static data member; /// of a class template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:232,Modifiability,variab,variable,232,"/// Emit code in this function to perform a guarded variable; /// initialization. Guarded initializations are used when it's not; /// possible to prove that an initialization will be done exactly; /// once, e.g. with a static local variable or a static data member; /// of a class template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:34,Performance,perform,perform,34,"/// Emit code in this function to perform a guarded variable; /// initialization. Guarded initializations are used when it's not; /// possible to prove that an initialization will be done exactly; /// once, e.g. with a static local variable or a static data member; /// of a class template.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:46,Performance,perform,perform,46,/// Emit a branch to select whether or not to perform guarded initialization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:76,Modifiability,variab,variables,76,/// GenerateCXXGlobalInitFunc - Generates code for initializing global; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:78,Modifiability,variab,variables,78,/// GenerateCXXGlobalCleanUpFunc - Generates code for cleaning up global; /// variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:41,Modifiability,variab,variable,41,"/// Emit local annotations for the local variable V, declared by D.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:27,Testability,log,logical-NOT,27,/// Ignore parentheses and logical-NOT to track conditions consistently.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:147,Testability,log,logical,147,/// EmitBranchToCounterBlock - Emit a conditional branch to a new block that; /// increments a profile counter based on the semantics of the given logical; /// operator opcode. This is used to instrument branch condition coverage; /// for logical operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:239,Testability,log,logical,239,/// EmitBranchToCounterBlock - Emit a conditional branch to a new block that; /// increments a profile counter based on the semantics of the given logical; /// operator opcode. This is used to instrument branch condition coverage; /// for logical operators.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:168,Usability,simpl,simplify,168,"/// EmitBranchOnBoolExpr - Emit a branch on a boolean condition (e.g. for an; /// if statement) to the specified blocks. Based on the condition, this might; /// try to simplify the codegen of the conditional based on the branch.; /// TrueCount should be the number of times we expect the condition to; /// evaluate to true based on PGO data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:45,Testability,test,test,45,"/// Given an assignment `*LHS = RHS`, emit a test that checks if \p RHS is; /// nonnull, if \p LHS is marked _Nonnull.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:81,Safety,detect,detect,81,"/// Same as IRBuilder::CreateInBoundsGEP, but additionally emits a check to; /// detect undefined behavior when the pointer overflow sanitizer is enabled.; /// \p SignedIndices indicates whether any of the GEP indices are signed.; /// \p IsSubtraction indicates whether the expression used to form the GEP; /// is a subtraction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:133,Security,sanitiz,sanitizer,133,"/// Same as IRBuilder::CreateInBoundsGEP, but additionally emits a check to; /// detect undefined behavior when the pointer overflow sanitizer is enabled.; /// \p SignedIndices indicates whether any of the GEP indices are signed.; /// \p IsSubtraction indicates whether the expression used to form the GEP; /// is a subtraction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:28,Security,sanitiz,sanitizer,28,/// Specifies which type of sanitizer check to apply when handling a; /// particular builtin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:62,Security,sanitiz,sanitizer,62,"/// Emits an argument for a call to a builtin. If the builtin sanitizer is; /// enabled, a runtime check specified by \p Kind is also emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:84,Security,sanitiz,sanitizer,84,/// Emit a description of a type in a format suitable for passing to; /// a runtime sanitizer handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:73,Security,sanitiz,sanitizer,73,/// Convert a value into a format suitable for passing to a runtime; /// sanitizer handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:95,Security,sanitiz,sanitizer,95,/// Emit a description of a source location in a format suitable for; /// passing to a runtime sanitizer handler.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:11,Testability,stub,stub,11,/// Emit a stub for the cross-DSO CFI check function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:25,Availability,failure,failure,25,/// Emit a cross-DSO CFI failure handling function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:33,Performance,perform,performing,33,"/// EmitDelegateCallArg - We are performing a delegate call; that; /// is, the current function is delegating to another one. Produce; /// a r-value suitable for passing the given parameter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:132,Availability,error,error,132,"/// SetFPAccuracy - Set the minimum required accuracy of the given floating; /// point operation, expressed as the maximum relative error in ulp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:15,Modifiability,extend,extend,15,// Truncate or extend a boolean vector to the requested number of elements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:31,Modifiability,variab,variable,31,/// Set the address of a local variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:3,Integrability,Wrap,Wrapper,3,// Wrapper for function prototype sources. Wraps either a FunctionProtoType or; // an ObjCMethodDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:43,Integrability,Wrap,Wraps,43,// Wrapper for function prototype sources. Wraps either a FunctionProtoType or; // an ObjCMethodDecl.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:807,Modifiability,variab,variable,807,"/// EmitPointerWithAlignment - Given an expression with a pointer type,; /// emit the value and compute our best estimate of the alignment of the; /// pointee.; ///; /// \param BaseInfo - If non-null, this will be initialized with; /// information about the source of the alignment and the may-alias; /// attribute. Note that this function will conservatively fall back on; /// the type when it doesn't recognize the expression and may-alias will; /// be set to false.; ///; /// One reasonable way to use this information is when there's a language; /// guarantee that the pointer must be aligned to some stricter value, and; /// we're simply trying to ensure that sufficiently obvious uses of under-; /// aligned objects don't get miscompiled; for example, a placement new; /// into the address of a local variable. In such a case, it's quite; /// reasonable to just ignore the returned alignment when it isn't from an; /// explicit source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h:636,Usability,simpl,simply,636,"/// EmitPointerWithAlignment - Given an expression with a pointer type,; /// emit the value and compute our best estimate of the alignment of the; /// pointee.; ///; /// \param BaseInfo - If non-null, this will be initialized with; /// information about the source of the alignment and the may-alias; /// attribute. Note that this function will conservatively fall back on; /// the type when it doesn't recognize the expression and may-alias will; /// be set to false.; ///; /// One reasonable way to use this information is when there's a language; /// guarantee that the pointer must be aligned to some stricter value, and; /// we're simply trying to ensure that sufficiently obvious uses of under-; /// aligned objects don't get miscompiled; for example, a placement new; /// into the address of a local variable. In such a case, it's quite; /// reasonable to just ignore the returned alignment when it isn't from an; /// explicit source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenFunction.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:23,Performance,cache,cache,23,// Initialize the type cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:35,Availability,error,errors,35,"// We're checking for profile read errors in CompilerInvocation, so if; // there was an error it should've already been caught. If it hasn't been; // somehow, trip an assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:88,Availability,error,error,88,"// We're checking for profile read errors in CompilerInvocation, so if; // there was an error it should've already been caught. If it hasn't been; // somehow, trip an assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:167,Testability,assert,assertion,167,"// We're checking for profile read errors in CompilerInvocation, so if; // there was an error it should've already been caught. If it hasn't been; // somehow, trip an assertion.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:28,Security,hash,hash,28,// Generate the module name hash here if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:65,Modifiability,variab,variables,65,// Emit a global array containing all external kernels or device variables; // used by host functions and mark it as used for CUDA/HIP. This is necessary; // to get kernels or device variables in archives linked in even if these; // kernels or device variables are only used in host functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:183,Modifiability,variab,variables,183,// Emit a global array containing all external kernels or device variables; // used by host functions and mark it as used for CUDA/HIP. This is necessary; // to get kernels or device variables in archives linked in even if these; // kernels or device variables are only used in host functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:251,Modifiability,variab,variables,251,// Emit a global array containing all external kernels or device variables; // used by host functions and mark it as used for CUDA/HIP. This is necessary; // to get kernels or device variables in archives linked in even if these; // kernels or device variables are only used in host functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:22,Integrability,depend,dependent,22,"// On ELF we pass the dependent library specifiers directly to the linker; // without manipulating them. This is in contrast to other platforms where; // they are mapped to a specific linker option by the compiler. This; // difference is a result of the greater variety of ELF linkers and the fact; // that ELF linkers tend to handle libraries in a more complicated fashion; // than on other platforms. This forces us to defer handling the dependent; // libs to the linker.; //; // CUDA/HIP device and host libraries are different. Currently there is no; // way to differentiate dependent libraries for host or device. Existing; // usage of #pragma comment(lib, *) is intended for host libraries on; // Windows. Therefore emit llvm.dependent-libraries only for host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:440,Integrability,depend,dependent,440,"// On ELF we pass the dependent library specifiers directly to the linker; // without manipulating them. This is in contrast to other platforms where; // they are mapped to a specific linker option by the compiler. This; // difference is a result of the greater variety of ELF linkers and the fact; // that ELF linkers tend to handle libraries in a more complicated fashion; // than on other platforms. This forces us to defer handling the dependent; // libs to the linker.; //; // CUDA/HIP device and host libraries are different. Currently there is no; // way to differentiate dependent libraries for host or device. Existing; // usage of #pragma comment(lib, *) is intended for host libraries on; // Windows. Therefore emit llvm.dependent-libraries only for host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:579,Integrability,depend,dependent,579,"// On ELF we pass the dependent library specifiers directly to the linker; // without manipulating them. This is in contrast to other platforms where; // they are mapped to a specific linker option by the compiler. This; // difference is a result of the greater variety of ELF linkers and the fact; // that ELF linkers tend to handle libraries in a more complicated fashion; // than on other platforms. This forces us to defer handling the dependent; // libs to the linker.; //; // CUDA/HIP device and host libraries are different. Currently there is no; // way to differentiate dependent libraries for host or device. Existing; // usage of #pragma comment(lib, *) is intended for host libraries on; // Windows. Therefore emit llvm.dependent-libraries only for host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:732,Integrability,depend,dependent-libraries,732,"// On ELF we pass the dependent library specifiers directly to the linker; // without manipulating them. This is in contrast to other platforms where; // they are mapped to a specific linker option by the compiler. This; // difference is a result of the greater variety of ELF linkers and the fact; // that ELF linkers tend to handle libraries in a more complicated fashion; // than on other platforms. This forces us to defer handling the dependent; // libs to the linker.; //; // CUDA/HIP device and host libraries are different. Currently there is no; // way to differentiate dependent libraries for host or device. Existing; // usage of #pragma comment(lib, *) is intended for host libraries on; // Windows. Therefore emit llvm.dependent-libraries only for host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:19,Performance,optimiz,optimization,19,// Require various optimization to respect semantic interposition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:48,Security,integrity,integrity,48,// Indicate that we want cross-DSO control flow integrity checks.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:165,Performance,optimiz,optimizer,165,"// Indicate whether VFE was enabled for this module, so that the; // vcall_visibility metadata added under whole program vtables is handled; // appropriately in the optimizer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:16,Deployability,patch,patchable-function-prefix,16,// KCFI assumes patchable-function-prefix is the same for all indirectly; // called functions. Store the expected offset for code generation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:313,Modifiability,variab,variable,313,"// Add module metadata for return address signing (ignoring; // non-leaf/all) and stack tagging. These are actually turned on by function; // attributes, but we use module metadata to emit build attributes. This is; // needed for LTO, where the function attributes are inside bitcode; // serialised into a global variable by the time build attributes are; // emitted, so we can't access them. LTO objects could be compiled with; // different flags therefore module flags are set to ""Min"" behavior to achieve; // the same end result of the normal build where e.g BTI is off if any object; // doesn't support it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:380,Security,access,access,380,"// Add module metadata for return address signing (ignoring; // non-leaf/all) and stack tagging. These are actually turned on by function; // attributes, but we use module metadata to emit build attributes. This is; // needed for LTO, where the function attributes are inside bitcode; // serialised into a global variable by the time build attributes are; // emitted, so we can't access them. LTO objects could be compiled with; // different flags therefore module flags are set to ""Min"" behavior to achieve; // the same end result of the normal build where e.g BTI is off if any object; // doesn't support it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:45,Modifiability,config,configured,45,"// Indicate whether __nvvm_reflect should be configured to flush denormal; // floating point values to 0. (This corresponds to its ""__CUDA_FTZ""; // property.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:80,Security,access,access,80,"// As CUDA builtin surface/texture types are replaced, skip generating TBAA; // access info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:4,Availability,Error,ErrorUnsupported,4,/// ErrorUnsupported - Print out an error that codegen doesn't support the; /// specified stmt yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:36,Availability,error,error,36,/// ErrorUnsupported - Print out an error that codegen doesn't support the; /// specified stmt yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:4,Availability,Error,ErrorUnsupported,4,/// ErrorUnsupported - Print out an error that codegen doesn't support the; /// specified decl yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:36,Availability,error,error,36,/// ErrorUnsupported - Print out an error that codegen doesn't support the; /// specified decl yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:25,Modifiability,variab,variables,25,// OpenMP declare target variables must be visible to the host so they can; // be registered. We require protected visibility unless the variable has; // the DT_nohost modifier and does not need to be registered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:137,Modifiability,variab,variable,137,// OpenMP declare target variables must be visible to the host so they can; // be registered. We require protected visibility unless the variable has; // the DT_nohost modifier and does not need to be registered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:308,Integrability,interface,interface,308,"// In MinGW, variables without DLLImport can still be automatically; // imported from a DLL by the linker; don't mark variables that; // potentially could come from another DLL as DSO local.; // With EmulatedTLS, TLS variables can be autoimported from other DLLs; // (and this actually happens in the public interface of libstdc++), so; // such variables can't be marked as DSO local. (Native TLS variables; // can't be dllimported at all, though.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:13,Modifiability,variab,variables,13,"// In MinGW, variables without DLLImport can still be automatically; // imported from a DLL by the linker; don't mark variables that; // potentially could come from another DLL as DSO local.; // With EmulatedTLS, TLS variables can be autoimported from other DLLs; // (and this actually happens in the public interface of libstdc++), so; // such variables can't be marked as DSO local. (Native TLS variables; // can't be dllimported at all, though.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:118,Modifiability,variab,variables,118,"// In MinGW, variables without DLLImport can still be automatically; // imported from a DLL by the linker; don't mark variables that; // potentially could come from another DLL as DSO local.; // With EmulatedTLS, TLS variables can be autoimported from other DLLs; // (and this actually happens in the public interface of libstdc++), so; // such variables can't be marked as DSO local. (Native TLS variables; // can't be dllimported at all, though.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:217,Modifiability,variab,variables,217,"// In MinGW, variables without DLLImport can still be automatically; // imported from a DLL by the linker; don't mark variables that; // potentially could come from another DLL as DSO local.; // With EmulatedTLS, TLS variables can be autoimported from other DLLs; // (and this actually happens in the public interface of libstdc++), so; // such variables can't be marked as DSO local. (Native TLS variables; // can't be dllimported at all, though.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:345,Modifiability,variab,variables,345,"// In MinGW, variables without DLLImport can still be automatically; // imported from a DLL by the linker; don't mark variables that; // potentially could come from another DLL as DSO local.; // With EmulatedTLS, TLS variables can be autoimported from other DLLs; // (and this actually happens in the public interface of libstdc++), so; // such variables can't be marked as DSO local. (Native TLS variables; // can't be dllimported at all, though.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:397,Modifiability,variab,variables,397,"// In MinGW, variables without DLLImport can still be automatically; // imported from a DLL by the linker; don't mark variables that; // potentially could come from another DLL as DSO local.; // With EmulatedTLS, TLS variables can be autoimported from other DLLs; // (and this actually happens in the public interface of libstdc++), so; // such variables can't be marked as DSO local. (Native TLS variables; // can't be dllimported at all, though.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:288,Modifiability,variab,variables,288,// Every other GV is local on COFF.; // Make an exception for windows OS in the triple: Some firmware builds use; // *-win32-macho triples. This (accidentally?) produced windows relocations; // without GOT tables in older clang versions; Keep this behaviour.; // FIXME: even thread local variables?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:267,Safety,avoid,avoid,267,"// On ELF, if -fno-semantic-interposition is specified and the target; // supports local aliases, there will be neither CC1; // -fsemantic-interposition nor -fhalf-no-semantic-interposition. Set; // dso_local on the function if using a local alias is preferable (can avoid; // PLT indirection).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:163,Integrability,depend,depended,163,"// Most PIC code sequences that assume that a symbol is local cannot produce a; // 0 if it turns out the symbol is undefined. While this is ABI and relocation; // depended, it seems worth it to handle it here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:40,Safety,avoid,avoid,40,// PowerPC64 prefers TOC indirection to avoid copy relocations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:99,Modifiability,variab,variables,99,"// If -fdirect-access-external-data (default for -fno-pic), set dso_local; // for non-thread-local variables. If the symbol is not defined in the; // executable, a copy relocation will be needed at link time. dso_local is; // excluded for thread-local variables because they generally don't support; // copy relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:252,Modifiability,variab,variables,252,"// If -fdirect-access-external-data (default for -fno-pic), set dso_local; // for non-thread-local variables. If the symbol is not defined in the; // executable, a copy relocation will be needed at link time. dso_local is; // excluded for thread-local variables because they generally don't support; // copy relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:15,Security,access,access-external-data,15,"// If -fdirect-access-external-data (default for -fno-pic), set dso_local; // for non-thread-local variables. If the symbol is not defined in the; // executable, a copy relocation will be needed at link time. dso_local is; // excluded for thread-local variables because they generally don't support; // copy relocations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:280,Safety,avoid,avoid,280,"// -fno-pic sets dso_local on a function declaration to allow direct; // accesses when taking its address (similar to a data symbol). If the; // function is not defined in the executable, a canonical PLT entry will be; // needed at link time. -fno-direct-access-external-data can avoid the; // canonical PLT entry. We don't generalize this condition to -fpie/-fpic as; // it could just cause trouble without providing perceptible benefits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:73,Security,access,accesses,73,"// -fno-pic sets dso_local on a function declaration to allow direct; // accesses when taking its address (similar to a data symbol). If the; // function is not defined in the executable, a canonical PLT entry will be; // needed at link time. -fno-direct-access-external-data can avoid the; // canonical PLT entry. We don't generalize this condition to -fpie/-fpic as; // it could just cause trouble without providing perceptible benefits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:255,Security,access,access-external-data,255,"// -fno-pic sets dso_local on a function declaration to allow direct; // accesses when taking its address (similar to a data symbol). If the; // function is not defined in the executable, a canonical PLT entry will be; // needed at link time. -fno-direct-access-external-data can avoid the; // canonical PLT entry. We don't generalize this condition to -fpie/-fpic as; // it could just cause trouble without providing perceptible benefits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:28,Security,hash,hash,28,"// Check if the module name hash should be appended for internal linkage; // symbols. This should come before multi-version target suffixes are; // appended. This is to keep the name and module hash suffix of the; // internal linkage function together. The unique suffix should only be; // added when name mangling is done to make sure that the final name can; // be properly demangled. For example, for C functions without prototypes,; // name mangling is not done and the unique suffix should not be appeneded; // then.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:194,Security,hash,hash,194,"// Check if the module name hash should be appended for internal linkage; // symbols. This should come before multi-version target suffixes are; // appended. This is to keep the name and module hash suffix of the; // internal linkage function together. The unique suffix should only be; // added when name mangling is done to make sure that the final name can; // be properly demangled. For example, for C functions without prototypes,; // name mangling is not done and the unique suffix should not be appeneded; // then.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:54,Modifiability,variab,variable,54,// Make unique name for device side static file-scope variable for HIP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:132,Deployability,update,updated,132,// OtherFD is the version of this function that was mangled BEFORE; // becoming a MultiVersion function. It potentially needs to be updated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:97,Deployability,update,update,97,"// This is so that if the initial version was already the 'default'; // version, we don't try to update it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:62,Deployability,update,update,62,"// If this is the current decl is being created, make sure we update the name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:99,Integrability,depend,depends,99,"// In CUDA/HIP device compilation with -fgpu-rdc, the mangled name of a; // static device variable depends on whether the variable is referenced by; // a host or device host function. Therefore the mangled name cannot be; // cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:90,Modifiability,variab,variable,90,"// In CUDA/HIP device compilation with -fgpu-rdc, the mangled name of a; // static device variable depends on whether the variable is referenced by; // a host or device host function. Therefore the mangled name cannot be; // cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:122,Modifiability,variab,variable,122,"// In CUDA/HIP device compilation with -fgpu-rdc, the mangled name of a; // static device variable depends on whether the variable is referenced by; // a host or device host function. Therefore the mangled name cannot be; // cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:225,Performance,cache,cached,225,"// In CUDA/HIP device compilation with -fgpu-rdc, the mangled name of a; // static device variable depends on whether the variable is referenced by; // a host or device host function. Therefore the mangled name cannot be; // cached.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:269,Testability,stub,stubbing,269,"// Ensure either we have different ABIs between host and device compilations,; // says host compilation following MSVC ABI but device compilation follows; // Itanium C++ ABI or, if they follow the same ABI, kernel names after; // mangling should be the same after name stubbing. The later checking is; // very important as the device kernel name being mangled in host-compilation; // is used to resolve the device binaries to be executed. Inconsistent naming; // result in undefined behavior. Even though we cannot check that naming; // directly between host- and device-compilations, the host- and; // device-mangling in host compilation could help catching certain ones.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:84,Modifiability,variab,variables,84,// The LTO linker doesn't seem to like it when we set an alignment; // on appending variables. Take it off as a workaround.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:29,Security,access,access,29,"// ""+ 1"" for the space after access qualifier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:34,Security,access,access,34,// MDNode for the kernel argument access qualifiers (images only).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:22,Security,access,access,22,// Get image and pipe access qualifier:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:10,Security,access,access,10,"// Remove access qualifiers on images; // (as they are inseparable from type in clang implementation,; // but OpenCL spec provides a special query to get access qualifier; // via clGetKernelArgInfo with CL_KERNEL_ARG_ACCESS_QUALIFIER):",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:154,Security,access,access,154,"// Remove access qualifiers on images; // (as they are inseparable from type in clang implementation,; // but OpenCL spec provides a special query to get access qualifier; // via clGetKernelArgInfo with CL_KERNEL_ARG_ACCESS_QUALIFIER):",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:40,Integrability,depend,depends,40,"// If ObjC exceptions are enabled, this depends on the ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:99,Performance,optimiz,optimization,99,"// Track whether we need to add the optnone LLVM attribute,; // starting with the default for this optimization level.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:3,Performance,Optimiz,OptimizeNone,3,// OptimizeNone implies noinline; we should not be inlining such functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:3,Performance,Optimiz,OptimizeNone,3,// OptimizeNone wins over OptimizeForSize and MinSize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:26,Performance,Optimiz,OptimizeForSize,26,// OptimizeNone wins over OptimizeForSize and MinSize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:13,Performance,optimiz,optimization,13,// Add other optimization related attributes if we are optimizing this; // function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:55,Performance,optimiz,optimizing,55,// Add other optimization related attributes if we are optimizing this; // function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:13,Performance,tune,tune,13,// Clear the tune CPU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:3,Usability,Clear,Clear,3,// Clear the tune CPU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:36,Performance,tune,tune-cpu,36,// Apply the given CPU name as the 'tune-cpu' so that the optimizer can; // favor this processor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:58,Performance,optimiz,optimizer,58,// Apply the given CPU name as the 'tune-cpu' so that the optimizer can; // favor this processor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:10,Security,hash,hash-based,10,// Emit a hash-based bit set entry for cross-DSO calls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:107,Safety,safe,safe,107,"// KCFI type identifier constants are only necessary for external assembly; // functions, which means it's safe to skip unusual names. Subset of; // MCAsmInfo::isAcceptableChar() and MCAsmInfoXCOFF::isAcceptableChar().",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:76,Integrability,depend,depends,76,"/// Add link options implied by the given module, including modules; /// it depends on, using a postorder walk.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:24,Integrability,depend,dependencies,24,// Import this module's dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:31,Modifiability,variab,variables,31,// Emit CUDA/HIP static device variables referenced by host code only.; // Note we should not clear CUDADeviceVarODRUsedByHost since it is still; // needed for further handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:94,Usability,clear,clear,94,// Emit CUDA/HIP static device variables referenced by host code only.; // Note we should not clear CUDADeviceVarODRUsedByHost since it is still; // needed for further handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:59,Energy Efficiency,schedul,schedules,59,"// Grab the list of decls to emit. If EmitGlobalDefinition schedules more; // work, it will not interfere with this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:144,Performance,queue,queue,144,"// Check to see if we've already emitted this. This is necessary; // for a couple of reasons: first, decls can end up in the; // deferred-decls queue multiple times, and second, decls can end; // up with definitions in unusual ways (e.g. by an extern inline; // function acquiring a strong function redefinition). Just; // ignore these cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:201,Testability,test,testing,201,"// If we found out that we need to emit more decls, do that recursively.; // This has the advantage that the decls are emitted in a DFS and related; // ones are close together, which is convenient for testing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:23,Modifiability,variab,variable,23,// Create a new global variable for the ConstantStruct in the Module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:9,Availability,down,down,9,"// Drill down the array types: if global variable of a fixed type is; // not sanitized, we also don't instrument arrays of them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:41,Modifiability,variab,variable,41,"// Drill down the array types: if global variable of a fixed type is; // not sanitized, we also don't instrument arrays of them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:77,Security,sanitiz,sanitized,77,"// Drill down the array types: if global variable of a fixed type is; // not sanitized, we also don't instrument arrays of them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:17,Modifiability,variab,variables,17,"// In OpenMP 5.0 variables and function may be marked as; // device_type(host/nohost) and we should not emit them eagerly unless we sure; // that they must be emitted on the host/device. To be sure we need to have; // seen a declare target with an explicit mentioning of the function, we know; // we have if the level of the declare target attribute is -1. Note that we; // check somewhere else if we should emit this at all.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:100,Modifiability,variab,variables,100,"// If OpenMP is enabled and threadprivates must be generated like TLS, delay; // codegen for global variables, because they may be marked as threadprivate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:70,Modifiability,variab,variables,70,// We need to emit host-side 'shadows' for all global; // device-side variables because the CUDA runtime needs their; // size and host-side address in order to provide access to; // their device-side incarnations.; // So device-only functions are the only things we skip.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:168,Security,access,access,168,// We need to emit host-side 'shadows' for all global; // device-side variables because the CUDA runtime needs their; // size and host-side address in order to provide access to; // their device-side incarnations.; // So device-only functions are the only things we skip.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:3,Deployability,Update,Update,3,// Update deferred annotations with the latest declaration if the function; // function was already used or defined.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:58,Modifiability,variab,variable,58,// Emit declaration of the must-be-emitted declare target variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:11,Modifiability,variab,variable,11,// If this variable has external storage and doesn't require special; // link handling we defer to its canonical definition.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:49,Modifiability,variab,variable,49,"// If this declaration may have caused an inline variable definition to; // change linkage, make sure that it's emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:177,Performance,cache,cache,177,"// Defer code generation to first use when possible, e.g. if this is an inline; // function. If the global must always be emitted, do it eagerly if possible; // to benefit from cache locality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:40,Modifiability,variab,variable,40,"// If we're deferring emission of a C++ variable with an; // initializer, remember the order in which it appeared in the file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:18,Modifiability,variab,variable,18,// A thread-local variable cannot be imported.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:5,Modifiability,variab,variable,5,// A variable definition might imply a destructor call.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:54,Safety,safe,safe,54,// Call through a pointer to member function. This is safe to inline.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:29,Safety,safe,safe,29,// Check whether it would be safe to inline this dllimport function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:64,Availability,avail,available,64,"// PR9614. Avoid cases where the source code is lying to us. An available; // externally function should have an equivalent function somewhere else,; // but a function that calls itself through asm label/`__builtin_` trickery is; // clearly not equivalent to the real implementation.; // This happens in glibc's btowc and in some configure checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:330,Modifiability,config,configure,330,"// PR9614. Avoid cases where the source code is lying to us. An available; // externally function should have an equivalent function somewhere else,; // but a function that calls itself through asm label/`__builtin_` trickery is; // clearly not equivalent to the real implementation.; // This happens in glibc's btowc and in some configure checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:11,Safety,Avoid,Avoid,11,"// PR9614. Avoid cases where the source code is lying to us. An available; // externally function should have an equivalent function somewhere else,; // but a function that calls itself through asm label/`__builtin_` trickery is; // clearly not equivalent to the real implementation.; // This happens in glibc's btowc and in some configure checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:233,Usability,clear,clearly,233,"// PR9614. Avoid cases where the source code is lying to us. An available; // externally function should have an equivalent function somewhere else,; // but a function that calls itself through asm label/`__builtin_` trickery is; // clearly not equivalent to the real implementation.; // This happens in glibc's btowc and in some configure checks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:75,Availability,error,error,75,"// If there are two attempts to define the same mangled name, issue an; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:109,Availability,error,error,109,// Check that GD is not yet in DiagnosedConflictingDefinitions is required; // to make sure that we issue an error only once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:80,Deployability,update,updated,80,// Store the declaration associated with this function so it is potentially; // updated by further declarations or definitions and emitted at the end.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:347,Performance,optimiz,optimizer,347,"// This might be an implementation of a function without a prototype, in; // which case, try to do special replacement of calls which match the new; // prototype. The really key thing here is that we also potentially drop; // arguments from the call site so as to make a direct call, which makes the; // inliner happier and suppresses a number of optimizer warnings (!) about; // dropping arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:40,Testability,stub,stub,40,// Returns kernel handle for HIP kernel stub function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:280,Availability,error,errors,280,"// In Windows Itanium environments, try to mark runtime functions; // dllimport. For Mingw and MSVC, don't. We don't really know if the user; // will link their standard library statically or dynamically. Marking; // functions imported when they are not imported can cause linker errors; // and warnings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:577,Modifiability,variab,variable,577,"/// GetOrCreateLLVMGlobal - If the specified mangled name is not in the module,; /// create and return an llvm GlobalVariable with the specified type and address; /// space. If there is something in the module with the specified name, return; /// it potentially bitcasted to the right type.; ///; /// If D is non-null, it specifies a decl that correspond to this. This is used; /// to set the attributes on the global when it is first created.; ///; /// If IsForDefinition is true, it is guaranteed that an actual global with; /// type Ty will be returned, not conversion of a variable with the same; /// mangled name but some other type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:75,Availability,error,error,75,"// If there are two attempts to define the same mangled name, issue an; // error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:108,Availability,error,error,108,// Check that D is not yet in DiagnosedConflictingDefinitions is required; // to make sure that we issue an error only once.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:30,Usability,simpl,simple,30,// FIXME: This code is overly simple and should be merged with other global; // handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:39,Modifiability,variab,variables,39,// Emit section information for extern variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:149,Performance,optimiz,optimizer,149,"// Check if we a have a const declaration with an initializer, we may be; // able to emit it as available_externally to expose it's value to the; // optimizer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:120,Security,expose,expose,120,"// Check if we a have a const declaration with an initializer, we may be; // able to emit it as available_externally to expose it's value to the; // optimizer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:24,Modifiability,variab,variables,24,// External HIP managed variables needed to be recorded for transformation; // in both device and host compilations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:16,Modifiability,variab,variable,16,// Check if the variable has the right type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:16,Modifiability,variab,variable,16,// Create a new variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:34,Modifiability,variab,variable,34,// Replace occurrences of the old variable if needed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:92,Modifiability,variab,variable,92,"/// GetAddrOfGlobalVar - Return the llvm::Constant for the address of the; /// given global variable. If Ty is non-null and if the global doesn't exist,; /// then it will be created with the specified type instead of whatever the; /// normal requested type would be. If IsForDefinition is true, it is guaranteed; /// that an actual global with type Ty will be returned, not conversion of a; /// variable with the same mangled name but some other type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:395,Modifiability,variab,variable,395,"/// GetAddrOfGlobalVar - Return the llvm::Constant for the address of the; /// given global variable. If Ty is non-null and if the global doesn't exist,; /// then it will be created with the specified type instead of whatever the; /// normal requested type would be. If IsForDefinition is true, it is guaranteed; /// that an actual global with type Ty will be returned, not conversion of a; /// variable with the same mangled name but some other type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:56,Modifiability,variab,variable,56,/// CreateRuntimeVariable - Create a new runtime global variable with the; /// specified type and name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:43,Modifiability,variab,variable,43,"// If we have not seen a reference to this variable yet, place it into the; // deferred declarations table to be emitted if needed later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:273,Modifiability,variab,variables,273,"// In address space agnostic languages, string literals are in default address; // space in AST. However, certain targets (e.g. amdgcn) request them to be; // emitted in constant address space in LLVM IR. To be consistent with other; // parts of AST, string literal global variables in constant address space; // need to be casted to default address space before being put into address; // map and referenced by other part of CodeGen.; // In OpenCL, string literals are in constant address space in AST, therefore; // they should not be casted to default address space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:17,Modifiability,variab,variables,17,"// OpenCL global variables of sampler type are translated to function calls,; // therefore no need to be translated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:45,Availability,avail,available,45,"// Whether the definition of the variable is available externally.; // If yes, we shouldn't emit the GloablCtor and GlobalDtor for the variable; // since this is the job for its original source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:33,Modifiability,variab,variable,33,"// Whether the definition of the variable is available externally.; // If yes, we shouldn't emit the GloablCtor and GlobalDtor for the variable; // since this is the job for its original source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:135,Modifiability,variab,variable,135,"// Whether the definition of the variable is available externally.; // If yes, we shouldn't emit the GloablCtor and GlobalDtor for the variable; // since this is the job for its original source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:136,Availability,error,error,136,"// CUDA E.2.4.1 ""__shared__ variables cannot have an initialization; // as part of their declaration."" Sema has already checked for; // error cases, so we just need to set Init to UndefValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:28,Modifiability,variab,variables,28,"// CUDA E.2.4.1 ""__shared__ variables cannot have an initialization; // as part of their declaration."" Sema has already checked for; // error cases, so we just need to set Init to UndefValue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:45,Modifiability,variab,variables,45,// Shadows of initialized device-side global variables are also left; // undefined.; // Managed Variables should be initialized on both host side and device side.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:96,Modifiability,Variab,Variables,96,// Shadows of initialized device-side global variables are also left; // undefined.; // Managed Variables should be initialized on both host side and device side.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:108,Deployability,update,update,108,"// We have a definition after a declaration with the wrong type.; // We must make a new GlobalVariable* and update everything that used OldGV; // (a declaration or tentative definition) with the new GlobalVariable*; // (which will be a definition).; //; // This happens if there is a prototype for a global (e.g.; // ""extern int x[];"") and then a definition of a different type (e.g.; // ""int x[10];""). This also happens when an initializer has a different type; // from the type of the global (this happens with unions).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:51,Modifiability,variab,variable,51,"// CUDA B.2.1 ""The __device__ qualifier declares a variable that resides on; // the device. [...]""; // CUDA B.2.2 ""The __constant__ qualifier, optionally used together with; // __device__, declares a variable that: [...]; // Is accessible from all the threads within the grid and from the host; // through the runtime library (cudaGetSymbolAddress() / cudaGetSymbolSize(); // / cudaMemcpyToSymbol() / cudaMemcpyFromSymbol()).""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:200,Modifiability,variab,variable,200,"// CUDA B.2.1 ""The __device__ qualifier declares a variable that resides on; // the device. [...]""; // CUDA B.2.2 ""The __constant__ qualifier, optionally used together with; // __device__, declares a variable that: [...]; // Is accessible from all the threads within the grid and from the host; // through the runtime library (cudaGetSymbolAddress() / cudaGetSymbolSize(); // / cudaMemcpyToSymbol() / cudaMemcpyFromSymbol()).""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:228,Security,access,accessible,228,"// CUDA B.2.1 ""The __device__ qualifier declares a variable that resides on; // the device. [...]""; // CUDA B.2.2 ""The __constant__ qualifier, optionally used together with; // __device__, declares a variable that: [...]; // Is accessible from all the threads within the grid and from the host; // through the runtime library (cudaGetSymbolAddress() / cudaGetSymbolSize(); // / cudaMemcpyToSymbol() / cudaMemcpyFromSymbol()).""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:12,Safety,safe,safe,12,"// If it is safe to mark the global 'constant', do so now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:43,Energy Efficiency,allocate,allocate,43,// Check for alignment specifed in an 'omp allocate' directive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:65,Integrability,wrap,wrapper,65,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:225,Integrability,wrap,wrapper,225,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:346,Integrability,wrap,wrapper,346,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:531,Integrability,wrap,wrapper,531,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:116,Modifiability,variab,variable,116,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:296,Modifiability,variab,variable,296,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:427,Modifiability,variab,variable,427,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:609,Modifiability,variab,variable,609,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:172,Security,access,accesses,172,"// On Darwin, unlike other Itanium C++ ABI platforms, the thread-wrapper; // function is only defined alongside the variable, not also alongside; // callers. Normally, all accesses to a thread_local go through the; // thread-wrapper in order to ensure initialization has occurred, underlying; // variable will never be used other than the thread-wrapper, so it can be; // converted to internal linkage.; //; // However, if the variable has the 'constinit' attribute, it _can_ be; // referenced directly, without calling the thread-wrapper, so the linkage; // must not be changed.; //; // Additionally, if the variable isn't plain external linkage, e.g. if it's; // weak or linkonce, the de-duplication semantics are important to preserve,; // so we don't change the linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:34,Modifiability,variab,variables,34,// Tentative definition of global variables may be initialized with; // non-zero null pointers. In this case they should have weak linkage; // since common linkage must have zero initializer and must not have; // explicit section therefore cannot have non-zero initial value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:15,Modifiability,variab,variable,15,// Emit global variable debug information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:14,Modifiability,variab,variables,14,// Don't give variables common linkage if -fno-common was specified unless it; // was overridden by a NoCommon attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:5,Modifiability,variab,variable,5,// A variable cannot be both common and exist in a section.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:5,Modifiability,variab,variable,5,"// A variable cannot be both common and exist in a section.; // We don't try to determine which is the right section in the front-end.; // If no specialized section name is applicable, it will resort to default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:5,Modifiability,variab,variable,5,// A variable cannot be both common and exist in a comdat.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:224,Energy Efficiency,power,power-of-two,224,"// Microsoft's link.exe doesn't support alignments greater than 32 bytes for; // common symbols, so symbols with greater alignment requirements cannot be; // common.; // Other COFF linkers (ld.bfd and LLD) support arbitrary power-of-two; // alignments for common symbols via the aligncomm directive, so this; // restriction only applies to MSVC environments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:617,Integrability,depend,dependable,617,"// Note that Apple's kernel linker doesn't support symbol; // coalescing, so we need to avoid linkonce and weak linkages there.; // Normally, this means we just map to internal, but for explicit; // instantiations we'll map to external.; // In C++, the compiler has to emit a definition in every translation unit; // that references the function. We should use linkonce_odr because; // a) if all references in this translation unit are optimized away, we; // don't need to codegen it. b) if the function persists, it needs to be; // merged with other definitions. c) C++ has the ODR, so we know the; // definition is dependable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:436,Performance,optimiz,optimized,436,"// Note that Apple's kernel linker doesn't support symbol; // coalescing, so we need to avoid linkonce and weak linkages there.; // Normally, this means we just map to internal, but for explicit; // instantiations we'll map to external.; // In C++, the compiler has to emit a definition in every translation unit; // that references the function. We should use linkonce_odr because; // a) if all references in this translation unit are optimized away, we; // don't need to codegen it. b) if the function persists, it needs to be; // merged with other definitions. c) C++ has the ODR, so we know the; // definition is dependable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:88,Safety,avoid,avoid,88,"// Note that Apple's kernel linker doesn't support symbol; // coalescing, so we need to avoid linkonce and weak linkages there.; // Normally, this means we just map to internal, but for explicit; // instantiations we'll map to external.; // In C++, the compiler has to emit a definition in every translation unit; // that references the function. We should use linkonce_odr because; // a) if all references in this translation unit are optimized away, we; // don't need to codegen it. b) if the function persists, it needs to be; // merged with other definitions. c) C++ has the ODR, so we know the; // definition is dependable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:416,Performance,perform,perform,416,"// An explicit instantiation of a template has weak linkage, since; // explicit instantiations can occur in multiple translation units; // and must all be equivalent. However, we are not allowed to; // throw away these explicit instantiations.; //; // CUDA/HIP: For -fno-gpu-rdc case, device code is limited to one TU,; // so say that CUDA templates are either external (for kernels) or internal.; // This lets llvm perform aggressive inter-procedural optimizations. For; // -fgpu-rdc case, device function calls across multiple TU's are allowed,; // therefore we need to follow the normal linkage paradigm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:452,Performance,optimiz,optimizations,452,"// An explicit instantiation of a template has weak linkage, since; // explicit instantiations can occur in multiple translation units; // and must all be equivalent. However, we are not allowed to; // throw away these explicit instantiations.; //; // CUDA/HIP: For -fno-gpu-rdc case, device code is limited to one TU,; // so say that CUDA templates are either external (for kernels) or internal.; // This lets llvm perform aggressive inter-procedural optimizations. For; // -fgpu-rdc case, device function calls across multiple TU's are allowed,; // therefore we need to follow the normal linkage paradigm.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:87,Performance,optimiz,optimizes,87,"// selectany symbols are externally visible, so use weak instead of; // linkonce. MSVC optimizes away references to const selectany globals, so; // all definitions should be the same and ODR linkage should be used.; // http://msdn.microsoft.com/en-us/library/5tkz6s71.aspx",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:169,Availability,down,down,169,// We need to set linkage and visibility on the function before; // generating code for it because various parts of IR generation; // want to propagate this information down (e.g. to local static; // declarations).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:18,Availability,redundant,redundant,18,// FIXME: this is redundant with part of setFunctionDefinitionAttributes,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:18,Safety,redund,redundant,18,// FIXME: this is redundant with part of setFunctionDefinitionAttributes,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:112,Safety,safe,safe,112,"// If there is a definition in the module, then it wins over the alias.; // This is dubious, but allow it to be safe. Just ignore the alias.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:132,Modifiability,variab,variable,132,// Set attributes which are particular to an alias; this is a; // specialization of the attributes which may be set on a global; // variable/function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:13,Availability,error,error,13,// Report an error if some definition overrides ifunc.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:115,Testability,test,test,115,"// If there is a declaration in the module, then we had an extern followed; // by the ifunc, as in:; // extern int test();; // ...; // int test() __attribute__((ifunc(""resolver"")));; //; // Remove it and replace uses of it with the ifunc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:139,Testability,test,test,139,"// If there is a declaration in the module, then we had an extern followed; // by the ifunc, as in:; // extern int test();; // ...; // int test() __attribute__((ifunc(""resolver"")));; //; // Remove it and replace uses of it with the ifunc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:13,Usability,simpl,simple,13,// Check for simple case.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:43,Safety,avoid,avoid,43,"// FIXME: We set the section explicitly to avoid a bug in ld64 224.1.; // Without it LLVM can merge the string with a non unnamed_addr one during; // LTO. Doing that changes the section it ends in, which surprises ld64.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:57,Safety,safe,safe,57,// Make sure the literal ends up in .rodata to allow for safe ICF and for; // the static linker to adjust permissions to read-only later on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:19,Modifiability,variab,variable,19,// Create a global variable for this string,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:19,Modifiability,variab,variable,19,// Create a global variable for this.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:47,Modifiability,extend,extends,47,"// FIXME: If an externally-visible declaration extends multiple temporaries,; // we need to give each temporary the same name in every translation unit (and; // we also need to make the temporaries externally-visible).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:29,Modifiability,extend,extending,29,"// If the initializer of the extending declaration is a constant; // initializer, we should have a cached constant initializer for this; // temporary. Note that this might have a different value from the value; // computed by evaluating the initializer if the surrounding constant; // expression modifies the temporary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:99,Performance,cache,cached,99,"// If the initializer of the extending declaration is a constant; // initializer, we should have a cached constant initializer for this; // temporary. Note that this might have a different value from the value; // computed by evaluating the initializer if the surrounding constant; // expression modifies the temporary.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:100,Performance,perform,performed,100,"// No initializer, the initialization will be provided when we; // initialize the declaration which performed lifetime extension.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:19,Modifiability,variab,variable,19,// Create a global variable for this lifetime-extended temporary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:46,Modifiability,extend,extended,46,// Create a global variable for this lifetime-extended temporary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:3,Deployability,Update,Update,3,"// Update the map with the new temporary. If we created a placeholder above,; // replace it with the new global now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:10,Integrability,depend,dependent,10,// Ignore dependent declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:96,Modifiability,variab,variable,96,// Indirect fields from global anonymous structs and unions can be; // ignored; only the actual variable requires IR gen support.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:15,Modifiability,variab,variable,15,// Emit global variable debug information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:32,Safety,avoid,avoid,32,"// We call takeVector() here to avoid use-after-free.; // FIXME: DeferredEmptyCoverageMappingDecls is getting mutated because; // we deserialize function bodies to emit coverage info for them, and that; // deserializes more declarations. How should we handle that case?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:136,Safety,detect,detect,136,"// In order to transition away from ""__original_main"" gracefully, emit an; // alias for ""main"" in the no-argument case so that libc can detect when; // new-style no-argument main is in used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:43,Modifiability,variab,variables,43,/// Emits metadata nodes for all the local variables in the current; /// function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:26,Testability,log,logic,26,"// FIXME: This duplicates logic in ASTContext::getTypeAlignIfKnown. But; // that doesn't return the information we need to compute BaseInfo.; // Honor alignment typedef attributes even on incomplete types.; // We also honor them straight for C++ class types, even as pointees;; // there's an expressivity gap here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:33,Testability,log,logic,33,"// We could try to replicate the logic from; // ASTContext::getTypeAlignIfKnown, but nothing uses the alignment if the; // type is incomplete, so it's impossible to test. We could try to reuse; // getTypeAlignIfKnown, but that doesn't return the information we need; // to set BaseInfo. So just ignore the possibility that the alignment is; // greater than one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:165,Testability,test,test,165,"// We could try to replicate the logic from; // ASTContext::getTypeAlignIfKnown, but nothing uses the alignment if the; // type is incomplete, so it's impossible to test. We could try to reuse; // getTypeAlignIfKnown, but that doesn't return the information we need; // to set BaseInfo. So just ignore the possibility that the alignment is; // greater than one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp:11,Security,hash,hash,11,// Get the hash of the user defined macros.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:45,Modifiability,variab,variable,45,/// A pair of helper functions for a __block variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:62,Integrability,depend,depends,62,"// This should not be moved earlier, since its initialization depends on some; // of the previous reference members being already initialized and also checks; // if TheTargetCodeGenInfo is NULL",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:4,Modifiability,Variab,Variables,4,"/// Variables for which we've emitted globals containing their constant; /// values along with the corresponding globals, for opportunistic reuse.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:6,Performance,queue,queue,6,/// A queue of (optional) vtables to consider emitting.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:6,Performance,queue,queue,6,/// A queue of (optional) vtables that may be emitted opportunistically.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:175,Performance,optimiz,optimized,175,/// List of global values which are required to be present in the object file;; /// bitcast to i8*. This is used for forcing visibility of symbols which may; /// otherwise be optimized out.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:131,Modifiability,inherit,inherited,131,// Store deferred function annotations so they can be emitted at the end with; // most up to date ValueDecl that will have all the inherited annotations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:57,Security,sanitiz,sanitizers,57,/// Map used to get unique type descriptor constants for sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:17,Modifiability,variab,variables,17,/// thread_local variables defined or used in this TU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:17,Modifiability,variab,variables,17,/// thread_local variables with initializers that need to run; /// before any thread_local variable in this TU is odr-used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:91,Modifiability,variab,variable,91,/// thread_local variables with initializers that need to run; /// before any thread_local variable in this TU is odr-used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:11,Modifiability,variab,variables,11,/// Global variables with initializers that need to run before main.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:173,Performance,perform,performed,173,"/// When a C++ decl with an initializer is deferred, null is; /// appended to CXXGlobalInits, and the index of that null is placed; /// here so that the initializer will be performed in the correct; /// order. Once the decl is emitted, the index is replaced with ~0U to ensure; /// that we don't re-emit the initializer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:11,Modifiability,variab,variables,11,/// Global variables with initializers whose order of initialization is set by; /// init_priority attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:11,Modifiability,variab,variables,11,/// Global variables with sterm finalizers whose order of initialization is; /// set by init_priority attribute.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:37,Integrability,depend,dependent,37,/// A vector of metadata strings for dependent libraries for ELF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:10,Performance,Cache,Cache,10,/// @name Cache for Objective-C runtime types; /// @{; /// Cached reference to the class for constant strings. This value has type; /// int * but is actually an Obj-C class pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:59,Performance,Cache,Cached,59,/// @name Cache for Objective-C runtime types; /// @{; /// Cached reference to the class for constant strings. This value has type; /// int * but is actually an Obj-C class pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:10,Performance,Cache,Cache,10,/// @name Cache for Blocks Runtime Globals; /// @{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,Modifiability,config,configured,30,/// Return a reference to the configured Objective-C runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:52,Modifiability,config,configured,52,/// Return true iff an Objective-C runtime has been configured.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,Modifiability,config,configured,30,/// Return a reference to the configured OpenCL runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,Modifiability,config,configured,30,/// Return a reference to the configured OpenMP runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,Modifiability,config,configured,30,/// Return a reference to the configured CUDA runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:30,Modifiability,config,configured,30,/// Return a reference to the configured HLSL runtime.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:57,Availability,avail,available,57,"// Version checking functions, used to implement ObjC's @available:; // i32 @__isOSVersionAtLeast(i32, i32, i32)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:52,Security,access,accesses,52,/// getTBAATypeInfo - Get metadata used to describe accesses to objects of; /// the given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:63,Security,access,access,63,/// getTBAAAccessInfo - Get TBAA information that describes an access to; /// an object of the given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:81,Security,access,access,81,/// getTBAAVTablePtrAccessInfo - Get the TBAA information that describes an; /// access to a virtual table pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:69,Security,access,access,69,/// getTBAABaseTypeInfo - Get metadata that describes the given base access; /// type. Return null if the type is not suitable for use in TBAA access tags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:143,Security,access,access,143,/// getTBAABaseTypeInfo - Get metadata that describes the given base access; /// type. Return null if the type is not suitable for use in TBAA access tags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:59,Security,access,access,59,/// getTBAAAccessTagInfo - Get TBAA tag for a given memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:58,Security,access,access,58,/// getTBAAInfoForSubobject - Get TBAA information for an access with a given; /// base lvalue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:78,Modifiability,variab,variable,78,/// Set the TLS mode for the given LLVM GlobalValue for the thread-local; /// variable declaration D.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:25,Modifiability,variab,variable,25,/// Will return a global variable of the given type. If a variable with a; /// different type already exists then a new variable with the right type; /// will be created and all uses of the old variable will be replaced with a; /// bitcast to the new variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:58,Modifiability,variab,variable,58,/// Will return a global variable of the given type. If a variable with a; /// different type already exists then a new variable with the right type; /// will be created and all uses of the old variable will be replaced with a; /// bitcast to the new variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:120,Modifiability,variab,variable,120,/// Will return a global variable of the given type. If a variable with a; /// different type already exists then a new variable with the right type; /// will be created and all uses of the old variable will be replaced with a; /// bitcast to the new variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:194,Modifiability,variab,variable,194,/// Will return a global variable of the given type. If a variable with a; /// different type already exists then a new variable with the right type; /// will be created and all uses of the old variable will be replaced with a; /// bitcast to the new variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:251,Modifiability,variab,variable,251,/// Will return a global variable of the given type. If a variable with a; /// different type already exists then a new variable with the right type; /// will be created and all uses of the old variable will be replaced with a; /// bitcast to the new variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:58,Modifiability,variab,variable,58,"/// Return the AST address space of the underlying global variable for D, as; /// determined by its declaration. Normally this is the same as the address; /// space of D's type, but in CUDA, address spaces are associated with; /// declarations, not types. If D is nullptr, return the default address; /// space for global variable.; ///; /// For languages without explicit address spaces, if D has default address; /// space, target-specific global or constant address space may be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:322,Modifiability,variab,variable,322,"/// Return the AST address space of the underlying global variable for D, as; /// determined by its declaration. Normally this is the same as the address; /// space of D's type, but in CUDA, address spaces are associated with; /// declarations, not types. If D is nullptr, return the default address; /// space for global variable.; ///; /// For languages without explicit address spaces, if D has default address; /// space, target-specific global or constant address space may be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:112,Modifiability,variab,variable,112,"/// Return the AST address space of constant literal, which is used to emit; /// the constant literal as global variable in LLVM IR.; /// Note: This is not necessarily the address space of the constant literal; /// in AST. For address space agnostic language, e.g. C++, constant literal; /// in AST is always in default address space.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:66,Modifiability,variab,variable,66,"/// Return the llvm::Constant for the address of the given global variable.; /// If Ty is non-null and if the global doesn't exist, then it will be created; /// with the specified type instead of whatever the normal requested type; /// would be. If IsForDefinition is true, it is guaranteed that an actual; /// global with type Ty will be returned, not conversion of a variable with; /// the same mangled name but some other type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:369,Modifiability,variab,variable,369,"/// Return the llvm::Constant for the address of the given global variable.; /// If Ty is non-null and if the global doesn't exist, then it will be created; /// with the specified type instead of whatever the normal requested type; /// would be. If IsForDefinition is true, it is guaranteed that an actual; /// global with type Ty will be returned, not conversion of a variable with; /// the same mangled name but some other type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:25,Usability,GUID,GUID,25,/// Get the address of a GUID.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:36,Availability,avail,available,36,/// Notes that BE's global block is available via Addr. Asserts that BE; /// isn't already emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:56,Testability,Assert,Asserts,56,/// Notes that BE's global block is available via Addr. Asserts that BE; /// isn't already emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:43,Modifiability,variab,variable,43,/// Returns a pointer to a constant global variable for the given file-scope; /// compound literal expression.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:43,Testability,Assert,Asserts,43,/// Notes that CLE's GlobalVariable is GV. Asserts that CLE isn't already; /// emitted.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:34,Modifiability,variab,variable,34,/// Returns a pointer to a global variable representing a temporary; /// with static or thread storage duration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:32,Modifiability,variab,variable,32,/// Tell the consumer that this variable has been instantiated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:32,Modifiability,variab,variable,32,/// Create a new runtime global variable with the specified type and name.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:31,Integrability,Interface,Interfaces,31,///@name Custom Blocks Runtime Interfaces; ///@{,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:49,Modifiability,variab,variably,49,/// Emit type info if type of an expression is a variably modified; /// type. Also emit proper debug info for cast types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:19,Availability,error,error,19,/// Emit a general error that something can't be done.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:17,Availability,error,error,17,/// Print out an error that codegen doesn't support the specified stmt yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:17,Availability,error,error,17,/// Print out an error that codegen doesn't support the specified decl yet.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:127,Deployability,configurat,configuration,127,"/// Like the overload taking a `Function &`, but intended specifically; /// for frontends that want to build on Clang's target-configuration logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:127,Modifiability,config,configuration,127,"/// Like the overload taking a `Function &`, but intended specifically; /// for frontends that want to build on Clang's target-configuration logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:141,Testability,log,logic,141,"/// Like the overload taking a `Function &`, but intended specifically; /// for frontends that want to build on Clang's target-configuration logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:14,Safety,detect,detect,14,/// Appends a detect mismatch command to the linker options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:14,Integrability,depend,dependent,14,/// Appends a dependent lib to the appropriate metadata value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:121,Modifiability,variab,variable,121,"/// Set attributes which are common to any form of a global definition (alias,; /// Objective-C method, function, global variable).; ///; /// NOTE: This should only be called for definitions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:24,Energy Efficiency,allocate,allocate,24,/// Emit a code for the allocate directive.; /// \param D The allocate declaration,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:62,Energy Efficiency,allocate,allocate,62,/// Emit a code for the allocate directive.; /// \param D The allocate declaration,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:41,Energy Efficiency,allocate,allocate,41,"/// Return the alignment specified in an allocate directive, if present.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:151,Performance,optimiz,optimization,151,/// Returns whether the given record has hidden LTO visibility and therefore; /// may participate in (single-module) CFI and whole-program vtable; /// optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:201,Performance,optimiz,optimization,201,/// Returns whether the given record has public LTO visibility (regardless of; /// -lto-whole-program-visibility) and therefore may not participate in; /// (single-module) CFI and whole-program vtable optimization.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:400,Availability,redundant,redundant,400,"/// Returns the vcall visibility of the given type. This is the scope in which; /// a virtual function call could be made which ends up being dispatched to a; /// member function of this class. This scope can be wider than the visibility; /// of the class itself when the class has a more-visible dynamic base class.; /// The client should pass in an empty Visited set, which is used to prevent; /// redundant recursive processing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:400,Safety,redund,redundant,400,"/// Returns the vcall visibility of the given type. This is the scope in which; /// a virtual function call could be made which ends up being dispatched to a; /// member function of this class. This scope can be wider than the visibility; /// of the class itself when the class has a more-visible dynamic base class.; /// The client should pass in an empty Visited set, which is used to prevent; /// redundant recursive processing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:93,Security,integrity,integrity,93,"/// Return a vector of most-base classes for RD. This is used to implement; /// control flow integrity checks for member function pointers.; ///; /// A most-base class of a class C is defined as a recursive base class of C,; /// including C itself, that does not have any bases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:205,Security,access,access,205,"/// OpenCL v1.2 s5.6.4.6 allows the compiler to store kernel argument; /// information in the program executable. The argument information stored; /// includes the argument name, its type, the address and access qualifiers; /// used. This helper can be used to generate metadata for source code kernel; /// function as well as generated implicitly kernels. If a kernel is generated; /// implicitly null value has to be passed to the last two parameters,; /// otherwise all parameters must have valid non-null values.; /// \param FN is a pointer to IR function being generated.; /// \param FD is a pointer to function declaration if any.; /// \param CGF is a pointer to CodeGenFunction that generates this function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:46,Modifiability,variab,variable,46,"/// Print the postfix for externalized static variable or kernels for single; /// source offloading languages CUDA and HIP. The unique postfix is created; /// using either the CUID argument, or the file's UniqueID and active macros.; /// The fallback method without a CUID requires that the offloading toolchain; /// does not define separate macros via the -cc1 options.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:352,Deployability,update,updates,352,"// In scenarios where a function is not known to be a multiversion function; // until a later declaration, it is sometimes necessary to change the; // previously created mangled name to align with requirements of whatever; // multiversion function kind the function is now known to be. This function; // is responsible for performing such mangled name updates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:323,Performance,perform,performing,323,"// In scenarios where a function is not known to be a multiversion function; // until a later declaration, it is sometimes necessary to change the; // previously created mangled name to align with requirements of whatever; // multiversion function kind the function is now known to be. This function; // is responsible for performing such mangled name updates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:56,Modifiability,variab,variables,56,/// Emit the function that initializes C++ thread_local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:46,Modifiability,variab,variables,46,/// Emit the function that initializes global variables for a C++ Module.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:27,Performance,perform,performs,27,/// Emit the function that performs cleanup associated with C++ globals.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:64,Performance,Perform,PerformInit,64,/// Emit the function that initializes the specified global (if PerformInit is; /// true) and registers its destructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:219,Usability,Clear,Clears,219,/// EmitCtorList - Generates a global array of functions and priorities using; /// the given list and name. This array will have appending linkage and is; /// suitable for use as a LLVM constructor or destructor array. Clears Fns.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:100,Availability,avail,available,100,"/// Register functions annotated with __attribute__((destructor)) using; /// __cxa_atexit, if it is available, or atexit otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:76,Availability,avail,available,76,/// Emit a dummy function that reference a CoreFoundation symbol when; /// @available is used on Darwin.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:363,Performance,perform,performed,363,"/// Helper function for EmitStaticExternCAliases() to redirect ifuncs that; /// have a resolver name that matches 'Elem' to instead resolve to the name of; /// 'CppFunc'. This redirection is necessary in cases where 'Elem' has a name; /// that will be emitted as an alias of the name bound to 'CppFunc'; ifuncs; /// may not reference aliases. Redirection is only performed if 'Elem' is only; /// used by ifuncs in which case, 'Elem' is destroyed. 'true' is returned if; /// redirection is successful, and 'false' is returned otherwise.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:32,Usability,simpl,simpler,32,"/// Check whether we can use a ""simpler"", more core exceptions personality; /// function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h:108,Usability,simpl,simply,108,/// Helper function for getDefaultFunctionAttributes. Builds a set of function; /// attributes which can be simply added to a function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenModule.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:420,Performance,optimiz,optimization,420,"//===--- CodeGenPGO.cpp - PGO Instrumentation for LLVM CodeGen --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Instrumentation-based profile-guided optimization; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:413,Usability,guid,guided,413,"//===--- CodeGenPGO.cpp - PGO Instrumentation for LLVM CodeGen --*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Instrumentation-based profile-guided optimization; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:43,Modifiability,variab,variable,43,"// If we're generating a profile, create a variable for the name.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:27,Security,hash,hash,27,/// The version of the PGO hash algorithm.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:31,Security,hash,hash,31,// Keep this set to the latest hash version.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:11,Security,hash,hasher,11,"/// Stable hasher for PGO region counters.; ///; /// PGOHash produces a stable hash of a given function's control flow.; ///; /// Changing the output of this hash will invalidate all previously generated; /// profiles -- i.e., don't do it.; ///; /// \note When this hash does eventually change (years?), we still need to; /// support old hashes. We'll need to pull in the version number from the; /// profile data format and use the matching hash function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:79,Security,hash,hash,79,"/// Stable hasher for PGO region counters.; ///; /// PGOHash produces a stable hash of a given function's control flow.; ///; /// Changing the output of this hash will invalidate all previously generated; /// profiles -- i.e., don't do it.; ///; /// \note When this hash does eventually change (years?), we still need to; /// support old hashes. We'll need to pull in the version number from the; /// profile data format and use the matching hash function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:158,Security,hash,hash,158,"/// Stable hasher for PGO region counters.; ///; /// PGOHash produces a stable hash of a given function's control flow.; ///; /// Changing the output of this hash will invalidate all previously generated; /// profiles -- i.e., don't do it.; ///; /// \note When this hash does eventually change (years?), we still need to; /// support old hashes. We'll need to pull in the version number from the; /// profile data format and use the matching hash function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:266,Security,hash,hash,266,"/// Stable hasher for PGO region counters.; ///; /// PGOHash produces a stable hash of a given function's control flow.; ///; /// Changing the output of this hash will invalidate all previously generated; /// profiles -- i.e., don't do it.; ///; /// \note When this hash does eventually change (years?), we still need to; /// support old hashes. We'll need to pull in the version number from the; /// profile data format and use the matching hash function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:338,Security,hash,hashes,338,"/// Stable hasher for PGO region counters.; ///; /// PGOHash produces a stable hash of a given function's control flow.; ///; /// Changing the output of this hash will invalidate all previously generated; /// profiles -- i.e., don't do it.; ///; /// \note When this hash does eventually change (years?), we still need to; /// support old hashes. We'll need to pull in the version number from the; /// profile data format and use the matching hash function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:442,Security,hash,hash,442,"/// Stable hasher for PGO region counters.; ///; /// PGOHash produces a stable hash of a given function's control flow.; ///; /// Changing the output of this hash will invalidate all previously generated; /// profiles -- i.e., don't do it.; ///; /// \note When this hash does eventually change (years?), we still need to; /// support old hashes. We'll need to pull in the version number from the; /// profile data format and use the matching hash function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:4,Security,Hash,Hash,4,"/// Hash values for AST nodes.; ///; /// Distinct values for AST nodes that have region counters attached.; ///; /// These values must be stable. All new members must be added at the end,; /// and no members should be removed. Changing the enumeration value for an; /// AST node will affect the hash of every function that contains that node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:295,Security,hash,hash,295,"/// Hash values for AST nodes.; ///; /// Distinct values for AST nodes that have region counters attached.; ///; /// These values must be stable. All new members must be added at the end,; /// and no members should be removed. Changing the enumeration value for an; /// AST node will affect the hash of every function that contains that node.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:28,Availability,avail,available,28,// The preceding values are available with PGO_HASH_V1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:28,Availability,avail,available,28,// The preceding values are available since PGO_HASH_V2.; // Keep this last. It's for the static assert that follows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:97,Testability,assert,assert,97,// The preceding values are available since PGO_HASH_V2.; // Keep this last. It's for the static assert that follows.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:16,Security,hash,hash,16,/// Get the PGO hash version used in the given indexed profile.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:17,Security,hash,hash,17,/// The function hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:34,Deployability,update,update,34,"/// If \p S gets a fresh counter, update the counter mappings. Return the; /// V1 hash of \p S.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:82,Security,hash,hash,82,"/// If \p S gets a fresh counter, update the counter mappings. Return the; /// V1 hash of \p S.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:404,Availability,error,error,404,"/// The following stacks are used with dataTraverseStmtPre() and; /// dataTraverseStmtPost() to track the depth of nested logical operators in a; /// boolean expression in a function. The ultimate purpose is to keep track; /// of the number of leaf-level conditions in the boolean expression so that a; /// profile bitmap can be allocated based on that number.; ///; /// The stacks are also used to find error cases and notify the user. A; /// standard logical operator nest for a boolean expression could be in a form; /// similar to this: ""x = a && b && c && (d || f)""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:329,Energy Efficiency,allocate,allocated,329,"/// The following stacks are used with dataTraverseStmtPre() and; /// dataTraverseStmtPost() to track the depth of nested logical operators in a; /// boolean expression in a function. The ultimate purpose is to keep track; /// of the number of leaf-level conditions in the boolean expression so that a; /// profile bitmap can be allocated based on that number.; ///; /// The stacks are also used to find error cases and notify the user. A; /// standard logical operator nest for a boolean expression could be in a form; /// similar to this: ""x = a && b && c && (d || f)""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:122,Testability,log,logical,122,"/// The following stacks are used with dataTraverseStmtPre() and; /// dataTraverseStmtPost() to track the depth of nested logical operators in a; /// boolean expression in a function. The ultimate purpose is to keep track; /// of the number of leaf-level conditions in the boolean expression so that a; /// profile bitmap can be allocated based on that number.; ///; /// The stacks are also used to find error cases and notify the user. A; /// standard logical operator nest for a boolean expression could be in a form; /// similar to this: ""x = a && b && c && (d || f)""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:453,Testability,log,logical,453,"/// The following stacks are used with dataTraverseStmtPre() and; /// dataTraverseStmtPost() to track the depth of nested logical operators in a; /// boolean expression in a function. The ultimate purpose is to keep track; /// of the number of leaf-level conditions in the boolean expression so that a; /// profile bitmap can be allocated based on that number.; ///; /// The stacks are also used to find error cases and notify the user. A; /// standard logical operator nest for a boolean expression could be in a form; /// similar to this: ""x = a && b && c && (d || f)""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:22,Testability,log,logical,22,"/// At the top of the logical operator nest, reset the number of conditions,; /// also forget previously seen split nesting cases.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:29,Testability,log,logical,29,"/// Check for ""split-nested"" logical operators. This happens when a new; /// boolean expression logical-op nest is encountered within an existing; /// boolean expression, separated by a non-logical operator. For; /// example, in ""x = (a && b && c && foo(d && f))"", the ""d && f"" case; /// starts a new boolean expression that is separated from the other; /// conditions by the operator foo(). Split-nested cases are not; /// supported by MC/DC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:96,Testability,log,logical-op,96,"/// Check for ""split-nested"" logical operators. This happens when a new; /// boolean expression logical-op nest is encountered within an existing; /// boolean expression, separated by a non-logical operator. For; /// example, in ""x = (a && b && c && foo(d && f))"", the ""d && f"" case; /// starts a new boolean expression that is separated from the other; /// conditions by the operator foo(). Split-nested cases are not; /// supported by MC/DC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:190,Testability,log,logical,190,"/// Check for ""split-nested"" logical operators. This happens when a new; /// boolean expression logical-op nest is encountered within an existing; /// boolean expression, separated by a non-logical operator. For; /// example, in ""x = (a && b && c && foo(d && f))"", the ""d && f"" case; /// starts a new boolean expression that is separated from the other; /// conditions by the operator foo(). Split-nested cases are not; /// supported by MC/DC.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:22,Testability,log,logical,22,/// Keep track of non-logical operators. These are OK as long as we don't; /// encounter a new logical operator after seeing one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:95,Testability,log,logical,95,/// Keep track of non-logical operators. These are OK as long as we don't; /// encounter a new logical operator after seeing one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:152,Testability,log,logical,152,// Hook: dataTraverseStmtPost() is invoked by the AST visitor after visiting; // an AST Stmt node. MC/DC will use it to to signal when the top of a; // logical operation (boolean expression) nest is encountered.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:18,Testability,log,logical,18,/// At the top of logical operator nest:,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:27,Testability,log,logical,27,"/// Was the ""split-nested"" logical operator case encountered?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:14,Energy Efficiency,allocate,allocate,14,"// Otherwise, allocate the number of bytes required for the bitmap; // based on the number of conditions. Must be at least 1-byte long.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:132,Integrability,depend,depending,132,"/// The RHS of all logical operators gets a fresh counter in order to count; /// how many times the RHS evaluates to true or false, depending on the; /// semantics of the operator. This is only valid for "">= v7"" of the profile; /// version so that we facilitate backward compatibility. In addition, in; /// order to use MC/DC, count the number of total LHS and RHS conditions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:19,Testability,log,logical,19,"/// The RHS of all logical operators gets a fresh counter in order to count; /// how many times the RHS evaluates to true or false, depending on the; /// semantics of the operator. This is only valid for "">= v7"" of the profile; /// version so that we facilitate backward compatibility. In addition, in; /// order to use MC/DC, count the number of total LHS and RHS conditions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:33,Security,hash,hash,33,/// Include \p S in the function hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:21,Security,hash,hash,21,"// If we used the V1 hash, use the default traversal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:165,Security,hash,hash,165,"// If the statement type \p N is nestable, and its nesting impacts profile; // stability, define a custom traversal which tracks the end of the statement; // in the hash (provided we're not using the V1 hash).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:203,Security,hash,hash,203,"// If the statement type \p N is nestable, and its nesting impacts profile; // stability, define a custom traversal which tracks the end of the statement; // in the hash (provided we're not using the V1 hash).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:19,Security,Hash,HashVersion,19,/// Get version \p HashVersion of the PGO hash for \p S.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:42,Security,hash,hash,42,/// Get version \p HashVersion of the PGO hash for \p S.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:43,Testability,log,logical,43,// Counter tracks the right hand side of a logical and operator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:43,Testability,log,logical,43,// Counter tracks the right hand side of a logical or operator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:22,Security,hash,hash,22,// Use Working as the hash directly if we never used MD5.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:64,Integrability,depend,dependent,64,"// No need to byte swap here, since none of the math was endian-dependent.; // This number will be byte-swapped as required on endianness transitions,; // so we will see the same value on the other side.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:35,Security,hash,hash,35,// Finalize the MD5 and return the hash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:31,Testability,stub,stub,31,// Skip CUDA/HIP kernel launch stub functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:18,Security,hash,hash,18,"// Use the latest hash version when inserting instrumentation, but use the; // version in the indexed profile if we're reading PGO data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:239,Testability,test,test,239,"// If MC/DC is enabled, set the MaxConditions to a preset value. Otherwise,; // set it to zero. This value impacts the number of conditions accepted in a; // given boolean expression, which impacts the size of the bitmap used to; // track test vector execution for that boolean expression. Because the; // bitmap scales exponentially (2^n) based on the number of conditions seen,; // the maximum value is hard-coded at 6 conditions, which is more than enough; // for most embedded applications. Setting a maximum value prevents the; // bitmap footprint from growing too large without the user's knowledge. In; // the future, this value could be adjusted with a command-line option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:235,Deployability,update,updated,235,// Emit intrinsic responsible for updating the global bitmap corresponding to; // a boolean expression. The index being set is based on the value loaded; // from a pointer to a dedicated temporary value on the stack that is itself; // updated via emitMCDCCondBitmapReset() and emitMCDCCondBitmapUpdate(). The; // index represents an executed test vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:146,Performance,load,loaded,146,// Emit intrinsic responsible for updating the global bitmap corresponding to; // a boolean expression. The index being set is based on the value loaded; // from a pointer to a dedicated temporary value on the stack that is itself; // updated via emitMCDCCondBitmapReset() and emitMCDCCondBitmapUpdate(). The; // index represents an executed test vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:342,Testability,test,test,342,// Emit intrinsic responsible for updating the global bitmap corresponding to; // a boolean expression. The index being set is based on the value loaded; // from a pointer to a dedicated temporary value on the stack that is itself; // updated via emitMCDCCondBitmapReset() and emitMCDCCondBitmapUpdate(). The; // index represents an executed test vector.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:54,Testability,log,logical-NOT,54,"// Even though, for simplicity, parentheses and unary logical-NOT operators; // are considered part of their underlying condition for both MC/DC and; // branch coverage, the condition IDs themselves are assigned and tracked; // using the underlying condition itself. This is done solely for; // consistency since parentheses and logical-NOTs are ignored when checking; // whether the condition is actually an instrumentable condition. This can; // also make debugging a bit easier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:329,Testability,log,logical-NOTs,329,"// Even though, for simplicity, parentheses and unary logical-NOT operators; // are considered part of their underlying condition for both MC/DC and; // branch coverage, the condition IDs themselves are assigned and tracked; // using the underlying condition itself. This is done solely for; // consistency since parentheses and logical-NOTs are ignored when checking; // whether the condition is actually an instrumentable condition. This can; // also make debugging a bit easier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:20,Usability,simpl,simplicity,20,"// Even though, for simplicity, parentheses and unary logical-NOT operators; // are considered part of their underlying condition for both MC/DC and; // branch coverage, the condition IDs themselves are assigned and tracked; // using the underlying condition itself. This is done solely for; // consistency since parentheses and logical-NOTs are ignored when checking; // whether the condition is actually an instrumentable condition. This can; // also make debugging a bit easier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:23,Deployability,update,updates,23,"// Emit intrinsic that updates a dedicated temporary value on the stack after; // a condition is evaluated. After the set of conditions has been updated,; // the resulting value is used to update the boolean expression's bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:145,Deployability,update,updated,145,"// Emit intrinsic that updates a dedicated temporary value on the stack after; // a condition is evaluated. After the set of conditions has been updated,; // the resulting value is used to update the boolean expression's bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:189,Deployability,update,update,189,"// Emit intrinsic that updates a dedicated temporary value on the stack after; // a condition is evaluated. After the set of conditions has been updated,; // the resulting value is used to update the boolean expression's bitmap.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:319,Security,hash,hash,319,"// We record the top most called three functions at each call site.; // Profile metadata contains ""VP"" string identifying this metadata; // as value profiling data, then a uint32_t value for the value profiling; // kind, a uint64_t value for the total number of times the call is; // executed, followed by the function hash and execution count (uint64_t); // pairs for each function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:83,Availability,down,down,83,"/// Scale an individual branch weight (and add 1).; ///; /// Scale a 64-bit weight down to 32-bits using \c Scale.; ///; /// According to Laplace's Rule of Succession, it is better to compute the; /// weight based on the count plus 1, so universally add 1 to the value.; ///; /// \pre \c Scale was calculated by \a calculateWeightScale() with a weight no; /// greater than \c Weight.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:26,Availability,down,down,26,// Calculate how to scale down to 32-bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp:26,Availability,down,down,26,// Calculate how to scale down to 32-bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h:420,Performance,optimiz,optimization,420,"//===--- CodeGenPGO.h - PGO Instrumentation for LLVM CodeGen ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Instrumentation-based profile-guided optimization; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h:413,Usability,guid,guided,413,"//===--- CodeGenPGO.h - PGO Instrumentation for LLVM CodeGen ----*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Instrumentation-based profile-guided optimization; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h:228,Integrability,depend,depending,228,/// Assign counters to regions and configure them for PGO of a given; /// function. Does nothing if instrumentation is not enabled and either; /// generates global variables or associates PGO data with each of the; /// counters depending on whether we are generating or using instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h:35,Modifiability,config,configure,35,/// Assign counters to regions and configure them for PGO of a given; /// function. Does nothing if instrumentation is not enabled and either; /// generates global variables or associates PGO data with each of the; /// counters depending on whether we are generating or using instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h:164,Modifiability,variab,variables,164,/// Assign counters to regions and configure them for PGO of a given; /// function. Does nothing if instrumentation is not enabled and either; /// generates global variables or associates PGO data with each of the; /// counters depending on whether we are generating or using instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenPGO.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:470,Performance,optimiz,optimizer,470,"//===-- CodeGenTBAA.cpp - TBAA information for LLVM CodeGen ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is the code that manages TBAA information and defines the TBAA policy; // for the optimizer to use. Relevant standards text includes:; //; // C99 6.5p7; // C++ [basic.lval] (p10 in n3126, p15 in some earlier versions); //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:234,Performance,optimiz,optimizer,234,"// Define the root of the tree. This identifies the tree, so that; // if our LLVM IR is linked with LLVM IR from a different front-end; // (or a different version of this front-end), their TBAA trees will; // remain distinct, and the optimizer will treat them conservatively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:86,Energy Efficiency,power,powers,86,"// Define the root of the tree for user-accessible memory. C and C++; // give special powers to char and certain similar types. However,; // these special powers only cover user-accessible memory, and doesn't; // include things like vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:155,Energy Efficiency,power,powers,155,"// Define the root of the tree for user-accessible memory. C and C++; // give special powers to char and certain similar types. However,; // these special powers only cover user-accessible memory, and doesn't; // include things like vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:40,Security,access,accessible,40,"// Define the root of the tree for user-accessible memory. C and C++; // give special powers to char and certain similar types. However,; // these special powers only cover user-accessible memory, and doesn't; // include things like vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:178,Security,access,accessible,178,"// Define the root of the tree for user-accessible memory. C and C++; // give special powers to char and certain similar types. However,; // these special powers only cover user-accessible memory, and doesn't; // include things like vtables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:63,Security,access,access,63,/// Check if the given type is a valid base type to be used in access tags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:39,Security,access,access,39,// Incomplete types are not valid base access types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:35,Integrability,interface,interface,35,"// RD can be struct, union, class, interface or enum.; // For now, we only handle struct and class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:199,Safety,risk,risk,199,"// Character types are special and can alias anything.; // In C++, this technically only includes ""char"" and ""unsigned char"",; // and not ""signed char"". In C, it includes all three. For now,; // the risk of exploiting this detail in C++ seems likely to outweigh; // the benefit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:52,Security,access,access,52,"// C++1z [basic.lval]p10: ""If a program attempts to access the stored value of; // an object through a glvalue of other than one of the following types the; // behavior is undefined: [...] a char, unsigned char, or std::byte type.""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:3,Security,Access,Accesses,3,// Accesses to arrays are accesses to objects of their element types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:26,Security,access,accesses,26,// Accesses to arrays are accesses to objects of their element types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:200,Security,access,access,200,"// We need this function to not fall back to returning the ""omnipotent char""; // type node for aggregate and union types. Otherwise, any dereference of an; // aggregate will result into the may-alias access descriptor, meaning all; // subsequent accesses to direct and indirect members of that aggregate will; // be considered may-alias too.; // TODO: Combine getTypeInfo() and getBaseTypeInfo() into a single function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:246,Security,access,accesses,246,"// We need this function to not fall back to returning the ""omnipotent char""; // type node for aggregate and union types. Otherwise, any dereference of an; // aggregate will result into the may-alias access descriptor, meaning all; // subsequent accesses to direct and indirect members of that aggregate will; // be considered may-alias too.; // TODO: Combine getTypeInfo() and getBaseTypeInfo() into a single function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:78,Performance,cache,cache,78,"// Note that the following helper call is allowed to add new nodes to the; // cache, which invalidates all its previously obtained iterators. So we; // first generate the node for the type and then add that node to the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:219,Performance,cache,cache,219,"// Note that the following helper call is allowed to add new nodes to the; // cache, which invalidates all its previously obtained iterators. So we; // first generate the node for the type and then add that node to the cache.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:127,Safety,avoid,avoid,127,"// Handle C++ base classes. Non-virtual bases can treated a kind of; // field. Virtual bases are more complex and omitted, but avoid an; // incomplete view for NewStructPathTBAA.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:48,Energy Efficiency,allocate,allocated,48,"// The order in which base class subobjects are allocated is unspecified,; // so may differ from declaration order. In particular, Itanium ABI will; // allocate a primary base first.; // Since we exclude empty subobjects, the objects are not overlapping and; // their offsets are unique.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:152,Energy Efficiency,allocate,allocate,152,"// The order in which base class subobjects are allocated is unspecified,; // so may differ from declaration order. In particular, Itanium ABI will; // allocate a primary base first.; // Since we exclude empty subobjects, the objects are not overlapping and; // their offsets are unique.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:35,Performance,cache,cache,35,"// nullptr is a valid value in the cache, so use find rather than []",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:64,Security,access,accesses,64,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:93,Security,access,access,93,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:119,Security,access,access,119,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:157,Security,access,access,157,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:35,Testability,log,logic,35,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:64,Security,access,accesses,64,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:93,Security,access,access,93,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:119,Security,access,access,119,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:157,Security,access,access,157,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp:35,Testability,log,logic,35,"// TODO: Implement the rest of the logic here. For example, two accesses; // with same final access types result in an access to an object of that final; // access type regardless of their base types.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:470,Performance,optimiz,optimizer,470,"//===--- CodeGenTBAA.h - TBAA information for LLVM CodeGen ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This is the code that manages TBAA information and defines the TBAA policy; // for the optimizer to use.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:42,Security,access,access,42,// TBAAAccessKind - A kind of TBAA memory access descriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:39,Security,access,access,39,// TBAAAccessInfo - Describes a memory access in terms of TBAA.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:3,Security,Access,AccessType,3,/* AccessType= */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:3,Security,Access,AccessType,3,/* AccessType= */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:3,Security,Access,AccessType,3,/* AccessType= */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:27,Security,access,access,27,/// Kind - The kind of the access descriptor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:32,Security,access,access,32,/// BaseType - The base/leading access type. May be null if this access; /// descriptor represents an access that is not considered to be an access; /// to an aggregate or union member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:65,Security,access,access,65,/// BaseType - The base/leading access type. May be null if this access; /// descriptor represents an access that is not considered to be an access; /// to an aggregate or union member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:102,Security,access,access,102,/// BaseType - The base/leading access type. May be null if this access; /// descriptor represents an access that is not considered to be an access; /// to an aggregate or union member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:141,Security,access,access,141,/// BaseType - The base/leading access type. May be null if this access; /// descriptor represents an access that is not considered to be an access; /// to an aggregate or union member.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:89,Availability,avail,available,89,/// AccessType - The final access type. May be null if there is no TBAA; /// information available about this access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:4,Security,Access,AccessType,4,/// AccessType - The final access type. May be null if there is no TBAA; /// information available about this access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:27,Security,access,access,27,/// AccessType - The final access type. May be null if there is no TBAA; /// information available about this access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:110,Security,access,access,110,/// AccessType - The final access type. May be null if there is no TBAA; /// information available about this access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:42,Security,access,access,42,/// Offset - The byte offset of the final access within the base one. Must be; /// zero if the base access type is not specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:100,Security,access,access,100,/// Offset - The byte offset of the final access within the base one. Must be; /// zero if the base access type is not specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:23,Security,access,access,23,"/// Size - The size of access, in bytes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:37,Security,access,access,37,/// This maps clang::Types to a base access type in the type DAG.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:19,Security,access,access,19,/// This maps TBAA access descriptors to tag nodes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:29,Integrability,wrap,wrapper,29,/// createScalarTypeNode - A wrapper function to create a metadata node; /// describing a scalar type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:95,Security,access,accesses,95,/// getTypeInfoHelper - An internal helper function to generate metadata used; /// to describe accesses to objects of the given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:99,Security,access,accesses,99,/// getBaseTypeInfoHelper - An internal helper function to generate metadata; /// used to describe accesses to objects of the given base type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:48,Security,access,accesses,48,/// getTypeInfo - Get metadata used to describe accesses to objects of the; /// given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:59,Security,access,access,59,/// getAccessInfo - Get TBAA information that describes an access to; /// an object of the given type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:77,Security,access,access,77,/// getVTablePtrAccessInfo - Get the TBAA information that describes an; /// access to a virtual table pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:65,Security,access,access,65,/// getBaseTypeInfo - Get metadata that describes the given base access type.; /// Return null if the type is not suitable for use in TBAA access tags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:139,Security,access,access,139,/// getBaseTypeInfo - Get metadata that describes the given base access type.; /// Return null if the type is not suitable for use in TBAA access tags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h:55,Security,access,access,55,/// getAccessTagInfo - Get TBAA tag for a given memory access.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTBAA.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:81,Availability,avail,available,81,// Name the codegen type after the typedef name; // if there is no tag type name available,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:282,Integrability,depend,depending,282,"/// ConvertTypeForMem - Convert type T into a llvm::Type. This differs from; /// ConvertType in that it is used to convert to the memory representation for; /// a type. For example, the scalar representation for _Bool is i1, but the; /// memory representation is usually i8 or i32, depending on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:177,Availability,down,down,177,/// isFuncParamTypeConvertible - Return true if the specified type in a; /// function parameter or result position can be converted to an IR type at this; /// point. This boils down to being whether it is complete.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:4,Deployability,Update,UpdateCompletedType,4,"/// UpdateCompletedType - When we find the full definition for a TagDecl,; /// replace the 'opaque' type we previously made for it if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:87,Performance,cache,cache,87,"// If this is an enum being completed, then we flush all non-struct types from; // the cache. This allows function types and other things that may be derived; // from the enum to be recomputed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:18,Performance,cache,cache,18,// Only flush the cache if we've actually already converted this type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:131,Performance,cache,cache,131,"// Okay, we formed some types based on this. We speculated that the enum; // would be lowered to i32, so we only need to flush the cache if this; // didn't happen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:86,Integrability,depend,depends,86,"// First, check whether we can build the full function type. If the; // function type depends on an incomplete type (e.g. a struct or enum), we; // cannot lower the function type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:24,Integrability,depend,depends,24,"// This function's type depends on an incomplete tag type.; // Force conversion of all the relevant record types, to make sure; // we re-convert the FunctionType when appropriate.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:56,Integrability,rout,routines,56,// The function type can be built; call the appropriate routines to; // build it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:19,Performance,cache,cached,19,// RecordTypes are cached and processed specially.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:73,Performance,cache,cached,73,"// With expensive checks, check that the type we compute matches the; // cached type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:30,Performance,cache,cache,30,"// If we don't have it in the cache, convert it now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:63,Performance,scalab,scalable,63,"// Tuple types are expressed as aggregregate types of the same scalable; // vector type (e.g. vint32m1x2_t is two vint32m1_t, which is {<vscale x; // 2 x i32>, <vscale x 2 x i32>}).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:15,Integrability,interface,interfaces,15,"// Objective-C interfaces are always opaque (outside of the; // runtime, which can do whatever it likes); we never refine; // these.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp:96,Deployability,Update,UpdateCompletedType,96,"// Return a placeholder 'i32' type. This can be changed later when the; // type is defined (see UpdateCompletedType), but is likely to be the; // ""right"" answer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:62,Integrability,depend,depends,62,"// This should not be moved earlier, since its initialization depends on some; // of the previous reference members being already initialized",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:40,Integrability,interface,interfaces,40,"/// The opaque type map for Objective-C interfaces. All direct; /// manipulation is done by the runtime interfaces, which are; /// responsible for coercing to the appropriate type; these opaque; /// types are never refined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:104,Integrability,interface,interfaces,104,"/// The opaque type map for Objective-C interfaces. All direct; /// manipulation is done by the runtime interfaces, which are; /// responsible for coercing to the appropriate type; these opaque; /// types are never refined.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:19,Performance,cache,cache,19,/// This map keeps cache of llvm::Types and maps clang::Type to; /// corresponding llvm::Type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:282,Integrability,depend,depending,282,"/// ConvertTypeForMem - Convert type T into a llvm::Type. This differs from; /// ConvertType in that it is used to convert to the memory representation for; /// a type. For example, the scalar representation for _Bool is i1, but the; /// memory representation is usually i8 or i32, depending on the target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:121,Integrability,depend,depend,121,/// isFuncTypeConvertible - Utility to check whether a function type can; /// be converted to an LLVM type (i.e. doesn't depend on an incomplete tag; /// type).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:23,Modifiability,inherit,inheriting,23,/// Determine if a C++ inheriting constructor should have parameters matching; /// those of its inherited constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:96,Modifiability,inherit,inherited,96,/// Determine if a C++ inheriting constructor should have parameters matching; /// those of its inherited constructor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:4,Deployability,Update,UpdateCompletedType,4,"/// UpdateCompletedType - When we find the full definition for a TagDecl,; /// replace the 'opaque' type we previously made for it if applicable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:51,Modifiability,inherit,inheritance,51,/// Remove stale types from the type cache when an inheritance model; /// gets assigned to a class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:37,Performance,cache,cache,37,/// Remove stale types from the type cache when an inheritance model; /// gets assigned to a class.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:293,Performance,perform,performing,293,"// The arrangement methods are split into three families:; // - those meant to drive the signature and prologue/epilogue; // of a function declaration or definition,; // - those meant for the computation of the LLVM type for an abstract; // appearance of a function, and; // - those meant for performing the IR-generation of a call.; // They differ mainly in how they deal with optional (i.e. variadic); // arguments, as well as unprototyped functions.; //; // Key points:; // - The CGFunctionInfo for emitting a specific call site must include; // entries for the optional arguments.; // - The function type used at the call site must reflect the formal; // signature of the declaration being called, or else the call will; // go awry.; // - For the most part, unprototyped functions are called by casting to; // a formal signature inferred from the specific argument types used; // at the call-site. However, some targets (e.g. x86-64) screw with; // this for compatibility reasons.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:149,Usability,simpl,simply,149,"/// Given a function info for a declaration, return the function info; /// for a call with the given arguments.; ///; /// Often this will be able to simply return the declaration info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h:168,Integrability,rout,routines,168,"/// ""Arrange"" the LLVM information for a call or type with the given; /// signature. This is largely an internal method; other clients; /// should use one of the above routines, which ultimately defer to; /// this.; ///; /// \param argTypes - must all actually be canonical as params",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CodeGenTypes.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:488,Modifiability,variab,variables,488,"//===--- ConstantEmitter.h - IR constant emission ---------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // A helper class for emitting expressions and values as llvm::Constants; // and as initializers for global variables.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:480,Safety,safe,safe,480,"// All of the ""abstract"" emission methods below permit the emission to; // be immediately discarded without finalizing anything. Therefore, they; // must also promise not to do anything that will, in the future, require; // finalization:; //; // - using the CGF (if present) for anything other than establishing; // semantic context; for example, an expression with ignored; // side-effects must not be emitted as an abstract expression; //; // - doing anything that would not be safe to duplicate within an; // initializer or to propagate to another context; for example,; // side effects, or emitting an initialization that requires a; // reference to its current location.; /// Try to emit the initializer of the given declaration as an abstract; /// constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:116,Safety,safe,safe,116,"/// Emit the result of the given expression as an abstract constant,; /// asserting that it succeeded. This is only safe to do when the; /// expression is known to be a constant expression with either a fairly; /// simple type or a known simple form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:74,Testability,assert,asserting,74,"/// Emit the result of the given expression as an abstract constant,; /// asserting that it succeeded. This is only safe to do when the; /// expression is known to be a constant expression with either a fairly; /// simple type or a known simple form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:215,Usability,simpl,simple,215,"/// Emit the result of the given expression as an abstract constant,; /// asserting that it succeeded. This is only safe to do when the; /// expression is known to be a constant expression with either a fairly; /// simple type or a known simple form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:238,Usability,simpl,simple,238,"/// Emit the result of the given expression as an abstract constant,; /// asserting that it succeeded. This is only safe to do when the; /// expression is known to be a constant expression with either a fairly; /// simple type or a known simple form.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:28,Integrability,rout,routines,28,// These are private helper routines of the constant emitter that; // can't actually be private because things are split out into helper; // functions and classes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:384,Deployability,install,installed,384,"/// Register a 'signal' value with the emitter to inform it where to; /// resolve a placeholder. The signal value must be unique in the; /// initializer; it might, for example, be the address of a global that; /// refers to the current-address value in its own initializer.; ///; /// Uses of the placeholder must be properly anchored before finalizing; /// the emitter, e.g. by being installed as the initializer of a global; /// variable. That is, it must be possible to replaceAllUsesWith; /// the placeholder with the proper address of the signal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h:430,Modifiability,variab,variable,430,"/// Register a 'signal' value with the emitter to inform it where to; /// resolve a placeholder. The signal value must be unique in the; /// initializer; it might, for example, be the address of a global that; /// refers to the current-address value in its own initializer.; ///; /// Uses of the placeholder must be properly anchored before finalizing; /// the emitter, e.g. by being installed as the initializer of a global; /// variable. That is, it must be possible to replaceAllUsesWith; /// the placeholder with the proper address of the signal.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantEmitter.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:413,Integrability,rout,routines,413,"//===--- ConstantInitBuilder.cpp - Global initializer builder -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines out-of-line routines for building initializers for; // global variables, in particular the kind of globals that are implicitly; // introduced by various language ABIs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:463,Modifiability,variab,variables,463,"//===--- ConstantInitBuilder.cpp - Global initializer builder -------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file defines out-of-line routines for building initializers for; // global variables, in particular the kind of globals that are implicitly; // introduced by various language ABIs.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:86,Deployability,install,installing,86,// Make a global variable. We will replace this with a GEP to this; // position after installing the initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:17,Modifiability,variab,variable,17,// Make a global variable. We will replace this with a GEP to this; // position after installing the initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:86,Deployability,install,installing,86,// Make a global variable. We will replace this with a GEP to this; // position after installing the initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:17,Modifiability,variab,variable,17,// Make a global variable. We will replace this with a GEP to this; // position after installing the initializer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:21,Performance,cache,cache,21,"// Fast path: if the cache is valid, just use it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:10,Performance,cache,cached,10,"// If the cached range ends before the index at which the current; // aggregate starts, recurse for the parent.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:3,Performance,Perform,Perform,3,// Perform simple layout on the elements in cacheEnd..<end.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:44,Performance,cache,cacheEnd,44,// Perform simple layout on the elements in cacheEnd..<end.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:11,Usability,simpl,simple,11,// Perform simple layout on the elements in cacheEnd..<end.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp:3,Performance,Cache,Cache,3,// Cache and return.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ConstantInitBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:3,Deployability,Update,Update,3,// Update previous token location.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:6,Safety,avoid,avoid,6,"// We avoid getLocForEndOfToken here, because it doesn't do what we want for; // macro locations, which we just treat as expanded files.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:98,Availability,redundant,redundant,98,"// Don't add code regions for the area covered by expansion regions.; // This not only suppresses redundant regions, but sometimes prevents; // creating regions with wrong counters if, for example, a statement's; // body ends at the end of a nested macro.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:98,Safety,redund,redundant,98,"// Don't add code regions for the area covered by expansion regions.; // This not only suppresses redundant regions, but sometimes prevents; // creating regions with wrong counters if, for example, a statement's; // body ends at the end of a nested macro.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:6,Integrability,wrap,wrapper,6,/// A wrapper object for maintaining stacks to track the resursive AST visitor; /// walks for the purpose of assigning IDs to leaf-level conditions measured by; /// MC/DC. The object is created with a reference to the MCDCBitmapMap that was; /// created during the initial AST walk. The presence of a bitmap associated; /// with a boolean expression (top-level logical operator nest) indicates that; /// the boolean expression qualified for MC/DC. The resulting condition IDs; /// are preserved in a map reference that is also provided during object; /// creation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:361,Testability,log,logical,361,/// A wrapper object for maintaining stacks to track the resursive AST visitor; /// walks for the purpose of assigning IDs to leaf-level conditions measured by; /// MC/DC. The object is created with a reference to the MCDCBitmapMap that was; /// created during the initial AST walk. The presence of a bitmap associated; /// with a boolean expression (top-level logical operator nest) indicates that; /// the boolean expression qualified for MC/DC. The resulting condition IDs; /// are preserved in a map reference that is also provided during object; /// creation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:1586,Integrability,depend,depending,1586," LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-O",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:43,Testability,log,logical-AND,43,"/// The AST walk recursively visits nested logical-AND or logical-OR binary; /// operator nodes and then visits their LHS and RHS children nodes. As this; /// happens, the algorithm will assign IDs to each operator's LHS and RHS side; /// as the walk moves deeper into the nest. At each level of the recursive; /// nest, the LHS and RHS may actually correspond to larger subtrees (not; /// leaf-conditions). If this is the case, when that node is visited, the ID; /// assigned to the subtree is re-assigned to its LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:58,Testability,log,logical-OR,58,"/// The AST walk recursively visits nested logical-AND or logical-OR binary; /// operator nodes and then visits their LHS and RHS children nodes. As this; /// happens, the algorithm will assign IDs to each operator's LHS and RHS side; /// as the walk moves deeper into the nest. At each level of the recursive; /// nest, the LHS and RHS may actually correspond to larger subtrees (not; /// leaf-conditions). If this is the case, when that node is visited, the ID; /// assigned to the subtree is re-assigned to its LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:1472,Testability,log,logical-AND,1472," LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-O",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:1488,Testability,log,logical-OR,1488," LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-O",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:1626,Testability,log,logical-AND,1626," LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-O",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:1641,Testability,log,logical-OR,1641," LHS, and a new ID is given; /// to its RHS. At the end of the walk, all leaf-level conditions will have a; /// unique ID -- keep in mind that the final set of IDs may not be in; /// numerical order from left to right.; ///; /// Example: ""x = (A && B) || (C && D) || (D && F)""; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ^-------LHS--------^ ^-RHS--^; /// ID=1 ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-O",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:1911,Testability,test,test,1911," ID=2; ///; /// Visit LHS-Depth2:; /// (A && B) || (C && D); /// ^-LHS--^ ^-RHS--^; /// ID=1 ID=3; ///; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2022,Testability,test,test,2022,"//; /// Visit LHS-Depth3:; /// (A && B); /// LHS RHS; /// ID=1 ID=4; ///; /// Visit RHS-Depth3:; /// (C && D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node o",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2084,Testability,log,logical-AND,2084,"&& D); /// LHS RHS; /// ID=3 ID=5; ///; /// Visit RHS-Depth2: (D && F); /// LHS RHS; /// ID=2 ID=6; ///; /// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the c",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2234,Testability,log,logical-OR,2234,"/// Visit Depth1:; /// (A && B) || (C && D) || (D && F); /// ID=1 ID=4 ID=3 ID=5 ID=2 ID=6; ///; /// A node ID of '0' always means MC/DC isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary b",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2369,Testability,log,logical-AND,2369," isn't being tracked.; ///; /// As the AST walk proceeds recursively, the algorithm will also use a stack; /// to track the IDs of logical-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFuncti",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2505,Testability,log,logical-OR,2505,"cal-AND and logical-OR operations on the RHS so; /// that it can be determined which nodes are executed next, depending on how; /// a LHS or RHS of a logical-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underly",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2587,Testability,log,logical-OR,2587,"l-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underlying condition for both MC/DC and branch coverage, the; /// condition IDs themselves are assigned and tracked using the underlying; /// condition itself. Th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2680,Testability,log,logical-AND,2680,"l-AND or logical-OR is evaluated. This; /// information relies on the assigned IDs and are embedded within the; /// coverage region IDs of each branch region associated with a leaf-level; /// condition. This information helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underlying condition for both MC/DC and branch coverage, the; /// condition IDs themselves are assigned and tracked using the underlying; /// condition itself. Th",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2872,Testability,log,logical-AND,2872,"rmation helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underlying condition for both MC/DC and branch coverage, the; /// condition IDs themselves are assigned and tracked using the underlying; /// condition itself. This is done solely for consistency since parentheses; /// and logical-NOTs are ignored when checking whether the condition is; /// actually an instrumentable condition. This can also make debugging a bit; /// easi",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:3008,Testability,log,logical-OR,3008,"tion helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underlying condition for both MC/DC and branch coverage, the; /// condition IDs themselves are assigned and tracked using the underlying; /// condition itself. This is done solely for consistency since parentheses; /// and logical-NOTs are ignored when checking whether the condition is; /// actually an instrumentable condition. This can also make debugging a bit; /// easier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:3414,Testability,log,logical-NOT,3414,"tion helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underlying condition for both MC/DC and branch coverage, the; /// condition IDs themselves are assigned and tracked using the underlying; /// condition itself. This is done solely for consistency since parentheses; /// and logical-NOTs are ignored when checking whether the condition is; /// actually an instrumentable condition. This can also make debugging a bit; /// easier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:3693,Testability,log,logical-NOTs,3693,"tion helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underlying condition for both MC/DC and branch coverage, the; /// condition IDs themselves are assigned and tracked using the underlying; /// condition itself. This is done solely for consistency since parentheses; /// and logical-NOTs are ignored when checking whether the condition is; /// actually an instrumentable condition. This can also make debugging a bit; /// easier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:3380,Usability,simpl,simplicity,3380,"tion helps the visualization tool reconstruct all; /// possible test vectors for the purposes of MC/DC analysis. If a ""next"" node; /// ID is '0', it means it's the end of the test vector. The following rules; /// are used:; ///; /// For logical-AND (""LHS && RHS""):; /// - If LHS is TRUE, execution goes to the RHS node.; /// - If LHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// For logical-OR (""LHS || RHS""):; /// - If LHS is TRUE, execution goes to the LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If LHS is FALSE, execution goes to the RHS node.; ///; /// - If RHS is TRUE, execution goes to LHS node of the next logical-AND.; /// If that does not exist, execution exits (ID == 0).; /// - If RHS is FALSE, execution goes to the LHS node of the next logical-OR.; /// If that does not exist, execution exits (ID == 0).; ///; /// Finally, the condition IDs are also used when instrumenting the code to; /// indicate a unique offset into a temporary bitmap that represents the true; /// or false evaluation of that particular condition.; ///; /// NOTE regarding the use of CodeGenFunction::stripCond(). Even though, for; /// simplicity, parentheses and unary logical-NOT operators are considered; /// part of their underlying condition for both MC/DC and branch coverage, the; /// condition IDs themselves are assigned and tracked using the underlying; /// condition itself. This is done solely for consistency since parentheses; /// and logical-NOTs are ignored when checking whether the condition is; /// actually an instrumentable condition. This can also make debugging a bit; /// easier.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:14,Testability,log,logical-AND,14,/// Is this a logical-AND operation?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:90,Testability,log,logical,90,/// Return whether the build of the control flow map is at the top-level; /// (root) of a logical operator nest in a boolean expression prior to the; /// assignment of condition IDs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:25,Availability,recover,recover,25,"// However, we can still recover without crashing.; // If either location is invalid, set it to std::nullopt to avoid; // letting users of RegionStack think that region has a valid start/end; // location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:25,Safety,recover,recover,25,"// However, we can still recover without crashing.; // If either location is invalid, set it to std::nullopt to avoid; // letting users of RegionStack think that region has a valid start/end; // location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:112,Safety,avoid,avoid,112,"// However, we can still recover without crashing.; // If either location is invalid, set it to std::nullopt to avoid; // letting users of RegionStack think that region has a valid start/end; // location.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:168,Deployability,update,update,168,"// The region ends in a nested file or macro expansion. If the; // region is not a branch region, create a separate region for each; // expansion, and for all regions, update the EndLoc. Branch; // regions should not be split in order to keep a straightforward; // correspondance between the region and its associated branch; // condition, even if the condition spans multiple depths.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:168,Deployability,update,update,168,"// The region ends in a nested file or macro expansion. If the; // region is not a branch region, create a separate region for each; // expansion, and for all regions, update the StartLoc. Branch; // regions should not be split in order to keep a straightforward; // correspondance between the region and its associated branch; // condition, even if the condition spans multiple depths.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:239,Performance,optimiz,optimization,239,"// If a condition can fold to true or false, the corresponding branch; // will be removed. Create a region with both counters hard-coded to; // zero. This allows us to visualize them in a special way.; // Alternatively, we can prevent any optimization done via; // constant-folding by ensuring that ConstantFoldsToSimpleInteger() in; // CodeGenFunction.c always returns false, but that is very heavy-handed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:80,Safety,detect,detects,80,"// The code region for a whole macro is created in handleFileExit() when; // it detects exiting of the virtual file of that macro. If we visited; // statements in non-source order, we might already have such a region; // added, for example, if a body of a loop is divided among multiple; // macros. Avoid adding duplicate regions in such case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:299,Safety,Avoid,Avoid,299,"// The code region for a whole macro is created in handleFileExit() when; // it detects exiting of the virtual file of that macro. If we visited; // statements in non-source order, we might already have such a region; // added, for example, if a body of a loop is divided among multiple; // macros. Avoid adding duplicate regions in such case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:107,Availability,redundant,redundant,107,// The most nested region for each start location is the one with the; // correct count. We avoid creating redundant regions by stopping once; // we've seen this region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:92,Safety,avoid,avoid,92,// The most nested region for each start location is the one with the; // correct count. We avoid creating redundant regions by stopping once; // we've seen this region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:107,Safety,redund,redundant,107,// The most nested region for each start location is the one with the; // correct count. We avoid creating redundant regions by stopping once; // we've seen this region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:12,Modifiability,extend,extendRegion,12,// We can't extendRegion here or we risk overlapping with our new region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:36,Safety,risk,risk,36,// We can't extendRegion here or we risk overlapping with our new region.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:2,Usability,Simpl,Simplify,2,/*Simplify=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:3,Usability,Simpl,Simplify,3,"// Simplify is skipped while building the counters above: it can get really; // slow on top of switches with thousands of cases. Instead, trigger; // simplification by adding zero to the last counter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:150,Usability,simpl,simplification,150,"// Simplify is skipped while building the counters above: it can get really; // slow on top of switches with thousands of cases. Instead, trigger; // simplification by adding zero to the last counter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:3,Modifiability,Extend,Extend,3,"// Extend into the condition before we propagate through it below - this is; // needed to handle macros that generate the ""if"" but not the condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:43,Testability,log,logical,43,// Counter tracks the right hand side of a logical and operator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:43,Testability,log,logical,43,// Counter tracks the right hand side of a logical or operator.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:194,Performance,perform,performs,194,// Dump the coverage mapping data for this function by decoding the; // encoded data. This allows us to dump the mapping regions which were; // also processed by the CoverageMappingWriter which performs; // additional minimization operations such as reducing the number of; // expressions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp:8,Modifiability,variab,variable,8,// This variable will *NOT* be emitted to the object file. It is used; // to pass the list of names referenced to codegen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h:76,Deployability,update,updated,76,// Location of the token parsed before HandleComment is called. This is; // updated every time Preprocessor::Lex lexes a new token.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h:14,Integrability,interface,interface,14,/// Return an interface into CodeGenModule.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/CoverageMappingGen.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h:419,Integrability,interface,interface,419,"//===-- EHScopeStack.h - Stack for cleanup IR generation --------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These classes should be the minimum interface required for other parts of; // CodeGen to emit cleanups. The implementation is in CGCleanup.cpp and other; // implemenentation details that are not widely needed are in CGCleanup.h.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h:138,Energy Efficiency,allocate,allocated,138,"/// Information for lazily generating a cleanup. Subclasses must be; /// POD-like: cleanups will not be destructed, and they will be; /// allocated on the cleanup stack and freely copied and moved; /// around.; ///; /// Cleanup implementations should generally be declared in an; /// anonymous namespace.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h:92,Performance,perform,performs,92,"/// ConditionalCleanup stores the saved form of its parameters,; /// then restores them and performs the cleanup.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h:210,Energy Efficiency,allocate,allocated,210,"// The implementation for this class is in CGException.h and; // CGException.cpp; the definition is here because it's used as a; // member of CodeGenFunction.; /// The start of the scope-stack buffer, i.e. the allocated pointer; /// for the buffer. All of these pointers are either simultaneously; /// null or simultaneously valid.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h:4,Usability,Clear,Clears,4,/// Clears the branch-fixups list. This should only be called by; /// ResolveAllBranchFixups.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/EHScopeStack.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:19,Integrability,wrap,wrapper,19,/// All the thread wrapper functions that have been used.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:142,Performance,load,load,142,"// Even if there are multiple definitions of the vtable, they are required; // by the ABI to use the same symbol name, so should be merged at load; // time. However, if the class has hidden visibility, there can be; // different versions of the class in different modules, and the ABI; // library might treat them as being the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:99,Performance,optimiz,optimization,99,"// Itanium does not emit any destructor variant as an inline thunk.; // Delegating may occur as an optimization, but all variants are either; // emitted with external linkage or as linkonce if they are inline and used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Load,Load,3,// Load the function pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:61,Performance,load,load,61,// Cast the adjusted this to a pointer to vtable pointer and load.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:21,Testability,test,tests,21,// Don't insert type tests if we are forcing public visibility.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:17,Performance,load,load,17,"// If doing VFE, load from the vtable with a type.checked.load intrinsic; // call. Note that we use the GEP to calculate the address to load from; // and pass 0 as the offset to the intrinsic. This is because every; // vtable slot of the correct type is marked with matching metadata, and; // we know that the load must be from one of these slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:58,Performance,load,load,58,"// If doing VFE, load from the vtable with a type.checked.load intrinsic; // call. Note that we use the GEP to calculate the address to load from; // and pass 0 as the offset to the intrinsic. This is because every; // vtable slot of the correct type is marked with matching metadata, and; // we know that the load must be from one of these slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:136,Performance,load,load,136,"// If doing VFE, load from the vtable with a type.checked.load intrinsic; // call. Note that we use the GEP to calculate the address to load from; // and pass 0 as the offset to the intrinsic. This is because every; // vtable slot of the correct type is marked with matching metadata, and; // we know that the load must be from one of these slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:310,Performance,load,load,310,"// If doing VFE, load from the vtable with a type.checked.load intrinsic; // call. Note that we use the GEP to calculate the address to load from; // and pass 0 as the offset to the intrinsic. This is because every; // vtable slot of the correct type is marked with matching metadata, and; // we know that the load must be from one of these slots.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:37,Performance,load,load,37,"// When not doing VFE, emit a normal load, as it allows more; // optimisations than type.checked.load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:97,Performance,load,load,97,"// When not doing VFE, emit a normal load, as it allows more; // optimisations than type.checked.load.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:10,Security,sanitiz,sanitizer,10,// End of sanitizer scope,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:4,Performance,Perform,Perform,4,"/// Perform a bitcast, derived-to-base, or base-to-derived member pointer; /// conversion.; ///; /// Bitcast conversions are always a no-op under Itanium.; ///; /// Obligatory offset/adjustment diagram:; /// <-- offset --> <-- adjustment -->; /// |--------------------------|----------------------|--------------------|; /// ^Derived address point ^Base address point ^Member address point; ///; /// So when converting a base member pointer to a derived member pointer,; /// we add the offset to the adjustment because the address point has; /// decreased; and conversely, when converting a derived MP to a base MP; /// we subtract the offset from the adjustment because the address point; /// has increased.; ///; /// The standard forbids (at compile time) conversion to and from; /// virtual bases, which is why we don't have to consider them here.; ///; /// The standard forbids (at run time) casting a derived MP to a base; /// MP when the derived MP does not point to a member of the base.; /// This is why -1 is a reasonable choice for null data member; /// pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:91,Availability,down,down,91,"// Member data pointers are easy because there's a unique null; // value, so it just comes down to bitwise equality.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:18,Testability,test,tests,18,// This condition tests whether L.ptr == R.ptr. This must always be; // true for equality to hold.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:73,Testability,test,tests,73,"// This condition, together with the assumption that L.ptr == R.ptr,; // tests whether the pointers are both null. ARM imposes an extra; // condition.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:18,Testability,test,tests,18,"// This condition tests whether L.adj == R.adj. If this isn't; // true, the pointers are unequal unless they're both null.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:40,Usability,clear,clear,40,"// Null member function pointers on ARM clear the low bit of Adj,; // so the zero condition has to check that neither low bit is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:35,Testability,test,test,35,// Compute (l.adj | r.adj) & 1 and test it against zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:7,Energy Efficiency,allocate,allocate,7,// Now allocate the exception object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:2,Safety,Detect,DetectVirtual,2,/*DetectVirtual=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:138,Modifiability,inherit,inheritance,138,// If Dst is not derived from Src we can skip the whole computation below and; // return that Src is not a public base of Dst. Record all inheritance paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:25,Modifiability,inherit,inheritance,25,// Now walk all possible inheritance paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:21,Modifiability,inherit,inheritance,21,// Ignore non-public inheritance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Load,Load,3,// Load the type info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Load,Load,3,// Load the type info.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:16,Modifiability,inherit,inheritance,16,// Find all the inheritance paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:2,Safety,Detect,DetectVirtual,2,/*DetectVirtual=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:34,Modifiability,inherit,inheritance,34,// dynamic_cast only finds public inheritance paths.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:30,Modifiability,inherit,inheritance,30,// Find the offset along this inheritance step.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:26,Modifiability,inherit,inheritance,26,"// If there are no public inheritance paths, the cast always fails.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:194,Modifiability,inherit,inherits,194,"// Compare the vptr against the expected vptr for the destination type at; // this offset. Note that we do not know what type ThisAddr points to in; // the case where the derived class multiply inherits from the base class; // so we can't use GetVTablePtr, so we load the vptr directly instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:263,Performance,load,load,263,"// Compare the vptr against the expected vptr for the destination type at; // this offset. Note that we do not know what type ThisAddr points to in; // the case where the derived class multiply inherits from the base class; // so we can't use GetVTablePtr, so we load the vptr directly instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:10,Safety,avoid,avoid,10,// FIXME: avoid the fake decl,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:427,Integrability,contract,contract,427,"/// If this is a function that the ABI specifies returns 'this', initialize; /// the return slot to 'this' at the start of the function.; ///; /// Unlike the setting of return types, this is done within the ABI; /// implementation instead of by clients of CGCXXABI because:; /// 1) getThisValue is currently protected; /// 2) in theory, an ABI could implement 'this' returns some other way;; /// HasThisReturn only specifies a contract, not the implementation",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:124,Performance,perform,performing,124,"// Always emit type metadata on non-available_externally definitions, and on; // available_externally definitions if we are performing whole program; // devirtualization. For WPD we need the type metadata on all vtable; // definitions to ensure we associate derived classes with base classes; // defined in headers but with a strong definition only in a shared library.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:4,Performance,Load,Load,4,/// Load the VTT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:7,Performance,load,load,7,// And load the address point from the VTT.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Queue,Queue,3,// Queue up this vtable for possible deferred emission.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:204,Availability,error,error,204,"// In MS C++ if you have a class with virtual functions in which you are using; // selective member import/export, then all virtual functions must be exported; // unless they are inline, otherwise a link error will result. To match this; // behavior, for such classes, we dllimport the vtable if it is defined; // externally and all the non-inline virtual methods are marked dllimport, and; // we dllexport the vtable if it is defined in this TU and all the non-inline; // virtual methods are marked dllexport.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:18,Performance,load,load,18,"// Add !invariant.load md to virtual function load to indicate that; // function didn't change inside vtable.; // It's safe to add it without -fstrict-vtable-pointers, but it would not; // help in devirtualization because it will only matter if we will have 2; // the same virtual function loads from the same vtable load, which won't; // happen without enabled devirtualization with -fstrict-vtable-pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:46,Performance,load,load,46,"// Add !invariant.load md to virtual function load to indicate that; // function didn't change inside vtable.; // It's safe to add it without -fstrict-vtable-pointers, but it would not; // help in devirtualization because it will only matter if we will have 2; // the same virtual function loads from the same vtable load, which won't; // happen without enabled devirtualization with -fstrict-vtable-pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:290,Performance,load,loads,290,"// Add !invariant.load md to virtual function load to indicate that; // function didn't change inside vtable.; // It's safe to add it without -fstrict-vtable-pointers, but it would not; // help in devirtualization because it will only matter if we will have 2; // the same virtual function loads from the same vtable load, which won't; // happen without enabled devirtualization with -fstrict-vtable-pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:317,Performance,load,load,317,"// Add !invariant.load md to virtual function load to indicate that; // function didn't change inside vtable.; // It's safe to add it without -fstrict-vtable-pointers, but it would not; // help in devirtualization because it will only matter if we will have 2; // the same virtual function loads from the same vtable load, which won't; // happen without enabled devirtualization with -fstrict-vtable-pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:119,Safety,safe,safe,119,"// Add !invariant.load md to virtual function load to indicate that; // function didn't change inside vtable.; // It's safe to add it without -fstrict-vtable-pointers, but it would not; // help in devirtualization because it will only matter if we will have 2; // the same virtual function loads from the same vtable load, which won't; // happen without enabled devirtualization with -fstrict-vtable-pointers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:42,Safety,safe,safe,42,// If the vtable is hidden then it is not safe to emit an available_externally; // copy of vtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:72,Safety,safe,safe,72,// If we don't have any not emitted inline virtual function then we are safe; // to emit an available_externally copy of vtable.; // FIXME we can still emit a copy of the vtable if we; // can emit definition of the inline functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Perform,Perform,3,// Perform the virtual adjustment if we have one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Load,Load,3,// Load the adjustment offset from the vtable as a 32-bit int.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Load,Load,3,// Load the adjustment offset from the vtable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:58,Performance,load,load,58,"// In asan mode emit a function call instead of a regular load and let the; // run-time deal with it: if the shadow is properly poisoned return the; // cookie, otherwise return 0 to avoid an infinite loop calling DTORs.; // We can't simply ignore this load using nosanitize metadata because; // the metadata may be lost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:252,Performance,load,load,252,"// In asan mode emit a function call instead of a regular load and let the; // run-time deal with it: if the shadow is properly poisoned return the; // cookie, otherwise return 0 to avoid an infinite loop calling DTORs.; // We can't simply ignore this load using nosanitize metadata because; // the metadata may be lost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:182,Safety,avoid,avoid,182,"// In asan mode emit a function call instead of a regular load and let the; // run-time deal with it: if the shadow is properly poisoned return the; // cookie, otherwise return 0 to avoid an infinite loop calling DTORs.; // We can't simply ignore this load using nosanitize metadata because; // the metadata may be lost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:233,Usability,simpl,simply,233,"// In asan mode emit a function call instead of a regular load and let the; // run-time deal with it: if the shadow is properly poisoned return the; // cookie, otherwise return 0 to avoid an infinite loop calling DTORs.; // We can't simply ignore this load using nosanitize metadata because; // the metadata may be lost.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:74,Energy Efficiency,allocate,allocated,74,// The number of elements is at offset sizeof(size_t) relative to; // the allocated pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:10,Modifiability,variab,variables,10,// Inline variables that weren't instantiated from variable templates have; // partially-ordered initialization within their translation unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:51,Modifiability,variab,variable,51,// Inline variables that weren't instantiated from variable templates have; // partially-ordered initialization within their translation unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:61,Modifiability,variab,variables,61,// We only need to use thread-safe statics for local non-TLS variables and; // inline variables; other global initialization is always single-threaded; // or (through lazy dynamic loading in multiple threads) unsequenced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:86,Modifiability,variab,variables,86,// We only need to use thread-safe statics for local non-TLS variables and; // inline variables; other global initialization is always single-threaded; // or (through lazy dynamic loading in multiple threads) unsequenced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:180,Performance,load,loading,180,// We only need to use thread-safe statics for local non-TLS variables and; // inline variables; other global initialization is always single-threaded; // or (through lazy dynamic loading in multiple threads) unsequenced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:30,Safety,safe,safe,30,// We only need to use thread-safe statics for local non-TLS variables and; // inline variables; other global initialization is always single-threaded; // or (through lazy dynamic loading in multiple threads) unsequenced.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:23,Modifiability,variab,variable,23,"// If we have a global variable with internal linkage and thread-safe statics; // are disabled, we can just let the guard variable be of type i8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:122,Modifiability,variab,variable,122,"// If we have a global variable with internal linkage and thread-safe statics; // are disabled, we can just let the guard variable be of type i8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:65,Safety,safe,safe,65,"// If we have a global variable with internal linkage and thread-safe statics; // are disabled, we can just let the guard variable be of type i8.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:9,Modifiability,variab,variables,9,"// Guard variables are 64 bits in the generic ABI and size width on ARM; // (i.e. 32-bit on AArch32, 64-bit on AArch64).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:20,Modifiability,variab,variable,20,// Create the guard variable if we don't already have it (as we; // might if we're double-emitting this function body).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:20,Modifiability,variab,variable,20,"// Create the guard variable with a zero-initializer.; // Just absorb linkage, visibility and dll storage class from the guarded; // variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:133,Modifiability,variab,variable,133,"// Create the guard variable with a zero-initializer.; // Just absorb linkage, visibility and dll storage class from the guarded; // variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:10,Modifiability,variab,variable,10,"// If the variable is thread-local, so is its guard variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:52,Modifiability,variab,variable,52,"// If the variable is thread-local, so is its guard variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:20,Modifiability,variab,variable,20,"// Test whether the variable has completed initialization.; //; // Itanium C++ ABI 3.3.2:; // The following is pseudo-code showing how these functions can be used:; // if (obj_guard.first_byte == 0) {; // if ( __cxa_guard_acquire (&obj_guard) ) {; // try {; // ... initialize the object ...;; // } catch (...) {; // __cxa_guard_abort (&obj_guard);; // throw;; // }; // ... queue object destructor with __cxa_atexit() ...;; // __cxa_guard_release (&obj_guard);; // }; // }; //; // If threadsafe statics are enabled, but we don't have inline atomics, just; // call __cxa_guard_acquire unconditionally. The ""inline"" check isn't; // actually inline, and the user might not expect calls to __atomic libcalls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:373,Performance,queue,queue,373,"// Test whether the variable has completed initialization.; //; // Itanium C++ ABI 3.3.2:; // The following is pseudo-code showing how these functions can be used:; // if (obj_guard.first_byte == 0) {; // if ( __cxa_guard_acquire (&obj_guard) ) {; // try {; // ... initialize the object ...;; // } catch (...) {; // __cxa_guard_abort (&obj_guard);; // throw;; // }; // ... queue object destructor with __cxa_atexit() ...;; // __cxa_guard_release (&obj_guard);; // }; // }; //; // If threadsafe statics are enabled, but we don't have inline atomics, just; // call __cxa_guard_acquire unconditionally. The ""inline"" check isn't; // actually inline, and the user might not expect calls to __atomic libcalls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Testability,Test,Test,3,"// Test whether the variable has completed initialization.; //; // Itanium C++ ABI 3.3.2:; // The following is pseudo-code showing how these functions can be used:; // if (obj_guard.first_byte == 0) {; // if ( __cxa_guard_acquire (&obj_guard) ) {; // try {; // ... initialize the object ...;; // } catch (...) {; // __cxa_guard_abort (&obj_guard);; // throw;; // }; // ... queue object destructor with __cxa_atexit() ...;; // __cxa_guard_release (&obj_guard);; // }; // }; //; // If threadsafe statics are enabled, but we don't have inline atomics, just; // call __cxa_guard_acquire unconditionally. The ""inline"" check isn't; // actually inline, and the user might not expect calls to __atomic libcalls.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:36,Modifiability,variab,variable,36,// Load the first byte of the guard variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Load,Load,3,// Load the first byte of the guard variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:183,Performance,load,load,183,"// Itanium ABI:; // An implementation supporting thread-safety on multiprocessor; // systems must also guarantee that references to the initialized; // object do not occur before the load of the initialization flag.; //; // In LLVM, we do this by marking the load Acquire.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:259,Performance,load,load,259,"// Itanium ABI:; // An implementation supporting thread-safety on multiprocessor; // systems must also guarantee that references to the initialized; // object do not occur before the load of the initialization flag.; //; // In LLVM, we do this by marking the load Acquire.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:56,Safety,safe,safety,56,"// Itanium ABI:; // An implementation supporting thread-safety on multiprocessor; // systems must also guarantee that references to the initialized; // object do not occur before the load of the initialization flag.; //; // In LLVM, we do this by marking the load Acquire.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:242,Integrability,synchroniz,synchronizing,242,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:395,Integrability,protocol,protocol,395,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:163,Modifiability,variab,variables,163,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:313,Modifiability,variab,variable,313,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:676,Modifiability,variab,variable,676,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:753,Modifiability,variab,variable,753,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:388,Security,access,access,388,"// For ARM, we should only check the first bit, rather than the entire byte:; //; // ARM C++ ABI 3.2.3.1:; // To support the potential use of initialization guard variables; // as semaphores that are the target of ARM SWP and LDREX/STREX; // synchronizing instructions we define a static initialization; // guard variable to be a 4-byte aligned, 4-byte word with the; // following inline access protocol.; // #define INITIALIZED 1; // if ((obj_guard & INITIALIZED) != INITIALIZED) {; // if (__cxa_guard_acquire(&obj_guard)); // ...; // }; //; // and similarly for ARM64:; //; // ARM64 C++ ABI 3.2.2:; // This ABI instead only specifies the value bit 0 of the static guard; // variable; all other bits are platform defined. Bit 0 shall be 0 when the; // variable is not initialized and 1 when it is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:40,Modifiability,variab,variable,40,// Check if the first byte of the guard variable is zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:99,Integrability,depend,depends,99,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:46,Modifiability,variab,variables,46,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:183,Modifiability,variab,variables,183,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:404,Modifiability,variab,variables,404,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:548,Modifiability,variab,variables,548,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:746,Modifiability,variab,variables,746,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:909,Modifiability,variab,variables,909,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:1050,Modifiability,Variab,Variables,1050,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:215,Safety,abort,aborted,215,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:698,Safety,avoid,avoid,698,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:1089,Safety,safe,safe,1089,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:980,Security,access,accesses,980,"// The semantics of dynamic initialization of variables with static or thread; // storage duration depends on whether they are declared at block-scope. The; // initialization of such variables at block-scope can be aborted with an; // exception and later retried (per C++20 [stmt.dcl]p4), and recursive entry; // to their initialization has undefined behavior (also per C++20; // [stmt.dcl]p4). For such variables declared at non-block scope, exceptions; // lead to termination (per C++20 [except.terminate]p1), and recursive; // references to the variables are governed only by the lifetime rules (per; // C++20 [class.cdtor]p2), which means such references are perfectly fine as; // long as they avoid touching memory. As a result, block-scope variables must; // not be marked as initialized until after initialization completes (unless; // the mark is reverted following an exception), but non-block-scope variables; // must be marked prior to initialization so that recursive accesses during; // initialization do not restart initialization.; // Variables used when coping with thread-safe statics and exceptions.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:17,Modifiability,variab,variables,17,"// For non-local variables, store 1 into the first byte of the guard; // variable before the object initialization begins so that references; // to the variable during initialization don't restart initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:73,Modifiability,variab,variable,73,"// For non-local variables, store 1 into the first byte of the guard; // variable before the object initialization begins so that references; // to the variable during initialization don't restart initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:152,Modifiability,variab,variable,152,"// For non-local variables, store 1 into the first byte of the guard; // variable before the object initialization begins so that references; // to the variable during initialization don't restart initialization.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:17,Safety,abort,abort,17,// Pop the guard-abort cleanup if we pushed one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:13,Modifiability,variab,variables,13,"// For local variables, store 1 into the first byte of the guard variable; // after the object initialization completes so that initialization is; // retried if initialization is interrupted by an exception.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:65,Modifiability,variab,variable,65,"// For local variables, store 1 into the first byte of the guard variable; // after the object initialization completes so that initialization is; // retried if initialization is interrupted by an exception.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:12,Modifiability,variab,variable,12,// Create a variable that binds the atexit to this shared object.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:70,Availability,avail,available,70,// Register the destructor function calling __cxa_atexit if it is; // available. Otherwise fall back on calling atexit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:102,Availability,avail,available,102,// OpenMP offloading supports C++ constructors and destructors but we do not; // always have 'atexit' available. Instead lower these to use the LLVM global; // destructors which we can handle directly in the runtime. Note that this is; // not strictly 1-to-1 with using `atexit` because we no longer tear down; // globals in reverse order of when they were constructed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:305,Availability,down,down,305,// OpenMP offloading supports C++ constructors and destructors but we do not; // always have 'atexit' available. Instead lower these to use the LLVM global; // destructors which we can handle directly in the runtime. Note that this is; // not strictly 1-to-1 with using `atexit` because we no longer tear down; // globals in reverse order of when they were constructed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:98,Integrability,depend,depending,98,"// emitGlobalDtorWithCXAAtExit will emit a call to either __cxa_thread_atexit; // or __cxa_atexit depending on whether this VarDecl is a thread-local storage; // or not. CXAAtExit controls only __cxa_atexit, so use it if it is enabled.; // We can always use __cxa_thread_atexit.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:106,Modifiability,variab,variable,106,"// In Apple kexts, we want to add a global destructor entry.; // FIXME: shouldn't this be guarded by some variable?",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:92,Integrability,wrap,wrapper,92,// Darwin prefers to have references to thread local variables to go through; // the thread wrapper instead of directly referencing the backing variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:53,Modifiability,variab,variables,53,// Darwin prefers to have references to thread local variables to go through; // the thread wrapper instead of directly referencing the backing variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:144,Modifiability,variab,variable,144,// Darwin prefers to have references to thread local variables to go through; // the thread wrapper instead of directly referencing the backing variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:40,Integrability,wrap,wrapper,40,"/// Get the appropriate linkage for the wrapper function. This is essentially; /// the weak form of the variable's linkage; every translation unit which needs; /// the wrapper emits a copy, and we want the linker to merge them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:168,Integrability,wrap,wrapper,168,"/// Get the appropriate linkage for the wrapper function. This is essentially; /// the weak form of the variable's linkage; every translation unit which needs; /// the wrapper emits a copy, and we want the linker to merge them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:104,Modifiability,variab,variable,104,"/// Get the appropriate linkage for the wrapper function. This is essentially; /// the weak form of the variable's linkage; every translation unit which needs; /// the wrapper emits a copy, and we want the linker to merge them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:69,Integrability,wrap,wrapper,69,"// For internal linkage variables, we don't need an external or weak wrapper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:24,Modifiability,variab,variables,24,"// For internal linkage variables, we don't need an external or weak wrapper.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:17,Integrability,wrap,wrapper,17,"// If the thread wrapper is replaceable, give it appropriate linkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:40,Integrability,wrap,wrapper,40,// Mangle the name for the thread_local wrapper function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:36,Integrability,wrap,wrapper,36,// Always resolve references to the wrapper at link time.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:34,Integrability,wrap,wrappers,34,// Create declarations for thread wrappers for all thread-local variables; // with non-discardable definitions in this translation unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:64,Modifiability,variab,variables,64,// Create declarations for thread wrappers for all thread-local variables; // with non-discardable definitions in this translation unit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:30,Integrability,wrap,wrappers,30,// Emit all referenced thread wrappers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:92,Integrability,wrap,wrapper,92,// Some targets require that all access to thread local variables go through; // the thread wrapper. This means that we cannot attempt to create a thread; // wrapper or a thread helper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:158,Integrability,wrap,wrapper,158,// Some targets require that all access to thread local variables go through; // the thread wrapper. This means that we cannot attempt to create a thread; // wrapper or a thread helper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:56,Modifiability,variab,variables,56,// Some targets require that all access to thread local variables go through; // the thread wrapper. This means that we cannot attempt to create a thread; // wrapper or a thread helper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:33,Security,access,access,33,// Some targets require that all access to thread local variables go through; // the thread wrapper. This means that we cannot attempt to create a thread; // wrapper or a thread helper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:72,Integrability,wrap,wrapper,72,"// If this isn't a TU in which this variable is defined, the thread; // wrapper is discardable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:36,Modifiability,variab,variable,36,"// If this isn't a TU in which this variable is defined, the thread; // wrapper is discardable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:35,Modifiability,variab,variable,35,"// If we have a definition for the variable, emit the initialization; // function as an alias to the global Init function (if any). Otherwise,; // produce a declaration of the initialization function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:146,Modifiability,variab,variable,146,// Emit a weak global function referring to the initialization function.; // This function will not exist if the TU defining the thread_local; // variable in question does not need any dynamic initialization for; // its thread_local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:233,Modifiability,variab,variables,233,// Emit a weak global function referring to the initialization function.; // This function will not exist if the TU defining the thread_local; // variable in question does not need any dynamic initialization for; // its thread_local variables.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:125,Integrability,rout,routine,125,"// The linker on AIX is not happy with missing weak symbols. However,; // other TUs will not know whether the initialization routine exists; // so create an empty, init function to satisfy the linker.; // This is needed whenever a thread wrapper function is not used, and; // also when the symbol is weak.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:238,Integrability,wrap,wrapper,238,"// The linker on AIX is not happy with missing weak symbols. However,; // other TUs will not know whether the initialization routine exists; // so create an empty, init function to satisfy the linker.; // This is needed whenever a thread wrapper function is not used, and; // also when the symbol is weak.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:201,Modifiability,variab,variable,201,"// Init should be null. If it were non-null, then the logic above would; // either be defining the function to be an alias or declaring the; // function with the expectation that the definition of the variable; // is elsewhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:54,Testability,log,logic,54,"// Init should be null. If it were non-null, then the logic above would; // either be defining the function to be an alias or declaring the; // function with the expectation that the definition of the variable; // is elsewhere.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:159,Integrability,rout,routines,159,"// On AIX, except if constinit and also neither of class type or of; // (possibly multi-dimensional) array of class type, thread_local vars; // will have init routines regardless of whether they are; // const-initialized. Since the routine is guaranteed to exist, we can; // unconditionally call it without testing for its existance. This; // avoids potentially unresolved weak symbols which the AIX linker; // isn't happy with.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:232,Integrability,rout,routine,232,"// On AIX, except if constinit and also neither of class type or of; // (possibly multi-dimensional) array of class type, thread_local vars; // will have init routines regardless of whether they are; // const-initialized. Since the routine is guaranteed to exist, we can; // unconditionally call it without testing for its existance. This; // avoids potentially unresolved weak symbols which the AIX linker; // isn't happy with.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:343,Safety,avoid,avoids,343,"// On AIX, except if constinit and also neither of class type or of; // (possibly multi-dimensional) array of class type, thread_local vars; // will have init routines regardless of whether they are; // const-initialized. Since the routine is guaranteed to exist, we can; // unconditionally call it without testing for its existance. This; // avoids potentially unresolved weak symbols which the AIX linker; // isn't happy with.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:307,Testability,test,testing,307,"// On AIX, except if constinit and also neither of class type or of; // (possibly multi-dimensional) array of class type, thread_local vars; // will have init routines regardless of whether they are; // const-initialized. Since the routine is guaranteed to exist, we can; // unconditionally call it without testing for its existance. This; // avoids potentially unresolved weak symbols which the AIX linker; // isn't happy with.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:38,Integrability,wrap,wrapper,38,"// For a reference, the result of the wrapper function is a pointer to; // the referenced object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:84,Modifiability,inherit,inheritance,84,"/// BuildSIClassTypeInfo - Build an abi::__si_class_type_info, used for single; /// inheritance, according to the Itanium C++ ABI, 2.9.5p6b.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:58,Modifiability,inherit,inheritance,58,/// VMI_NonDiamondRepeat - Class has non-diamond repeated inheritance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:23,Modifiability,variab,variable,23,"// Create a new global variable.; // Note for the future: If we would ever like to do deferred emission of; // RTTI, check if emitting vtables opportunistically need any adjustment.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:10,Integrability,protocol,protocol,10,// Ignore protocol qualifiers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:126,Availability,down,down,126,"// Itanium C++ ABI 2.9.5p7:; // In addition, it and all of the intermediate abi::__pointer_type_info; // structs in the chain down to the abi::__class_type_info for the; // incomplete class type must be prevented from resolving to the; // corresponding type_info structs for the complete class type, possibly; // by making them local static objects. Finally, a dummy class RTTI is; // generated for the incomplete type that will not resolve to the final; // complete class RTTI (because the latter need not exist), possibly by; // making it a local static object.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:61,Usability,clear,clear,61,"// The flag is the sign bit, which on ARM64 is defined to be clear; // for global pointers. This is very ARM64-specific.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:36,Modifiability,variab,variable,36,"// If there's already an old global variable, replace it with the new one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:670,Testability,test,tests,670,"// The Itanium ABI specifies that type_info objects must be globally; // unique, with one exception: if the type is an incomplete class; // type or a (possibly indirect) pointer to one. That exception; // affects the general case of comparing type_info objects produced; // by the typeid operator, which is why the comparison operators on; // std::type_info generally use the type_info name pointers instead; // of the object addresses. However, the language's built-in uses; // of RTTI generally require class types to be complete, even when; // manipulating pointers to those class types. This allows the; // implementation of dynamic_cast to rely on address equality tests,; // which is much faster.; // All of this is to say that it's important that both the type_info; // object and the type_info name be uniqued when weakly emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:29,Modifiability,inherit,inheritance,29,// Everything else is single inheritance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:84,Modifiability,inherit,inheritance,84,"/// BuildSIClassTypeInfo - Build an abi::__si_class_type_info, used for single; /// inheritance, according to the Itanium C++ ABI, 2.95p6b.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:102,Modifiability,inherit,inheritance,102,"// If this non-virtual base has been seen before, then the class has non-; // diamond shaped repeated inheritance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:678,Modifiability,extend,extend,678,"// Now add the base class descriptions.; // Itanium C++ ABI 2.9.5p6c:; // __base_info[] is an array of base class descriptions -- one for every; // direct proper base. Each description is of the type:; //; // struct abi::__base_class_type_info {; // public:; // const __class_type_info *__base_type;; // long __offset_flags;; //; // enum __offset_flags_masks {; // __virtual_mask = 0x1,; // __public_mask = 0x2,; // __offset_shift = 8; // };; // };; // If we're in mingw and 'long' isn't wide enough for a pointer, use 'long; // long' instead of 'long' for __offset_flags. libstdc++abi uses long long on; // LLP64 platforms.; // FIXME: Consider updating libc++abi to match, and extend this logic to all; // LLP64 platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:690,Testability,log,logic,690,"// Now add the base class descriptions.; // Itanium C++ ABI 2.9.5p6c:; // __base_info[] is an array of base class descriptions -- one for every; // direct proper base. Each description is of the type:; //; // struct abi::__base_class_type_info {; // public:; // const __class_type_info *__base_type;; // long __offset_flags;; //; // enum __offset_flags_masks {; // __virtual_mask = 0x1,; // __public_mask = 0x2,; // __offset_shift = 8; // };; // };; // If we're in mingw and 'long' isn't wide enough for a pointer, use 'long; // long' instead of 'long' for __offset_flags. libstdc++abi uses long long on; // LLP64 platforms.; // FIXME: Consider updating libc++abi to match, and extend this logic to all; // LLP64 platforms.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:76,Availability,mask,masks,76,"// The low-order byte of __offset_flags contains flags, as given by the; // masks from the enumeration __offset_flags_masks.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Load,Load,3,// Load the exception from where the landing pad saved it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:215,Integrability,contract,contract,215,"// However, if we're catching a pointer-to-record type that won't; // work, because the personality function might have adjusted; // the pointer. There's actually no way for us to fully satisfy; // the language/ABI contract here: we can't use Exn because it; // might have the wrong adjustment, but we can't use the by-value; // pointer because it's off by a level of abstraction.; //; // The current solution is to dump the adjusted pointer into an; // alloca, which breaks language semantics (because changing the; // pointer doesn't change the exception) but at least works.; // The better solution would be to filter out non-exact matches; // and rethrow them, but this is tricky because the rethrow; // really needs to be catchable by other sites at this landing; // pad. The best solution is to fix the personality function.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Performance,Perform,Perform,3,// Perform the copy construction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:3,Usability,Undo,Undo,3,// Undo the opaque value mapping.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:55,Modifiability,variab,variable,55,/// Begins a catch statement by initializing the catch variable and; /// calling __cxa_begin_catch.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:317,Modifiability,variab,variable,317,// We have to be very careful with the ordering of cleanups here:; // C++ [except.throw]p4:; // The destruction [of the exception temporary] occurs; // immediately after the destruction of the object declared in; // the exception-declaration in the handler.; //; // So the precise ordering is:; // 1. Construct catch variable.; // 2. __cxa_begin_catch; // 3. Enter __cxa_end_catch cleanup; // 4. Enter dtor cleanup; //; // We do this by using a slightly abnormal initialization process.; // Delegation sequence:; // - ExitCXXTryStmt opens a RunCleanupsScope; // - EmitAutoVarAlloca creates the variable and debug info; // - InitCatchParam initializes the variable from the exception; // - CallBeginCatch calls __cxa_begin_catch; // - CallBeginCatch enters the __cxa_end_catch cleanup; // - EmitAutoVarCleanups enters the variable destructor cleanup; // - EmitCXXTryStmt emits the code for the catch body; // - EmitCXXTryStmt close the RunCleanupsScope,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:594,Modifiability,variab,variable,594,// We have to be very careful with the ordering of cleanups here:; // C++ [except.throw]p4:; // The destruction [of the exception temporary] occurs; // immediately after the destruction of the object declared in; // the exception-declaration in the handler.; //; // So the precise ordering is:; // 1. Construct catch variable.; // 2. __cxa_begin_catch; // 3. Enter __cxa_end_catch cleanup; // 4. Enter dtor cleanup; //; // We do this by using a slightly abnormal initialization process.; // Delegation sequence:; // - ExitCXXTryStmt opens a RunCleanupsScope; // - EmitAutoVarAlloca creates the variable and debug info; // - InitCatchParam initializes the variable from the exception; // - CallBeginCatch calls __cxa_begin_catch; // - CallBeginCatch enters the __cxa_end_catch cleanup; // - EmitAutoVarCleanups enters the variable destructor cleanup; // - EmitCXXTryStmt emits the code for the catch body; // - EmitCXXTryStmt close the RunCleanupsScope,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:655,Modifiability,variab,variable,655,// We have to be very careful with the ordering of cleanups here:; // C++ [except.throw]p4:; // The destruction [of the exception temporary] occurs; // immediately after the destruction of the object declared in; // the exception-declaration in the handler.; //; // So the precise ordering is:; // 1. Construct catch variable.; // 2. __cxa_begin_catch; // 3. Enter __cxa_end_catch cleanup; // 4. Enter dtor cleanup; //; // We do this by using a slightly abnormal initialization process.; // Delegation sequence:; // - ExitCXXTryStmt opens a RunCleanupsScope; // - EmitAutoVarAlloca creates the variable and debug info; // - InitCatchParam initializes the variable from the exception; // - CallBeginCatch calls __cxa_begin_catch; // - CallBeginCatch enters the __cxa_end_catch cleanup; // - EmitAutoVarCleanups enters the variable destructor cleanup; // - EmitCXXTryStmt emits the code for the catch body; // - EmitCXXTryStmt close the RunCleanupsScope,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:821,Modifiability,variab,variable,821,// We have to be very careful with the ordering of cleanups here:; // C++ [except.throw]p4:; // The destruction [of the exception temporary] occurs; // immediately after the destruction of the object declared in; // the exception-declaration in the handler.; //; // So the precise ordering is:; // 1. Construct catch variable.; // 2. __cxa_begin_catch; // 3. Enter __cxa_end_catch cleanup; // 4. Enter dtor cleanup; //; // We do this by using a slightly abnormal initialization process.; // Delegation sequence:; // - ExitCXXTryStmt opens a RunCleanupsScope; // - EmitAutoVarAlloca creates the variable and debug info; // - InitCatchParam initializes the variable from the exception; // - CallBeginCatch calls __cxa_begin_catch; // - CallBeginCatch enters the __cxa_end_catch cleanup; // - EmitAutoVarCleanups enters the variable destructor cleanup; // - EmitCXXTryStmt emits the code for the catch body; // - EmitCXXTryStmt close the RunCleanupsScope,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp:52,Modifiability,variab,variable,52,// Create the finalization action associated with a variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ItaniumCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MacroPPCallbacks.h:4,Deployability,Update,Update,4,/// Update current file scope status to next file scope.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MacroPPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MacroPPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MacroPPCallbacks.h:66,Deployability,release,released,66,/// Hook called whenever a macro \#undef is seen.; ///; /// MD is released immediately following this callback.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MacroPPCallbacks.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MacroPPCallbacks.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:356,Modifiability,inherit,inheritance,356,"// The vbases might be ordered differently in the final overrider object; // and the complete object, so the ""this"" argument may sometimes point to; // memory that has no particular type (e.g. past the complete object).; // In this case, we just use a generic pointer type.; // FIXME: might want to have a more precise type in the non-virtual; // multiple inheritance case.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:5,Integrability,rout,routines,5,// 5 routines for constructing the llvm types for MS RTTI structs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:4,Performance,Perform,Performs,4,/// Performs a full virtual base adjustment. Used to dereference; /// pointers to members of virtual bases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:12,Integrability,wrap,wrapper,12,/// Caching wrapper around VBTableBuilder::enumerateVBTables().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:23,Modifiability,variab,variable,23,/// Info on the global variable used to guard initialization of static locals.; /// The BitIndex field is only used for externally invisible declarations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:46,Modifiability,variab,variable,46,/// Map from DeclContext to the current guard variable. We assume that the; /// AST is visited in source code order.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:48,Usability,simpl,simple,48,// Pass things indirectly for now because it is simple.; // FIXME: This is incompatible with MSVC for arguments with a dtor and no; // copy ctor.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:201,Availability,error,error,201,"// If the argument has *required* alignment greater than four bytes, pass; // it indirectly. Prior to MSVC version 19.14, passing overaligned; // arguments was not supported and resulted in a compiler error. In 19.14; // and later versions, such arguments are now passed indirectly.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:33,Modifiability,polymorphi,polymorphic,33,"/// We need to perform a generic polymorphic operation (like a typeid; /// or a cast), which requires an object with a vfptr. Adjust the; /// address to point to an object with a vfptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:15,Performance,perform,perform,15,"/// We need to perform a generic polymorphic operation (like a typeid; /// or a cast), which requires an object with a vfptr. Adjust the; /// address to point to an object with a vfptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:80,Modifiability,polymorphi,polymorphic,80,"// Okay, one of the vbases must have a vfptr, or else this isn't; // actually a polymorphic class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:183,Integrability,wrap,wrapper,183,// Exported default constructors either have a simple call-site where they use; // the typical calling convention and have a single 'this' pointer for an; // argument -or- they get a wrapper function which appropriately thunks to the; // real default constructor. This thunk is the default constructor closure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:47,Usability,simpl,simple,47,// Exported default constructors either have a simple call-site where they use; // the typical calling convention and have a single 'this' pointer for an; // argument -or- they get a wrapper function which appropriately thunks to the; // real default constructor. This thunk is the default constructor closure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:220,Deployability,Update,Update,220,"// Non-virtual adjustment might result in a pointer outside the allocated; // object, e.g. if the final overrider class is laid out after the virtual; // base that declares a method in the most derived class.; // FIXME: Update the code that emits this adjustment in thunks prologues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:64,Energy Efficiency,allocate,allocated,64,"// Non-virtual adjustment might result in a pointer outside the allocated; // object, e.g. if the final overrider class is laid out after the virtual; // base that declares a method in the most derived class.; // FIXME: Update the code that emits this adjustment in thunks prologues.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:639,Integrability,depend,depend,639,"// Overridden virtual methods of non-primary bases need to adjust the incoming; // 'this' pointer in the prologue. In this hierarchy, C::b will subtract; // sizeof(void*) to adjust from B* to C*:; // struct A { virtual void a(); };; // struct B { virtual void b(); };; // struct C : A, B { virtual void b(); };; //; // Leave the value stored in the 'this' alloca unadjusted, so that the; // debugger sees the unadjusted value. Microsoft debuggers require this, and; // will apply the ThisAdjustment in the method type information.; // FIXME: Do something better for DWARF debuggers, which won't expect this,; // without making our codegen depend on debug info settings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:419,Integrability,contract,contract,419,"// If this is a function that the ABI specifies returns 'this', initialize; // the return slot to 'this' at the start of the function.; //; // Unlike the setting of return types, this is done within the ABI; // implementation instead of by clients of CGCXXABI because:; // 1) getThisValue is currently protected; // 2) in theory, an ABI could implement 'this' returns some other way;; // HasThisReturn only specifies a contract, not the implementation",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:184,Performance,optimiz,optimization,184,"// Use the base destructor variant in place of the complete destructor variant; // if the class has no virtual bases. This effectively implements some of the; // -mconstructor-aliases optimization, but as part of the MS C++ ABI.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:197,Modifiability,variab,variables,197,"// Emit type metadata on vtables with LTO or IR instrumentation.; // In IR instrumentation, the type metadata could be used to find out vtable; // definitions (for type profiling) among all global variables.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:136,Performance,cache,cache,136,"// getAddrOfVTable may return 0 if asked to get an address of a vtable which; // shouldn't be used in the given record type. We want to cache this result in; // VFTablesMap, thus a simple zero check is not sufficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:181,Usability,simpl,simple,181,"// getAddrOfVTable may return 0 if asked to get an address of a vtable which; // shouldn't be used in the given record type. We want to cache this result in; // VFTablesMap, thus a simple zero check is not sufficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:53,Performance,Queue,Queue,53,// We haven't processed this record type before.; // Queue up this vtable for possible deferred emission.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:328,Testability,log,logic,328,"// Classes marked __declspec(dllimport) need vftables generated on the; // import-side in order to support features like constexpr. No other; // translation unit relies on the emission of the local vftable, translation; // units are expected to generate them as needed.; //; // Because of this unique behavior, we maintain this logic here instead of; // getVTableLinkage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:20,Modifiability,variab,variable,20,// Create a backing variable for the contents of VTable. The VTable may; // or may not include space for a pointer to RTTI data.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:33,Performance,cache,cache,33,"// At this layer, we can key the cache off of a single class, which is much; // easier than caching each vbtable individually.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:3,Performance,Cache,Cache,3,// Cache the globals for all vbtables so we don't have to recompute the; // mangled names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:3,Performance,Load,Load,3,// Load the vfptr and then callee from the vftable. The callee should have; // adjusted 'this' so that the vfptr is at offset zero.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:64,Energy Efficiency,allocate,allocated,64,"// Non-virtual adjustment might result in a pointer outside the allocated; // object, e.g. if the final overrider class is laid out after the virtual; // base that declares a method in the most derived class.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:8,Modifiability,variab,variable,8,"// This variable has discardable linkage, we have to add it to @llvm.used to; // ensure it won't get discarded.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:220,Modifiability,variab,variable,220,// __tls_guard comes from the MSVC runtime and reflects; // whether TLS has been initialized for a particular thread.; // It is set from within __dyn_tls_init by the runtime.; // Every library and executable has its own variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:73,Modifiability,variab,variable,73,"// Dynamic TLS initialization works by checking the state of a; // guard variable (__tls_guard) to see whether TLS initialization; // for a thread has happend yet.; // If not, the initialization is triggered on-demand; // by calling __dyn_tls_on_demand_init.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:12,Modifiability,variab,variable,12,// Emit the variable just like any regular global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:50,Modifiability,variab,variable,50,// Emit the variable just like any regular global variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:24,Availability,mask,mask,24,// Reset the bit in the mask so that the static variable may be; // reinitialized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:48,Modifiability,variab,variable,48,// Reset the bit in the mask so that the static variable may be; // reinitialized.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:22,Modifiability,variab,variables,22,// Thread-safe static variables which aren't thread-specific have a; // per-variable guard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:76,Modifiability,variab,variable,76,// Thread-safe static variables which aren't thread-specific have a; // per-variable guard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:10,Safety,safe,safe,10,// Thread-safe static variables which aren't thread-specific have a; // per-variable guard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:17,Modifiability,variab,variable,17,// Get the guard variable for this function if we have one already.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:22,Modifiability,variab,variables,22,// Externally visible variables have to be numbered in Sema to properly; // handle unreachable VarDecls.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:26,Modifiability,variab,variables,26,// Non-externally visible variables are numbered here in CodeGen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:20,Modifiability,variab,variable,20,"// Create the guard variable with a zero-initializer. Just absorb linkage,; // visibility and dll storage class from the guarded variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:129,Modifiability,variab,variable,129,"// Create the guard variable with a zero-initializer. Just absorb linkage,; // visibility and dll storage class from the guarded variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:166,Modifiability,variab,variable,166,// Pseudo code for the test:; // if (!(GuardVar & MyGuardBit)) {; // GuardVar |= MyGuardBit;; // ... initialize the object ...;; // }; // Test our bit from the guard variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:23,Testability,test,test,23,// Pseudo code for the test:; // if (!(GuardVar & MyGuardBit)) {; // GuardVar |= MyGuardBit;; // ... initialize the object ...;; // }; // Test our bit from the guard variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:138,Testability,Test,Test,138,// Pseudo code for the test:; // if (!(GuardVar & MyGuardBit)) {; // GuardVar |= MyGuardBit;; // ... initialize the object ...;; // }; // Test our bit from the guard variable.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:28,Modifiability,variab,variable,28,// Set our bit in the guard variable and emit the initializer and add a global; // destructor if appropriate.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:23,Testability,test,test,23,// Pseudo code for the test:; // if (TSS > _Init_thread_epoch) {; // _Init_thread_header(&TSS);; // if (TSS == -1) {; // ... initialize the object ...;; // _Init_thread_footer(&TSS);; // }; // }; //; // The algorithm is almost identical to what can be found in the appendix; // found in N2325.; // This BasicBLock determines whether or not we have any work to do.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:39,Integrability,depend,depends,39,"// Null-ness for function memptrs only depends on the first field, which is; // the function pointer. The rest don't matter, so we can zero initialize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:10,Modifiability,inherit,inheritance,10,// Single inheritance class member pointer are represented as scalars instead; // of aggregates.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:52,Modifiability,inherit,inheritance,52,"// If this is a single field member pointer (single inheritance), this is a; // single icmp.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:49,Testability,test,test,49,"// For function member pointers, we only need to test the function pointer; // field. The other fields if any can be garbage.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:20,Availability,down,down,20,"// Otherwise, break down all the fields for comparison. Hopefully these; // little Constants are reused, while a big null struct might not be.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:3,Performance,Load,Load,3,// Load the vbtable pointer from the vbptr in the instance.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:3,Performance,Load,Load,3,// Load an i32 offset from the vb-table.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:22,Modifiability,inherit,inheritance,22,"// In the unspecified inheritance model, there might not be a vbtable at all,; // in which case we need to skip the virtual base lookup. If there is a; // vbtable, the first entry is a no-op entry that gives back the original; // base, so look for a virtual base adjustment offset of zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:98,Modifiability,inherit,inheritance,98,"// We may be adding or dropping fields from the member pointer, so we need; // both types and the inheritance models of both records.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:15,Modifiability,inherit,inheritance,15,// The virtual inheritance model has a quirk: the virtual base table is always; // referenced when dereferencing a member pointer even if the member pointer; // is non-virtual. This is accounted for by adjusting the non-virtual offset; // to point backwards to the top of the MDC from the first VBase. Undo this; // adjustment to normalize the member pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:302,Usability,Undo,Undo,302,// The virtual inheritance model has a quirk: the virtual base table is always; // referenced when dereferencing a member pointer even if the member pointer; // is non-virtual. This is accounted for by adjusting the non-virtual offset; // to point backwards to the top of the MDC from the first VBase. Undo this; // adjustment to normalize the member pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:3,Deployability,Update,Update,3,// Update the vbindex to an appropriate value in the destination because; // SrcRD's vbtable might not be a strict prefix of the one in DstRD.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:417,Energy Efficiency,efficient,efficiently,417,"/// A Helper struct that stores information about a class in a class; /// hierarchy. The information stored in these structs struct is used during; /// the generation of ClassHierarchyDescriptors and BaseClassDescriptors.; // During RTTI creation, MSRTTIClasses are stored in a contiguous array with; // implicit depth first pre-order tree connectivity. getFirstChild and; // getNextSibling allow us to walk the tree efficiently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:61,Performance,cache,caches,61,/// An ephemeral helper class for building MS RTTI types. It caches some; /// calls to the module and information about the most derived class in a; /// hierarchy.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:9,Availability,down,down,9,// Write down how to convert from a derived pointer to a base pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:26,Availability,redundant,redundant,26,"// These two are somewhat redundant given the caller; // (ABIInfo::isHomogeneousAggregate) checks the bases and fields, but that; // caller doesn't consider empty bases/fields to be non-homogenous, but it; // looks like Microsoft's AArch64 ABI does care about these empty types &; // anything containing/derived from one is non-homogeneous.; // Instead we could add another CXXABI entry point to query this property and; // have ABIInfo::isHomogeneousAggregate use that property.; // I don't think any other of the features listed above could be true of a; // base/field while not true of the outer struct. For example, if you have a; // base/field that has an non-trivial copy assignment/dtor/default ctor, then; // the outer struct's corresponding operation must be non-trivial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp:26,Safety,redund,redundant,26,"// These two are somewhat redundant given the caller; // (ABIInfo::isHomogeneousAggregate) checks the bases and fields, but that; // caller doesn't consider empty bases/fields to be non-homogenous, but it; // looks like Microsoft's AArch64 ABI does care about these empty types &; // anything containing/derived from one is non-homogeneous.; // Instead we could add another CXXABI entry point to query this property and; // have ABIInfo::isHomogeneousAggregate use that property.; // I don't think any other of the features listed above could be true of a; // base/field while not true of the outer struct. For example, if you have a; // base/field that has an non-trivial copy assignment/dtor/default ctor, then; // the outer struct's corresponding operation must be non-trivial.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/MicrosoftCXXABI.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp:39,Availability,error,error,39,"// Remove pending etc decls in case of error; the asserts in StartModule(); // will rightfully be confused otherwise, as none of the decls were; // emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp:50,Testability,assert,asserts,50,"// Remove pending etc decls in case of error; the asserts in StartModule(); // will rightfully be confused otherwise, as none of the decls were; // emitted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp:35,Safety,abort,abort,35,// FIXME: Why not return false and abort parsing?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp:40,Availability,error,error,40,// Release the Builder when there is no error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp:3,Deployability,Release,Release,3,// Release the Builder when there is no error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp:16,Availability,error,errors,16,"// If there are errors before or when releasing the Builder, reset; // the module to stop here before invoking the backend.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ModuleBuilder.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp:18,Usability,guid,guides,18,// Skip deduction guides.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp:77,Safety,detect,detects,77,"// PCH files don't have a signature field in the control block,; // but LLVM detects DWO CUs by looking for a non-zero DWO id.; // We use the lower 64 bits for debug info.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp:126,Safety,avoid,avoided,126,// Emit __clangast in custom section instead of named data segment; // to find it while iterating sections.; // This could be avoided if all data segements (the wasm sense) were; // represented as their own sections (in the llvm sense).; // TODO: https://github.com/WebAssembly/tool-conventions/issues/138,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp:15,Security,hash,hashtable,15,// The on-disk hashtable needs to be aligned.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/ObjectFilePCHContainerOperations.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/PatternInit.cpp:445,Security,access,access,445,"// The following value is a guaranteed unmappable pointer value and has a; // repeated byte-pattern which makes it easier to synthesize. We use it for; // pointers as well as integers so that aggregates are likely to be; // initialized with this repeated value.; // For 32-bit platforms it's a bit trickier because, across systems, only the; // zero page can reasonably be expected to be unmapped. We use max 0xFFFFFFFF; // assuming that memory access will overlap into zero page.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/PatternInit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/PatternInit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp:9,Security,Sanitiz,SanitizerMetadata,9,"//===--- SanitizerMetadata.cpp - Ignored entities for sanitizers ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Class which emits metadata consumed by sanitizer instrumentation passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp:54,Security,sanitiz,sanitizers,54,"//===--- SanitizerMetadata.cpp - Ignored entities for sanitizers ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Class which emits metadata consumed by sanitizer instrumentation passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp:422,Security,sanitiz,sanitizer,422,"//===--- SanitizerMetadata.cpp - Ignored entities for sanitizers ----------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Class which emits metadata consumed by sanitizer instrumentation passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h:9,Security,Sanitiz,SanitizerMetadata,9,"//===--- SanitizerMetadata.h - Metadata for sanitizers ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Class which emits metadata consumed by sanitizer instrumentation passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h:44,Security,sanitiz,sanitizers,44,"//===--- SanitizerMetadata.h - Metadata for sanitizers ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Class which emits metadata consumed by sanitizer instrumentation passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h:422,Security,sanitiz,sanitizer,422,"//===--- SanitizerMetadata.h - Metadata for sanitizers ----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // Class which emits metadata consumed by sanitizer instrumentation passes.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SanitizerMetadata.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:27,Modifiability,flexible,flexible,27,"// Incomplete array types (flexible array members?) don't provide; // data to lay out, and the other cases shouldn't be possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:120,Energy Efficiency,efficient,efficient,120,"// Note that correctness does not rely on us adding things in; // their actual order of layout; it's just somewhat more efficient; // for the builder.; // With that in mind, add ""early"" C++ data.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:30,Availability,down,down,30,// toCharUnitsFromBits rounds down.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:3,Usability,Simpl,Simplest,3,// Simplest case: an exact overlap.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:157,Availability,down,down,157,"/// Given a power-of-two unit size, return the offset of the aligned unit; /// of that size which contains the given offset.; ///; /// In other words, round down to the nearest multiple of the unit size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:12,Energy Efficiency,power,power-of-two,12,"/// Given a power-of-two unit size, return the offset of the aligned unit; /// of that size which contains the given offset.; ///; /// In other words, round down to the nearest multiple of the unit size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:54,Testability,test,test,54,// Only merge entries that overlap the same chunk. We test this first; // despite being a bit more expensive because this is the condition that; // tends to prevent merging.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:33,Availability,down,down,33,"// We logically split the layout down into a series of chunks of this size,; // which is generally the size of a pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:6,Testability,log,logically,6,"// We logically split the layout down into a series of chunks of this size,; // which is generally the size of a pointer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:13,Usability,simpl,simple,13,// Just do a simple loop over ever-increasing unit sizes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:108,Security,access,access,108,// We don't need to adjust 'packed' to deal with possible tail padding; // because we never do that kind of access through the coercion type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:3,Safety,Avoid,Avoid,3,// Avoid copying the array of types when there's just a single element.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:92,Energy Efficiency,power,power,92,"// For Swift's purposes, this is always just the store size of the type; // rounded up to a power of 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:84,Energy Efficiency,power,power,84,// The largest size that we're still considering making subvectors of.; // Always a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:9,Performance,optimiz,optimization,9,// Minor optimization: don't check the legality of this exact size twice.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:91,Energy Efficiency,power,power-of-,91,// The sensibility of this algorithm relies on the fact that we never; // have a legal non-power-of-2 vector size without having the power of 2; // also be legal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:133,Energy Efficiency,power,power,133,// The sensibility of this algorithm relies on the fact that we never; // have a legal non-power-of-2 vector size without having the power of 2; // also be legal.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:198,Energy Efficiency,power,power,198,// It's possible that the number of elements remaining will be legal.; // This can happen with e.g. <7 x float> when <3 x float> is legal.; // This only needs to be separately checked if it's not a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:17,Availability,down,down,17,// Bring vecSize down to something no larger than numElts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp:56,Usability,simpl,simple,56,"// Member pointer types need to be expanded, but it's a simple form of; // expansion that 'Direct' can handle. Note that CanBeFlattened should be; // true for this to work.; // 'void' needs to be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/SwiftCallingConv.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp:397,Integrability,wrap,wrap,397,"//===---- TargetInfo.cpp - Encapsulate target details -----------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These classes wrap the information about a call or function; // definition used to handle ABI compliancy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp:120,Integrability,depend,dependent,120,"// If someone can figure out a general rule for this, that would be great.; // It's probably just doomed to be platform-dependent, though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp:89,Energy Efficiency,Power,PowerPC,89,"// Verified for:; // x86-64 FreeBSD, Linux, Darwin; // x86-32 FreeBSD, Linux, Darwin; // PowerPC Linux; // ARM Darwin (*not* EABI); // AArch64 Linux",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp:520,Integrability,depend,depending,520,"// OpenCL kernels are called via an explicit runtime API with arguments; // set with clSetKernelArg(), not as normal sub-functions.; // Return SPIR_KERNEL by default as the kernel calling convention to; // ensure the fingerprint is fixed such way that each OpenCL argument; // gets one matching argument in the produced kernel function argument; // list to enable feasible implementation of clSetKernelArg() with; // aggregates etc. In case we would use the default C calling conv here,; // clSetKernelArg() might break depending on the target-specific; // conventions; different targets might split structs passed as values; // to multiple function arguments etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp:218,Usability,simpl,simply,218,"/// Create an OpenCL kernel for an enqueued block.; ///; /// The kernel has the same function type as the block invoke function. Its; /// name is the name of the block invoke function postfixed with ""_kernel"".; /// It simply calls the block invoke function then returns.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:397,Integrability,wrap,wrap,397,"//===---- TargetInfo.h - Encapsulate target details -------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // These classes wrap the information about a call or function; // definition used to handle ABI compliancy.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:58,Modifiability,extend,extend,58,"/// Controls whether __builtin_extend_pointer should sign-extend; /// pointers to uint64_t or zero-extend them (the default). Has; /// no effect for targets:; /// - that have 64-bit pointers, or; /// - that cannot address through registers larger than pointers, or; /// - that implicitly ignore/truncate the top bits when addressing; /// through such registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:99,Modifiability,extend,extend,99,"/// Controls whether __builtin_extend_pointer should sign-extend; /// pointers to uint64_t or zero-extend them (the default). Has; /// no effect for targets:; /// - that have 64-bit pointers, or; /// - that cannot address through registers larger than pointers, or; /// - that implicitly ignore/truncate the top bits when addressing; /// through such registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:4,Performance,Perform,Performs,4,/// Performs the code-generation required to convert a return; /// address as stored by the system into the actual address of the; /// next instruction that will be executed.; ///; /// Used by __builtin_extract_return_addr().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:4,Performance,Perform,Performs,4,/// Performs the code-generation required to convert the address; /// of an instruction into a return address suitable for storage; /// by the system in a return slot.; ///; /// Used by __builtin_frob_return_addr().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:4,Performance,Perform,Performs,4,"/// Performs a target specific test of a floating point value for things; /// like IsNaN, Infinity, ... Nullptr is returned if no implementation; /// exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:31,Testability,test,test,31,"/// Performs a target specific test of a floating point value for things; /// like IsNaN, Infinity, ... Nullptr is returned if no implementation; /// exists.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:188,Availability,failure,failure,188,"/// Corrects the low-level LLVM type for a given constraint and ""usual""; /// type.; ///; /// \returns A pointer to a new LLVM type, possibly the same as the original; /// on success; 0 on failure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:350,Integrability,depend,depending,350,"/// Retrieve the address of a function to call immediately before; /// calling objc_retainAutoreleasedReturnValue. The; /// implementation of objc_autoreleaseReturnValue sniffs the; /// instruction stream following its return address to decide; /// whether it's a call to objc_retainAutoreleasedReturnValue.; /// This can be prohibitively expensive, depending on the; /// relocation model, and so on some targets it instead sniffs for; /// a particular instruction sequence. This functions returns; /// that instruction sequence in inline assembly, which will be; /// empty if none is required.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:387,Performance,perform,performance,387,"/// Determine whether a call to an unprototyped functions under; /// the given calling convention should use the variadic; /// convention or the non-variadic convention.; ///; /// There's a good reason to make a platform's variadic calling; /// convention be different from its non-variadic calling; /// convention: the non-variadic arguments can be passed in; /// registers (better for performance), and the variadic arguments; /// can be passed on the stack (also better for performance). If; /// this is done, however, unprototyped functions *must* use the; /// non-variadic convention, because C99 states that a call; /// through an unprototyped function type must succeed if the; /// function was defined with a non-variadic prototype with; /// compatible parameters. Therefore, splitting the conventions; /// makes it impossible to call a variadic function through an; /// unprototyped type. Since function prototypes came out in the; /// late 1970s, this is probably an acceptable trade-off.; /// Nonetheless, not all platforms are willing to make it, and in; /// particularly x86-64 bends over backwards to make the; /// conventions compatible.; ///; /// The default is false. This is correct whenever:; /// - the conventions are exactly the same, because it does not; /// matter and the resulting IR will be somewhat prettier in; /// certain cases; or; /// - the conventions are substantively different in how they pass; /// arguments, because in this case using the variadic convention; /// will lead to C99 violations.; ///; /// However, some platforms make the conventions identical except; /// for passing additional out-of-band information to a variadic; /// function: for example, x86-64 passes the number of SSE; /// arguments in %al. On these platforms, it is desirable to; /// call unprototyped functions using the variadic convention so; /// that unprototyped calls to varargs functions still succeed.; ///; /// Relatedly, platforms which pass the fixed arguments to this:; /// A fo",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:477,Performance,perform,performance,477,"/// Determine whether a call to an unprototyped functions under; /// the given calling convention should use the variadic; /// convention or the non-variadic convention.; ///; /// There's a good reason to make a platform's variadic calling; /// convention be different from its non-variadic calling; /// convention: the non-variadic arguments can be passed in; /// registers (better for performance), and the variadic arguments; /// can be passed on the stack (also better for performance). If; /// this is done, however, unprototyped functions *must* use the; /// non-variadic convention, because C99 states that a call; /// through an unprototyped function type must succeed if the; /// function was defined with a non-variadic prototype with; /// compatible parameters. Therefore, splitting the conventions; /// makes it impossible to call a variadic function through an; /// unprototyped type. Since function prototypes came out in the; /// late 1970s, this is probably an acceptable trade-off.; /// Nonetheless, not all platforms are willing to make it, and in; /// particularly x86-64 bends over backwards to make the; /// conventions compatible.; ///; /// The default is false. This is correct whenever:; /// - the conventions are exactly the same, because it does not; /// matter and the resulting IR will be somewhat prettier in; /// certain cases; or; /// - the conventions are substantively different in how they pass; /// arguments, because in this case using the variadic convention; /// will lead to C99 violations.; ///; /// However, some platforms make the conventions identical except; /// for passing additional out-of-band information to a variadic; /// function: for example, x86-64 passes the number of SSE; /// arguments in %al. On these platforms, it is desirable to; /// call unprototyped functions using the variadic convention so; /// that unprototyped calls to varargs functions still succeed.; ///; /// Relatedly, platforms which pass the fixed arguments to this:; /// A fo",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:48,Integrability,depend,dependent,48,/// Gets the linker options necessary to link a dependent library on this; /// platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:41,Safety,detect,detect,41,/// Gets the linker options necessary to detect object file mismatches on; /// this platform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:53,Modifiability,variab,variable,53,"/// Get target favored AST address space of a global variable for languages; /// other than OpenCL and CUDA.; /// If \p D is nullptr, returns the default target favored address space; /// for global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:199,Modifiability,variab,variable,199,"/// Get target favored AST address space of a global variable for languages; /// other than OpenCL and CUDA.; /// If \p D is nullptr, returns the default target favored address space; /// for global variable.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:4,Performance,Perform,Perform,4,/// Perform address space cast of an expression of pointer type.; /// \param V is the LLVM value to be casted to another address space.; /// \param SrcAddr is the language address space of \p V.; /// \param DestAddr is the targeted language address space.; /// \param DestTy is the destination LLVM pointer type.; /// \param IsNonNull is the flag indicating \p V is known to be non null.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:4,Performance,Perform,Perform,4,/// Perform address space cast of a constant expression of pointer type.; /// \param V is the LLVM constant to be casted to another address space.; /// \param SrcAddr is the language address space of \p V.; /// \param DestAddr is the targeted language address space.; /// \param DestTy is the destination LLVM pointer type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:4,Integrability,Interface,Interface,4,/// Interface class for filling custom fields of a block literal for OpenCL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:81,Integrability,wrap,wrapper,81,/// Create an OpenCL kernel for an enqueued block. The kernel function is; /// a wrapper for the block invoke function with target-specific calling; /// convention and ABI as an OpenCL kernel. The wrapper function accepts; /// block context and block arguments in target-specific way and calls; /// the original block invoke function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h:197,Integrability,wrap,wrapper,197,/// Create an OpenCL kernel for an enqueued block. The kernel function is; /// a wrapper for the block invoke function with target-specific calling; /// convention and ABI as an OpenCL kernel. The wrapper function accepts; /// block context and block arguments in target-specific way and calls; /// the original block invoke function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/TargetInfo.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:46,Safety,detect,detector,46,"//===--- VarBypassDetector.cpp - Bypass jumps detector ------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:4,Usability,Clear,Clear,4,"/// Clear the object and pre-process for the given statement, usually function; /// body statement.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:146,Safety,avoid,avoid,146,"// Cases, labels, and defaults aren't ""scope parents"". It's also; // important to handle these iteratively instead of recursively in; // order to avoid blowing out the stack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:37,Modifiability,variab,variable,37,/// Checks each jump and stores each variable declaration they bypass.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp:36,Modifiability,variab,variable,36,/// Checks the jump and stores each variable declaration it bypasses.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:461,Modifiability,variab,variable,461,"//===--- VarBypassDetector.h - Bypass jumps detector --------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains VarBypassDetector class, which is used to detect; // local variable declarations which can be bypassed by jumps.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:44,Safety,detect,detector,44,"//===--- VarBypassDetector.h - Bypass jumps detector --------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains VarBypassDetector class, which is used to detect; // local variable declarations which can be bypassed by jumps.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:444,Safety,detect,detect,444,"//===--- VarBypassDetector.h - Bypass jumps detector --------------*- C++ -*-=//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file contains VarBypassDetector class, which is used to detect; // local variable declarations which can be bypassed by jumps.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:47,Modifiability,variab,variables,47,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:229,Modifiability,variab,variables,229,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:295,Modifiability,variab,variables,295,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:328,Modifiability,variab,variables,328,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:14,Safety,detect,detects,14,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:189,Safety,Detect,Detects,189,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:256,Safety,detect,detect,256,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:121,Usability,simpl,simplified,121,"/// The class detects jumps which bypass local variables declaration:; /// goto L;; /// int a;; /// L:; ///; /// This is simplified version of JumpScopeChecker. Primary differences:; /// * Detects only jumps into the scope local variables.; /// * Does not detect jumps out of the scope of local variables.; /// * Not limited to variables with initializers, JumpScopeChecker is limited.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:58,Modifiability,variab,variable,58,// Scope information. Contains a parent scope and related variable; // declaration.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:10,Modifiability,variab,variables,10,// Set of variables which were bypassed by some jump.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:27,Modifiability,variab,variables,27,// If true assume that all variables are being bypassed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h:24,Modifiability,variab,variable,24,/// Returns true if the variable declaration was by bypassed by any goto or; /// switch statement.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/VarBypassDetector.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp:85,Performance,scalab,scalable,85,// Check whether VT is a fixed-length SVE vector. These types are; // represented as scalable vectors in function args/return and must be; // coerced from fixed vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp:25,Energy Efficiency,power,power,25,// NumElements should be power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp:46,Testability,log,logic,46,"// arm64_32 has to be compatible with the ARM logic here, which allows huge; // vectors for some reason.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp:3,Deployability,Update,Update,3,// Update the gr_offs/vr_offs pointer for next call to va_arg on this va_list.; // The fact that this is done unconditionally reflects the fact that; // allocating an argument to the stack also uses up all the remaining; // registers of the appropriate kind.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp:212,Modifiability,variab,variable,212,"// Homogeneous aggregates passed in registers will have their elements split; // and stored 16-bytes apart regardless of size (they're notionally in qN,; // qN+1, ...). We reload and store into a temporary local variable; // contiguously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AArch64.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp:149,Performance,optimiz,optimization,149,"// FIXME: Should also use this for OpenCL, but it requires addressing the; // problem of kernels being called.; //; // FIXME: This doesn't apply the optimization of coercing pointers in structs; // to global address space when using byref. This would require implementing a; // new kind of coercion of the in-memory type when for indirect arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp:83,Performance,load,load,83,// It needs to be constant weak_odr without externally_initialized so that; // the load instuction can be eliminated by the IPSCCP.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp:43,Modifiability,variab,variable,43,// Replace any external references to this variable with the new global.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp:283,Energy Efficiency,allocate,allocates,283,"/// Create an OpenCL kernel for an enqueued block.; ///; /// The type of the first argument (the block literal) is the struct type; /// of the block literal instead of a pointer type. The first argument; /// (block literal) is passed directly by value to the kernel. The kernel; /// allocates the same type of struct on stack and stores the block literal; /// to it and passes its pointer to the block invoke function. The kernel; /// has ""enqueued-block"" function attribute and kernel argument metadata.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARC.cpp:19,Modifiability,flexible,flexible,19,// Structures with flexible arrays are always indirect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:50,Security,validat,validate,50,"// If the Branch Protection attribute is missing, validate the target; // Architecture attribute against Branch Protection command line; // settings.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:65,Integrability,interface,interface,65,"// AAPCS guarantees that sp will be 8-byte aligned on any public interface,; // however this is not necessarily true on taking any interrupt. Instruct; // the backend to perform a realignment as part of the function prologue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:170,Performance,perform,perform,170,"// AAPCS guarantees that sp will be 8-byte aligned on any public interface,; // however this is not necessarily true on taking any interrupt. Instruct; // the backend to perform a realignment as part of the function prologue.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:127,Energy Efficiency,allocate,allocated,127,"// WatchOS is adopting the 64-bit AAPCS rule on composite types: if they're; // bigger than 128-bits, they get placed in space allocated by the caller,; // and a pointer is passed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:45,Usability,Simpl,Simple,45,"// APCS, C Language Calling Conventions, Non-Simple Return Values: A structure; // is called integer-like if its size is less than or equal to one word, and; // the offset of each of its addressable sub-fields is zero.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:23,Modifiability,flexible,flexible,23,// Ignore records with flexible arrays.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:117,Modifiability,refactor,refactor,117,// TODO: FP16/BF16 vectors should be converted to integer vectors; // This check is similar to isIllegalVectorType - refactor?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:48,Performance,load,loaded,48,"// Return in 32 bit integer integer type (as if loaded by LDR, AAPCS 5.4)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:118,Integrability,depend,depend,118,"// On targets that don't support half, fp16 or bfloat, they are expanded; // into float, and we don't want the ABI to depend on whether or not they; // are supported in hardware. Thus return false to coerce vectors of these; // types into integer vectors.; // We do not depend on hasLegalHalfType for bfloat as it is a; // separate IR type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:270,Integrability,depend,depend,270,"// On targets that don't support half, fp16 or bfloat, they are expanded; // into float, and we don't want the ABI to depend on whether or not they; // are supported in hardware. Thus return false to coerce vectors of these; // types into integer vectors.; // We do not depend on hasLegalHalfType for bfloat as it is a; // separate IR type.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:25,Energy Efficiency,power,power,25,// NumElements should be power of 2 or equal to 3.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:25,Energy Efficiency,power,power,25,// NumElements should be power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp:71,Energy Efficiency,allocate,allocated,71,"// ARMv7k passes structs bigger than 16 bytes indirectly, in space; // allocated by the caller.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/ARM.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp:36,Modifiability,extend,extended,36,"// An i8 return value should not be extended to i16, since AVR has 8-bit; // registers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp:372,Energy Efficiency,allocate,allocated,372,"// An argument is passed either completely in registers or completely in; // memory. Since there are not enough registers left, current argument; // and all other unprocessed arguments should be passed in memory.; // However we still need to return `ABIArgInfo::getDirect()` other than; // `ABIInfo::getNaturalAlignIndirect(Ty)`, otherwise an extra stack slot; // will be allocated, so the stack frame layout will be incompatible with; // avr-gcc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp:90,Integrability,depend,depends,90,"// Decide each argument type. The total number of registers can be used for; // arguments depends on several factors:; // 1. Arguments of varargs functions are passed on the stack. This applies; // even to the named arguments. So no register can be used.; // 2. Total 18 registers can be used on avr and 6 ones on avrtiny.; // 3. If the return type is a struct with too large size, two registers; // (out of 18/6) will be cost as an implicit pointer argument.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp:26,Modifiability,variab,variable,26,"// Check if global/static variable is defined in address space; // 1~6 (__flash, __flash1, __flash2, __flash3, __flash4, __flash5); // but not constant.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:8,Availability,avail,available,8,// Next available register was r5 but candidate was greater than 32-bits so it; // has to go on the stack. However we still consume r5,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:3,Performance,Load,Load,3,// Load the overflow area pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:25,Energy Efficiency,power,power,25,// Alignment should be a power of 2.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:40,Security,access,access,40,// Add offset to the current pointer to access the argument.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:12,Availability,mask,mask,12,"// Create a mask which should be ""AND""ed; // with (overflow_arg_area + align - 1)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:104,Testability,log,logic,104,// Get rounded size of the argument.GCC does not allow vararg of; // size < 4 bytes. We follow the same logic here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:3,Performance,Load,Load,3,// Load the current saved register area pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:3,Performance,Load,Load,3,// Load the saved register area end pointer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:3,Performance,Load,Load,3,// Load the overflow area pointer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:39,Modifiability,variab,variable,39,// Get the correct pointer to load the variable argument; // Implement the ContBlock,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp:30,Performance,load,load,30,// Get the correct pointer to load the variable argument; // Implement the ContBlock,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Hexagon.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Lanai.cpp:19,Modifiability,flexible,flexible,19,// Structures with flexible arrays are always indirect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Lanai.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Lanai.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp:288,Modifiability,rewrite,rewrite,288,"// IsRetIndirect is true if classifyArgumentType indicated the value should; // be passed indirect, or if the type size is a scalar greater than 2*GRLen; // and not a complex type with elements <= FRLen. e.g. fp128 is passed direct; // in LLVM IR, relying on the backend lowering code to rewrite the argument; // list and pass indirectly on LA32.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp:57,Modifiability,extend,extended,57,// LA64 ABI requires unsigned 32 bit integers to be sign extended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/LoongArch.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp:12,Availability,down,down,12,// Truncate down to the right width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp:59,Modifiability,extend,extended,59,// MIPS64 ABI requires unsigned 32 bit integers to be sign extended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Mips.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp:44,Modifiability,variab,variable,44,// Load the handle from the specific global variable using; // `nvvm.texsurf.handle.internal` intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp:3,Performance,Load,Load,3,// Load the handle from the specific global variable using; // `nvvm.texsurf.handle.internal` intrinsic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp:3,Performance,Perform,Perform,3,// Perform special handling in OpenCL mode,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp:3,Performance,Perform,Perform,3,// Perform special handling in CUDA mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/NVPTX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PNaCl.cpp:141,Usability,simpl,simplified,141,//===----------------------------------------------------------------------===//; // le32/PNaCl bitcode ABI Implementation; //; // This is a simplified version of the x86_32 ABI. Arguments and return values; // are always passed on the stack.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PNaCl.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PNaCl.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:84,Modifiability,extend,extended,84,// namespace; // Return true if the ABI requires Ty to be passed sign- or zero-; // extended to 32/64 bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:91,Modifiability,extend,extend,91,"// For 64 bit mode, in addition to the usual promotable integer types, we also; // need to extend all 32-bit types, since the ABI requires promotion to 64; // bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:337,Performance,load,loads,337,"// If we have a complex type and the base type is smaller than the register; // size, the ABI calls for the real and imaginary parts to be right-adjusted; // in separate words in 32bit mode or doublewords in 64bit mode. However,; // Clang expects us to produce a pointer to a structure with the two parts; // packed tightly. So generate loads of the real and imaginary parts relative; // to the va_list pointer, and store them to a temporary structure. We do the; // same as the PPC64ABI here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:3,Energy Efficiency,Power,PowerPC-,3,// PowerPC-32,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:36,Energy Efficiency,Power,PowerPC,36,/// PPC32_SVR4_ABIInfo - The 32-bit PowerPC ELF (SVR4) ABI information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:11,Availability,recover,recovered,11,// This is recovered from gcc output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:11,Safety,recover,recovered,11,// This is recovered from gcc output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:616,Modifiability,extend,extend,616,"// System V ABI (1995), page 3-22, specified:; // > A structure or union whose size is less than or equal to 8 bytes; // > shall be returned in r3 and r4, as if it were first stored in the; // > 8-byte aligned memory area and then the low addressed word were; // > loaded into r3 and the high-addressed word into r4. Bits beyond; // > the last member of the structure or union are not defined.; //; // GCC for big-endian PPC32 inserts the pad before the first member,; // not ""beyond the last member"" of the struct. To stay compatible; // with GCC, we coerce the struct to an integer of the same size.; // LLVM will extend it and return i32 in r3, or i64 in r3:r4.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:265,Performance,load,loaded,265,"// System V ABI (1995), page 3-22, specified:; // > A structure or union whose size is less than or equal to 8 bytes; // > shall be returned in r3 and r4, as if it were first stored in the; // > 8-byte aligned memory area and then the low addressed word were; // > loaded into r3 and the high-addressed word into r4. Bits beyond; // > the last member of the structure or union are not defined.; //; // GCC for big-endian PPC32 inserts the pad before the first member,; // not ""beyond the last member"" of the struct. To stay compatible; // with GCC, we coerce the struct to an integer of the same size.; // LLVM will extend it and return i32 in r3, or i64 in r3:r4.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:43,Availability,redundant,redundant,43,// TODO: this implementation is now likely redundant with; // DefaultABIInfo::EmitVAArg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:43,Safety,redund,redundant,43,// TODO: this implementation is now likely redundant with; // DefaultABIInfo::EmitVAArg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:3,Performance,Load,Load,3,// Load the pointer if the argument was passed indirectly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:3,Energy Efficiency,Power,PowerPC-,3,// PowerPC-64,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:36,Energy Efficiency,Power,PowerPC,36,/// PPC64_SVR4_ABIInfo - The 64-bit PowerPC ELF (SVR4) ABI information.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:57,Performance,perform,performance,57,"// TODO: We can add more logic to computeInfo to improve performance.; // Example: For aggregate arguments that fit in a register, we could; // use getDirectInReg (as is done below for structs containing a single; // floating-point value) to avoid pushing them to memory on function; // entry. This would require changing the logic in PPCISelLowering; // when lowering the parameters in the caller and args in the callee.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:242,Safety,avoid,avoid,242,"// TODO: We can add more logic to computeInfo to improve performance.; // Example: For aggregate arguments that fit in a register, we could; // use getDirectInReg (as is done below for structs containing a single; // floating-point value) to avoid pushing them to memory on function; // entry. This would require changing the logic in PPCISelLowering; // when lowering the parameters in the caller and args in the callee.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:25,Testability,log,logic,25,"// TODO: We can add more logic to computeInfo to improve performance.; // Example: For aggregate arguments that fit in a register, we could; // use getDirectInReg (as is done below for structs containing a single; // floating-point value) to avoid pushing them to memory on function; // entry. This would require changing the logic in PPCISelLowering; // when lowering the parameters in the caller and args in the callee.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:326,Testability,log,logic,326,"// TODO: We can add more logic to computeInfo to improve performance.; // Example: For aggregate arguments that fit in a register, we could; // use getDirectInReg (as is done below for structs containing a single; // floating-point value) to avoid pushing them to memory on function; // entry. This would require changing the logic in PPCISelLowering; // when lowering the parameters in the caller and args in the callee.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:194,Availability,avail,available,194,// We rely on the default argument classification for the most part.; // One exception: An aggregate containing a single floating-point; // or vector item must be passed in a register if one is available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:11,Availability,recover,recovered,11,// This is recovered from gcc output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:11,Safety,recover,recovered,11,// This is recovered from gcc output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:11,Availability,recover,recovered,11,// This is recovered from gcc output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:11,Safety,recover,recovered,11,// This is recovered from gcc output.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:70,Modifiability,extend,extended,70,// Return true if the ABI requires Ty to be passed sign- or zero-; // extended to 64 bits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:74,Modifiability,extend,extend,74,"// In addition to the usual promotable integer types, we also need to; // extend all 32-bit types, since the ABI requires promotion to 64 bits.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:63,Modifiability,extend,extended,63,"// According to ABI document section 'Optional Save Areas': If extended; // precision floating-point values in IEEE BINARY 128 QUADRUPLE PRECISION; // format are supported, map them to a single quadword, quadword aligned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:108,Integrability,depend,depending,108,"// Vector and fp128 types require one register, other floating point types; // require one or two registers depending on their size.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:159,Safety,avoid,avoid,159,"// If an aggregate may end up fully in registers, we do not; // use the ByVal method, but pass the aggregate as array.; // This is usually beneficial since we avoid forcing the; // back-end to store the argument to memory.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:290,Performance,load,loads,290,"// If we have a complex type and the base type is smaller than 8 bytes,; // the ABI calls for the real and imaginary parts to be right-adjusted; // in separate doublewords. However, Clang expects us to produce a; // pointer to a structure with the two parts packed tightly. So generate; // loads of the real and imaginary parts relative to the va_list pointer,; // and store them to a temporary structure.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:217,Energy Efficiency,allocate,allocate,217,"// Otherwise, just use the general rule.; //; // The PPC64 ABI passes some arguments in integer registers, even to variadic; // functions. To allow va_list to use the simple ""void*"" representation,; // variadic calls allocate space in the argument area for the integer argument; // registers, and variadic functions spill their integer argument registers to; // this area in their prologues. When aggregates smaller than a register are; // passed this way, they are passed in the least significant bits of the; // register, which means that after spilling on big-endian targets they will; // be right-aligned in their argument slot. This is uncommon; for a variety of; // reasons, other big-endian targets don't end up right-aligning aggregate; // types this way, and so right-alignment only applies to fundamental types.; // So on PPC64, we must force the use of right-alignment even for aggregates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp:167,Usability,simpl,simple,167,"// Otherwise, just use the general rule.; //; // The PPC64 ABI passes some arguments in integer registers, even to variadic; // functions. To allow va_list to use the simple ""void*"" representation,; // variadic calls allocate space in the argument area for the integer argument; // registers, and variadic functions spill their integer argument registers to; // this area in their prologues. When aggregates smaller than a register are; // passed this way, they are passed in the least significant bits of the; // register, which means that after spilling on big-endian targets they will; // be right-aligned in their argument slot. This is uncommon; for a variety of; // reasons, other big-endian targets don't end up right-aligning aggregate; // types this way, and so right-alignment only applies to fundamental types.; // So on PPC64, we must force the use of right-alignment even for aggregates.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/PPC.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp:286,Modifiability,rewrite,rewrite,286,"// IsRetIndirect is true if classifyArgumentType indicated the value should; // be passed indirect, or if the type size is a scalar greater than 2*XLen; // and not a complex type with elements <= FLen. e.g. fp128 is passed direct; // in LLVM IR, relying on the backend lowering code to rewrite the argument; // list and pass indirectly on RV32.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp:47,Performance,scalab,scalable,47,// Fixed-length RVV vectors are represented as scalable vectors in function; // args/return and must be coerced from fixed vectors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp:21,Usability,simpl,simplified,21,// The MinNumElts is simplified from equation:; // NumElts / VScale =; // (EltSize * NumElts / (VScale * RVVBitsPerBlock)); // * (RVVBitsPerBlock / EltSize),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp:57,Modifiability,extend,extended,57,// RV64 ABI requires unsigned 32 bit integers to be sign extended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/RISCV.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:895,Energy Efficiency,allocate,allocate,895,"// end anonymous namespace; //===----------------------------------------------------------------------===//; // SPARC v9 ABI Implementation.; // Based on the SPARC Compliance Definition version 2.4.1.; //; // Function arguments a mapped to a nominal ""parameter array"" and promoted to; // registers depending on their type. Each argument occupies 8 or 16 bytes in; // the array, structs larger than 16 bytes are passed indirectly.; //; // One case requires special care:; //; // struct mixed {; // int i;; // float f;; // };; //; // When a struct mixed is passed by value, it only occupies 8 bytes in the; // parameter array, but the int is passed in an integer register, and the float; // is passed in a floating point register. This is represented as two arguments; // with the LLVM IR inreg attribute:; //; // declare void f(i32 inreg %i, float inreg %f); //; // The code generator will only allocate 4 bytes from the parameter array for; // the inreg arguments. All other arguments are allocated a multiple of 8; // bytes.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:990,Energy Efficiency,allocate,allocated,990,"// end anonymous namespace; //===----------------------------------------------------------------------===//; // SPARC v9 ABI Implementation.; // Based on the SPARC Compliance Definition version 2.4.1.; //; // Function arguments a mapped to a nominal ""parameter array"" and promoted to; // registers depending on their type. Each argument occupies 8 or 16 bytes in; // the array, structs larger than 16 bytes are passed indirectly.; //; // One case requires special care:; //; // struct mixed {; // int i;; // float f;; // };; //; // When a struct mixed is passed by value, it only occupies 8 bytes in the; // parameter array, but the int is passed in an integer register, and the float; // is passed in a floating point register. This is represented as two arguments; // with the LLVM IR inreg attribute:; //; // declare void f(i32 inreg %i, float inreg %f); //; // The code generator will only allocate 4 bytes from the parameter array for; // the inreg arguments. All other arguments are allocated a multiple of 8; // bytes.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:299,Integrability,depend,depending,299,"// end anonymous namespace; //===----------------------------------------------------------------------===//; // SPARC v9 ABI Implementation.; // Based on the SPARC Compliance Definition version 2.4.1.; //; // Function arguments a mapped to a nominal ""parameter array"" and promoted to; // registers depending on their type. Each argument occupies 8 or 16 bytes in; // the array, structs larger than 16 bytes are passed indirectly.; //; // One case requires special care:; //; // struct mixed {; // int i;; // float f;; // };; //; // When a struct mixed is passed by value, it only occupies 8 bytes in the; // parameter array, but the int is passed in an integer register, and the float; // is passed in a floating point register. This is represented as two arguments; // with the LLVM IR inreg attribute:; //; // declare void f(i32 inreg %i, float inreg %f); //; // The code generator will only allocate 4 bytes from the parameter array for; // the inreg arguments. All other arguments are allocated a multiple of 8; // bytes.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:209,Security,Expose,Expose,209,"// Coercion type builder for structs passed in registers. The coercion type; // serves two purposes:; //; // 1. Pad structs to a multiple of 64 bits, so they are passed 'left-aligned'; // in registers.; // 2. Expose aligned floating point elements as first-level elements, so the; // code generator knows to pass them in floating point registers.; //; // We also compute the InReg flag which indicates that the struct contains; // aligned 32-bit floats.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:20,Usability,usab,usable,20,// Check if Ty is a usable substitute for the coercion type.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:45,Modifiability,extend,extended,45,// Integer types smaller than a register are extended.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp:3,Deployability,Update,Update,3,// Update VAList.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/Sparc.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp:265,Usability,guid,guide,265,"// Force copying aggregate type in kernel arguments by value when; // compiling CUDA targeting SPIR-V. This is required for the object; // copied to be valid on the device.; // This behavior follows the CUDA spec; // https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#global-function-argument-processing,; // and matches the NVPTX implementation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp:7,Testability,log,logic,7,// The logic is same as in DefaultABIInfo with an exception on the kernel; // arguments handling.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp:338,Security,access,access,338,"// These parameters compare to the operands of OpTypeImage (see; // https://registry.khronos.org/SPIR-V/specs/unified1/SPIRV.html#OpTypeImage; // for more details). The first 6 integer parameters all default to 0, and; // will be changed to 1 only for the image type(s) that set the parameter to; // one. The 7th integer parameter is the access qualifier, which is tacked on; // at the end.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp:3,Security,Access,Access,3,// Access qualifier,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SPIR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:90,Security,expose,exposes,90,"// Returns true (the first time) if Ty is, or is found to include, a vector; // type that exposes the vector ABI. This is any vector >=16 bytes which; // with vector support are aligned to only 8 bytes. When IsParam is true,; // the type belongs to a value as passed between functions. If it is a; // vector <=16 bytes it will be passed in a vector register (if supported).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:131,Modifiability,variab,variable,131,"// The vector ABI is different when the vector facility is present and when; // a module e.g. defines an externally visible vector variable, a flag; // indicating a visible vector ABI is added. Eventually this will result in; // a GNU attribute indicating the vector ABI of the module. Ty is the type; // of a variable or function parameter that is globally visible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:310,Modifiability,variab,variable,310,"// The vector ABI is different when the vector facility is present and when; // a module e.g. defines an externally visible vector variable, a flag; // indicating a visible vector ABI is added. Eventually this will result in; // a GNU attribute indicating the vector ABI of the module. Ty is the type; // of a variable or function parameter that is globally visible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:72,Modifiability,variab,variable,72,// Check if the vector ABI becomes visible by an externally visible; // variable or function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:3,Deployability,Update,Update,3,// Update overflow_arg_area_ptr pointer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:16,Performance,load,load,16,// Emit code to load the value if it was passed in registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:3,Deployability,Update,Update,3,// Update the register count,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:16,Performance,load,load,16,// Emit code to load the value if it was passed in memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:3,Deployability,Update,Update,3,// Update overflow_arg_area_ptr pointer,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:26,Modifiability,extend,extended,26,// Integers and enums are extended to full register width.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:19,Modifiability,flexible,flexible,19,"// Structures with flexible arrays have variable length, so really; // fail the size test above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:40,Modifiability,variab,variable,40,"// Structures with flexible arrays have variable length, so really; // fail the size test above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:85,Testability,test,test,85,"// Structures with flexible arrays have variable length, so really; // fail the size test above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:56,Security,expose,expose,56,"// A narrow (<16 bytes) vector will as a parameter also expose the ABI as; // it will be passed in a vector register. A wide (>16 bytes) vector will; // be passed via ""hidden"" pointer where any extra alignment is not; // required (per GCC).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp:23,Security,expose,expose,23,// Vectors >= 16 bytes expose the ABI through alignment requirements.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/SystemZ.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/WebAssembly.cpp:139,Usability,simpl,simple,139,//===----------------------------------------------------------------------===//; // WebAssembly ABI Implementation; //; // This is a very simple ABI that relies a lot on DefaultABIInfo.; //===----------------------------------------------------------------------===//,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/WebAssembly.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/WebAssembly.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:26,Availability,avail,available,26,"/// Updates the number of available free registers, returns; /// true if any registers were allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:4,Deployability,Update,Updates,4,"/// Updates the number of available free registers, returns; /// true if any registers were allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:92,Energy Efficiency,allocate,allocated,92,"/// Updates the number of available free registers, returns; /// true if any registers were allocated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:4,Modifiability,Rewrite,Rewrite,4,/// Rewrite the function info so that all memory arguments use; /// inalloca.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:4,Modifiability,Rewrite,Rewrite,4,"/// Rewrite input constraint references after adding some output constraints.; /// In the case where there is one output and one input and we add one output,; /// we need to replace all operand references greater than or equal to 1:; /// mov $0, $1; /// mov eax, $1; /// The result will be:; /// mov $0, $2; /// mov eax, $2",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:40,Usability,simpl,simple,40,"// Check for a type which we know has a simple scalar argument-passing; // convention without any padding. (We're specifically looking for 32; // and 64-bit integer and integer-equivalents, float, and double.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:228,Performance,optimiz,optimizations,228,"/// Test whether an argument type which is to be passed indirectly (on the; /// stack) would have the equivalent layout if it was expanded into separate; /// arguments. If so, we prefer to do the latter to avoid inhibiting; /// optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:206,Safety,avoid,avoid,206,"/// Test whether an argument type which is to be passed indirectly (on the; /// stack) would have the equivalent layout if it was expanded into separate; /// arguments. If so, we prefer to do the latter to avoid inhibiting; /// optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:4,Testability,Test,Test,4,"/// Test whether an argument type which is to be passed indirectly (on the; /// stack) would have the equivalent layout if it was expanded into separate; /// arguments. If so, we prefer to do the latter to avoid inhibiting; /// optimizations.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:19,Modifiability,flexible,flexible,19,// Structures with flexible arrays are always indirect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:225,Availability,avail,available,225,"// The MCU psABI allows passing parameters in-reg even if there are; // earlier parameters that are passed on the stack. Also,; // it does not allow passing >8-byte structs in-register,; // even if there are 3 free registers available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:495,Availability,avail,available,495,"// Vectorcall x86 works subtly different than in x64, so the format is; // a bit different than the x64 version. First, all vector types (not HVAs); // are assigned, with the first 6 ending up in the [XYZ]MM0-5 registers.; // This differs from the x64 implementation, where the first 6 by INDEX get; // registers.; // In the second pass over the arguments, HVAs are passed in the remaining; // vector registers if possible, or indirectly by address. The address will be; // passed in ECX/EDX if available. Any other arguments are passed according to; // the usual fastcall rules.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:3,Safety,Avoid,Avoid,3,"// Avoid having different alignments on delegate call args by always; // setting the alignment to 4, which is what we do for inallocas.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:19,Modifiability,flexible,flexible,19,// Structures with flexible arrays are always indirect.; // FIXME: This should not be byval!,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:230,Performance,optimiz,optimizations,230,"// Expand small (<= 128-bit) record types when we know that the stack layout; // of those arguments will match the struct. This is important because the; // LLVM backend isn't smart enough to remove byval, which inhibits many; // optimizations.; // Don't do this for the MCU if there are still free integer registers; // (see X86_64 ABI for full explanation).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:60,Availability,avail,available,60,"// On Windows, vectors are passed directly if registers are available, or; // indirectly if not. This avoids the need to align argument memory. Pass; // user-defined vector types larger than 512 bits indirectly for simplicity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:102,Safety,avoid,avoids,102,"// On Windows, vectors are passed directly if registers are available, or; // indirectly if not. This avoids the need to align argument memory. Pass; // user-defined vector types larger than 512 bits indirectly for simplicity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:215,Usability,simpl,simplicity,215,"// On Windows, vectors are passed directly if registers are available, or; // indirectly if not. This avoids the need to align argument memory. Pass; // user-defined vector types larger than 512 bits indirectly for simplicity.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:113,Availability,avail,available,113,"// For vectorcall, do a first pass over the arguments, assigning FP and vector; // arguments to XMM registers as available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:71,Modifiability,rewrite,rewrite,71,"// If we needed to use inalloca for any argument, do a second pass and rewrite; // all the memory arguments to use inalloca.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:96,Energy Efficiency,reduce,reduces,96,"/// postMerge - Implement the X86_64 ABI post merging algorithm.; ///; /// Post merger cleanup, reduces a malformed Hi and Lo pair to; /// final MEMORY or SSE classes when necessary.; ///; /// \param AggregateSize - The size of the current aggregate in; /// the classification process.; ///; /// \param Lo - The classification for the parts of the type; /// residing in the low word of the containing object.; ///; /// \param Hi - The classification for the parts of the type; /// residing in the higher words of the containing object.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:484,Integrability,depend,depending,484,"/// classify - Determine the x86_64 register classes in which the; /// given type T should be passed.; ///; /// \param Lo - The classification for the parts of the type; /// residing in the low word of the containing object.; ///; /// \param Hi - The classification for the parts of the type; /// residing in the high word of the containing object.; ///; /// \param OffsetBase - The bit offset of this type in the; /// containing object. Some parameters are classified different; /// depending on whether they straddle an eightbyte boundary.; ///; /// \param isNamedArg - Whether the argument in question is a ""named""; /// argument, as used in AMD64-ABI 3.5.7.; ///; /// \param IsRegCall - Whether the calling conversion is regcall.; ///; /// If a word is unused its result will be NoClass; if a type should; /// be passed in Memory then at least the classification of \arg Lo; /// will be Memory.; ///; /// The \arg Lo class will be NoClass iff the argument is ignored.; ///; /// If the \arg Lo class is ComplexX87, then the \arg Hi class will; /// also be ComplexX87.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:214,Availability,avail,available,214,"/// getIndirectResult - Give a source type \arg Ty, return a suitable result; /// such that the argument will be passed in memory.; ///; /// \param freeIntRegs - The number of free integer registers remaining; /// available.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:139,Performance,optimiz,optimizations,139,/// Disable tail call on x86-64. The epilogue code before the tail jump blocks; /// autoreleaseRV/retainRV and autoreleaseRV/unsafeClaimRV optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:125,Safety,unsafe,unsafeClaimRV,125,/// Disable tail call on x86-64. The epilogue code before the tail jump blocks; /// autoreleaseRV/retainRV and autoreleaseRV/unsafeClaimRV optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:54,Availability,error,error,54,// Mixing calling conventions here is very clearly an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:43,Usability,clear,clearly,43,// Mixing calling conventions here is very clearly an error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:251,Availability,error,error,251,"// The ""avx"" feature changes how vectors >128 in size are passed. ""avx512f""; // additionally changes how vectors >256 in size are passed. Like GCC, we; // warn when a function is called with an argument where this will change.; // Unlike GCC, we also error when it is an obvious ABI mismatch, that is,; // the caller and callee features are mismatched.; // Unfortunately, we cannot do this diagnostic in SEMA, since the callee can; // change its ABI with attribute-target after this call.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:64,Usability,clear,clearer,64,"// The CallArg seems to have desugared the type already, so for clearer; // diagnostics, replace it with the type in the FunctionDecl if possible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:657,Testability,log,logic,657,"// AMD64-ABI 3.2.3p2: Rule 5. Then a post merger cleanup is done:; //; // (a) If one of the classes is Memory, the whole argument is passed in; // memory.; //; // (b) If X87UP is not preceded by X87, the whole argument is passed in; // memory.; //; // (c) If the size of the aggregate exceeds two eightbytes and the first; // eightbyte isn't SSE or any other eightbyte isn't SSEUP, the whole; // argument is passed in memory. NOTE: This is necessary to keep the; // ABI working for processors that don't support the __m256 type.; //; // (d) If SSEUP is not preceded by SSE or SSEUP, it is converted to SSE.; //; // Some of these are enforced by the merging logic. Others can arise; // only with unions; for example:; // union { _Complex double; unsigned; }; //; // Note that clauses (b) and (c) were added in 0.98.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:27,Usability,simpl,simplified,27,"// FIXME: This code can be simplified by introducing a simple value class for; // Class pairs with appropriate constructor methods for the various; // situations.; // FIXME: Some of the split computations are wrong; unaligned vectors; // shouldn't be passed in registers for example, so there is no chance they; // can straddle an eightbyte. Verify & simplify.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:55,Usability,simpl,simple,55,"// FIXME: This code can be simplified by introducing a simple value class for; // Class pairs with appropriate constructor methods for the various; // situations.; // FIXME: Some of the split computations are wrong; unaligned vectors; // shouldn't be passed in registers for example, so there is no chance they; // can straddle an eightbyte. Verify & simplify.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:351,Usability,simpl,simplify,351,"// FIXME: This code can be simplified by introducing a simple value class for; // Class pairs with appropriate constructor methods for the various; // situations.; // FIXME: Some of the split computations are wrong; unaligned vectors; // shouldn't be passed in registers for example, so there is no chance they; // can straddle an eightbyte. Verify & simplify.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:410,Safety,avoid,avoid,410,"// Arguments of 256-bits are split into four eightbyte chunks. The; // least significant one belongs to class SSE and all the others to class; // SSEUP. The original Lo and Hi design considers that types can't be; // greater than 128-bits, so a 64-bit split in Hi and Lo makes sense.; // This design isn't correct for 256-bits, but since there're no cases; // where the upper parts would need to be inspected, avoid adding; // complexity and just consider Hi to match the 64-256 part.; //; // Note that per 3.5.7 of AMD64-ABI, 256-bit args are only passed in; // registers if they are ""named"", i.e. not part of the ""..."" of a; // variadic function.; //; // Similarly, per 3.2.3. of the AVX512 draft, 512-bits (""named"") args are; // split into eight eightbyte chunks, one SSE and seven SSEUP.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:23,Usability,simpl,simplified,23,"// Otherwise implement simplified merge. We could be smarter about; // this, but it isn't worth it and would be harder to verify.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:138,Modifiability,extend,extended,138,"// The only case a 256-bit wide vector could be used is when the array; // contains a single 256-bit element. Since Lo and Hi logic isn't extended; // to work for sizes wider than 128, early check and fallback to memory.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:126,Testability,log,logic,126,"// The only case a 256-bit wide vector could be used is when the array; // contains a single 256-bit element. Since Lo and Hi logic isn't extended; // to work for sizes wider than 128, early check and fallback to memory.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:10,Modifiability,variab,variable,10,// Assume variable sized types are passed in memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:341,Modifiability,Extend,Extended,341,"// AMD64-ABI 3.2.3p2: Rule 1. If the size of an object is larger than; // eight eightbytes, or it contains unaligned fields, it has class MEMORY.; //; // The only case a 256-bit or a 512-bit wide vector could be used is when; // the struct contains a single 256-bit or 512-bit element. Early check; // and fallback to memory.; //; // FIXME: Extended the Lo and Hi logic properly to work for size wider; // than 128.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:364,Testability,log,logic,364,"// AMD64-ABI 3.2.3p2: Rule 1. If the size of an object is larger than; // eight eightbytes, or it contains unaligned fields, it has class MEMORY.; //; // The only case a 256-bit or a 512-bit wide vector could be used is when; // the struct contains a single 256-bit or 512-bit element. Early check; // and fallback to memory.; //; // FIXME: Extended the Lo and Hi logic properly to work for size wider; // than 128.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:19,Testability,test,test,19,"// Note, skip this test for bit-fields, see below.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:170,Availability,avail,available,170,"// If this is a scalar LLVM value then assume LLVM will pass it in the right; // place naturally.; //; // This assumption is optimistic, as there could be free registers available; // when we need to pass this argument in memory, and LLVM could try to pass; // the argument in the free register. This does not seem to happen currently,; // but this code would be much safer if we could mark the argument with; // 'onstack'. See PR12193.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:368,Safety,safe,safer,368,"// If this is a scalar LLVM value then assume LLVM will pass it in the right; // place naturally.; //; // This assumption is optimistic, as there could be free registers available; // when we need to pass this argument in memory, and LLVM could try to pass; // the argument in the free register. This does not seem to happen currently,; // but this code would be much safer if we could mark the argument with; // 'onstack'. See PR12193.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:109,Performance,optimiz,optimizer,109,// Compute the byval alignment. We specify the alignment of the byval in all; // cases so that the mid-level optimizer knows the alignment of the byval.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:912,Availability,avail,available,912,"// Attempt to avoid passing indirect results using byval when possible. This; // is important for good codegen.; //; // We do this by coercing the value into a scalar type which the backend can; // handle naturally (i.e., without using byval).; //; // For simplicity, we currently only do this when we have exhausted all of the; // free integer registers. Doing this when there are free integer registers; // would require more care, as we would have to ensure that the coerced value; // did not claim the unused register. That would require either reording the; // arguments to the function (so that any subsequent inreg values came first),; // or only doing this optimization when there were no following arguments that; // might be inreg.; //; // We currently expect it to be rare (particularly in well written code) for; // arguments to be passed on the stack when there are still free integer; // registers available (this would typically imply large structs being passed; // by value), so this seems like a fair tradeoff for now.; //; // We can revisit this if the backend grows support for 'onstack' parameter; // attributes. See PR12193.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:665,Performance,optimiz,optimization,665,"// Attempt to avoid passing indirect results using byval when possible. This; // is important for good codegen.; //; // We do this by coercing the value into a scalar type which the backend can; // handle naturally (i.e., without using byval).; //; // For simplicity, we currently only do this when we have exhausted all of the; // free integer registers. Doing this when there are free integer registers; // would require more care, as we would have to ensure that the coerced value; // did not claim the unused register. That would require either reording the; // arguments to the function (so that any subsequent inreg values came first),; // or only doing this optimization when there were no following arguments that; // might be inreg.; //; // We currently expect it to be rare (particularly in well written code) for; // arguments to be passed on the stack when there are still free integer; // registers available (this would typically imply large structs being passed; // by value), so this seems like a fair tradeoff for now.; //; // We can revisit this if the backend grows support for 'onstack' parameter; // attributes. See PR12193.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:14,Safety,avoid,avoid,14,"// Attempt to avoid passing indirect results using byval when possible. This; // is important for good codegen.; //; // We do this by coercing the value into a scalar type which the backend can; // handle naturally (i.e., without using byval).; //; // For simplicity, we currently only do this when we have exhausted all of the; // free integer registers. Doing this when there are free integer registers; // would require more care, as we would have to ensure that the coerced value; // did not claim the unused register. That would require either reording the; // arguments to the function (so that any subsequent inreg values came first),; // or only doing this optimization when there were no following arguments that; // might be inreg.; //; // We currently expect it to be rare (particularly in well written code) for; // arguments to be passed on the stack when there are still free integer; // registers available (this would typically imply large structs being passed; // by value), so this seems like a fair tradeoff for now.; //; // We can revisit this if the backend grows support for 'onstack' parameter; // attributes. See PR12193.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:256,Usability,simpl,simplicity,256,"// Attempt to avoid passing indirect results using byval when possible. This; // is important for good codegen.; //; // We do this by coercing the value into a scalar type which the backend can; // handle naturally (i.e., without using byval).; //; // For simplicity, we currently only do this when we have exhausted all of the; // free integer registers. Doing this when there are free integer registers; // would require more care, as we would have to ensure that the coerced value; // did not claim the unused register. That would require either reording the; // arguments to the function (so that any subsequent inreg values came first),; // or only doing this optimization when there were no following arguments that; // might be inreg.; //; // We currently expect it to be rare (particularly in well written code) for; // arguments to be passed on the stack when there are still free integer; // registers available (this would typically imply large structs being passed; // by value), so this seems like a fair tradeoff for now.; //; // We can revisit this if the backend grows support for 'onstack' parameter; // attributes. See PR12193.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:3,Integrability,Wrap,Wrapper,3,// Wrapper structs/arrays that only contain vectors are passed just like; // vectors; strip them off if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:42,Safety,safe,safe,42,"// If it overlaps no elements, then it is safe to process as padding.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:46,Usability,simpl,simple,46,"// If we can't get a second FP type, return a simple half or float.; // avx512fp16-abi.c:pr51813_2 shows it works to return float for; // {float, i8} too.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:223,Integrability,rout,routine,223,"/// GetINTEGERTypeAtOffset - The ABI specifies that a value should be passed in; /// an 8-byte GPR. This means that we either have a scalar or we are talking; /// about the high or low part of an up-to-16-byte struct. This routine picks; /// the best LLVM IR type to represent this, which may be i64 or may be anything; /// else that the backend will pass in a GPR that works better (e.g. i8, %foo*,; /// etc).; ///; /// PrefType is an LLVM IR type that corresponds to (part of) the IR type for; /// the source type. IROffset is an offset in bytes into the LLVM IR type that; /// the 8-byte value references. PrefType may be null.; ///; /// SourceTy is the source-level type for the entire argument. SourceOffset is; /// an offset into this that we're processing (which is always either 0 or 8).; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:138,Safety,safe,safely,138,"// If we're dealing with an un-offset LLVM IR type, then it means that we're; // returning an 8-byte unit starting with it. See if we can safely use it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:344,Integrability,depend,depend,344,"// If we have a 1/2/4-byte integer, we can use it only if the rest of the; // goodness in the source type is just tail padding. This is allowed to; // kick in for struct {double,int} on the int, but not on; // struct{double,int,int} because we wouldn't return the second int. We; // have to do this analysis on the source type because we can't depend on; // unions being lowered a specific way etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:16,Safety,safe,safe,16,// It is always safe to classify this as an integer type up to i64 that; // isn't larger than the structure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:205,Security,access,access,205,"// To handle this, we have to increase the size of the low part so that the; // second element will start at an 8 byte offset. We can't increase the size; // of the second element because it might make us access off the end of the; // struct.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:68,Availability,avail,available,68,"// AMD64-ABI 3.2.3p4: Rule 3. If the class is INTEGER, the next; // available register of the sequence %rax, %rdx is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:29,Modifiability,extend,extended,29,"// If we have a sign or zero extended integer, make sure to return Extend; // so that the parameter gets the right LLVM IR attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:67,Modifiability,Extend,Extend,67,"// If we have a sign or zero extended integer, make sure to return Extend; // so that the parameter gets the right LLVM IR attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:64,Availability,avail,available,64,"// AMD64-ABI 3.2.3p4: Rule 4. If the class is SSE, the next; // available SSE register of the sequence %xmm0, %xmm1 is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:93,Availability,avail,available,93,"// AMD64-ABI 3.2.3p4: Rule 5. If the class is SSEUP, the eightbyte; // is passed in the next available eightbyte chunk if the last used; // vector register.; //; // SSEUP should always be preceded by SSE, just widen.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:68,Availability,avail,available,68,"// AMD64-ABI 3.2.3p3: Rule 2. If the class is INTEGER, the next; // available register of the sequence %rdi, %rsi, %rdx, %rcx, %r8; // and %r9 is used.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:29,Modifiability,extend,extended,29,"// If we have a sign or zero extended integer, make sure to return Extend; // so that the parameter gets the right LLVM IR attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:67,Modifiability,Extend,Extend,67,"// If we have a sign or zero extended integer, make sure to return Extend; // so that the parameter gets the right LLVM IR attributes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:64,Availability,avail,available,64,"// AMD64-ABI 3.2.3p3: Rule 3. If the class is SSE, the next; // available SSE register is used, the registers are taken in the; // order from %xmm0 to %xmm7.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:48,Availability,avail,available,48,"// AMD64-ABI 3.2.3p3: If there are no registers available for any; // eightbyte of an argument, the whole argument is passed on the; // stack. If registers have already been assigned for some; // eightbytes of such an argument, the assignments get reverted.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:16,Performance,load,load,16,// Emit code to load the value if it was passed in registers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:571,Performance,load,loads,571,// AMD64-ABI 3.5.7p5: Step 4. Fetch type from l->reg_save_area with; // an offset of l->gp_offset and/or l->fp_offset. This may require; // copying to a temporary location in case the parameter is passed; // in different register classes or requires an alignment greater; // than 8 for general purpose registers and 16 for XMM registers.; //; // FIXME: This really results in shameful code when we end up needing to; // collect arguments from different places; often what should result in a; // simple assembling of a structure from scattered addresses has many more; // loads than necessary. Can we clean this up?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:495,Usability,simpl,simple,495,// AMD64-ABI 3.5.7p5: Step 4. Fetch type from l->reg_save_area with; // an offset of l->gp_offset and/or l->fp_offset. This may require; // copying to a temporary location in case the parameter is passed; // in different register classes or requires an alignment greater; // than 8 for general purpose registers and 16 for XMM registers.; //; // FIXME: This really results in shameful code when we end up needing to; // collect arguments from different places; often what should result in a; // simple assembling of a structure from scattered addresses has many more; // loads than necessary. Can we clean this up?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:16,Performance,load,load,16,// Emit code to load the value if it was passed in memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:23,Modifiability,extend,extended,23,"// Bool type is always extended to the ABI, other builtin types are not; // extended.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:76,Modifiability,extend,extended,76,"// Bool type is always extended to the ABI, other builtin types are not; // extended.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:35,Modifiability,extend,extended,35,// Mingw64 GCC uses the old 80 bit extended precision floating point; // unit. It passes them indirectly through memory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:186,Energy Efficiency,efficient,efficient,186,"// If it's a parameter type, the normal ABI rule is that arguments larger; // than 8 bytes are passed indirectly. GCC follows it. We follow it too,; // even though it isn't particularly efficient.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:152,Energy Efficiency,power,power-of-two,152,"// MS x64 ABI requirement: ""Any argument that doesn't fit in 8 bytes, or is; // not 1, 2, 4, or 8 bytes, must be passed by reference.""; // However, non-power-of-two bit-precise integers will be passed as 1, 2, 4,; // or 8 bytes anyway as long is it fits in them, so we don't have to check; // the power of 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp:297,Energy Efficiency,power,power,297,"// MS x64 ABI requirement: ""Any argument that doesn't fit in 8 bytes, or is; // not 1, 2, 4, or 8 bytes, must be passed by reference.""; // However, non-power-of-two bit-precise integers will be passed as 1, 2, 4,; // or 8 bytes anyway as long is it fits in them, so we don't have to check; // the power of 2.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/X86.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:20,Performance,cache,caches,20,"/// TypeStringCache caches the meta encodings of Types.; ///; /// The reason for caching TypeStrings is two fold:; /// 1. To cache a type's encoding for later uses;; /// 2. As a means to break recursive member type inclusion.; ///; /// A cache Entry can have a Status of:; /// NonRecursive: The type encoding is not recursive;; /// Recursive: The type encoding is recursive;; /// Incomplete: An incomplete TypeString;; /// IncompleteUsed: An incomplete TypeString that has been used in a; /// Recursive type encoding.; ///; /// A NonRecursive entry will have all of its sub-members expanded as fully; /// as possible. Whilst it may contain types which are recursive, the type; /// itself is not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a s",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:125,Performance,cache,cache,125,"/// TypeStringCache caches the meta encodings of Types.; ///; /// The reason for caching TypeStrings is two fold:; /// 1. To cache a type's encoding for later uses;; /// 2. As a means to break recursive member type inclusion.; ///; /// A cache Entry can have a Status of:; /// NonRecursive: The type encoding is not recursive;; /// Recursive: The type encoding is recursive;; /// Incomplete: An incomplete TypeString;; /// IncompleteUsed: An incomplete TypeString that has been used in a; /// Recursive type encoding.; ///; /// A NonRecursive entry will have all of its sub-members expanded as fully; /// as possible. Whilst it may contain types which are recursive, the type; /// itself is not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a s",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:238,Performance,cache,cache,238,"/// TypeStringCache caches the meta encodings of Types.; ///; /// The reason for caching TypeStrings is two fold:; /// 1. To cache a type's encoding for later uses;; /// 2. As a means to break recursive member type inclusion.; ///; /// A cache Entry can have a Status of:; /// NonRecursive: The type encoding is not recursive;; /// Recursive: The type encoding is recursive;; /// Incomplete: An incomplete TypeString;; /// IncompleteUsed: An incomplete TypeString that has been used in a; /// Recursive type encoding.; ///; /// A NonRecursive entry will have all of its sub-members expanded as fully; /// as possible. Whilst it may contain types which are recursive, the type; /// itself is not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a s",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1362,Performance,cache,cache,1362,"ncomplete: An incomplete TypeString;; /// IncompleteUsed: An incomplete TypeString that has been used in a; /// Recursive type encoding.; ///; /// A NonRecursive entry will have all of its sub-members expanded as fully; /// as possible. Whilst it may contain types which are recursive, the type; /// itself is not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1610,Performance,cache,cache,1610,"not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it currently contains in IncompleteUsedCount;; ///; /// If a member's encoding is found to be a NonRecursive or Recursive viz:; /// IncompleteUsedCount==0, the member's encoding is added to the cache.; /// Else the member is part of a recursive type and thus the recursion has; /// been exited too soon for the en",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1679,Performance,cache,cached,1679,"not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it currently contains in IncompleteUsedCount;; ///; /// If a member's encoding is found to be a NonRecursive or Recursive viz:; /// IncompleteUsedCount==0, the member's encoding is added to the cache.; /// Else the member is part of a recursive type and thus the recursion has; /// been exited too soon for the en",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1721,Performance,cache,cache,1721,"not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it currently contains in IncompleteUsedCount;; ///; /// If a member's encoding is found to be a NonRecursive or Recursive viz:; /// IncompleteUsedCount==0, the member's encoding is added to the cache.; /// Else the member is part of a recursive type and thus the recursion has; /// been exited too soon for the en",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1787,Performance,cache,cached,1787,"not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it currently contains in IncompleteUsedCount;; ///; /// If a member's encoding is found to be a NonRecursive or Recursive viz:; /// IncompleteUsedCount==0, the member's encoding is added to the cache.; /// Else the member is part of a recursive type and thus the recursion has; /// been exited too soon for the en",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1940,Performance,cache,cache,1940," safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it currently contains in IncompleteUsedCount;; ///; /// If a member's encoding is found to be a NonRecursive or Recursive viz:; /// IncompleteUsedCount==0, the member's encoding is added to the cache.; /// Else the member is part of a recursive type and thus the recursion has; /// been exited too soon for the encoding to be correct for the member.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:2122,Performance,cache,cache,2122," safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it currently contains in IncompleteUsedCount;; ///; /// If a member's encoding is found to be a NonRecursive or Recursive viz:; /// IncompleteUsedCount==0, the member's encoding is added to the cache.; /// Else the member is part of a recursive type and thus the recursion has; /// been exited too soon for the encoding to be correct for the member.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:2321,Performance,cache,cache,2321," safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it currently contains in IncompleteUsedCount;; ///; /// If a member's encoding is found to be a NonRecursive or Recursive viz:; /// IncompleteUsedCount==0, the member's encoding is added to the cache.; /// Else the member is part of a recursive type and thus the recursion has; /// been exited too soon for the encoding to be correct for the member.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:2573,Performance,cache,cache,2573," safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it currently contains in IncompleteUsedCount;; ///; /// If a member's encoding is found to be a NonRecursive or Recursive viz:; /// IncompleteUsedCount==0, the member's encoding is added to the cache.; /// Else the member is part of a recursive type and thus the recursion has; /// been exited too soon for the encoding to be correct for the member.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:734,Safety,safe,safely,734,"/// TypeStringCache caches the meta encodings of Types.; ///; /// The reason for caching TypeStrings is two fold:; /// 1. To cache a type's encoding for later uses;; /// 2. As a means to break recursive member type inclusion.; ///; /// A cache Entry can have a Status of:; /// NonRecursive: The type encoding is not recursive;; /// Recursive: The type encoding is recursive;; /// Incomplete: An incomplete TypeString;; /// IncompleteUsed: An incomplete TypeString that has been used in a; /// Recursive type encoding.; ///; /// A NonRecursive entry will have all of its sub-members expanded as fully; /// as possible. Whilst it may contain types which are recursive, the type; /// itself is not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a s",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1302,Testability,Stub,StubEnc,1302,"ncomplete: An incomplete TypeString;; /// IncompleteUsed: An incomplete TypeString that has been used in a; /// Recursive type encoding.; ///; /// A NonRecursive entry will have all of its sub-members expanded as fully; /// as possible. Whilst it may contain types which are recursive, the type; /// itself is not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. If a Recursive encoding was swapped out; /// it is swapped back in;; ///; /// If an incomplete entry is used to expand a sub-member, the incomplete; /// entry is marked as IncompleteUsed. The cache keeps count of how many; /// IncompleteUsed entries it",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:1078,Usability,simpl,simplicity,1078,"he a type's encoding for later uses;; /// 2. As a means to break recursive member type inclusion.; ///; /// A cache Entry can have a Status of:; /// NonRecursive: The type encoding is not recursive;; /// Recursive: The type encoding is recursive;; /// Incomplete: An incomplete TypeString;; /// IncompleteUsed: An incomplete TypeString that has been used in a; /// Recursive type encoding.; ///; /// A NonRecursive entry will have all of its sub-members expanded as fully; /// as possible. Whilst it may contain types which are recursive, the type; /// itself is not recursive and thus its encoding may be safely used whenever; /// the type is encountered.; ///; /// A Recursive entry will have all of its sub-members expanded as fully as; /// possible. The type itself is recursive and it may contain other types which; /// are recursive. The Recursive encoding must not be used during the expansion; /// of a recursive type's recursive branch. For simplicity the code uses; /// IncompleteCount to reject all usage of Recursive encodings for member types.; ///; /// An Incomplete entry is always a RecordType and only encodes its; /// identifier e.g. ""s(S){}"". Incomplete 'StubEnc' entries are ephemeral and; /// are placed into the cache during type expansion as a means to identify and; /// handle recursive inclusion of types as sub-members. If there is recursion; /// the entry becomes IncompleteUsed.; ///; /// During the expansion of a RecordType's members:; ///; /// If the cache contains a NonRecursive encoding for the member type, the; /// cached encoding is used;; ///; /// If the cache contains a Recursive encoding for the member type, the; /// cached encoding is 'Swapped' out, as it may be incorrect, and...; ///; /// If the member is a RecordType, an Incomplete encoding is placed into the; /// cache to break potential recursive inclusion of itself as a sub-member;; ///; /// Once a member RecordType has been expanded, its temporary incomplete; /// entry is removed from the cache. ",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:72,Availability,redundant,redundant,72,// End anonymous namespace.; // TODO: this implementation is likely now redundant with the default; // EmitVAArg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:72,Safety,redund,redundant,72,// End anonymous namespace.; // TODO: this implementation is likely now redundant with the default; // EmitVAArg.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:91,Performance,cache,cache,91,"/// During the expansion of a RecordType, an incomplete TypeString is placed; /// into the cache as a means to identify and break recursion.; /// If there is a Recursive encoding in the cache, it is swapped out and will; /// be reinserted by removeIncomplete().; /// All other types of encoding should have been used rather than arriving here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:186,Performance,cache,cache,186,"/// During the expansion of a RecordType, an incomplete TypeString is placed; /// into the cache as a means to identify and break recursion.; /// If there is a Recursive encoding in the cache, it is swapped out and will; /// be reinserted by removeIncomplete().; /// All other types of encoding should have been used rather than arriving here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:109,Performance,cache,cache,109,"/// Once the RecordType has been expanded, the temporary incomplete TypeString; /// must be removed from the cache.; /// If a Recursive was swapped out by addIncomplete(), it will be replaced.; /// Returns true if the RecordType was defined recursively.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:38,Performance,cache,cache,38,/// Add the encoded TypeString to the cache only if it is NonRecursive or; /// Recursive (viz: all sub-members were expanded as fully as possible).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:13,Performance,cache,cached,13,"/// Return a cached TypeString encoding for the ID. If there isn't one, or we; /// are recursively expanding a type (IncompleteCount != 0) and the cached; /// encoding is Recursive, return an empty StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:147,Performance,cache,cached,147,"/// Return a cached TypeString encoding for the ID. If there isn't one, or we; /// are recursively expanding a type (IncompleteCount != 0) and the cached; /// encoding is Recursive, return an empty StringRef.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:635,Availability,down,download,635,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:443,Modifiability,variab,variables,443,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:164,Safety,safe,safety,164,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:710,Testability,test,tested,710,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:720,Testability,test,test,720,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:567,Usability,Guid,Guide,567,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:669,Usability,Guid,Guide,669,"/// The XCore ABI includes a type information section that communicates symbol; /// type information to the linker. The linker uses this information to verify; /// safety/correctness of things such as array bound and pointers et al.; /// The ABI only requires C (and XC) language modules to emit TypeStrings.; /// This type information (TypeString) is emitted into meta data for all global; /// symbols: definitions, declarations, functions & variables.; ///; /// The TypeString carries type, qualifier, name, size & value details.; /// Please see 'Tools Development Guide' section 2.16.2 for format details:; /// https://www.xmos.com/download/public/Tools-Development-Guide%28X9114A%29.pdf; /// The output is tested by test/CodeGen/xcore-stringtype.c.; ///",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:66,Performance,cache,cache,66,/// Appends structure and union types to Enc and adds encoding to cache.; /// Recursively calls appendType (via extractFieldType) for each field.; /// Union types have their fields ordered according to the ABI.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:14,Performance,cache,cached,14,// Append the cached TypeString if we have one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:50,Performance,cache,cache,50,// An incomplete TypeString stub is placed in the cache for this RecordType; // so that recursive calls to this RecordType will use it whilst building a; // complete TypeString for this RecordType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:28,Testability,stub,stub,28,// An incomplete TypeString stub is placed in the cache for this RecordType; // so that recursive calls to this RecordType will use it whilst building a; // complete TypeString for this RecordType.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:3,Testability,Stub,StubEnc,3,// StubEnc now holds a valid incomplete TypeString.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:59,Performance,cache,cache,59,/// Appends enum types to Enc and adds the encoding to the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp:14,Performance,cache,cached,14,// Append the cached TypeString if we have one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CodeGen/Targets/XCore.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:429,Integrability,interface,interface,429,"//===--- CrossTranslationUnit.cpp - -----------------------------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//; //; // This file implements the CrossTranslationUnit interface.; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:70,Availability,Error,Error,70,// FIXME: This class is will be removed after the transition to llvm::Error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:33,Availability,error,error,33,// There should not be a success error. Jump to unreachable directly.; // Add this case to make the compiler stop complaining.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:99,Performance,load,loaded,99,// The imported AST had been generated for a different target.; // Some parts of the triple in the loaded ASTContext can be unknown while the; // very same parts in the target ASTContext are known. Thus we check for the; // known parts only.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:50,Availability,error,error,50,"// If CPP dialects are different then return with error.; //; // Consider this STL code:; // template<typename _Alloc>; // struct __alloc_traits; // #if __cplusplus >= 201103L; // : std::allocator_traits<_Alloc>; // #endif; // { // ...; // };; // This class template would create ODR errors during merging the two units,; // since in one translation unit the class template has a base class, however; // in the other unit it has none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:284,Availability,error,errors,284,"// If CPP dialects are different then return with error.; //; // Consider this STL code:; // template<typename _Alloc>; // struct __alloc_traits; // #if __cplusplus >= 201103L; // : std::allocator_traits<_Alloc>; // #endif; // { // ...; // };; // This class template would create ODR errors during merging the two units,; // since in one translation unit the class template has a base class, however; // in the other unit it has none.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:11,Performance,cache,cache,11,// Try the cache first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:10,Performance,load,load,10,// Do not load if the limit is reached.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:3,Deployability,Update,Update,3,// Update the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:14,Performance,cache,cache,14,// Update the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:16,Performance,cache,cache,16,// Found in the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:11,Performance,cache,cache,11,// Try the cache first.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:3,Performance,Load,Load,3,"// Load the ASTUnit from the pre-dumped AST file specified by ASTFileName.; // Ensure that the Index is loaded, as we need to search in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:104,Performance,load,loaded,104,"// Load the ASTUnit from the pre-dumped AST file specified by ASTFileName.; // Ensure that the Index is loaded, as we need to search in it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:3,Deployability,Update,Update,3,// Update the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:14,Performance,cache,cache,14,// Update the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:16,Performance,cache,cache,16,// Found in the cache.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:3,Availability,Error,Error,3,// Error while parsing CrossTU index file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:202,Availability,error,error,202,// FIXME: The current implementation only supports loading decls with; // a lookup name from a single translation unit. If multiple; // translation units contains decls with the same lookup name an; // error will be returned.; // Try to get the value from the heavily cached storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:51,Performance,load,loading,51,// FIXME: The current implementation only supports loading decls with; // a lookup name from a single translation unit. If multiple; // translation units contains decls with the same lookup name an; // error will be returned.; // Try to get the value from the heavily cached storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:268,Performance,cache,cached,268,// FIXME: The current implementation only supports loading decls with; // a lookup name from a single translation unit. If multiple; // translation units contains decls with the same lookup name an; // error will be returned.; // Try to get the value from the heavily cached storage.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:4,Performance,Load,Load,4,"/// Load the AST from a source-file, which is supposed to be located inside the; /// YAML formatted invocation list file under the filesystem path specified by; /// \p InvocationList. The invocation list should contain absolute paths.; /// \p SourceFilePath is the absolute path of the source file that contains the; /// function definition the analysis is looking for. The Index is built by the; /// \p clang-extdef-mapping tool, which is also supposed to be generating; /// absolute paths.; ///; /// Proper diagnostic emission requires absolute paths, so even if a future; /// change introduces the handling of relative paths, this must be taken into; /// consideration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:42,Availability,avail,available,42,/// There has to be at least one document available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:77,Usability,clear,clear,77,"/// Every conversion starts with an empty working storage, as it is not; /// clear if this is a requirement of the YAML parser.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp:14,Availability,error,error,14,// Handle the error to store the code for next call to this function.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/CrossTU/CrossTranslationUnit.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:26,Integrability,synchroniz,synchronization,26,"/// Pipe for inter-thread synchronization - for epoll-ing on multiple; /// conditions. It is meant for uni-directional 1:1 signalling - specifically:; /// no multiple consumers, no data passing. Thread waiting for signal should; /// poll the FDRead. Signalling thread should call signal() which writes single; /// character to FDRead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:20,Performance,queue,queue,20,/// Mutex-protected queue of Events.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:95,Performance,queue,queue,95,// Since we might have missed all the prior notifications on NonEmpty we; // have to check the queue first (under lock).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:70,Performance,Queue,Queue,70,// Consumes inotify events and pushes directory watcher events to the Queue.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:89,Performance,Queue,Queue,89,"// Does the initial scan of the directory - directly calling Receiver,; // bypassing the Queue. Both InitialScan and EventReceivingLoop use Receiver; // which isn't necessarily thread-safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:184,Safety,safe,safe,184,"// Does the initial scan of the directory - directly calling Receiver,; // bypassing the Queue. Both InitialScan and EventReceivingLoop use Receiver; // which isn't necessarily thread-safe.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:30,Performance,Queue,Queue,30,// Processing events from the Queue.; // In case client doesn't want to do the initial scan synchronously; // (WaitForInitialSync=false in ctor) we do the initial scan at the beginning; // of this thread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:51,Performance,Queue,Queue,51,// Push event of WatcherGotInvalidated kind to the Queue to stop the loop.; // Both InitialScan and EventReceivingLoop use Receiver which isn't; // necessarily thread-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:167,Safety,safe,safe,167,// Push event of WatcherGotInvalidated kind to the Queue to stop the loop.; // Both InitialScan and EventReceivingLoop use Receiver which isn't; // necessarily thread-safe.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:92,Modifiability,variab,variables,92,"// http://man7.org/linux/man-pages/man7/inotify.7.html; // Some systems cannot read integer variables if they are not; // properly aligned. On other systems, incorrect alignment may; // decrease performance. Hence, the buffer used for reading from; // the inotify file descriptor should have the same alignment as; // struct inotify_event.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:195,Performance,perform,performance,195,"// http://man7.org/linux/man-pages/man7/inotify.7.html; // Some systems cannot read integer variables if they are not; // properly aligned. On other systems, incorrect alignment may; // decrease performance. Hence, the buffer used for reading from; // the inotify file descriptor should have the same alignment as; // struct inotify_event.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:2,Safety,timeout,timeout,2,/*timeout=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:37,Availability,error,error,37,"// epoll_wait() always return either error or >0 events. Since there was no; // event for stopping, it must be an inotify event ready for reading.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:38,Safety,safe,safety,38,// We have no guarantees about thread safety of the Receiver which is being; // used in both InitialScan and EventReceivingLoop. We shouldn't run these; // only synchronously.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp:82,Availability,failure,failure,82,// FIXME: We might want to terminate an async initial scan early in case; // of a failure in EventsReceivingThread.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/linux/DirectoryWatcher-linux.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp:111,Integrability,contract,contract,111,// FSEventStreamStop and Invalidate must be called after Start and; // SetDispatchQueue to follow FSEvents API contract. The call to Receiver; // also uses Queue to not race with the initial scan.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp:156,Performance,Queue,Queue,156,// FSEventStreamStop and Invalidate must be called after Start and; // SetDispatchQueue to follow FSEvents API contract. The call to Receiver; // also uses Queue to not race with the initial scan.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp:3,Performance,latency,latency,3,/* latency in seconds */,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp:143,Performance,Queue,Queue,143,// We need to start watching the directory before we start scanning in order; // to not miss any event. By dispatching this on the same serial Queue as; // the FSEvents will be handled we manage to start watching BEFORE the; // inital scan and handling events ONLY AFTER the scan finishes.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/mac/DirectoryWatcher-mac.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp:104,Performance,perform,performing,104,// Pre-compute the real location as we will be handing over the directory; // handle to the watcher and performing synchronous operations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp:3,Availability,Failure,Failure,3,// Failure,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp:90,Integrability,synchroniz,synchronize,90,"// There was a buffer underrun on the kernel side. We may have lost; // events, please re-synchronize.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp:59,Performance,perform,perform,59,"// If we did not wait for the initial sync, then we should perform the; // scan when we enter the thread.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp:113,Availability,error,error,113,"// NOTE: We use the watcher instance as a RAII object to discard the handles; // for the directory in case of an error. Hence, this is early allocated,; // with the state being written directly to the watcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp:141,Energy Efficiency,allocate,allocated,141,"// NOTE: We use the watcher instance as a RAII object to discard the handles; // for the directory in case of an error. Hence, this is early allocated,; // with the state being written directly to the watcher.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/DirectoryWatcher/windows/DirectoryWatcher-windows.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:45,Integrability,depend,dependences,45,// Offload action set its own kinds on their dependences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:45,Integrability,depend,dependences,45,// Offload action set its own kinds on their dependences.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:23,Integrability,depend,dependency,23,"// If we have a single dependency, inherit the architecture from it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:35,Modifiability,inherit,inherit,35,"// If we have a single dependency, inherit the architecture from it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:25,Integrability,depend,dependencies,25,// Propagate info to the dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:32,Integrability,depend,dependence,32,// We use the kinds of the host dependence for this action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:91,Integrability,depend,dependencies,91,// Add device inputs and propagate info to the device actions. Do work only if; // we have dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:44,Integrability,depend,dependency,44,"// If this action is used to forward single dependency, set the toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:46,Integrability,depend,dependences,46,"// We expect to have the same number of input dependences and device tool; // chains, except if we also have a host dependence. In that case we have one; // more dependence than we have device tool chains.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:116,Integrability,depend,dependence,116,"// We expect to have the same number of input dependences and device tool; // chains, except if we also have a host dependence. In that case we have one; // more dependence than we have device tool chains.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:162,Integrability,depend,dependence,162,"// We expect to have the same number of input dependences and device tool; // chains, except if we also have a host dependence. In that case we have one; // more dependence than we have device tool chains.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:16,Testability,assert,assert,16,// The previous assert ensures the number of entries in getInputs() is; // consistent with what we are doing here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp:42,Availability,mask,mask,42,// Add each active offloading kind from a mask.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Action.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Action.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:7,Energy Efficiency,allocate,allocated,7,// Add allocated arguments to the final DAL.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:304,Availability,failure,failure,304,"// FIXME: Why are we trying to remove files that we have not created? For; // example we should only try to remove a temporary assembly file if; // ""clang -cc1"" succeed in writing it. Was this a workaround for when; // clang was writing directly to a .s file and sometimes leaving it behind; // during a failure?; // FIXME: If this is necessary, we can still try to split; // llvm::sys::fs::remove into a removeFile and a removeDir and avoid the; // duplicated stat from is_regular_file.; // Don't try to remove files which we don't have write access to (but may be; // able to remove), or non-regular files. Underlying tools may have; // intentionally not overwritten them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:436,Safety,avoid,avoid,436,"// FIXME: Why are we trying to remove files that we have not created? For; // example we should only try to remove a temporary assembly file if; // ""clang -cc1"" succeed in writing it. Was this a workaround for when; // clang was writing directly to a .s file and sometimes leaving it behind; // during a failure?; // FIXME: If this is necessary, we can still try to split; // llvm::sys::fs::remove into a removeFile and a removeDir and avoid the; // duplicated stat from is_regular_file.; // Don't try to remove files which we don't have write access to (but may be; // able to remove), or non-regular files. Underlying tools may have; // intentionally not overwritten them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:544,Security,access,access,544,"// FIXME: Why are we trying to remove files that we have not created? For; // example we should only try to remove a temporary assembly file if; // ""clang -cc1"" succeed in writing it. Was this a workaround for when; // clang was writing directly to a .s file and sometimes leaving it behind; // during a failure?; // FIXME: If this is necessary, we can still try to split; // llvm::sys::fs::remove into a removeFile and a removeDir and avoid the; // duplicated stat from is_regular_file.; // Don't try to remove files which we don't have write access to (but may be; // able to remove), or non-regular files. Underlying tools may have; // intentionally not overwritten them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:3,Availability,Failure,Failure,3,"// Failure is only failure if the file exists and is ""regular"". We checked; // for it being regular before, and llvm::sys::fs::remove ignores ENOENT,; // so we don't need to check again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:19,Availability,failure,failure,19,"// Failure is only failure if the file exists and is ""regular"". We checked; // for it being regular before, and llvm::sys::fs::remove ignores ENOENT,; // so we don't need to check again.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:64,Performance,cache,cache,64,// Follow gcc implementation of CC_PRINT_OPTIONS; we could also cache the; // output stream.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:122,Availability,failure,failures,122,// CUDA/HIP can have the same input source code compiled multiple times so do; // not compiled again if there are already failures. It is OK to abort the; // CUDA pipeline on errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:175,Availability,error,errors,175,// CUDA/HIP can have the same input source code compiled multiple times so do; // not compiled again if there are already failures. It is OK to abort the; // CUDA pipeline on errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:163,Deployability,pipeline,pipeline,163,// CUDA/HIP can have the same input source code compiled multiple times so do; // not compiled again if there are already failures. It is OK to abort the; // CUDA pipeline on errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:144,Safety,abort,abort,144,// CUDA/HIP can have the same input source code compiled multiple times so do; // not compiled again if there are already failures. It is OK to abort the; // CUDA pipeline on errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:244,Availability,failure,failures,244,"// According to UNIX standard, driver need to continue compiling all the; // inputs on the command line even one of them failed.; // In all but CLMode, execute all the jobs unless the necessary inputs for the; // job is missing due to previous failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:3,Usability,Clear,Clear,3,// Clear temporary/results file lists.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp:81,Safety,avoid,avoid,81,"// Remove any user specified output. Claim any unclaimed arguments, so as; // to avoid emitting warnings about unused args.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Compilation.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Compilation.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:41,Safety,detect,detection,41,"//===--- Distro.cpp - Linux distribution detection support ------*- C++ -*-===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:20,Deployability,release,release,20,"// On SLES, /etc/os-release was introduced in SLES 11.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:86,Deployability,release,release,86,// Newer freedesktop.org's compilant systemd-based systems; // should provide /etc/os-release or /usr/lib/os-release.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:109,Deployability,release,release,109,// Newer freedesktop.org's compilant systemd-based systems; // should provide /etc/os-release or /usr/lib/os-release.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:40,Deployability,release,release,40,// Older systems might provide /etc/lsb-release.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:39,Deployability,PATCH,PATCHLEVEL,39,// Old versions have split VERSION and PATCHLEVEL; // Newer versions use VERSION = x.y,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:42,Performance,perform,perform,42,"// If we're backed by a real file system, perform; // the detection only once and save the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:58,Safety,detect,detection,58,"// If we're backed by a real file system, perform; // the detection only once and save the result.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp:30,Testability,test,tests,30,"// This is mostly for passing tests which uses llvm::vfs::InMemoryFileSystem,; // which is not ""real"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Distro.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Distro.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:256,Integrability,depend,depending,256,"// Since the resource directory is embedded in the module hash, it's important; // that all places that need it call this function, so that they get the; // exact same string (""a/../b/"" and ""b/"" get different hashes, for example).; // Dir is bin/ or lib/, depending on where BinaryPath is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:58,Security,hash,hash,58,"// Since the resource directory is embedded in the module hash, it's important; // that all places that need it call this function, so that they get the; // exact same string (""a/../b/"" and ""b/"" get different hashes, for example).; // Dir is bin/ or lib/, depending on where BinaryPath is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:209,Security,hash,hashes,209,"// Since the resource directory is embedded in the module hash, it's important; // that all places that need it call this function, so that they get the; // exact same string (""a/../b/"" and ""b/"" get different hashes, for example).; // Dir is bin/ or lib/, depending on where BinaryPath is.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:30,Deployability,install,installed,30,// Provide a sensible default installed dir.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:11,Deployability,Install,InstalledDir,11,// Prepend InstalledDir if SysRoot is relative,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:30,Availability,error,error,30,// Check for missing argument error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:107,Integrability,interface,interfaces,107,// --precompile only runs up to precompilation.; // Options that cause the output of C++20 compiled module interfaces or; // header units have the same effect.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:121,Deployability,integrat,integrate,121,"// Unfortunately, we have to parse some forwarding options (-Xassembler,; // -Xlinker, -Xpreprocessor) because we either integrate their functionality; // (assembler and preprocessor), or bypass a previous driver ('collect2').; // Rewrite linker options, to replace --no-demangle with a custom internal; // option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:121,Integrability,integrat,integrate,121,"// Unfortunately, we have to parse some forwarding options (-Xassembler,; // -Xlinker, -Xpreprocessor) because we either integrate their functionality; // (assembler and preprocessor), or bypass a previous driver ('collect2').; // Rewrite linker options, to replace --no-demangle with a custom internal; // option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:231,Modifiability,Rewrite,Rewrite,231,"// Unfortunately, we have to parse some forwarding options (-Xassembler,; // -Xlinker, -Xpreprocessor) because we either integrate their functionality; // (assembler and preprocessor), or bypass a previous driver ('collect2').; // Rewrite linker options, to replace --no-demangle with a custom internal; // option.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Modifiability,Rewrite,Rewrite,3,"// Rewrite preprocessor options, to replace -Wp,-MD,FOO which is used by; // some build systems. We don't try to be complete here because we don't; // care to encourage this usage model.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite to -MD/-MMD along with -MF.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite reserved library names.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite unless -nostdlib is present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Modifiability,Rewrite,Rewrite,3,// Rewrite unconditionally.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:52,Integrability,rout,routine,52,/// Compute target triple from args.; ///; /// This routine provides the logic to compute a target triple from various; /// args passed to the driver and the default triple string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:73,Testability,log,logic,73,/// Compute target triple from args.; ///; /// This routine provides the logic to compute a target triple from various; /// args passed to the driver and the default triple string.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:136,Safety,detect,detect,136,"// GNU/Hurd's triples should have been -hurd-gnu*, but were historically made; // -gnu* only, and we can not change this, so we have to detect that case as; // being the Hurd OS.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:33,Availability,avail,available,33,// Handle Apple-specific options available here.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:112,Integrability,depend,depends,112,"// Use the CUDA and host triples as the key into the ToolChains map,; // because the device toolchain we create depends on both.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:25,Safety,detect,detected,25,// Emit a warning if the detected CUDA version is too new.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:207,Security,access,access,207,// Attempt to deduce the offloading triple from the set of architectures.; // We can only correctly deduce NVPTX / AMDGPU triples currently. We need; // to temporarily create these toolchains so that we can access tools for; // inferring architectures.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:16,Modifiability,config,config,16,// The args for config files or /clang: flags belong to different InputArgList; // objects than Args. This copies an Arg from one of those other InputArgLists; // to the ownership of Args.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:21,Modifiability,config,config,21,// Read options from config file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:40,Deployability,configurat,configuration,40,// Claim all arguments that come from a configuration file so that the driver; // does not warn on any that is unused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:40,Modifiability,config,configuration,40,// Claim all arguments that come from a configuration file so that the driver; // does not warn on any that is unused.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:27,Modifiability,config,config,27,"// If this is a subsequent config file, append options to the previous one.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:47,Modifiability,config,config,47,// Process options that change search path for config files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:37,Modifiability,config,config,37,// Prepare list of directories where config file is searched for.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:69,Availability,error,error,69,"// First try to load configuration from the default files, return on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:21,Deployability,configurat,configuration,21,"// First try to load configuration from the default files, return on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:21,Modifiability,config,configuration,21,"// First try to load configuration from the default files, return on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:16,Performance,load,load,16,"// First try to load configuration from the default files, return on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:13,Deployability,configurat,configuration,13,// Then load configuration files specified explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:13,Modifiability,config,configuration,13,// Then load configuration files specified explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:8,Performance,load,load,8,// Then load configuration files specified explicitly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:71,Deployability,configurat,configuration,71,"// If argument contains directory separator, treat it as a path to; // configuration file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:71,Modifiability,config,configuration,71,"// If argument contains directory separator, treat it as a path to; // configuration file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:13,Availability,error,error,13,// Report an error that the config file could not be found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:28,Modifiability,config,config,28,// Report an error that the config file could not be found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:42,Availability,error,error,42,"// Try to read the config file, return on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:19,Modifiability,config,config,19,"// Try to read the config file, return on error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:6,Availability,error,error,6,// No error occurred.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:19,Modifiability,config,config,19,// Disable default config if CLANG_NO_DEFAULT_CONFIG is set to a non-empty; // value.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:14,Modifiability,config,config,14,"// Search for config files in the following order:; // 1. <triple>-<mode>.cfg using real driver mode; // (e.g. i386-pc-linux-gnu-clang++.cfg).; // 2. <triple>-<mode>.cfg using executable suffix; // (e.g. i386-pc-linux-gnu-clang-g++.cfg for *clang-g++).; // 3. <triple>.cfg + <mode>.cfg using real driver mode; // (e.g. i386-pc-linux-gnu.cfg + clang++.cfg).; // 4. <triple>.cfg + <mode>.cfg using executable suffix; // (e.g. i386-pc-linux-gnu.cfg + clang-g++.cfg for *clang-g++).; // Try loading <triple>-<mode>.cfg, and return if we find a match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:487,Performance,load,loading,487,"// Search for config files in the following order:; // 1. <triple>-<mode>.cfg using real driver mode; // (e.g. i386-pc-linux-gnu-clang++.cfg).; // 2. <triple>-<mode>.cfg using executable suffix; // (e.g. i386-pc-linux-gnu-clang-g++.cfg for *clang-g++).; // 3. <triple>.cfg + <mode>.cfg using real driver mode; // (e.g. i386-pc-linux-gnu.cfg + clang++.cfg).; // 4. <triple>.cfg + <mode>.cfg using executable suffix; // (e.g. i386-pc-linux-gnu.cfg + clang-g++.cfg for *clang-g++).; // Try loading <triple>-<mode>.cfg, and return if we find a match.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:7,Performance,load,loading,7,"// Try loading <mode>.cfg, and return if loading failed. If a matching file; // was not found, still proceed on to try <triple>.cfg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:41,Performance,load,loading,41,"// Try loading <mode>.cfg, and return if loading failed. If a matching file; // was not found, still proceed on to try <triple>.cfg.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:7,Performance,load,loading,7,// Try loading <triple>.cfg and return if we find a match.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:92,Availability,error,error,92,"// If we were unable to find a config file deduced from executable name,; // that is not an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:31,Modifiability,config,config,31,"// If we were unable to find a config file deduced from executable name,; // that is not an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:15,Deployability,configurat,configuration,15,// Try parsing configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:15,Modifiability,config,configuration,15,// Try parsing configuration file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:28,Modifiability,config,config,28,"// All arguments, from both config file and command line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:45,Security,access,accessing,45,// Check for working directory option before accessing any files,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:49,Integrability,depend,depends,49,"// Setting up the jobs for some precompile cases depends on whether we are; // treating them as PCH, implicit modules or C++20 ones.; // TODO: inferring the mode like this seems fragile (it meets the objective; // of not requiring anything new for operation, however).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Performance,Perform,Perform,3,// Perform the default argument translations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:157,Safety,Detect,Detect,157,// A common user mistake is specifying a target of aarch64-none-eabi or; // arm-none-elf whereas the correct names are aarch64-none-elf &; // arm-none-eabi. Detect these cases and issue a warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:45,Performance,perform,perform,45,// Construct the list of abstract actions to perform for this compilation. On; // MachO targets this uses the driver-driver and universal actions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:48,Testability,Log,Logs,48,// The .crash file can be found on at ~/Library/Logs/DiagnosticReports/; // (or /Library/Logs/DiagnosticReports for root) and has the filename pattern; // clang-<VERSION>_<YYYY-MM-DD-HHMMSS>_<hostname>.crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:89,Testability,Log,Logs,89,// The .crash file can be found on at ~/Library/Logs/DiagnosticReports/; // (or /Library/Logs/DiagnosticReports for root) and has the filename pattern; // clang-<VERSION>_<YYYY-MM-DD-HHMMSS>_<hostname>.crash.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:51,Safety,avoid,avoid,51,"// Found a .crash file matching the driver pid. To avoid getting an older; // and misleading crash file, continue looking for the most recent.; // FIXME: the driver can dispatch multiple cc1 invocations, leading to; // multiple crashes poiting to the same parent process. Since the driver; // does not collect pid information for the dispatched invocation there's; // currently no way to distinguish among them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:40,Availability,error,errors,40,// Keep track of whether we produce any errors while trying to produce; // preprocessed sources.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:45,Performance,perform,perform,45,// Construct the list of abstract actions to perform for this compilation. On; // Darwin OSes this uses the driver-driver and builds universal actions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:17,Availability,error,errors,17,"// If there were errors building the compilation, quit now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:2,Testability,Log,LogOnly,2,/*LogOnly=*/,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:17,Availability,error,errors,17,"// If there were errors building the compilation, quit now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:17,Availability,error,errors,17,"// If there were errors building the compilation, quit now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:81,Availability,failure,failures,81,"// Otherwise, remove result files and print extra information about abnormal; // failures.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Availability,Failure,Failure,3,// Failure result files are valid unless we crashed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:42,Availability,failure,failures,42,"// Print extra information about abnormal failures, if possible.; //; // This is ad-hoc, but we don't want to be excessively noisy. If the result; // status was 1, assume the command failed normally. In particular, if it; // was the compiler then assume it gave a reasonable error code. Failures; // in other tools are less common, and they generally have worse; // diagnostics, so always print the diagnostic there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:275,Availability,error,error,275,"// Print extra information about abnormal failures, if possible.; //; // This is ad-hoc, but we don't want to be excessively noisy. If the result; // status was 1, assume the command failed normally. In particular, if it; // was the compiler then assume it gave a reasonable error code. Failures; // in other tools are less common, and they generally have worse; // diagnostics, so always print the diagnostic there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:287,Availability,Failure,Failures,287,"// Print extra information about abnormal failures, if possible.; //; // This is ad-hoc, but we don't want to be excessively noisy. If the result; // status was 1, assume the command failed normally. In particular, if it; // was the compiler then assume it gave a reasonable error code. Failures; // in other tools are less common, and they generally have worse; // diagnostics, so always print the diagnostic there.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:17,Deployability,install,install,17,// Print out the install directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:6,Deployability,configurat,configuration,6,"// If configuration files were used, print their paths.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:6,Modifiability,config,configuration,6,"// If configuration files were used, print their paths.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:28,Integrability,depend,dependences,28,"// E.g. for two CUDA device dependences whose bound arch is sm_20 and; // sm_35 this will generate:; // ""cuda-device"" (nvptx64-nvidia-cuda:sm_20) {#ID}, ""cuda-device""; // (nvptx64-nvidia-cuda:sm_35) {#ID}",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Security,Validat,Validate,3,// Validate the option here; we don't save the type here because its; // particular spelling may participate in other driver choices.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:215,Modifiability,extend,extend,215,"// If it's a header to be found in the system or user search path, then defer; // complaints about its absence until those searches can be done. When we; // are definitely processing headers for C++20 header units, extend this to; // allow the user to put ""-fmodule-header -xc++-header vector"" for example.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:21,Availability,error,error,21,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:909,Availability,error,error,909,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:1087,Availability,error,error,1087,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:1431,Availability,error,error,1431,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:1759,Availability,error,error,1759,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:1815,Availability,down,downgrade,1815,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:1856,Availability,error,error,1856,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:281,Deployability,install,installation,281,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:1698,Modifiability,config,configure,1698,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:390,Testability,log,logic,390,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:1028,Usability,clear,clearly,1028,"// In CL mode, don't error on apparently non-existent linker inputs, because; // they can be influenced by linker flags the clang driver might not; // understand.; // Examples:; // - `clang-cl main.cc ole32.lib` in a non-MSVC shell will make the driver; // module look for an MSVC installation in the registry. (We could ask; // the MSVCToolChain object if it can find `ole32.lib`, but the logic to; // look in the registry might move into lld-link in the future so that; // lld-link invocations in non-MSVC shells just work too.); // - `clang-cl ... /link ...` can pass arbitrary flags to the linker,; // including /libpath:, which is used to find .lib and .obj files.; // So do not diagnose this on the driver level. Rely on the linker diagnosing; // it. (If we don't end up invoking the linker, this means we'll emit a; // ""'linker' input unused [-Wunused-command-line-argument]"" warning instead; // of an error.); //; // Only do this skip after the typo correction step above. `/Brepo` is treated; // as TY_Object, but it's clearly a typo for `/Brepro`. It seems fine to emit; // an error if we have a flag that's within an edit distance of 1 from a; // flag. (Users can use `-Wl,` or `/linker` to launder the flag past the; // driver in the unlikely case they run into this.); //; // Don't do this for inputs that start with a '/', else we'd pass options; // like /libpath: through to the linker silently.; //; // Emitting an error for linker inputs can also cause incorrect diagnostics; // with the gcc driver. The command; // clang -fuse-ld=lld -Wl,--chroot,some/dir /file.o; // will make lld look for some/dir/file.o, while we will diagnose here that; // `/file.o` does not exist. However, configure scripts check if; // `clang /GR-` compiles without error to see if the compiler is cl.exe,; // so we can't downgrade diagnostics for `/GR-` from an error to a warning; // in cc mode. (We can in cl mode because cl.exe itself only warns on; // unknown flags.)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:163,Availability,error,error,163,"// If running with -E, treat as a C input (this changes the; // builtin macros, for example). This may be overridden by -ObjC; // below.; //; // Otherwise emit an error but still use a valid type to avoid; // spurious errors (e.g., no inputs).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:218,Availability,error,errors,218,"// If running with -E, treat as a C input (this changes the; // builtin macros, for example). This may be overridden by -ObjC; // below.; //; // Otherwise emit an error but still use a valid type to avoid; // spurious errors (e.g., no inputs).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:199,Safety,avoid,avoid,199,"// If running with -E, treat as a C input (this changes the; // builtin macros, for example). This may be overridden by -ObjC; // below.; //; // Otherwise emit an error but still use a valid type to avoid; // spurious errors (e.g., no inputs).",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:93,Safety,Avoid,Avoid,93,// Disambiguate headers that are meant to be header units from those; // intended to be PCH. Avoid missing '.h' cases that are counted as; // C headers by default - we know we are in C++ mode and we do not; // want to issue a complaint about compiling things in the wrong mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:85,Usability,clear,clear,85,"// Follow gcc behavior and treat as linker input for invalid -x; // options. Its not clear why we shouldn't just revert to unknown; but; // this isn't very important, we might as well be bug compatible.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:26,Integrability,interface,interface,26,/// Provides a convenient interface for different programming models to generate; /// the required device actions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:23,Availability,error,errors,23,/// Flag used to trace errors in the builder.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:12,Integrability,interface,interface,12,/// Builder interface. It doesn't build anything or keep any state.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:48,Integrability,depend,dependences,48,/// Fill up the array \a DA with all the device dependences that should be; /// added to the provided host action \a HostAction. By default it is; /// inactive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:4,Deployability,Update,Update,4,/// Update the state to include the provided host action \a HostAction as a; /// dependency of the current device action. By default it is inactive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:81,Integrability,depend,dependency,81,/// Update the state to include the provided host action \a HostAction as a; /// dependency of the current device action. By default it is inactive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:62,Availability,error,errors,62,/// Initialize the builder. Return true if any initialization errors are; /// found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:47,Integrability,inject,injects,47,/// Base class for CUDA/HIP action builder. It injects device code in; /// the host backend action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:47,Security,inject,injects,47,/// Base class for CUDA/HIP action builder. It injects device code in; /// the host backend action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:59,Usability,simpl,simply,59,"/// ID to identify each device compilation. For CUDA it is simply the; /// GPU arch string. For HIP it is either the GPU arch string or GPU; /// arch string plus feature strings delimited by a plus sign, e.g.; /// gfx906+xnack.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:43,Integrability,depend,depend,43,"// While generating code for CUDA, we only depend on the host input action; // to trigger the creation of all the CUDA device actions.; // If we are dealing with an input action, replicate it for each GPU; // architecture. If we are in host-only mode we return 'success' so that; // the host uses the CUDA offload kind.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:79,Availability,error,error,79,// We do not support targeting NVPTX/AMDGCN for host compilation. Throw; // an error and abort pipeline construction early so we don't trip; // asserts that assume device-side compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:95,Deployability,pipeline,pipeline,95,// We do not support targeting NVPTX/AMDGCN for host compilation. Throw; // an error and abort pipeline construction early so we don't trip; // asserts that assume device-side compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:89,Safety,abort,abort,89,// We do not support targeting NVPTX/AMDGCN for host compilation. Throw; // an error and abort pipeline construction early so we don't trip; // asserts that assume device-side compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:144,Testability,assert,asserts,144,// We do not support targeting NVPTX/AMDGCN for host compilation. Throw; // an error and abort pipeline construction early so we don't trip; // asserts that assume device-side compilation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:35,Integrability,inject,injects,35,/// \brief CUDA action builder. It injects device code in the host backend; /// action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:35,Security,inject,injects,35,/// \brief CUDA action builder. It injects device code in the host backend; /// action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:57,Integrability,depend,dependences,57,"// If we don't have more CUDA actions, we don't have any dependences to; // create for the host.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:41,Integrability,depend,dependence,41,"// Clear the fat binary, it is already a dependence to an host; // action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Usability,Clear,Clear,3,"// Clear the fat binary, it is already a dependence to an host; // action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:6,Safety,avoid,avoid,6,// We avoid creating host action in device-only mode.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:34,Integrability,inject,injects,34,/// \brief HIP action builder. It injects device code in the host backend; /// action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:34,Security,inject,injects,34,/// \brief HIP action builder. It injects device code in the host backend; /// action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:33,Integrability,depend,depends,33,"// The default bundling behavior depends on the type of output, therefore; // BundleOutput needs to be tri-value: None, true, or false.; // Bundle code objects except --no-gpu-output is specified for device; // only compilation. Bundle other type of output files only if; // --gpu-bundle-output is specified for device only compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:41,Integrability,depend,dependence,41,"// Clear the fat binary, it is already a dependence to an host; // action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Usability,Clear,Clear,3,"// Clear the fat binary, it is already a dependence to an host; // action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:344,Integrability,depend,dependence,344,"// Save CudaDeviceActions to DeviceLinkerInputs for each GPU subarch.; // This happens to each device action originated from each input file.; // Later on, device actions in DeviceLinkerInputs are used to create; // device link actions in appendLinkDependences and the created device; // link actions are passed to the offload action as device dependence.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:44,Integrability,depend,dependence,44,"// We will pass the device action as a host dependence, so we don't; // need to do anything else with them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:106,Availability,error,errors,106,"//; // TODO: Build other specialized builders here.; //; // Initialize all the builders, keeping track of errors. If all valid; // builders agree that we can use bundling, set the flag to true.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Deployability,Update,Update,3,// Update the counters if the builder is valid.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:177,Availability,error,error,177,"/// Generate an action that adds device dependences (if any) to a host action.; /// If no device dependence actions exist, just return the host action \a; /// HostAction. If an error is found or if no builder requires the host action; /// to be generated, return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:40,Integrability,depend,dependences,40,"/// Generate an action that adds device dependences (if any) to a host action.; /// If no device dependence actions exist, just return the host action \a; /// HostAction. If an error is found or if no builder requires the host action; /// to be generated, return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:97,Integrability,depend,dependence,97,"/// Generate an action that adds device dependences (if any) to a host action.; /// If no device dependence actions exist, just return the host action \a; /// HostAction. If an error is found or if no builder requires the host action; /// to be generated, return nullptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:98,Modifiability,variab,variable,98,"// If the builder explicitly says the host action should be ignored,; // we need to increment the variable that tracks the builders that request; // the host object to be ignored.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:11,Integrability,depend,dependences,11,// We have dependences we need to bundle together. We use an offload action; // for that.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:143,Availability,error,error,143,/// Generate an action that adds a host dependence to a device action. The; /// results will be kept in this action builder. Return true if an error was; /// found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:40,Integrability,depend,dependence,40,/// Generate an action that adds a host dependence to a device action. The; /// results will be kept in this action builder. Return true if an error was; /// found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:201,Safety,detect,detect,201,"// If we are supporting bundling/unbundling and the current action is an; // input action of non-source file, we replace the host action by the; // unbundling action. The bundler tool has the logic to detect if an input; // is a bundle or not and if the input is not a bundle it assumes it is a; // host file. Therefore it is safe to create an unbundling action even if; // the input is not a bundle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:326,Safety,safe,safe,326,"// If we are supporting bundling/unbundling and the current action is an; // input action of non-source file, we replace the host action by the; // unbundling action. The bundler tool has the logic to detect if an input; // is a bundle or not and if the input is not a bundle it assumes it is a; // host file. Therefore it is safe to create an unbundling action even if; // the input is not a bundle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:192,Testability,log,logic,192,"// If we are supporting bundling/unbundling and the current action is an; // input action of non-source file, we replace the host action by the; // unbundling action. The bundler tool has the logic to detect if an input; // is a bundle or not and if the input is not a bundle it assumes it is a; // host file. Therefore it is safe to create an unbundling action even if; // the input is not a bundle.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:8,Integrability,depend,dependences,8,// Host dependences for device actions are not compatible with that same; // action being ignored.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:45,Integrability,depend,depend,45,// Do not use unbundler if the Host does not depend on device action.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:15,Integrability,depend,dependences,15,// Add all the dependences from the device linking actions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:27,Integrability,depend,dependencies,27,"// If we don't have device dependencies, we don't have to create an offload; // action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:111,Integrability,depend,depend,111,// Set all the active offloading kinds to the link action. Given that it; // is a link action it is assumed to depend on all actions generated so; // far.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:38,Integrability,depend,dependences,38,"// Create the offload action with all dependences. When an offload action; // is created the kinds are propagated to the host action, so we don't have; // to do that explicitly here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:17,Safety,avoid,avoid,17,// Claim here to avoid the more general unused warning.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:13,Deployability,pipeline,pipeline,13,// Build the pipeline for the pch file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:28,Performance,perform,perform,28,// Construct the actions to perform.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:13,Deployability,pipeline,pipeline,13,// Build the pipeline for this file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:42,Integrability,depend,depends,42,// Add any offload action the host action depends on.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:3,Performance,Queue,Queue,3,// Queue linker inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:99,Deployability,pipeline,pipeline,99,// TODO: Consider removing this because the merged may not end up being; // the final Phase in the pipeline. Perhaps the merged could just merge; // and then pass an artifact of some sort to the Link Phase.; // Queue merger inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:211,Performance,Queue,Queue,211,// TODO: Consider removing this because the merged may not end up being; // the final Phase in the pipeline. Perhaps the merged could just merge; // and then pass an artifact of some sort to the Link Phase.; // Queue merger inputs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:63,Integrability,depend,dependency,63,// Try to build the offloading actions and add the result as a dependency; // to the host.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:10,Integrability,interface,interface,10,// Add an interface stubs merge action if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:20,Testability,stub,stubs,20,// Add an interface stubs merge action if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:175,Deployability,pipeline,pipeline,175,"// Currently clang and the llvm assembler do not support generating symbol; // stubs from assembly, so we skip the input on asm files. For ifs files; // we rely on the normal pipeline setup in the pipeline setup code above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:197,Deployability,pipeline,pipeline,197,"// Currently clang and the llvm assembler do not support generating symbol; // stubs from assembly, so we skip the input on asm files. For ifs files; // we rely on the normal pipeline setup in the pipeline setup code above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:79,Testability,stub,stubs,79,"// Currently clang and the llvm assembler do not support generating symbol; // stubs from assembly, so we skip the input on asm files. For ifs files; // we rely on the normal pipeline setup in the pipeline setup code above.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:10,Integrability,interface,interface,10,// Add an interface stubs merge action if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:20,Testability,stub,stubs,20,// Add an interface stubs merge action if necessary.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:8,Security,validat,validator,8,// Call validator for dxil when -Vd not in Args.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:61,Availability,error,error,61,// Lookup the CUDA / HIP architecture string. Only report an error if we were; // expecting the triple to be only NVPTX / AMDGPU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:107,Usability,simpl,simply,107,// Add or remove the seen architectures in order of appearance. If an; // invalid architecture is given we simply exit.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:56,Availability,avail,availible,56,// Skip filling defaults if we're just querying what is availible.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:27,Integrability,depend,dependency,27,// OpenMP offloading has a dependency on the host compile action to; // identify which declarations need to be emitted. This shouldn't be; // collapsed with any other actions so we can use it in the device.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:115,Integrability,depend,dependency,115,"// If we are unable to embed a single device output into the host, we need to; // add each device output as a host dependency to ensure they are still built.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:128,Integrability,depend,depends,128,"// Some types skip the assembler phase (e.g., llvm-bc), but we can't; // encode this in the steps because the intermediate type depends on; // arguments. Just special case here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:26,Integrability,depend,dependency,26,"// -M and -MM specify the dependency file name by altering the output type,; // -if -MD and -MMD are not specified.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:12,Availability,error,error,12,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:144,Integrability,interface,interface,144,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:329,Integrability,interface,interface,329,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:462,Integrability,interface,interface,462,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:154,Testability,stub,stubs,154,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:207,Testability,stub,stub,207,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:343,Testability,stub,stubs,343,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:472,Testability,stub,stubs,472,"// It is an error to provide a -o option if we are making multiple output; // files. There are exceptions:; //; // IfsMergeJob: when generating interface stubs enabled we want to be able to; // generate the stub file at the same time that we generate the real; // library/a.out. So when a .o, .so, etc are the output, with clang interface; // stubs there will also be a .ifs and .ifso at the same location.; //; // CompileJob of type TY_IFS_CPP: when generating interface stubs is enabled; // and -c is passed, we still want to be able to generate a .ifs file while; // we are also generating .o files. So we allow more than one output file in; // this case as well.; //; // OffloadClass of type TY_Nothing: device-only output will place many outputs; // into a single offloading action. We should count all inputs to the action; // as outputs. Also ignore device-only outputs if we're compiling with; // -fsyntax-only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:216,Availability,down,down,216,"// If we are linking an image for multiple archs then the linker wants; // -arch_multiple and -final_output <final image name>. Unfortunately, this; // doesn't fit in cleanly because we have to pass this information down.; //; // FIXME: This is a hack; find a cleaner way to integrate this into the; // process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:275,Deployability,integrat,integrate,275,"// If we are linking an image for multiple archs then the linker wants; // -arch_multiple and -final_output <final image name>. Unfortunately, this; // doesn't fit in cleanly because we have to pass this information down.; //; // FIXME: This is a hack; find a cleaner way to integrate this into the; // process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:275,Integrability,integrat,integrate,275,"// If we are linking an image for multiple archs then the linker wants; // -arch_multiple and -final_output <final image name>. Unfortunately, this; // doesn't fit in cleanly because we have to pass this information down.; //; // FIXME: This is a hack; find a cleaner way to integrate this into the; // process.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:46,Deployability,integrat,integrated-,46,"// If we have more than one job, then disable integrated-cc1 for now. Do this; // also when we need to report process execution statistics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:46,Integrability,integrat,integrated-,46,"// If we have more than one job, then disable integrated-cc1 for now. Do this; // also when we need to report process execution statistics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:55,Availability,error,errors,55,"// If the user passed -Qunused-arguments or there were errors, don't warn; // about any unused arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:98,Deployability,integrat,integrated,98,"// Match ClangAs and other derived assemblers of Tool. ClangAs uses a; // longer ShortName ""clang integrated assembler"" while other assemblers just; // use ""assembler"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:98,Integrability,integrat,integrated,98,"// Match ClangAs and other derived assemblers of Tool. ClangAs uses a; // longer ShortName ""clang integrated assembler"" while other assemblers just; // use ""assembler"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:139,Availability,error,error,139,"// When for example -### or -v is used; // without a file, target specific options are not; // consumed/validated.; // Instead emitting an error emit a warning instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:104,Security,validat,validated,104,"// When for example -### or -v is used; // without a file, target specific options are not; // consumed/validated.; // Instead emitting an error emit a warning instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:45,Integrability,depend,dependent,45,/// Utility class to control the collapse of dependent actions and select the; /// tools accordingly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:17,Integrability,depend,dependent,17,"/// Get previous dependent action or null if that does not exist. If; /// \a CanBeCollapsed is false, that action must be legal to collapse or; /// null will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:10,Integrability,depend,dependent,10,"// If the dependent action is a device action, we will attempt to collapse; // only with other device actions. Otherwise, we would do the same but; // with host actions only.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:103,Deployability,update,update,103,"/// Functions that attempt to perform the combining. They detect if that is; /// legal, and if so they update the inputs \a Inputs and the offload action; /// that were collapsed in \a CollapsedOffloadAction. A tool that deals with; /// the combined action is returned. If the combining is not legal or if the; /// tool does not exist, null is returned.; /// Currently three kinds of collapsing are supported:; /// - Assemble + Backend + Compile;; /// - Assemble + Backend ;; /// - Backend + Compile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:30,Performance,perform,perform,30,"/// Functions that attempt to perform the combining. They detect if that is; /// legal, and if so they update the inputs \a Inputs and the offload action; /// that were collapsed in \a CollapsedOffloadAction. A tool that deals with; /// the combined action is returned. If the combining is not legal or if the; /// tool does not exist, null is returned.; /// Currently three kinds of collapsing are supported:; /// - Assemble + Backend + Compile;; /// - Assemble + Backend ;; /// - Backend + Compile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:58,Safety,detect,detect,58,"/// Functions that attempt to perform the combining. They detect if that is; /// legal, and if so they update the inputs \a Inputs and the offload action; /// that were collapsed in \a CollapsedOffloadAction. A tool that deals with; /// the combined action is returned. If the combining is not legal or if the; /// tool does not exist, null is returned.; /// Currently three kinds of collapsing are supported:; /// - Assemble + Backend + Compile;; /// - Assemble + Backend ;; /// - Backend + Compile.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:4,Deployability,Update,Updates,4,"/// Updates the inputs if the obtained tool supports combining with; /// preprocessor action, and the current input is indeed a preprocessor; /// action. If combining results in the collapse of offloading actions, those; /// are appended to \a CollapsedOffloadAction.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:40,Integrability,depend,dependence,40,// Attempt to get a preprocessor action dependence.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:265,Deployability,update,updated,265,"/// Check if a chain of actions can be combined and return the tool that can; /// handle the combination of actions. The pointer to the current inputs \a; /// Inputs and the list of offload actions \a CollapsedOffloadActions; /// connected to collapsed actions are updated accordingly. The latter enables; /// the caller of the selector to process them afterwards instead of just; /// dropping them. If no suitable tool is found, null will be returned.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:202,Integrability,depend,depend,202,"//; // Attempt to combine actions. If all combining attempts failed, just return; // the tool of the provided action. At the end we attempt to combine the; // action with any preprocessor action it may depend on.; //",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:159,Performance,perform,performed,159,// The 'Darwin' toolchain is initialized only when its arguments are; // computed. Get the default arguments for OFK_None to ensure that; // initialization is performed before processing the offload action.; // FIXME: Remove when darwin's toolchain is initialized during construction.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:341,Integrability,depend,dependence,341,"// The offload action is expected to be used in four different situations.; //; // a) Set a toolchain/architecture/kind for a host action:; // Host Action 1 -> OffloadAction -> Host Action 2; //; // b) Set a toolchain/architecture/kind for a device action;; // Device Action 1 -> OffloadAction -> Device Action 2; //; // c) Specify a device dependence to a host action;; // Device Action 1 _; // \; // Host Action 1 ---> OffloadAction -> Host Action 2; //; // d) Specify a host dependence to a device action.; // Host Action 1 _; // \; // Device Action 1 ---> OffloadAction -> Device Action 2; //; // For a) and b), we just return the job generated for the dependences. For; // c) and d) we override the current action with the host/device dependence; // if the current toolchain is host/device and set the offload dependences; // info with the jobs obtained from the device/host dependence(s).; // If there is a single device option or has no host action, just generate; // the job for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:478,Integrability,depend,dependence,478,"// The offload action is expected to be used in four different situations.; //; // a) Set a toolchain/architecture/kind for a host action:; // Host Action 1 -> OffloadAction -> Host Action 2; //; // b) Set a toolchain/architecture/kind for a device action;; // Device Action 1 -> OffloadAction -> Device Action 2; //; // c) Specify a device dependence to a host action;; // Device Action 1 _; // \; // Host Action 1 ---> OffloadAction -> Host Action 2; //; // d) Specify a host dependence to a device action.; // Host Action 1 _; // \; // Device Action 1 ---> OffloadAction -> Device Action 2; //; // For a) and b), we just return the job generated for the dependences. For; // c) and d) we override the current action with the host/device dependence; // if the current toolchain is host/device and set the offload dependences; // info with the jobs obtained from the device/host dependence(s).; // If there is a single device option or has no host action, just generate; // the job for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:657,Integrability,depend,dependences,657,"// The offload action is expected to be used in four different situations.; //; // a) Set a toolchain/architecture/kind for a host action:; // Host Action 1 -> OffloadAction -> Host Action 2; //; // b) Set a toolchain/architecture/kind for a device action;; // Device Action 1 -> OffloadAction -> Device Action 2; //; // c) Specify a device dependence to a host action;; // Device Action 1 _; // \; // Host Action 1 ---> OffloadAction -> Host Action 2; //; // d) Specify a host dependence to a device action.; // Host Action 1 _; // \; // Device Action 1 ---> OffloadAction -> Device Action 2; //; // For a) and b), we just return the job generated for the dependences. For; // c) and d) we override the current action with the host/device dependence; // if the current toolchain is host/device and set the offload dependences; // info with the jobs obtained from the device/host dependence(s).; // If there is a single device option or has no host action, just generate; // the job for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:740,Integrability,depend,dependence,740,"// The offload action is expected to be used in four different situations.; //; // a) Set a toolchain/architecture/kind for a host action:; // Host Action 1 -> OffloadAction -> Host Action 2; //; // b) Set a toolchain/architecture/kind for a device action;; // Device Action 1 -> OffloadAction -> Device Action 2; //; // c) Specify a device dependence to a host action;; // Device Action 1 _; // \; // Host Action 1 ---> OffloadAction -> Host Action 2; //; // d) Specify a host dependence to a device action.; // Host Action 1 _; // \; // Device Action 1 ---> OffloadAction -> Device Action 2; //; // For a) and b), we just return the job generated for the dependences. For; // c) and d) we override the current action with the host/device dependence; // if the current toolchain is host/device and set the offload dependences; // info with the jobs obtained from the device/host dependence(s).; // If there is a single device option or has no host action, just generate; // the job for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:815,Integrability,depend,dependences,815,"// The offload action is expected to be used in four different situations.; //; // a) Set a toolchain/architecture/kind for a host action:; // Host Action 1 -> OffloadAction -> Host Action 2; //; // b) Set a toolchain/architecture/kind for a device action;; // Device Action 1 -> OffloadAction -> Device Action 2; //; // c) Specify a device dependence to a host action;; // Device Action 1 _; // \; // Host Action 1 ---> OffloadAction -> Host Action 2; //; // d) Specify a host dependence to a device action.; // Host Action 1 _; // \; // Device Action 1 ---> OffloadAction -> Device Action 2; //; // For a) and b), we just return the job generated for the dependences. For; // c) and d) we override the current action with the host/device dependence; // if the current toolchain is host/device and set the offload dependences; // info with the jobs obtained from the device/host dependence(s).; // If there is a single device option or has no host action, just generate; // the job for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:880,Integrability,depend,dependence,880,"// The offload action is expected to be used in four different situations.; //; // a) Set a toolchain/architecture/kind for a host action:; // Host Action 1 -> OffloadAction -> Host Action 2; //; // b) Set a toolchain/architecture/kind for a device action;; // Device Action 1 -> OffloadAction -> Device Action 2; //; // c) Specify a device dependence to a host action;; // Device Action 1 _; // \; // Host Action 1 ---> OffloadAction -> Host Action 2; //; // d) Specify a host dependence to a device action.; // Host Action 1 _; // \; // Device Action 1 ---> OffloadAction -> Device Action 2; //; // For a) and b), we just return the job generated for the dependences. For; // c) and d) we override the current action with the host/device dependence; // if the current toolchain is host/device and set the offload dependences; // info with the jobs obtained from the device/host dependence(s).; // If there is a single device option or has no host action, just generate; // the job for it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:58,Integrability,depend,dependences,58,"// If 'Action 2' is host, we generate jobs for the device dependences and; // override the current action with the host dependence. Otherwise, we; // generate the host dependences and override the action with the device; // dependence. The dependences can't therefore be a top-level action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:120,Integrability,depend,dependence,120,"// If 'Action 2' is host, we generate jobs for the device dependences and; // override the current action with the host dependence. Otherwise, we; // generate the host dependences and override the action with the device; // dependence. The dependences can't therefore be a top-level action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:168,Integrability,depend,dependences,168,"// If 'Action 2' is host, we generate jobs for the device dependences and; // override the current action with the host dependence. Otherwise, we; // generate the host dependences and override the action with the device; // dependence. The dependences can't therefore be a top-level action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:224,Integrability,depend,dependence,224,"// If 'Action 2' is host, we generate jobs for the device dependences and; // override the current action with the host dependence. Otherwise, we; // generate the host dependences and override the action with the device; // dependence. The dependences can't therefore be a top-level action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:240,Integrability,depend,dependences,240,"// If 'Action 2' is host, we generate jobs for the device dependences and; // override the current action with the host dependence. Otherwise, we; // generate the host dependences and override the action with the device; // dependence. The dependences can't therefore be a top-level action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:95,Performance,cache,cached,95,"// We may have already built this action as a part of the offloading; // toolchain, return the cached input if so.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:92,Deployability,update,update,92,"// If we have an unbundling job, we need to create results for all the; // outputs. We also update the results cache so that other actions using; // this unbundling action can get the right results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:111,Performance,cache,cache,111,"// If we have an unbundling job, we need to create results for all the; // outputs. We also update the results cache so that other actions using; // this unbundling action can get the right results.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:45,Integrability,depend,dependence,45,// Get the unique string identifier for this dependence and cache the; // result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:60,Performance,cache,cache,60,// Get the unique string identifier for this dependence and cache the; // result.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:106,Integrability,depend,depending,106,"// Now that we have all the results generated, select the one that should be; // returned for the current depending action.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:39,Testability,test,tests,39,// We use posix style here because the tests (specifically; // darwin-dsymutil.c) demonstrate that posix style paths are acceptable; // even on Windows and if we don't then the similar test covering this; // fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:185,Testability,test,test,185,// We use posix style here because the tests (specifically; // darwin-dsymutil.c) demonstrate that posix style paths are acceptable; // even on Windows and if we don't then the similar test covering this; // fails.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:155,Performance,optimiz,optimized,155,"// When using both -save-temps and -emit-llvm, use a "".tmp.bc"" suffix for; // the unoptimized bitcode so that it does not get overwritten by the "".bc""; // optimized bitcode output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:83,Safety,avoid,avoid,83,"// If we're saving temps and the temp file conflicts with the input file,; // then avoid overwriting input file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:25,Modifiability,variab,variable,25,// FIXME: Needs a better variable than TargetTriple,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:107,Integrability,depend,depends,107,// Use device / host triples as the key into the ToolChains map because the; // device ToolChain we create depends on both.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:10,Performance,optimiz,optimization-record,10,// -fsave-optimization-record enables it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp:10,Performance,optimiz,optimization-record,10,// -fsave-optimization-record=<format> enables it as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Driver.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Driver.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:78,Integrability,Wrap,Wrapping,78,"// In regular response files, we send all arguments to the response file.; // Wrapping all arguments in double quotes ensures that both Unix tools and; // Windows tools understand the response file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:4,Modifiability,Rewrite,Rewrite,4,/// Rewrite relative include-like flag paths to absolute ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:64,Performance,cache,cache,64,// The leftover modules from the crash are stored in; // <name>.cache/vfs/modules; // Leave it untouched for pcm inspection and provide a clean/empty dir; // path to contain the future generated module cache:; // <name>.cache/vfs/repro-modules,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:202,Performance,cache,cache,202,// The leftover modules from the crash are stored in; // <name>.cache/vfs/modules; // Leave it untouched for pcm inspection and provide a clean/empty dir; // path to contain the future generated module cache:; // <name>.cache/vfs/repro-modules,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:220,Performance,cache,cache,220,// The leftover modules from the crash are stored in; // <name>.cache/vfs/modules; // Leave it untouched for pcm inspection and provide a clean/empty dir; // path to contain the future generated module cache:; // <name>.cache/vfs/repro-modules,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:3,Safety,Avoid,Avoiding,3,"// Avoiding duplicated newline terminator, since FileLists are; // newline-separated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:105,Deployability,integrat,integrated-,105,"// FIXME: Currently, if there're more than one job, we disable; // -fintegrate-cc1. If we're no longer a integrated-cc1 job, fallback to; // out-of-process execution. See discussion in https://reviews.llvm.org/D74447",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:105,Integrability,integrat,integrated-,105,"// FIXME: Currently, if there're more than one job, we disable; // -fintegrate-cc1. If we're no longer a integrated-cc1 job, fallback to; // out-of-process execution. See discussion in https://reviews.llvm.org/D74447",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp:100,Usability,simpl,simply,100,"// The terminating null element shall not be part of the; // slice (main() behavior).; // This flag simply indicates that the program couldn't start, which isn't; // applicable here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Job.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Job.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Multilib.cpp:27,Deployability,update,update,27,// When updating this also update MULTILIB_VERSION in MultilibTest.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Multilib.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Multilib.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Multilib.cpp:340,Integrability,depend,dependent,340,"/*; * Future possibility: a second group type indicating a set of library; * directories that are mutually _dependent_ rather than mutually exclusive:; * if you include one you must include them all.; *; * It might also be useful to allow groups to be members of other groups, so; * that a mutually exclusive group could contain a mutually dependent set of; * library directories, or vice versa.; *; * These additional features would need changes in the implementation, but; * the YAML schema is set up so they can be added without requiring changes; * in existing users' multilib.yaml files.; */",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/Multilib.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/Multilib.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:13,Availability,error,error,13,// TODO: Add error checking from ClangOffloadBundler.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:25,Integrability,interface,interface,25,/// Generic file handler interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:4,Deployability,Update,Update,4,/// Update the file handler with information from the header of the bundled; /// file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:4,Deployability,Configurat,Configuration,4,/// Configuration options and arrays for this bundler job,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:4,Modifiability,Config,Configuration,4,/// Configuration options and arrays for this bundler job,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:13,Availability,error,error,13,// TODO: Add error checking from ClangOffloadBundler.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:4,Deployability,Configurat,Configuration,4,/// Configuration options and arrays for this bundler job,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:4,Modifiability,Config,Configuration,4,/// Configuration options and arrays for this bundler job,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:13,Availability,error,error,13,// TODO: Add error checking from ClangOffloadBundler.cpp,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:162,Performance,perform,performance,162,// TODO: To list bundle IDs in a bundled text file we need to go through; // all bundles. The format of bundled text file may need to include a; // header if the performance of listing bundle IDs of bundled text file is; // important.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:19,Security,hash,hash,19,// Recalculate MD5 hash,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:38,Availability,error,error,38,// List bundle IDs. Return true if an error was found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:40,Availability,error,error,40,/// Bundle the files. Return true if an error was found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:61,Availability,error,error,61,"// Write all bundles along with the start/end markers. If an error was found; // writing the end of the bundle component, abort the bundle writing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:122,Safety,abort,abort,122,"// Write all bundles along with the start/end markers. If an error was found; // writing the end of the bundle component, abort the bundle writing.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:41,Availability,error,error,41,// Unbundle the files. Return true if an error was found.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp:36,Availability,error,error,36,"// If we found elements, we emit an error if none of those were for the host; // in case host bundle name was provided in command line.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/OffloadBundler.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:9,Security,Sanitiz,SanitizerArgs,9,"//===--- SanitizerArgs.cpp - Arguments for sanitizer tools ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:43,Security,sanitiz,sanitizer,43,"//===--- SanitizerArgs.cpp - Arguments for sanitizer tools ---------------===//; //; // Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.; // See https://llvm.org/LICENSE.txt for license information.; // SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception; //; //===----------------------------------------------------------------------===//",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:32,Security,sanitiz,sanitize,32,"/// Parse a -fsanitize= or -fno-sanitize= argument's values, diagnosing any; /// invalid components. Returns a SanitizerMask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:111,Security,Sanitiz,SanitizerMask,111,"/// Parse a -fsanitize= or -fno-sanitize= argument's values, diagnosing any; /// invalid components. Returns a SanitizerMask.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:18,Security,sanitiz,sanitize-coverage,18,"/// Parse -f(no-)?sanitize-coverage= flag values, diagnosing any invalid; /// components. Returns OR of members of \c CoverageFeature enumeration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:18,Security,sanitiz,sanitize-metadata,18,"/// Parse -f(no-)?sanitize-metadata= flag values, diagnosing any invalid; /// components. Returns OR of members of \c BinaryMetadataFeature enumeration.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:114,Availability,Mask,Mask,114,"/// Produce an argument string from ArgList \p Args, which shows how it; /// provides some sanitizer kind from \p Mask. For example, the argument list; /// ""-fsanitize=thread,vptr -fsanitize=address"" with mask \c NeedsUbsanRt; /// would produce ""-fsanitize=vptr"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:205,Availability,mask,mask,205,"/// Produce an argument string from ArgList \p Args, which shows how it; /// provides some sanitizer kind from \p Mask. For example, the argument list; /// ""-fsanitize=thread,vptr -fsanitize=address"" with mask \c NeedsUbsanRt; /// would produce ""-fsanitize=vptr"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:91,Security,sanitiz,sanitizer,91,"/// Produce an argument string from ArgList \p Args, which shows how it; /// provides some sanitizer kind from \p Mask. For example, the argument list; /// ""-fsanitize=thread,vptr -fsanitize=address"" with mask \c NeedsUbsanRt; /// would produce ""-fsanitize=vptr"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:98,Availability,Mask,Mask,98,"/// Produce an argument string from argument \p A, which shows how it provides; /// a value in \p Mask. For instance, the argument; /// ""-fsanitize=address,alignment"" with mask \c NeedsUbsanRt would produce; /// ""-fsanitize=alignment"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:172,Availability,mask,mask,172,"/// Produce an argument string from argument \p A, which shows how it provides; /// a value in \p Mask. For instance, the argument; /// ""-fsanitize=address,alignment"" with mask \c NeedsUbsanRt would produce; /// ""-fsanitize=alignment"".",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:57,Security,sanitiz,sanitizers,57,/// Produce a string containing comma-separated names of sanitizers in \p; /// Sanitizers set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:79,Security,Sanitiz,Sanitizers,79,/// Produce a string containing comma-separated names of sanitizers in \p; /// Sanitizers set.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:57,Security,access,access,57,/// Return true if an execute-only target disallows data access to code; /// sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:18,Security,sanitiz,sanitize,18,"/// Parse -f(no-)?sanitize-(coverage-)?(allow|ignore)list argument's values,; /// diagnosing any invalid file paths and validating special case list format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:120,Security,validat,validating,120,"/// Parse -f(no-)?sanitize-(coverage-)?(allow|ignore)list argument's values,; /// diagnosing any invalid file paths and validating special case list format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:14,Security,sanitiz,sanitize-ignorelist,14,// Match -fno-sanitize-ignorelist.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:53,Security,sanitiz,sanitizers,53,"// During the loop below, the accumulated set of; // sanitizers disabled by the current sanitizer; // argument or any argument after it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:88,Security,sanitiz,sanitizer,88,"// During the loop below, the accumulated set of; // sanitizers disabled by the current sanitizer; // argument or any argument after it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:53,Security,sanitiz,sanitizers,53,"// During the loop below, the accumulated set of; // sanitizers disabled by the current sanitizer; // argument or any argument after it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:88,Security,sanitiz,sanitizer,88,"// During the loop below, the accumulated set of; // sanitizers disabled by the current sanitizer; // argument or any argument after it.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:3,Availability,Mask,Mask,3,"// Mask of all sanitizers ever enabled by; // -fsanitize= flags (directly or via group; // expansion), some of which may be disabled; // later. Used to carefully prune; // unused-argument diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:15,Security,sanitiz,sanitizers,15,"// Mask of all sanitizers ever enabled by; // -fsanitize= flags (directly or via group; // expansion), some of which may be disabled; // later. Used to carefully prune; // unused-argument diagnostics.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:19,Security,sanitiz,sanitizer,19,// The object size sanitizer should not be enabled at -O0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:47,Security,sanitiz,sanitizer,47,// The user explicitly enabled the object size sanitizer. Warn; // that this does nothing at -O0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:3,Safety,Avoid,Avoid,3,// Avoid diagnosing any sanitizer which is disabled later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:24,Security,sanitiz,sanitizer,24,// Avoid diagnosing any sanitizer which is disabled later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:69,Security,sanitiz,sanitizers,69,"// At this point we have not expanded groups, so any unsupported; // sanitizers in Add are those which have been explicitly enabled.; // Diagnose them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:85,Performance,load,load,85,"// -fsanitize=function and -fsanitize=kcfi instrument indirect function; // calls to load a type hash before the function label. Therefore, an; // execute-only target doesn't support the function and kcfi sanitizers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:97,Security,hash,hash,97,"// -fsanitize=function and -fsanitize=kcfi instrument indirect function; // calls to load a type hash before the function label. Therefore, an; // execute-only target doesn't support the function and kcfi sanitizers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:205,Security,sanitiz,sanitizers,205,"// -fsanitize=function and -fsanitize=kcfi instrument indirect function; // calls to load a type hash before the function label. Therefore, an; // execute-only target doesn't support the function and kcfi sanitizers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:497,Integrability,interface,interface,497,// FIXME: Make CFI on member function calls compatible with cross-DSO CFI.; // There are currently two problems:; // - Virtual function call checks need to pass a pointer to the function; // address to llvm.type.test and a pointer to the address point to the; // diagnostic function. Currently we pass the same pointer to both; // places.; // - Non-virtual function call checks may need to check multiple type; // identifiers.; // Fixing both of those may require changes to the cross-DSO CFI; // interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:212,Testability,test,test,212,// FIXME: Make CFI on member function calls compatible with cross-DSO CFI.; // There are currently two problems:; // - Virtual function call checks need to pass a pointer to the function; // address to llvm.type.test and a pointer to the address point to the; // diagnostic function. Currently we pass the same pointer to both; // places.; // - Non-virtual function call checks may need to check multiple type; // identifiers.; // Fixing both of those may require changes to the cross-DSO CFI; // interface.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:90,Availability,error,error,90,// Test for -fno-rtti + explicit -fsanitizer=vptr before expanding groups; // so we don't error out if -fno-rtti and -fsanitize=undefined were; // passed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:3,Testability,Test,Test,3,// Test for -fno-rtti + explicit -fsanitizer=vptr before expanding groups; // so we don't error out if -fno-rtti and -fsanitize=undefined were; // passed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:122,Availability,error,error,122,"// The user explicitly passed -fno-rtti with -fsanitize=vptr, but; // the vptr sanitizer requires RTTI, so this is a user error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:79,Security,sanitiz,sanitizer,79,"// The user explicitly passed -fno-rtti with -fsanitize=vptr, but; // the vptr sanitizer requires RTTI, so this is a user error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:12,Security,sanitiz,sanitizer,12,"// The vptr sanitizer requires RTTI, but RTTI is disabled (by; // default). Warn that the vptr sanitizer is being disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:95,Security,sanitiz,sanitizer,95,"// The vptr sanitizer requires RTTI, but RTTI is disabled (by; // default). Warn that the vptr sanitizer is being disabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:21,Security,sanitiz,sanitizer,21,// Take out the Vptr sanitizer from the enabled sanitizers,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:48,Security,sanitiz,sanitizers,48,// Take out the Vptr sanitizer from the enabled sanitizers,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:38,Security,sanitiz,sanitizer,38,// Group expansion may have enabled a sanitizer which is disabled later.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:36,Security,sanitiz,sanitizers,36,// Silently discard any unsupported sanitizers implicitly enabled through; // group expansion.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:37,Security,sanitiz,sanitizers,37,// Enable toolchain specific default sanitizers if not explicitly disabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:19,Security,sanitiz,sanitizers,19,// Disable default sanitizers that are incompatible with explicitly requested; // ones.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:23,Security,sanitiz,sanitizer,23,// We disable the vptr sanitizer if it was enabled by group expansion but RTTI; // is disabled.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:10,Availability,error,error,10,"// Report error if there are non-trapping sanitizers that require; // c++abi-specific parts of UBSan runtime, and they are not provided by the; // toolchain. We don't have a good way to check the latter, so we just; // check if the toolchan supports vptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:42,Security,sanitiz,sanitizers,42,"// Report error if there are non-trapping sanitizers that require; // c++abi-specific parts of UBSan runtime, and they are not provided by the; // toolchain. We don't have a good way to check the latter, so we just; // check if the toolchan supports vptr.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:37,Security,sanitiz,sanitizers,37,// Warn about incompatible groups of sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:126,Availability,error,error,126,"// FIXME: Currently -fsanitize=leak is silently ignored in the presence of; // -fsanitize=address. Perhaps it should print an error, or perhaps; // -f(-no)sanitize=leak should change whether leak detection is enabled by; // default in ASan?; // Parse -f(no-)?sanitize-recover flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:268,Availability,recover,recover,268,"// FIXME: Currently -fsanitize=leak is silently ignored in the presence of; // -fsanitize=address. Perhaps it should print an error, or perhaps; // -f(-no)sanitize=leak should change whether leak detection is enabled by; // default in ASan?; // Parse -f(no-)?sanitize-recover flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:196,Safety,detect,detection,196,"// FIXME: Currently -fsanitize=leak is silently ignored in the presence of; // -fsanitize=address. Perhaps it should print an error, or perhaps; // -f(-no)sanitize=leak should change whether leak detection is enabled by; // default in ASan?; // Parse -f(no-)?sanitize-recover flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:268,Safety,recover,recover,268,"// FIXME: Currently -fsanitize=leak is silently ignored in the presence of; // -fsanitize=address. Perhaps it should print an error, or perhaps; // -f(-no)sanitize=leak should change whether leak detection is enabled by; // default in ASan?; // Parse -f(no-)?sanitize-recover flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:155,Security,sanitiz,sanitize,155,"// FIXME: Currently -fsanitize=leak is silently ignored in the presence of; // -fsanitize=address. Perhaps it should print an error, or perhaps; // -f(-no)sanitize=leak should change whether leak detection is enabled by; // default in ASan?; // Parse -f(no-)?sanitize-recover flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:259,Security,sanitiz,sanitize-recover,259,"// FIXME: Currently -fsanitize=leak is silently ignored in the presence of; // -fsanitize=address. Perhaps it should print an error, or perhaps; // -f(-no)sanitize=leak should change whether leak detection is enabled by; // default in ASan?; // Parse -f(no-)?sanitize-recover flags.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:10,Availability,error,error,10,// Report error if user explicitly tries to recover from unrecoverable; // sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:44,Availability,recover,recover,44,// Report error if user explicitly tries to recover from unrecoverable; // sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:44,Safety,recover,recover,44,// Report error if user explicitly tries to recover from unrecoverable; // sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:75,Security,sanitiz,sanitizer,75,// Report error if user explicitly tries to recover from unrecoverable; // sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:10,Availability,error,error,10,// Report error if user explicitly tries to disable recovery from; // always recoverable sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:52,Availability,recover,recovery,52,// Report error if user explicitly tries to disable recovery from; // always recoverable sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:77,Availability,recover,recoverable,77,// Report error if user explicitly tries to disable recovery from; // always recoverable sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:52,Safety,recover,recovery,52,// Report error if user explicitly tries to disable recovery from; // always recoverable sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:77,Safety,recover,recoverable,77,// Report error if user explicitly tries to disable recovery from; // always recoverable sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:89,Security,sanitiz,sanitizer,89,// Report error if user explicitly tries to disable recovery from; // always recoverable sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:92,Security,sanitiz,sanitizers,92,"// Setup ignorelist files.; // Add default ignorelist from resource directory for activated sanitizers,; // and validate special case lists format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:112,Security,validat,validate,112,"// Setup ignorelist files.; // Add default ignorelist from resource directory for activated sanitizers,; // and validate special case lists format.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:17,Security,sanitiz,sanitize-ignorelist,17,// Parse -f(no-)?sanitize-ignorelist options.; // This also validates special case lists format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:60,Security,validat,validates,60,// Parse -f(no-)?sanitize-ignorelist options.; // This also validates special case lists format.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:16,Security,sanitiz,sanitize-memory-track-origins,16,// Parse -f[no-]sanitize-memory-track-origins[=level] options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:17,Security,sanitiz,sanitize-coverage,17,// Parse -f(no-)?sanitize-coverage flags if coverage is supported by the; // enabled sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:85,Security,sanitiz,sanitizers,85,// Parse -f(no-)?sanitize-coverage flags if coverage is supported by the; // enabled sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:88,Security,sanitiz,sanitizer,88,// Disable coverage and not claim the flags if there is at least one; // non-supporting sanitizer.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:91,Security,validat,validates,91,"// Parse -fsanitize-coverage-(allow|ignore)list options if coverage enabled.; // This also validates special case lists format.; // Here, OptSpecifier() acts as a never-matching command-line argument.; // So, there is no way to clear coverage lists but you can append to them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:228,Usability,clear,clear,228,"// Parse -fsanitize-coverage-(allow|ignore)list options if coverage enabled.; // This also validates special case lists format.; // Here, OptSpecifier() acts as a never-matching command-line argument.; // So, there is no way to clear coverage lists but you can append to them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:17,Security,sanitiz,sanitize-metadata,17,// Parse -f(no-)?sanitize-metadata.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:10,Usability,clear,clear,10,"// Cannot clear ignore list, only append.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:227,Availability,error,errors,227,// Enable ODR indicators which allow better handling of mixed instrumented; // and uninstrumented globals. Disable them for Windows where weak odr; // indicators (.weak.__odr_asan_gen*) may cause multiple definition linker; // errors in the absence of -lldmingw.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:3,Safety,Safe,SafeStack,3,// SafeStack runtime is built into the system on Android and Fuchsia.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:19,Security,sanitiz,sanitizer,19,// Parse -link-cxx-sanitizer flag.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:34,Availability,avail,available,34,"// Finally, initialize the set of available and recoverable sanitizers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:48,Availability,recover,recoverable,48,"// Finally, initialize the set of available and recoverable sanitizers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:48,Safety,recover,recoverable,48,"// Finally, initialize the set of available and recoverable sanitizers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:60,Security,sanitiz,sanitizers,60,"// Finally, initialize the set of available and recoverable sanitizers.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:35,Security,sanitiz,sanitizers,35,"// NVPTX doesn't currently support sanitizers. Bailing out here means; // that e.g. -fsanitize=address applies only to host code, which is what we; // want for now.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:10,Security,sanitiz,sanitizer,10,// AMDGPU sanitizer support is experimental and controlled by -fgpu-sanitize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:68,Security,sanitiz,sanitize,68,// AMDGPU sanitizer support is experimental and controlled by -fgpu-sanitize.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:13,Availability,avail,available,13,// Translate available CoverageFeatures to corresponding clang-cc1 flags.; // Do it even if Sanitizers.empty() since some forms of coverage don't require; // sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:92,Security,Sanitiz,Sanitizers,92,// Translate available CoverageFeatures to corresponding clang-cc1 flags.; // Do it even if Sanitizers.empty() since some forms of coverage don't require; // sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:158,Security,sanitiz,sanitizers,158,// Translate available CoverageFeatures to corresponding clang-cc1 flags.; // Do it even if Sanitizers.empty() since some forms of coverage don't require; // sanitizers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:13,Availability,avail,available,13,// Translate available BinaryMetadataFeatures to corresponding clang-cc1; // flags. Does not depend on any other sanitizers. Unsupported on GPUs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:93,Integrability,depend,depend,93,// Translate available BinaryMetadataFeatures to corresponding clang-cc1; // flags. Does not depend on any other sanitizers. Unsupported on GPUs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:113,Security,sanitiz,sanitizers,113,// Translate available BinaryMetadataFeatures to corresponding clang-cc1; // flags. Does not depend on any other sanitizers. Unsupported on GPUs.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:135,Performance,perform,performance,135,"// When emitting Stable ABI instrumentation, force outlining calls and avoid; // inlining shadow memory poisoning. While this is a big performance burden; // for now it allows full abstraction from implementation details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:71,Safety,avoid,avoid,71,"// When emitting Stable ABI instrumentation, force outlining calls and avoid; // inlining shadow memory poisoning. While this is a big performance burden; // for now it allows full abstraction from implementation details.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:120,Security,sanitiz,sanitizers,120,"// MSan: Workaround for PR16386.; // ASan: This is mainly to help LSan with cases such as; // https://github.com/google/sanitizers/issues/373; // We can't make this conditional on -fsanitize=leak, as that flag shouldn't; // affect compilation.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp:189,Security,sanitiz,sanitizers,189,"// libFuzzer wants to intercept calls to certain library functions, so the; // following -fno-builtin-* flags force the compiler to emit interposable; // libcalls to these functions. Other sanitizers effectively do the same thing; // by marking all library call sites with NoBuiltin attribute in their LLVM; // pass. (see llvm::maybeMarkSanitizerLibraryCallNoBuiltin)",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/SanitizerArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:17,Deployability,integrat,integrated-objemitter,17,// Diagnose when integrated-objemitter options are not supported by this; // toolchain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:17,Integrability,integrat,integrated-objemitter,17,// Diagnose when integrated-objemitter options are not supported by this; // toolchain.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:139,Deployability,update,updated,139,"// A list of known driver suffixes. Suffixes are compared against the; // program name in order. If there is a match, the frontend type is updated as; // necessary by applying the ModeFlag.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:104,Availability,avail,available,104,// TODO: Remove the RISC-V special case when R_RISCV_SET_ULEB128 linker; // support becomes more widely available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:130,Usability,simpl,simply,130,"// When building with per target runtime directories, various ways of naming; // the Arm architecture may have been normalised to simply ""arm"".; // For example ""armv8l"" (Armv8 AArch32 little endian) is replaced with ""arm"".; // Since an armv8l system can use libraries built for earlier architecture; // versions assuming endian and float ABI match.; //; // Original triple: armv8l-unknown-linux-gnueabihf; // Runtime triple: arm-unknown-linux-gnueabihf; //; // We do not do this for armeb (big endian) because doing so could make us; // select little endian libraries. In addition, all known armeb triples only; // use the ""armeb"" architecture name.; //; // M profile Arm is bare metal and we know they will not be using the per; // target runtime directory layout.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:3,Modifiability,Extend,Extending,3,"// Extending -fuse-ld= to an absolute or relative path is unexpected. Checking; // for the linker flavor is brittle. In addition, prepending ""ld."" or ""ld64.""; // to a relative path is surprising. This is more complex due to priorities; // among -B, COMPILER_PATH and PATH. --ld-path= should be used instead.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:135,Safety,avoid,avoid,135,"// Flang always runs the preprocessor and has no notion of ""preprocessed; // fortran"". Here, TY_PP_Fortran is coerced to TY_Fortran to avoid treating; // them differently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:26,Testability,test,tests,26,"// Only use ""platform"" in tests to override CLANG_DEFAULT_RTLIB!",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:26,Testability,test,tests,26,"// Only use ""platform"" in tests to override CLANG_DEFAULT_CXX_STDLIB!",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:357,Availability,down,down,357,"// Header search paths should be handled by each of the subclasses.; // Historically, they have not been, and instead have been handled inside of; // the CC1-layer frontend. As the logic is hoisted out, this generic function; // will slowly stop being called.; //; // While it is being called, replicate a bit of a hack to propagate the; // '-stdlib=' flag down to CC1 so that it can in turn customize the C++; // header search paths with it. Once all systems are overriding this; // function, the CC1 flag and this line can be removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:181,Testability,log,logic,181,"// Header search paths should be handled by each of the subclasses.; // Historically, they have not been, and instead have been handled inside of; // the CC1-layer frontend. As the logic is hoisted out, this generic function; // will slowly stop being called.; //; // While it is being called, replicate a bit of a hack to propagate the; // '-stdlib=' flag down to CC1 so that it can in turn customize the C++; // header search paths with it. Once all systems are overriding this; // function, the CC1 flag and this line can be removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:181,Testability,log,logic,181,"// This intentionally only looks at -nostdinc++, and not -nostdinc or; // -nostdlibinc. The purpose of -stdlib++-isystem is to support toolchain; // setups with non-standard search logic for the C++ headers, while still; // allowing users of the toolchain to bring their own C++ headers. Such a; // toolchain likely also has non-standard search logic for the C headers and; // uses -nostdinc to suppress the default logic, but -stdlib++-isystem should; // still work in that case and only be suppressed by an explicit -nostdinc++; // in a project using the toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:345,Testability,log,logic,345,"// This intentionally only looks at -nostdinc++, and not -nostdinc or; // -nostdlibinc. The purpose of -stdlib++-isystem is to support toolchain; // setups with non-standard search logic for the C++ headers, while still; // allowing users of the toolchain to bring their own C++ headers. Such a; // toolchain likely also has non-standard search logic for the C headers and; // uses -nostdinc to suppress the default logic, but -stdlib++-isystem should; // still work in that case and only be suppressed by an explicit -nostdinc++; // in a project using the toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:416,Testability,log,logic,416,"// This intentionally only looks at -nostdinc++, and not -nostdinc or; // -nostdlibinc. The purpose of -stdlib++-isystem is to support toolchain; // setups with non-standard search logic for the C++ headers, while still; // allowing users of the toolchain to bring their own C++ headers. Such a; // toolchain likely also has non-standard search logic for the C headers and; // uses -nostdinc to suppress the default logic, but -stdlib++-isystem should; // still work in that case and only be suppressed by an explicit -nostdinc++; // in a project using the toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:43,Safety,unsafe,unsafe-math,43,// Do not check for -fno-fast-math or -fno-unsafe-math when -Ofast passed; // (to keep the linker options consistent with gcc and clang itself).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:82,Integrability,depend,dependent,82,// Return sanitizers which don't require runtime support and are not; // platform dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:10,Security,sanitiz,sanitizers,10,// Return sanitizers which don't require runtime support and are not; // platform dependent.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp:157,Availability,error,error,157,"// If the argument parsing failed or more than one argument was; // consumed, the -Xarch_ argument's parameter tried to consume; // extra arguments. Emit an error and ignore.; //; // We also want to disallow any options which would alter the; // driver behavior; that isn't going to work in our model. We; // use options::NoXarchOption to control this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChain.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/XRayArgs.cpp:100,Integrability,depend,dependencies,100,// Validate the always/never attribute files. We also make sure that they; // are treated as actual dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/XRayArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/XRayArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/XRayArgs.cpp:3,Security,Validat,Validate,3,// Validate the always/never attribute files. We also make sure that they; // are treated as actual dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/XRayArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/XRayArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp:29,Testability,assert,asserted,29,"// Must be 64-bit, otherwise asserted already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp:46,Energy Efficiency,Power,Power,46,"// Accept any mixture of instructions.; // On Power for AIX and Linux, this behaviour matches that of GCC for both the; // user-provided assembler source case and the compiler-produced assembler; // source case. Yet XL with user-provided assembler source would not add this.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp:29,Testability,assert,asserted,29,"// Must be 64-bit, otherwise asserted already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp:29,Testability,assert,asserted,29,"// Must be 64-bit, otherwise asserted already.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp:11,Energy Efficiency,Power,PowerPC,11,// Add the PowerPC intrinsic headers (<resource>/include/ppc_wrappers),MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AIX.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:54,Deployability,install,installation,54,"/// \returns a list of candidate directories for ROCm installation, which is; /// cached and populated only once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:82,Performance,cache,cached,82,"/// \returns a list of candidate directories for ROCm installation, which is; /// cached and populated only once.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:14,Performance,cache,cached,14,// Return the cached candidate list if it has already been populated.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:55,Deployability,install,installed,55,// Detect ROCm packages built with SPACK.; // clang is installed at; // <rocm_root>/llvm-amdgpu-<rocm_release_string>-<hash>/bin directory.; // We only consider the parent directory of llvm-amdgpu package as ROCm; // installation candidate for SPACK.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:217,Deployability,install,installation,217,// Detect ROCm packages built with SPACK.; // clang is installed at; // <rocm_root>/llvm-amdgpu-<rocm_release_string>-<hash>/bin directory.; // We only consider the parent directory of llvm-amdgpu package as ROCm; // installation candidate for SPACK.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:3,Safety,Detect,Detect,3,// Detect ROCm packages built with SPACK.; // clang is installed at; // <rocm_root>/llvm-amdgpu-<rocm_release_string>-<hash>/bin directory.; // We only consider the parent directory of llvm-amdgpu package as ROCm; // installation candidate for SPACK.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:119,Security,hash,hash,119,// Detect ROCm packages built with SPACK.; // clang is installed at; // <rocm_root>/llvm-amdgpu-<rocm_release_string>-<hash>/bin directory.; // We only consider the parent directory of llvm-amdgpu package as ROCm; // installation candidate for SPACK.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:42,Deployability,install,install,42,// Some versions of the rocm llvm package install to /opt/rocm/llvm/bin; // Some versions of the aomp package install to /opt/rocm/aomp/bin,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:110,Deployability,install,install,110,// Some versions of the rocm llvm package install to /opt/rocm/llvm/bin; // Some versions of the aomp package install to /opt/rocm/aomp/bin,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:25,Deployability,install,installed,25,// Device library may be installed in clang or resource directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:30,Deployability,release,release,30,// Find the latest /opt/rocm-{release} directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:173,Deployability,install,installation,173,// Maintain compatability with HIP flag/envvar pointing directly at the; // bitcode library directory. This points directly at the library path instead; // of the rocm root installation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:56,Availability,avail,available,56,// Check that the required non-target libraries are all available.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:33,Deployability,install,installed,33,// HIP runtime built by SPACK is installed to; // <rocm_root>/hip-<rocm_release_string>-<hash> directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:89,Security,hash,hash,89,// HIP runtime built by SPACK is installed to; // <rocm_root>/hip-<rocm_release_string>-<hash> directory.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:17,Deployability,Install,InstallPath,17,"// Get parent of InstallPath and append ""share""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:40,Integrability,wrap,wrapper,40,"// HIP header includes standard library wrapper headers under clang; // cuda_wrappers directory. Since these wrapper headers include_next; // standard C++ headers, whereas libc++ headers include_next other clang; // headers. The include paths have to follow this order:; // - wrapper include path; // - standard C++ include path; // - other clang include path; // Since standard C++ and other clang include paths are added in other; // places after this function, here we only need to make sure wrapper; // include path is added.; //; // ROCm 3.5 does not fully support the wrapper headers. Therefore it needs; // a workaround.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:109,Integrability,wrap,wrapper,109,"// HIP header includes standard library wrapper headers under clang; // cuda_wrappers directory. Since these wrapper headers include_next; // standard C++ headers, whereas libc++ headers include_next other clang; // headers. The include paths have to follow this order:; // - wrapper include path; // - standard C++ include path; // - other clang include path; // Since standard C++ and other clang include paths are added in other; // places after this function, here we only need to make sure wrapper; // include path is added.; //; // ROCm 3.5 does not fully support the wrapper headers. Therefore it needs; // a workaround.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:276,Integrability,wrap,wrapper,276,"// HIP header includes standard library wrapper headers under clang; // cuda_wrappers directory. Since these wrapper headers include_next; // standard C++ headers, whereas libc++ headers include_next other clang; // headers. The include paths have to follow this order:; // - wrapper include path; // - standard C++ include path; // - other clang include path; // Since standard C++ and other clang include paths are added in other; // places after this function, here we only need to make sure wrapper; // include path is added.; //; // ROCm 3.5 does not fully support the wrapper headers. Therefore it needs; // a workaround.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:495,Integrability,wrap,wrapper,495,"// HIP header includes standard library wrapper headers under clang; // cuda_wrappers directory. Since these wrapper headers include_next; // standard C++ headers, whereas libc++ headers include_next other clang; // headers. The include paths have to follow this order:; // - wrapper include path; // - standard C++ include path; // - other clang include path; // Since standard C++ and other clang include paths are added in other; // places after this function, here we only need to make sure wrapper; // include path is added.; //; // ROCm 3.5 does not fully support the wrapper headers. Therefore it needs; // a workaround.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:574,Integrability,wrap,wrapper,574,"// HIP header includes standard library wrapper headers under clang; // cuda_wrappers directory. Since these wrapper headers include_next; // standard C++ headers, whereas libc++ headers include_next other clang; // headers. The include paths have to follow this order:; // - wrapper include path; // - standard C++ include path; // - other clang include path; // Since standard C++ and other clang include paths are added in other; // places after this function, here we only need to make sure wrapper; // include path is added.; //; // ROCm 3.5 does not fully support the wrapper headers. Therefore it needs; // a workaround.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:79,Availability,error,errors,79,// Check code object version options. Emit warnings for legacy options; // and errors for the last invalid code object version options.; // It is done here to avoid repeated warning or error messages for; // each tool invocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:185,Availability,error,error,185,// Check code object version options. Emit warnings for legacy options; // and errors for the last invalid code object version options.; // It is done here to avoid repeated warning or error messages for; // each tool invocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:191,Integrability,message,messages,191,// Check code object version options. Emit warnings for legacy options; // and errors for the last invalid code object version options.; // It is done here to avoid repeated warning or error messages for; // each tool invocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:159,Safety,avoid,avoid,159,// Check code object version options. Emit warnings for legacy options; // and errors for the last invalid code object version options.; // It is done here to avoid repeated warning or error messages for; // each tool invocation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:29,Safety,detect,detected,29,// Replace -mcpu=native with detected GPU.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:19,Availability,avail,availible,19,// Detect AMD GPUs availible on the system.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp:3,Safety,Detect,Detect,3,// Detect AMD GPUs availible on the system.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.h:69,Availability,error,error,69,/// Uses amdgpu-arch tool to get arch of the system GPU. Will return error; /// if unable to find one.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPU.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp:534,Availability,toler,tolerate,534,"// The AMDGPUOpenMPToolChain only supports sanitizers in the sense that it; // allows sanitizer arguments on the command line if they are supported by the; // host toolchain. The AMDGPUOpenMPToolChain will actually ignore any command; // line arguments for any of these ""supported"" sanitizers. That means that no; // sanitization of device code is actually supported at this time.; //; // This behavior is necessary because the host and device toolchains; // invocations often share the command line, so the device toolchain must; // tolerate flags meant only for the host toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp:43,Security,sanitiz,sanitizers,43,"// The AMDGPUOpenMPToolChain only supports sanitizers in the sense that it; // allows sanitizer arguments on the command line if they are supported by the; // host toolchain. The AMDGPUOpenMPToolChain will actually ignore any command; // line arguments for any of these ""supported"" sanitizers. That means that no; // sanitization of device code is actually supported at this time.; //; // This behavior is necessary because the host and device toolchains; // invocations often share the command line, so the device toolchain must; // tolerate flags meant only for the host toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp:86,Security,sanitiz,sanitizer,86,"// The AMDGPUOpenMPToolChain only supports sanitizers in the sense that it; // allows sanitizer arguments on the command line if they are supported by the; // host toolchain. The AMDGPUOpenMPToolChain will actually ignore any command; // line arguments for any of these ""supported"" sanitizers. That means that no; // sanitization of device code is actually supported at this time.; //; // This behavior is necessary because the host and device toolchains; // invocations often share the command line, so the device toolchain must; // tolerate flags meant only for the host toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp:282,Security,sanitiz,sanitizers,282,"// The AMDGPUOpenMPToolChain only supports sanitizers in the sense that it; // allows sanitizer arguments on the command line if they are supported by the; // host toolchain. The AMDGPUOpenMPToolChain will actually ignore any command; // line arguments for any of these ""supported"" sanitizers. That means that no; // sanitization of device code is actually supported at this time.; //; // This behavior is necessary because the host and device toolchains; // invocations often share the command line, so the device toolchain must; // tolerate flags meant only for the host toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp:317,Security,sanitiz,sanitization,317,"// The AMDGPUOpenMPToolChain only supports sanitizers in the sense that it; // allows sanitizer arguments on the command line if they are supported by the; // host toolchain. The AMDGPUOpenMPToolChain will actually ignore any command; // line arguments for any of these ""supported"" sanitizers. That means that no; // sanitization of device code is actually supported at this time.; //; // This behavior is necessary because the host and device toolchains; // invocations often share the command line, so the device toolchain must; // tolerate flags meant only for the host toolchain.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AMDGPUOpenMP.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp:28,Integrability,synchroniz,synchronized,28,// NOTE: This list has been synchronized with gcc-avr 7.3.0 and avr-libc 2.0.0.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp:32,Deployability,install,installed,32,// Omit if there is no avr-libc installed.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp:105,Usability,simpl,simply,105,"// If the family name is known, we can link with the device-specific libgcc.; // Without it, libgcc will simply not be linked. This matches avr-gcc; // behavior.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp:19,Deployability,install,installation,19,// Search avr-libc installation according to avr-gcc installation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp:53,Deployability,install,installation,53,// Search avr-libc installation according to avr-gcc installation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp:19,Deployability,install,installation,19,"// Search avr-libc installation from possible locations, and return the first; // one that exists, if there is no avr-gcc installed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp:122,Deployability,install,installed,122,"// Search avr-libc installation from possible locations, and return the first; // one that exists, if there is no avr-gcc installed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/AVR.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp:18,Energy Efficiency,power,powerpc,18,/// Is the triple powerpc[64][le]-*-none-eabi?,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp:34,Security,sanitiz,sanitizers,34,"// BareMetal toolchain allows all sanitizers where the compiler generates valid; // code, ignoring all runtime library support issues on the assumption that; // baremetal targets typically implement their own runtime support.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/BareMetal.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:149,Availability,error,error,149,"/// This is a helper function for validating the optional refinement step; /// parameter in reciprocal argument strings. Return false if there is an error; /// parsing the refinement step. Otherwise, return true and set the Position; /// of the refinement step in the input string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:34,Security,validat,validating,34,"/// This is a helper function for validating the optional refinement step; /// parameter in reciprocal argument strings. Return false if there is an error; /// parsing the refinement step. Otherwise, return true and set the Position; /// of the refinement step in the input string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:263,Performance,optimiz,optimization,263,"// Allow exactly one numeric character for the additional refinement; // step parameter. This is reasonable for all currently-supported; // operations and architectures because we would expect that a larger value; // of refinement steps would cause the estimate ""optimization"" to; // under-perform the native operation. Also, if the estimate does not; // converge quickly, it probably will not ever converge, so further; // refinement steps will not produce a better answer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:290,Performance,perform,perform,290,"// Allow exactly one numeric character for the additional refinement; // step parameter. This is reasonable for all currently-supported; // operations and architectures because we would expect that a larger value; // of refinement steps would cause the estimate ""optimization"" to; // under-perform the native operation. Also, if the estimate does not; // converge quickly, it probably will not ever converge, so further; // refinement steps will not produce a better answer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:98,Safety,avoid,avoid,98,"// -mkernel and -fapple-kext imply no exceptions, so claim exception related; // arguments now to avoid warnings about unused arguments.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:21,Performance,optimiz,optimization,21,"/// Vectorize at all optimization levels greater than 1 except for -Oz.; /// For -Oz the loop vectorizer is disabled, while the slp vectorizer is; /// enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:128,Integrability,interface,interface,128,"// Map the driver type to the frontend type. This is mostly an identity; // mapping, except that the distinction between module interface units; // and other source files does not exist at the frontend layer.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:7,Integrability,depend,dependent,7,// Add dependent lib for clang_rt.profile,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:7,Integrability,depend,dependent,7,// Add dependent lib for clang_rt.profile,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:322,Testability,test,tests,322,"// If no version was requested by the user, use the default value from the; // back end. This is consistent with the value returned from; // getAMDGPUCodeObjectVersion. This lets clang emit IR for amdgpu without; // requiring the corresponding llvm to have the AMDGPU target enabled,; // provided the user (e.g. front end tests) can use the default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:10,Integrability,depend,dependency,10,// Handle dependency file generation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:36,Integrability,depend,dependency,36,"// If user provided -o, that is the dependency target, except; // when we are only generating a dependency file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:96,Integrability,depend,dependency,96,"// If user provided -o, that is the dependency target, except; // when we are only generating a dependency file.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:196,Deployability,install,installation,196,"// Add offload include arguments specific for CUDA/HIP. This must happen; // before we -I or -include anything else, because we must pick up the; // CUDA/HIP headers from the particular CUDA/ROCm installation, rather than; // from e.g. /usr/local/include.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:66,Integrability,wrap,wrap,66,// Add openmp_wrappers/* to our system include path. This lets us wrap; // standard library headers.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:51,Modifiability,variab,variables,51,// Parse additional include paths from environment variables.; // FIXME: We should probably sink the logic for handling these from the; // frontend into the driver. It will allow deleting 4 otherwise unused flags.; // CPATH - included following the user specified includes (but prior to; // builtin and standard includes).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:101,Testability,log,logic,101,// Parse additional include paths from environment variables.; // FIXME: We should probably sink the logic for handling these from the; // frontend into the driver. It will allow deleting 4 otherwise unused flags.; // CPATH - included following the user specified includes (but prior to; // builtin and standard includes).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:37,Availability,error,error,37,"// When enabling remarks, we need to error if:; // * The remark file is specified but we're targeting multiple architectures,; // which means more than one remark file is being generated.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:58,Deployability,deploy,deployment,58,"// Use the effective triple, which takes into account the deployment target.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:18,Availability,error,error,18,// Ignore parsing error.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:15,Energy Efficiency,power,power,15,// Only accept power of 2 values beteen RVVBitsPerBlock and 65536 that; // at least MinVLen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:14,Safety,avoid,avoid,14,"// Default to avoid implicit floating-point for kernel/kext code, but allow; // that to be overridden with -mno-soft-float.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:56,Availability,error,error,56,// Only support mregparm=4 to support old usage. Report error for all other; // cases.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:16,Integrability,depend,dependency,16,// Skip writing dependency output and the compilation database itself.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:21,Security,validat,validate,21,"// Do nothing, we'll validate it later.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:33,Performance,optimiz,optimization,33,"// Handle various floating point optimization flags, mapping them to the; // appropriate LLVM code generation flags. This is complicated by several; // ""umbrella"" flags, so we do this by stepping through the flags incrementally; // adjusting what we think is enabled/disabled, then at the end setting the; // LLVM flags based on the final state.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:37,Modifiability,extend,extended,37,"// -ffp-eval-method options: double, extended, source",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:58,Integrability,contract,contract,58,"// CUDA and HIP don't rely on the frontend to pass an ffp-contract option.; // If one wasn't given by the user, don't pass it here.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:34,Integrability,contract,contract,34,// Validate and pass through -ffp-contract option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:3,Security,Validat,Validate,3,// Validate and pass through -ffp-contract option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:34,Integrability,contract,contract,34,"// -ffp-model=precise enables ffp-contract=on.; // -ffp-model=precise sets PreciseFPModel to on and Val to; // ""precise"". FPContract is set.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:3,Security,Validat,Validate,3,// Validate and pass through -ffp-model option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:33,Availability,error,error,33,// This should only occur in the error case; // since the optID has been replaced by a more granular; // floating point option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:3,Security,Validat,Validate,3,// Validate and pass through -ffp-exception-behavior option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:3,Security,Validat,Validate,3,// Validate and pass through -ffp-eval-method option.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:20,Performance,optimiz,optimization,20,"// If -Ofast is the optimization level, then -ffast-math should be enabled",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:39,Integrability,contract,contract,39,// If fast-math is set then set the fp-contract mode to fast.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:15,Integrability,contract,contract,15,// Enable -ffp-contract=fast,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:21,Performance,optimiz,optimization,21,// Disable a codegen optimization for floating-point casts.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:149,Availability,error,errors,149,// Disable the presentation of standard compiler warnings when using; // --analyze. We only want to show static analyzer diagnostics or frontend; // errors.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:12,Performance,cache,cache-path,12,// -fmodule-cache-path specifies where our implicitly-built module files; // should be written.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:96,Availability,failure,failure,96,"// `HasPath` will only be false if getDefaultModuleCachePath() fails.; // That being said, that failure is unlikely and not caching is harmless.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:39,Performance,load,load,39,// -fbuiltin-module-map can be used to load the clang; // builtin headers modulemap file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:125,Performance,load,loaded,125,// The -fmodule-file=<name>=<file> form specifies the mapping of module; // names to precompiled module files (the module is loaded only if used).; // The -fmodule-file=<file> form can be used to unconditionally load; // precompiled module files (whether used or not).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:212,Performance,load,load,212,// The -fmodule-file=<name>=<file> form specifies the mapping of module; // names to precompiled module files (the module is loaded only if used).; // The -fmodule-file=<file> form can be used to unconditionally load; // precompiled module files (whether used or not).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:45,Performance,load,load,45,// -fprebuilt-module-path specifies where to load the prebuilt module files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:81,Integrability,depend,dependency,81,"// When building modules and generating crashdumps, we need to dump a module; // dependency VFS alongside the output.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:11,Performance,cache,cache,11,// Add the cache directory as a temp so the crash diagnostics pick it up.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:53,Safety,avoid,avoid,53,// Claim `-fmodule-output` and `-fmodule-output=` to avoid unused warnings.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:15,Integrability,depend,depends,15,// The default depends on the language standard.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:110,Deployability,deploy,deployment,110,"// -fobjc-dispatch-method is only relevant with the nonfragile-abi, and legacy; // is the default. Except for deployment target of 10.5, next runtime is; // always legacy dispatch and -fno-objc-legacy-dispatch gets ignored silently.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:70,Testability,log,logic,70,// Allow -fno-objc-arr to trump -fobjc-arr/-fobjc-arc.; // NOTE: This logic is duplicated in ToolChains.cpp.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:79,Integrability,wrap,wrapped,79,"// FIXME: It seems like this entire block, and several around it should be; // wrapped in isObjC, but for now we just use it here as this is where it; // was being used previously.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:37,Integrability,message,messages,37,// Allow the user to control whether messages can be converted to runtime; // functions.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:82,Modifiability,rewrite,rewriter,82,"// -fobjc-infer-related-result-type is the default, except in the Objective-C; // rewriter.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:8,Availability,down,down,8,// Pass down -fobjc-weak or -fno-objc-weak if present.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:160,Safety,avoid,avoid,160,// Color diagnostics are parsed by the driver directly from argv and later; // re-parsed to construct this job; claim any possible color diagnostic here; // to avoid warn_drv_unused_argument and diagnose bad; // OPT_fdiagnostics_color_EQ values.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:354,Safety,avoid,avoids,354,"// The 'g' groups options involve a somewhat intricate sequence of decisions; // about what to pass from the driver to the frontend, but by the time they; // reach cc1 they've been factored into three well-defined orthogonal choices:; // * what level of debug info to generate; // * what dwarf version to write; // * what debugger tuning to use; // This avoids having to monkey around further in cc1 other than to disable; // codeview if not running in a Windows environment. Perhaps even that; // decision should be made in the driver as well though.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:160,Deployability,upgrade,upgrade,160,"// After we've dealt with all combinations of things that could; // make DebugInfoKind be other than None or DebugLineTablesOnly,; // figure out if we need to ""upgrade"" it to standalone debug info.; // We parse these two '-f' options whether or not they will be used,; // to claim them even if you wrote ""-fstandalone-debug -gline-tables-only""",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:232,Availability,error,error,232,"// Source embedding is a vendor extension to DWARF v5. By now we have; // checked if a DWARF version was stated explicitly, and have otherwise; // fallen back to the target default, so if this is still not at least 5; // we emit an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:21,Energy Efficiency,reduce,reduced,21,"// The toolchain has reduced allowed dwarf version, so we can't enable; // -gembed-source.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:50,Deployability,integrat,integrated,50,"// To avoid join/split of directory+filename, the integrated assembler prefers; // the directory form of .file on all DWARF versions. GNU as doesn't allow the; // form before DWARF v5.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:50,Integrability,integrat,integrated,50,"// To avoid join/split of directory+filename, the integrated assembler prefers; // the directory form of .file on all DWARF versions. GNU as doesn't allow the; // form before DWARF v5.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:6,Safety,avoid,avoid,6,"// To avoid join/split of directory+filename, the integrated assembler prefers; // the directory form of .file on all DWARF versions. GNU as doesn't allow the; // form before DWARF v5.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:35,Performance,perform,perform,35,// This controls whether or not we perform JustMyCode instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:37,Integrability,depend,dependent,37,"// The /LDd option implies /MTd. The dependent lib part can be overridden,; // but defining _DEBUG is sticky.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:95,Performance,load,load,95,"// We need to figure out which CUDA version we're compiling for, as that; // determines how we load and launch GPU kernels.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:18,Availability,error,error,18,// Force compiler error on invalid conversion specifiers,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:50,Safety,avoid,avoid,50,// Unconditionally claim the printf option now to avoid unused diagnostic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:73,Performance,load,loading,73,"// Preserve use-list order by default when emitting bitcode, so that; // loading the bitcode up in 'opt' or 'llc' and running passes gives the; // same result as running passes here. For LTO, we don't need to preserve; // the use-list order, since serialization to bitcode is part of the flow.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:29,Performance,optimiz,optimizations,29,// Disable all llvm IR level optimizations.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:3,Performance,Optimiz,Optimization,3,// Optimization level for CodeGen.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:22,Integrability,depend,dependency,22,// Handled with other dependency code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:36,Testability,assert,asserts,36,// Disable the verification pass in asserts builds unless otherwise specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:26,Testability,assert,assert,26,// Discard value names in assert builds unless otherwise specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:62,Availability,error,errors,62,"// Enable compatilibily mode to avoid analyzer-config related errors.; // Since we can't access frontend flags through hasArg, let's manually iterate; // through them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:47,Modifiability,config,config,47,"// Enable compatilibily mode to avoid analyzer-config related errors.; // Since we can't access frontend flags through hasArg, let's manually iterate; // through them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:32,Safety,avoid,avoid,32,"// Enable compatilibily mode to avoid analyzer-config related errors.; // Since we can't access frontend flags through hasArg, let's manually iterate; // through them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:89,Security,access,access,89,"// Enable compatilibily mode to avoid analyzer-config related errors.; // Since we can't access frontend flags through hasArg, let's manually iterate; // through them.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:43,Energy Efficiency,power,power,43,// We support -falign-loops=N where N is a power of 2. GCC supports more; // forms.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:589,Performance,optimiz,optimized,589,"// -fsemantic-interposition is forwarded to CC1: set the; // ""SemanticInterposition"" metadata to 1 (make some linkages interposable) and; // make default visibility external linkage definitions dso_preemptable.; //; // -fno-semantic-interposition: if the target supports .Lfoo$local local; // aliases (make default visibility external linkage definitions dso_local).; // This is the CC1 default for ELF to match COFF/Mach-O.; //; // Otherwise use Clang's traditional behavior: like; // -fno-semantic-interposition but local aliases are not used. So references; // can be interposed if not optimized out.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:31,Availability,error,error,31,// Emit the unsupported option error until the Clang's library integration; // support for 128-bit long double is available for AIX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:114,Availability,avail,available,114,// Emit the unsupported option error until the Clang's library integration; // support for 128-bit long double is available for AIX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:63,Deployability,integrat,integration,63,// Emit the unsupported option error until the Clang's library integration; // support for 128-bit long double is available for AIX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:63,Integrability,integrat,integration,63,// Emit the unsupported option error until the Clang's library integration; // support for 128-bit long double is available for AIX.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:20,Performance,optimiz,optimization,20,"// If -Ofast is the optimization level, then -fstrict-aliasing should be; // enabled. This alias option is being used to simplify the hasFlag logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:142,Testability,log,logic,142,"// If -Ofast is the optimization level, then -fstrict-aliasing should be; // enabled. This alias option is being used to simplify the hasFlag logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:121,Usability,simpl,simplify,121,"// If -Ofast is the optimization level, then -fstrict-aliasing should be; // enabled. This alias option is being used to simplify the hasFlag logic.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:103,Deployability,integrat,integrated,103,// Decide whether to use verbose asm. Verbose assembly is the default on; // toolchains which have the integrated assembler on by default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:103,Integrability,integrat,integrated,103,// Decide whether to use verbose asm. Verbose assembly is the default on; // toolchains which have the integrated assembler on by default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:94,Deployability,integrat,integrated-as,94,// If toolchain choose to use MCAsmParser for inline asm don't pass the; // option to disable integrated-as explictly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:94,Integrability,integrat,integrated-as,94,// If toolchain choose to use MCAsmParser for inline asm don't pass the; // option to disable integrated-as explictly.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:41,Modifiability,variab,variables,41,// Darwin's kernel doesn't support guard variables; just die if we; // try to use them.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:37,Security,access,access-external-data,37,// Non-PIC code defaults to -fdirect-access-external-data while PIC code; // defaults to -fno-direct-access-external-data. Pass the option if different; // from the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:101,Security,access,access-external-data,101,// Non-PIC code defaults to -fdirect-access-external-data while PIC code; // defaults to -fno-direct-access-external-data. Pass the option if different; // from the default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:39,Security,access,access-external-data,39,// Some targets default to -fno-direct-access-external-data even for; // -fno-pic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:34,Security,Audit,Audit,34,// -fhosted is default.; // TODO: Audit uses of KernelOrKext and see where it'd be more appropriate to; // use Freestanding.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:14,Availability,error,error,14,// Explicitly error on some things we know we don't support and can't just; // ignore.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:56,Safety,avoid,avoiding,56,"// Give the gen diagnostics more chances to succeed, by avoiding intentional; // crashes.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:138,Availability,error,error,138,"// Do not pass the option to the GPU compilation. We still want it enabled; // for the host-side compilation, so seeing it here is not an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:29,Availability,avail,available,29,// This codegen pass is only available on x86 and AArch64 ELF targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:55,Security,sanitiz,sanitizers,55,"// Add runtime flag for PS4/PS5 when PGO, coverage, or sanitizers are enabled.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:256,Modifiability,config,configure,256,"// Don't warn about ""clang -c -DPIC -fPIC test.i"" because libtool.m4 assumes; // that ""The compiler can only warn and ignore the option if not recognized"".; // When building with ccache, it will pass -D options to clang even on; // preprocessed inputs and configure concludes that -fPIC is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:42,Testability,test,test,42,"// Don't warn about ""clang -c -DPIC -fPIC test.i"" because libtool.m4 assumes; // that ""The compiler can only warn and ignore the option if not recognized"".; // When building with ccache, it will pass -D options to clang even on; // preprocessed inputs and configure concludes that -fPIC is not supported.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:183,Availability,robust,robust,183,"// When compiling for the OpenMP device we want protected visibility by; // default. This prevents the device from accidentally preempting code on; // the host, makes the system more robust, and improves performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:204,Performance,perform,performance,204,"// When compiling for the OpenMP device we want protected visibility by; // default. This prevents the device from accidentally preempting code on; // the host, makes the system more robust, and improves performance.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:151,Availability,down,down,151,"// By default, if Clang doesn't know how to generate useful OpenMP code; // for a specific runtime library, we just don't pass the '-fopenmp' flag; // down to the actual compilation.; // FIXME: It would be better to have a mode which *only* omits IR; // generation based on the OpenMP support so that we get consistent; // semantic analysis, etc.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:12,Modifiability,extend,extended-block-signature,12,// -fencode-extended-block-signature=1 is default.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:66,Deployability,patch,patch,66,// Check that the version has 1 to 3 components and the minor and patch; // versions fit in two decimal digits.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:33,Integrability,depend,depending,33,// -fgnu-keywords default varies depending on language; only pass if; // specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:152,Usability,learn,learn,152,"// -fdelayed-template-parsing is default when targeting MSVC.; // Many old Windows SDK versions require this to parse.; //; // According to; // https://learn.microsoft.com/en-us/cpp/build/reference/permissive-standards-conformance?view=msvc-170,; // MSVC actually defaults to -fno-delayed-template-parsing (/Zc:twoPhase-; // with MSVC CLI) if using C++20. So we match the behavior with MSVC here to; // not enable -fdelayed-template-parsing by default after C++20.; //; // FIXME: Given -fdelayed-template-parsing is a source of bugs, we should be; // able to disable this by default at some point.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:53,Performance,optimiz,optimization,53,// Enable vectorization per default according to the optimization level; // selected. For optimization levels that want vectorization we use the alias; // option to simplify the hasFlag logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:90,Performance,optimiz,optimization,90,// Enable vectorization per default according to the optimization level; // selected. For optimization levels that want vectorization we use the alias; // option to simplify the hasFlag logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:186,Testability,log,logic,186,// Enable vectorization per default according to the optimization level; // selected. For optimization levels that want vectorization we use the alias; // option to simplify the hasFlag logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:165,Usability,simpl,simplify,165,// Enable vectorization per default according to the optimization level; // selected. For optimization levels that want vectorization we use the alias; // option to simplify the hasFlag logic.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:43,Performance,optimiz,optimization,43,// -fslp-vectorize is enabled based on the optimization level selected.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:43,Integrability,depend,depending,43,// -fdollars-in-identifiers default varies depending on platform and; // language; only pass if specified.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:47,Performance,optimiz,optimization-record,47,// Remarks can be enabled with any of the `-f.*optimization-record.*` flags.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:117,Integrability,depend,dependency-dir,117,// Enable rewrite includes if the user's asked for it or if we're generating; // diagnostics.; // TODO: Once -module-dependency-dir works with -frewrite-includes it'd be; // nice to enable this when doing a crashdump for modules as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:10,Modifiability,rewrite,rewrite,10,// Enable rewrite includes if the user's asked for it or if we're generating; // diagnostics.; // TODO: Once -module-dependency-dir works with -frewrite-includes it'd be; // nice to enable this when doing a crashdump for modules as well.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:31,Performance,load,load,31,// Turn -fplugin=name.so into -load name.so,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:21,Modifiability,plugin,pluginname-key,21,"// Turn -fplugin-arg-pluginname-key=value into; // -plugin-arg-pluginname key=value; // GCC has an actual plugin_argument struct with key/value pairs that it; // passes to its plugins, but we don't, so just pass it on as-is.; //; // The syntax for -fplugin-arg- is ambiguous if both plugin name and; // argument key are allowed to contain dashes. GCC therefore only; // allows dashes in the key. We do the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:52,Modifiability,plugin,plugin-arg-pluginname,52,"// Turn -fplugin-arg-pluginname-key=value into; // -plugin-arg-pluginname key=value; // GCC has an actual plugin_argument struct with key/value pairs that it; // passes to its plugins, but we don't, so just pass it on as-is.; //; // The syntax for -fplugin-arg- is ambiguous if both plugin name and; // argument key are allowed to contain dashes. GCC therefore only; // allows dashes in the key. We do the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:176,Modifiability,plugin,plugins,176,"// Turn -fplugin-arg-pluginname-key=value into; // -plugin-arg-pluginname key=value; // GCC has an actual plugin_argument struct with key/value pairs that it; // passes to its plugins, but we don't, so just pass it on as-is.; //; // The syntax for -fplugin-arg- is ambiguous if both plugin name and; // argument key are allowed to contain dashes. GCC therefore only; // allows dashes in the key. We do the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:283,Modifiability,plugin,plugin,283,"// Turn -fplugin-arg-pluginname-key=value into; // -plugin-arg-pluginname key=value; // GCC has an actual plugin_argument struct with key/value pairs that it; // passes to its plugins, but we don't, so just pass it on as-is.; //; // The syntax for -fplugin-arg- is ambiguous if both plugin name and; // argument key are allowed to contain dashes. GCC therefore only; // allows dashes in the key. We do the same.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:18,Modifiability,plugin,plugin,18,// Forward -fpass-plugin=name.so to -cc1.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:65,Testability,test,test,65,"// We translate this by hand to the -cc1 argument, since nightly test uses; // it and developers have been trained to spell it with -mllvm. Both; // spellings are now deprecated and should be removed.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:211,Performance,optimiz,optimized,211,"// With -save-temps, we want to save the unoptimized bitcode output from the; // CompileJobAction, use -disable-llvm-passes to get pristine IR generated; // by the frontend.; // When -fembed-bitcode is enabled, optimized bitcode is emitted because it; // has slightly different breakdown between stages.; // FIXME: -fembed-bitcode -save-temps will save optimized bitcode instead of; // pristine IR generated by the frontend. Ideally, a new compile action should; // be added so both IR can be captured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:353,Performance,optimiz,optimized,353,"// With -save-temps, we want to save the unoptimized bitcode output from the; // CompileJobAction, use -disable-llvm-passes to get pristine IR generated; // by the frontend.; // When -fembed-bitcode is enabled, optimized bitcode is emitted because it; // has slightly different breakdown between stages.; // FIXME: -fembed-bitcode -save-temps will save optimized bitcode instead of; // pristine IR generated by the frontend. Ideally, a new compile action should; // be added so both IR can be captured.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:111,Integrability,depend,depending,111,"// Host-side offloading compilation receives all device-side outputs. Include; // them in the host compilation depending on the target. If the host inputs; // are not empty we use the new-driver scheme, otherwise use the old scheme.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:295,Availability,error,error,295,"// Check if we passed LTO options but they were suppressed because this is a; // device offloading action, or we passed device offload LTO options which; // were suppressed because this is not the device offload action.; // Check if we are using PS4 in regular LTO mode.; // Otherwise, issue an error.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:22,Integrability,depend,dependency,22,// Handled with other dependency code.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:28,Availability,echo,echo,28,// Make the compile command echo its inputs for /showFilenames.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:136,Testability,test,test,136,"// CAUTION! The first constructor argument (""clang"") is not arbitrary,; // as it is for other tools. Some operations on a Tool actually test; // whether that tool is Clang based on the Tool's Name as a string.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:95,Modifiability,rewrite,rewriter,95,"// If we have no runtime argument, ask the toolchain for its default runtime.; // However, the rewriter only really supports the Mac runtime, so assume that.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:54,Modifiability,polymorphi,polymorphic,54,// This controls whether or not we emit RTTI data for polymorphic types.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:93,Security,Secur,Security,93,"// This controls whether or not we emit stack-protector instrumentation.; // In MSVC, Buffer Security Check (/GS) is on by default.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:43,Security,secur,security,43,"// Do nothing, but we might want to emit a security warning in future.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:121,Testability,test,test,121,"// You might think that it would be ok to set DebugInfoKind outside of; // the guard for source type, however there is a test which asserts; // that some assembler invocation receives no -debug-info-kind,; // and it's not clear whether that test is just overly restrictive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:132,Testability,assert,asserts,132,"// You might think that it would be ok to set DebugInfoKind outside of; // the guard for source type, however there is a test which asserts; // that some assembler invocation receives no -debug-info-kind,; // and it's not clear whether that test is just overly restrictive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:241,Testability,test,test,241,"// You might think that it would be ok to set DebugInfoKind outside of; // the guard for source type, however there is a test which asserts; // that some assembler invocation receives no -debug-info-kind,; // and it's not clear whether that test is just overly restrictive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:222,Usability,clear,clear,222,"// You might think that it would be ok to set DebugInfoKind outside of; // the guard for source type, however there is a test which asserts; // that some assembler invocation receives no -debug-info-kind,; // and it's not clear whether that test is just overly restrictive.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:59,Deployability,integrat,integrated,59,// Set the AT_producer to the clang version when using the integrated; // assembler on assembly source files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:59,Integrability,integrat,integrated,59,// Set the AT_producer to the clang version when using the integrated; // assembler on assembly source files.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:88,Integrability,wrap,wrapper,88,// TODO: We need to pass in the full target-id and handle it properly in the; // linker wrapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:36,Integrability,wrap,wrapper,36,// Pass the CUDA path to the linker wrapper tool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:15,Performance,optimiz,optimization,15,// Pass in the optimization level to use for LTO.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:60,Integrability,wrap,wrapper,60,// code-object-version=X needs to be passed to clang-linker-wrapper to ensure; // that it is used by lld.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:53,Integrability,wrap,wrapper,53,// Forward remarks passes to the LLVM backend in the wrapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:36,Integrability,wrap,wrap,36,// Construct the link job so we can wrap around it.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:51,Integrability,wrap,wrapper,51,// Add the linker arguments to be forwarded by the wrapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp:69,Integrability,wrap,wrapper,69,// Replace the executable and arguments of the link job with the; // wrapper.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h:39,Deployability,integrat,integrated,39,// Indicates whether this instance has integrated backend using; // internal LLVM infrastructure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h:39,Integrability,integrat,integrated,39,// Indicates whether this instance has integrated backend using; // internal LLVM infrastructure.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h:10,Deployability,integrat,integrated,10,/// Clang integrated assembler tool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h:10,Integrability,integrat,integrated,10,/// Clang integrated assembler tool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h:11,Integrability,wrap,wrapper,11,/// Linker wrapper tool.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/Clang.h
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:41,Performance,optimiz,optimizing,41,// Don't use a frame pointer on linux if optimizing for certain targets.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:11,Availability,error,error,11,"// In some error cases, the input could be Nothing; skip those.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:31,Modifiability,plugin,plugin,31,// Tell the linker to load the plugin. This has to come before; // AddLinkerInputs as gold requires -plugin and AIX ld requires -bplugin to; // come before any -plugin-opt/-bplugin_opt that -Wl might forward.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:101,Modifiability,plugin,plugin,101,// Tell the linker to load the plugin. This has to come before; // AddLinkerInputs as gold requires -plugin and AIX ld requires -bplugin to; // come before any -plugin-opt/-bplugin_opt that -Wl might forward.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:161,Modifiability,plugin,plugin-opt,161,// Tell the linker to load the plugin. This has to come before; // AddLinkerInputs as gold requires -plugin and AIX ld requires -bplugin to; // come before any -plugin-opt/-bplugin_opt that -Wl might forward.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:22,Performance,load,load,22,// Tell the linker to load the plugin. This has to come before; // AddLinkerInputs as gold requires -plugin and AIX ld requires -bplugin to; // come before any -plugin-opt/-bplugin_opt that -Wl might forward.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:66,Availability,down,down,66,// Try to pass driver level flags relevant to LTO code generation down to; // the plugin.; // Handle flags for selecting CPU variants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:82,Modifiability,plugin,plugin,82,// Try to pass driver level flags relevant to LTO code generation down to; // the plugin.; // Handle flags for selecting CPU variants.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:7,Performance,optimiz,optimization,7,// The optimization level matches; // CompilerInvocation.cpp:getOptimizationLevel().,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:8,Availability,down,down,8,// Pass down GlobalISel options.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:69,Availability,error,error,69,// The data sections option is on by default on AIX. We only need to error; // out when -fno-data-sections is specified explicitly to turn off data; // sections.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:35,Performance,perform,perform,35,// This controls whether or not we perform JustMyCode instrumentation.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:46,Performance,optimiz,optimization-record,46,// Handle serialized remarks options: '-fsave-optimization-record'; // and '-foptimization-record-*'.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:39,Integrability,depend,depends,39,"// 1. Link FortranMain; // FortranMain depends on FortranRuntime, so needs to be listed first. If; // -fno-fortran-main has been passed, skip linking Fortran_main.a",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:169,Integrability,depend,dependents,169,// 2. Link FortranRuntime and FortranDecimal; // These are handled earlier on Windows by telling the frontend driver to; // add the correct libraries to link against as dependents in the object; // file.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:100,Testability,test,tested,100,"// Default to the <driver-path>/../lib directory. This works fine on the; // platforms that we have tested so far. We will probably have to re-fine; // this in the future. In particular, on some platforms, we may need to use; // lib64 instead of lib.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:3,Integrability,Wrap,Wrap,3,// Wrap any static runtimes that must be forced into executable in; // whole-archive.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:57,Integrability,depend,depends,57,// Force linking against the system libraries sanitizers depends on; // (see PR15823 why this is necessary).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:46,Security,sanitiz,sanitizers,46,// Force linking against the system libraries sanitizers depends on; // (see PR15823 why this is necessary).,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:116,Security,sanitiz,sanitizer,116,"// Should be called before we add system libraries (C++ ABI, libstdc++/libc++,; // C runtime, etc). Returns true if sanitizer system deps need to be linked in.",MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:3,Integrability,Inject,Inject,3,// Inject libfuzzer dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp:20,Integrability,depend,dependencies,20,// Inject libfuzzer dependencies.,MatchSource.CODE_COMMENT,interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/Driver/ToolChains/CommonArgs.cpp
