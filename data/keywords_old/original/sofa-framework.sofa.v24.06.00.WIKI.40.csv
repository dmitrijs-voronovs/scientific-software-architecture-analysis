id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html:843,Modifiability,inherit,inherited,843,"﻿. SOFA API: sofa::simulation::IntegrateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateBeginEvent Class Reference . #include <IntegrateBeginEvent.h>. Inheritance diagram for sofa::simulation::IntegrateBeginEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor before performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html:994,Modifiability,inherit,inherited,994,"﻿. SOFA API: sofa::simulation::IntegrateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateBeginEvent Class Reference . #include <IntegrateBeginEvent.h>. Inheritance diagram for sofa::simulation::IntegrateBeginEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor before performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html:423,Performance,perform,performing,423,"﻿. SOFA API: sofa::simulation::IntegrateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateBeginEvent Class Reference . #include <IntegrateBeginEvent.h>. Inheritance diagram for sofa::simulation::IntegrateBeginEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor before performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html:448,Safety,detect,detection,448,"﻿. SOFA API: sofa::simulation::IntegrateBeginEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateBeginEvent Class Reference . #include <IntegrateBeginEvent.h>. Inheritance diagram for sofa::simulation::IntegrateBeginEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor before performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateBeginEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateBeginEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_begin_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::IntegrateEndEvent Member List . This is the complete list of members for sofa::simulation::IntegrateEndEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::IntegrateEndEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:429,Deployability,integrat,integrate,429,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:429,Integrability,integrat,integrate,429,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:561,Modifiability,inherit,inherited,561,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:739,Modifiability,inherit,inherited,739,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:834,Modifiability,inherit,inherited,834,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:985,Modifiability,inherit,inherited,985,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:414,Performance,perform,performing,414,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html:439,Safety,detect,detection,439,"﻿. SOFA API: sofa::simulation::IntegrateEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::IntegrateEndEvent Class Reference . #include <IntegrateEndEvent.h>. Inheritance diagram for sofa::simulation::IntegrateEndEvent:. [legend]; Detailed Description; Event fired by IntegrateVisitor after performing the integrate detection step. . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Function details. ◆ GetClassName(). static const char* sofa::simulation::IntegrateEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationIntegrateEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_integrate_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::MainTaskSchedulerFactory Member List . This is the complete list of members for sofa::simulation::MainTaskSchedulerFactory, including all inherited members. createInRegistry(const std::string &name)sofa::simulation::MainTaskSchedulerFactorystatic; createInRegistry()sofa::simulation::MainTaskSchedulerFactorystatic; defaultTaskSchedulerType()sofa::simulation::MainTaskSchedulerFactorystatic; getAvailableSchedulers()sofa::simulation::MainTaskSchedulerFactorystatic; instantiate(const std::string &name)sofa::simulation::MainTaskSchedulerFactorystatic; registerScheduler(const std::string &name, const std::function< TaskScheduler *()> &creatorFunc)sofa::simulation::MainTaskSchedulerFactorystatic. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html:535,Energy Efficiency,schedul,scheduler,535,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerFactory Class Reference . #include <MainTaskSchedulerFactory.h>; Detailed Description; A set of static function with the same interface than @TaskSchedulerFactory, working on a single instance of @TaskSchedulerFactory.; The static functions @createInRegistry use the factory to instantiate a task scheduler and store it in @MainTaskSchedulerRegistry . Static Public Member Functions; static bool registerScheduler (const std::string &name, const std::function< TaskScheduler *()> &creatorFunc);  ; static TaskScheduler * instantiate (const std::string &name);  ; static std::set< std::string > getAvailableSchedulers ();  ; static TaskScheduler * createInRegistry (const std::string &name);  ; static TaskScheduler * createInRegistry ();  ; static std::string defaultTaskSchedulerType ();  . Function details. ◆ createInRegistry() [1/2]. TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::createInRegistry ; (; ). static . ◆ createInRegistry() [2/2]. TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::createInRegistry ; (; const std::string & ; name). static . ◆ defaultTaskSchedulerType(). std::string sofa::simulation::MainTaskSchedulerFactory::defaultTaskSchedulerType ; (; ). static . ◆ getAvailableSchedulers(). std::set< std::string > sofa::simulation::MainTaskSchedulerFactory::getAvailableSchedulers ; (; ). static . ◆ instantiate(). TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::instantiate ; (; const std::string & ; name). static . ◆ registerScheduler(). bool sofa::simulation::MainTaskSchedulerFactory::registerScheduler ; (; const std::string & ; name, . const std::function< TaskScheduler *()> & ; creatorFunc . ). static . sofasimulationMainTaskSchedulerFactory; Generated on Mon Nov 11 2024 03:33:58 for SOFA API b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html:364,Integrability,interface,interface,364,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerFactory Class Reference . #include <MainTaskSchedulerFactory.h>; Detailed Description; A set of static function with the same interface than @TaskSchedulerFactory, working on a single instance of @TaskSchedulerFactory.; The static functions @createInRegistry use the factory to instantiate a task scheduler and store it in @MainTaskSchedulerRegistry . Static Public Member Functions; static bool registerScheduler (const std::string &name, const std::function< TaskScheduler *()> &creatorFunc);  ; static TaskScheduler * instantiate (const std::string &name);  ; static std::set< std::string > getAvailableSchedulers ();  ; static TaskScheduler * createInRegistry (const std::string &name);  ; static TaskScheduler * createInRegistry ();  ; static std::string defaultTaskSchedulerType ();  . Function details. ◆ createInRegistry() [1/2]. TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::createInRegistry ; (; ). static . ◆ createInRegistry() [2/2]. TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::createInRegistry ; (; const std::string & ; name). static . ◆ defaultTaskSchedulerType(). std::string sofa::simulation::MainTaskSchedulerFactory::defaultTaskSchedulerType ; (; ). static . ◆ getAvailableSchedulers(). std::set< std::string > sofa::simulation::MainTaskSchedulerFactory::getAvailableSchedulers ; (; ). static . ◆ instantiate(). TaskScheduler * sofa::simulation::MainTaskSchedulerFactory::instantiate ; (; const std::string & ; name). static . ◆ registerScheduler(). bool sofa::simulation::MainTaskSchedulerFactory::registerScheduler ; (; const std::string & ; name, . const std::function< TaskScheduler *()> & ; creatorFunc . ). static . sofasimulationMainTaskSchedulerFactory; Generated on Mon Nov 11 2024 03:33:58 for SOFA API b",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry-members.html:258,Modifiability,inherit,inherited,258,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::MainTaskSchedulerRegistry Member List . This is the complete list of members for sofa::simulation::MainTaskSchedulerRegistry, including all inherited members. addTaskSchedulerToRegistry(TaskScheduler *taskScheduler, const std::string &taskSchedulerName)sofa::simulation::MainTaskSchedulerRegistrystatic; clear()sofa::simulation::MainTaskSchedulerRegistrystatic; getLastInserted()sofa::simulation::MainTaskSchedulerRegistrystatic; getTaskScheduler(const std::string &taskSchedulerName)sofa::simulation::MainTaskSchedulerRegistrystatic; hasScheduler(const std::string &taskSchedulerName)sofa::simulation::MainTaskSchedulerRegistrystatic. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry-members.html:422,Usability,clear,clear,422,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::MainTaskSchedulerRegistry Member List . This is the complete list of members for sofa::simulation::MainTaskSchedulerRegistry, including all inherited members. addTaskSchedulerToRegistry(TaskScheduler *taskScheduler, const std::string &taskSchedulerName)sofa::simulation::MainTaskSchedulerRegistrystatic; clear()sofa::simulation::MainTaskSchedulerRegistrystatic; getLastInserted()sofa::simulation::MainTaskSchedulerRegistrystatic; getTaskScheduler(const std::string &taskSchedulerName)sofa::simulation::MainTaskSchedulerRegistrystatic; hasScheduler(const std::string &taskSchedulerName)sofa::simulation::MainTaskSchedulerRegistrystatic. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html:368,Integrability,interface,interface,368,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerRegistry Class Reference . #include <MainTaskSchedulerRegistry.h>; Detailed Description; A set of static functions with the same interface than a @TaskSchedulerRegistry, working on a single instance of a @TaskSchedulerRegistry. All functions are thread-safe. . Static Public Member Functions; static bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; static TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName);  ; static bool hasScheduler (const std::string &taskSchedulerName);  ; static const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted ();  ; static void clear ();  . Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::MainTaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). static . ◆ clear(). void sofa::simulation::MainTaskSchedulerRegistry::clear ; (; ). static . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::MainTaskSchedulerRegistry::getLastInserted ; (; ). static . ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::MainTaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName). static . ◆ hasScheduler(). bool sofa::simulation::MainTaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName). static . sofasimulationMainTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html:492,Safety,safe,safe,492,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerRegistry Class Reference . #include <MainTaskSchedulerRegistry.h>; Detailed Description; A set of static functions with the same interface than a @TaskSchedulerRegistry, working on a single instance of a @TaskSchedulerRegistry. All functions are thread-safe. . Static Public Member Functions; static bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; static TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName);  ; static bool hasScheduler (const std::string &taskSchedulerName);  ; static const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted ();  ; static void clear ();  . Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::MainTaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). static . ◆ clear(). void sofa::simulation::MainTaskSchedulerRegistry::clear ; (; ). static . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::MainTaskSchedulerRegistry::getLastInserted ; (; ). static . ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::MainTaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName). static . ◆ hasScheduler(). bool sofa::simulation::MainTaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName). static . sofasimulationMainTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html:904,Usability,clear,clear,904,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerRegistry Class Reference . #include <MainTaskSchedulerRegistry.h>; Detailed Description; A set of static functions with the same interface than a @TaskSchedulerRegistry, working on a single instance of a @TaskSchedulerRegistry. All functions are thread-safe. . Static Public Member Functions; static bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; static TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName);  ; static bool hasScheduler (const std::string &taskSchedulerName);  ; static const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted ();  ; static void clear ();  . Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::MainTaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). static . ◆ clear(). void sofa::simulation::MainTaskSchedulerRegistry::clear ; (; ). static . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::MainTaskSchedulerRegistry::getLastInserted ; (; ). static . ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::MainTaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName). static . ◆ hasScheduler(). bool sofa::simulation::MainTaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName). static . sofasimulationMainTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html:1140,Usability,clear,clear,1140,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerRegistry Class Reference . #include <MainTaskSchedulerRegistry.h>; Detailed Description; A set of static functions with the same interface than a @TaskSchedulerRegistry, working on a single instance of a @TaskSchedulerRegistry. All functions are thread-safe. . Static Public Member Functions; static bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; static TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName);  ; static bool hasScheduler (const std::string &taskSchedulerName);  ; static const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted ();  ; static void clear ();  . Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::MainTaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). static . ◆ clear(). void sofa::simulation::MainTaskSchedulerRegistry::clear ; (; ). static . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::MainTaskSchedulerRegistry::getLastInserted ; (; ). static . ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::MainTaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName). static . ◆ hasScheduler(). bool sofa::simulation::MainTaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName). static . sofasimulationMainTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html:1199,Usability,clear,clear,1199,"﻿. SOFA API: sofa::simulation::MainTaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::MainTaskSchedulerRegistry Class Reference . #include <MainTaskSchedulerRegistry.h>; Detailed Description; A set of static functions with the same interface than a @TaskSchedulerRegistry, working on a single instance of a @TaskSchedulerRegistry. All functions are thread-safe. . Static Public Member Functions; static bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; static TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName);  ; static bool hasScheduler (const std::string &taskSchedulerName);  ; static const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted ();  ; static void clear ();  . Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::MainTaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). static . ◆ clear(). void sofa::simulation::MainTaskSchedulerRegistry::clear ; (; ). static . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::MainTaskSchedulerRegistry::getLastInserted ; (; ). static . ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::MainTaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName). static . ◆ hasScheduler(). bool sofa::simulation::MainTaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName). static . sofasimulationMainTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_main_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::MechanicalVisitor Member List . This is the complete list of members for sofa::simulation::MechanicalVisitor, including all inherited members. addNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; addTag(Tag t)sofa::simulation::Visitorinline; BaseMechanicalVisitor(const sofa::core::ExecParams *params)sofa::simulation::BaseMechanicalVisitor; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdConstraintSet(simulation::Node *, sofa::core::behavior::BaseConstraintSet *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSet(VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(simulation::Node *, sofa::core::behavior::ConstraintSolver *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdConstraintSolver(VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMappedMechanicalState(VisitorContext *ctx, sofa::core::behavior::BaseMechanicalState *mm)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalMapping(VisitorContext *ctx, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; bwdMechanicalState(simulation::Node *, sofa::core::behavior::BaseMechanicalState *)sofa::simulation::BaseMechanicalVisitorvir",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor-members.html:9968,Testability,test,testTags,9968,"simulation::BaseMechanicalVisitorprotectedvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::BaseMechanicalVisitorvirtual; processNodeTopDown(simulation::Node *node, LocalStorage *stack) override=deletesofa::simulation::BaseMechanicalVisitorvirtual; readNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::BaseMechanicalVisitorprotected; rootDatasofa::simulation::BaseMechanicalVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setNodeData(simulation::Node *, SReal *, const SReal *)=deletesofa::simulation::BaseMechanicalVisitorvirtual; setTags(const TagSet &t)sofa::simulation::Visitorinline; stopAtMechanicalMapping(simulation::Node *, sofa::core::BaseMapping *map)sofa::simulation::BaseMechanicalVisitorvirtual; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; writeNodeData() const =deletesofa::simulation::BaseMechanicalVisitorvirtual; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:464,Modifiability,inherit,inherited,464,"﻿. SOFA API: sofa::simulation::MechanicalVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::MechanicalVisitor Class Reference . #include <MechanicalVisitor.h>. Inheritance diagram for sofa::simulation::MechanicalVisitor:. [legend]. Protected Attributes; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getClassName () const override;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:688,Modifiability,inherit,inherited,688,"﻿. SOFA API: sofa::simulation::MechanicalVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::MechanicalVisitor Class Reference . #include <MechanicalVisitor.h>. Inheritance diagram for sofa::simulation::MechanicalVisitor:. [legend]. Protected Attributes; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getClassName () const override;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:893,Modifiability,inherit,inherited,893,"nctions |; List of all members . sofa::simulation::MechanicalVisitor Class Reference . #include <MechanicalVisitor.h>. Inheritance diagram for sofa::simulation::MechanicalVisitor:. [legend]. Protected Attributes; const sofa::core::MechanicalParams * mparams;  ;  Protected Attributes inherited from sofa::simulation::BaseMechanicalVisitor; simulation::Node * root;  root node from which the visitor was executed More...;  ; SReal * rootData { nullptr };  data for root node More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVisitor (const sofa::core::MechanicalParams *m_mparams);  ;  Public Member Functions inherited from sofa::simulation::BaseMechanicalVisitor;  BaseMechanicalVisitor (const sofa::core::ExecParams *params);  ; virtual bool readNodeData () const =delete;  ; virtual bool writeNodeData () const =delete;  ; virtual void setNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; virtual void addNodeData (simulation::Node *, SReal *, const SReal *)=delete;  ; const char * getClassName () const override;  ; const char * getCategoryName () const override;  ; virtual bool stopAtMechanicalMapping (simulation::Node *, sofa::core::BaseMapping *map);  ; Result processNodeTopDown (simulation::Node *node) override;  This method calls the fwd* methods during the forward traversal. You typically do not overload it. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *stack) override=delete;  ; virtual Result fwdOdeSolver (simulation::Node *, sofa::core::behavior::OdeSolver *);  Process the OdeSolver. More...;  ; virtual Result fwdOdeSolver (VisitorContext *ctx, sofa::core::behavior::OdeSolver *solver);  Process the OdeSolver. More...;  ; virtual Result fwdConstraintSolver (simulation::Node *, sofa::core::behavior::ConstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual Result fwdConstraintSolver (VisitorContext *c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:8000,Modifiability,inherit,inherited,8000,"onstraintSolver *);  Process the ConstraintSolver. More...;  ; virtual void bwdConstraintSolver (VisitorContext *ctx, sofa::core::behavior::ConstraintSolver *solver);  Process the ConstraintSolver. More...;  ; virtual void bwdProjectiveConstraintSet (simulation::Node *, sofa::core::behavior::BaseProjectiveConstraintSet *);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:9912,Modifiability,inherit,inherited,9912,"core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:10119,Modifiability,inherit,inherited,10119,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ mparams. const sofa::core::MechanicalParams* sofa::simulation::MechanicalVisitor::mparams. protected . Constructor details. ◆ MechanicalVisitor(). sofa::simulation::MechanicalVisitor::Mechanica",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:10370,Modifiability,inherit,inherited,10370,"al Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ mparams. const sofa::core::MechanicalParams* sofa::simulation::MechanicalVisitor::mparams. protected . Constructor details. ◆ MechanicalVisitor(). sofa::simulation::MechanicalVisitor::Mechanica",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:10056,Security,access,access,10056,"ation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::BaseMechanicalVisitor; virtual Result processNodeTopDown (simulation::Node *node, VisitorContext *ctx);  ; virtual void processNodeBottomUp (simulation::Node *node, VisitorContext *ctx);  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::st",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html:8414,Testability,test,testTags,8414," Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (simulation::Node *, sofa::core::behavior::BaseConstraintSet *);  Process all the BaseConstraintSet. More...;  ; virtual void bwdProjectiveConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseProjectiveConstraintSet *c);  Process all the BaseProjectiveConstraintSet. More...;  ; virtual void bwdConstraintSet (VisitorContext *ctx, sofa::core::behavior::BaseConstraintSet *c);  Process all the BaseConstraintSet. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorTyp",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::MechanicalVPrintVisitor Member List . This is the complete list of members for sofa::simulation::MechanicalVPrintVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Vis",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor-members.html:4051,Testability,test,testTags,4051,"virtual; MechanicalVPrintVisitor(const core::ExecParams *params, sofa::core::ConstMultiVecId v, std::ostream &=std::cerr)sofa::simulation::MechanicalVPrintVisitor; NO_REPETITION enum valuesofa::simulation::Visitor; out_sofa::simulation::MechanicalVPrintVisitorprotected; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::MechanicalVPrintVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; v_sofa::simulation::MechanicalVPrintVisitorprotected; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html:537,Modifiability,inherit,inherited,537,"﻿. SOFA API: sofa::simulation::MechanicalVPrintVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::MechanicalVPrintVisitor Class Reference . #include <MechanicalVPrintVisitor.h>. Inheritance diagram for sofa::simulation::MechanicalVPrintVisitor:. [legend]; Detailed Description; Print a vector . Protected Attributes; sofa::core::ConstMultiVecId v_;  ; std::ostream & out_;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVPrintVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId v, std::ostream &=std::cerr);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type"")); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html:1023,Modifiability,inherit,inherited,1023,"tected Attributes |; Public Member Functions |; List of all members . sofa::simulation::MechanicalVPrintVisitor Class Reference . #include <MechanicalVPrintVisitor.h>. Inheritance diagram for sofa::simulation::MechanicalVPrintVisitor:. [legend]; Detailed Description; Print a vector . Protected Attributes; sofa::core::ConstMultiVecId v_;  ; std::ostream & out_;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVPrintVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId v, std::ostream &=std::cerr);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html:3326,Modifiability,inherit,inherited,3326,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html:3533,Modifiability,inherit,inherited,3533,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ out_. std::ostream& sofa::simulation::MechanicalVPrintVisitor::out_. protected . ◆ v_. sofa::core::ConstMultiVecId sofa::simulation::MechanicalVPrintVisitor::v_. protected . Constructor details. ◆ MechanicalVPrintVisitor(). sofa::simulation::MechanicalVPrintVisitor::MechanicalVPrintVisitor ; (; const core::ExecParams ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html:3470,Security,access,access,3470,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html:1657,Testability,test,testTags,1657,"const core::ExecParams *params, sofa::core::ConstMultiVecId v, std::ostream &=std::cerr);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor-members.html:284,Modifiability,inherit,inherited,284,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor Member List . This is the complete list of members for sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; count_sofa::simulation::MechanicalVPrintWithElapsedTimeVisitorprotected; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor-members.html:4246,Testability,test,testTags,4246,"ation::MechanicalVPrintWithElapsedTimeVisitor; NO_REPETITION enum valuesofa::simulation::Visitor; out_sofa::simulation::MechanicalVPrintWithElapsedTimeVisitorprotected; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::MechanicalVPrintWithElapsedTimeVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; time_sofa::simulation::MechanicalVPrintWithElapsedTimeVisitorprotected; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; v_sofa::simulation::MechanicalVPrintWithElapsedTimeVisitorprotected; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html:706,Modifiability,inherit,inherited,706,"﻿. SOFA API: sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor Class Reference . #include <MechanicalVPrintVisitor.h>. Inheritance diagram for sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor:. [legend]; Detailed Description; Print a vector with an elapsed time, useful to compare convergence in odeSolver in function of time . Protected Attributes; sofa::core::ConstMultiVecId v_;  ; unsigned count_;  ; unsigned time_;  ; std::ostream & out_;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVPrintWithElapsedTimeVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId vid, unsigned time, std::ostream &=std::cerr);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html:1224,Modifiability,inherit,inherited,1224,"eritance diagram for sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor:. [legend]; Detailed Description; Print a vector with an elapsed time, useful to compare convergence in odeSolver in function of time . Protected Attributes; sofa::core::ConstMultiVecId v_;  ; unsigned count_;  ; unsigned time_;  ; std::ostream & out_;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  MechanicalVPrintWithElapsedTimeVisitor (const core::ExecParams *params, sofa::core::ConstMultiVecId vid, unsigned time, std::ostream &=std::cerr);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html:3527,Modifiability,inherit,inherited,3527,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html:3734,Modifiability,inherit,inherited,3734,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ count_. unsigned sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor::count_. protected . ◆ out_. std::ostream& sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor::out_. protected . ◆ time_. unsigned sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor::time_. protected . ◆ v_. sofa::core::ConstMultiVec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html:3671,Security,access,access,3671,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html:1858,Testability,test,testTags,1858,"arams *params, sofa::core::ConstMultiVecId vid, unsigned time, std::ostream &=std::cerr);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mechanical_v_print_with_elapsed_time_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mutation_listener-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::MutationListener Member List . This is the complete list of members for sofa::simulation::MutationListener, including all inherited members. onBeginAddChild(Node *parent, Node *child)sofa::simulation::MutationListenervirtual; onBeginAddObject(Node *parent, core::objectmodel::BaseObject *object)sofa::simulation::MutationListenervirtual; onBeginAddSlave(core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave)sofa::simulation::MutationListenervirtual; onBeginRemoveChild(Node *parent, Node *child)sofa::simulation::MutationListenervirtual; onBeginRemoveObject(Node *parent, core::objectmodel::BaseObject *object)sofa::simulation::MutationListenervirtual; onBeginRemoveSlave(core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave)sofa::simulation::MutationListenervirtual; onEndAddChild(Node *parent, Node *child)sofa::simulation::MutationListenervirtual; onEndAddObject(Node *parent, core::objectmodel::BaseObject *object)sofa::simulation::MutationListenervirtual; onEndAddSlave(core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave)sofa::simulation::MutationListenervirtual; onEndRemoveChild(Node *parent, Node *child)sofa::simulation::MutationListenervirtual; onEndRemoveObject(Node *parent, core::objectmodel::BaseObject *object)sofa::simulation::MutationListenervirtual; onEndRemoveSlave(core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave)sofa::simulation::MutationListenervirtual; sleepChanged(Node *node)sofa::simulation::MutationListenervirtual; ~MutationListener()sofa::simulation::MutationListenervirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_mutation_listener-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_mutation_listener-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:2478,Deployability,configurat,configurationSettingsofa,2478,"back(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName)=0sofa::simulation::Nodepure virtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; debug_sofa::simulation::Nodeprotected; detachFromGraph()=0sofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:20488,Deployability,update,updateContext,20488,"text(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; setSleeping(bool val) overridesofa::simulation::Nodevirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext()sofa::simulation::Nodevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext()sofa::simulation::Nodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VisitorScheduler classsofa::simulation::Nodefriend; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:20534,Deployability,update,updateLinks,20534,"odel::BaseNodeprotected; setSleeping(bool val) overridesofa::simulation::Nodevirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext()sofa::simulation::Nodevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext()sofa::simulation::Nodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VisitorScheduler classsofa::simulation::Nodefriend; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~Node() overridesofa::simulation::Node",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:20604,Deployability,update,updateSimulationContext,20604,"otected; setSleeping(bool val) overridesofa::simulation::Nodevirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext()sofa::simulation::Nodevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext()sofa::simulation::Nodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VisitorScheduler classsofa::simulation::Nodefriend; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~Node() overridesofa::simulation::Nodeprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:20660,Deployability,update,updateVisualContext,20660,"otected; setSleeping(bool val) overridesofa::simulation::Nodevirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext()sofa::simulation::Nodevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext()sofa::simulation::Nodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VisitorScheduler classsofa::simulation::Nodefriend; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~Node() overridesofa::simulation::Nodeprotectedvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:216,Modifiability,inherit,inherited,216,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Node Member List . This is the complete list of members for sofa::simulation::Node, including all inherited members. _contextsofa::simulation::Nodeprotected; actionStacksofa::simulation::Nodeprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node) finalsofa::simulation::Nodevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addListener(MutationListener *obj)sofa::simulation::Nodevirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) finalsofa::simulation::Nodevirtual; sofa::core::objectmodel::Context::addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:2478,Modifiability,config,configurationSettingsofa,2478,"back(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName)=0sofa::simulation::Nodepure virtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; debug_sofa::simulation::Nodeprotected; detachFromGraph()=0sofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:900,Testability,log,logging,900," _contextsofa::simulation::Nodeprotected; actionStacksofa::simulation::Nodeprotected; addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addChild(BaseNode::SPtr node) finalsofa::simulation::Nodevirtual; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addListener(MutationListener *obj)sofa::simulation::Nodevirtual; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addObject(sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) finalsofa::simulation::Nodevirtual; sofa::core::objectmodel::Context::addObject(sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd)sofa::core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objec",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:2858,Testability,log,logging,2858,"ext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName)=0sofa::simulation::Nodepure virtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; debug_sofa::simulation::Nodeprotected; detachFromGraph()=0sofa::core::objectmodel::BaseNodepure virtual; DisplayFlags typedefsofa::simulation::Node; doAddChild(BaseNode::SPtr node)=0sofa::simulation::Nodepure virtual; doAddObject(sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd)sofa::simulation::Nodeprotectedvirtual; doExecuteVisitor(Visitor *",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:2900,Testability,log,logging,2900,"rotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName)=0sofa::simulation::Nodepure virtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingsofa::core::objectmodel::Context; d_messageLogCountsofa::core::objectmodel::Basemutable; debug_sofa::simulation::Nodeprotected; detachFromGraph()=0sofa::core::objectmodel::BaseNodepure virtual; DisplayFlags typedefsofa::simulation::Node; doAddChild(BaseNode::SPtr node)=0sofa::simulation::Nodepure virtual; doAddObject(sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd)sofa::simulation::Nodeprotectedvirtual; doExecuteVisitor(Visitor *action, bool precomputedOrder=false)=0sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:8892,Testability,log,logging,8892,text() const overridesofa::simulation::Nodevirtual; getContext() overridesofa::simulation::Nodevirtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDebug() constsofa::simulation::Node; getDefault()sofa::core::objectmodel::BaseContextstatic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getDt() const overridesofa::core::objectmodel::Contextvirtual; getFirstParent() const =0sofa::core::objectmodel::BaseNodepure virtual; getGravity() const overridesofa::core::objectmodel::Contextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() const overridesofa::simulation::Nodevirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) const overridesofa::simulation::Nodevirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbParents() const =0sofa::core::objectmodel::BaseNodepure virtual; getNodeInGraph(const std::string &absolutePath) constsofa::simulation::Node; getNodeObject(Object *&result)sofa::simulation::Nodeinline; getNodeObject()sofa::simulation::Nodeinline; getNodeObjects(Container *list)sofa::simulation::Nodeinline; getNodeObjects(Container *result)sofa::simulation::Nodeinline; getNodeObjects(Container &result)sofa::,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:8934,Testability,log,logging,8934,evirtual; getContext() overridesofa::simulation::Nodevirtual; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDebug() constsofa::simulation::Node; getDefault()sofa::core::objectmodel::BaseContextstatic; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getDt() const overridesofa::core::objectmodel::Contextvirtual; getFirstParent() const =0sofa::core::objectmodel::BaseNodepure virtual; getGravity() const overridesofa::core::objectmodel::Contextvirtual; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMass() constsofa::core::objectmodel::BaseContextvirtual; getMechanicalState() const overridesofa::simulation::Nodevirtual; getMeshTopology(SearchDirection dir=SearchUp) constsofa::core::objectmodel::BaseContextvirtual; getMeshTopologyLink(SearchDirection dir=SearchUp) const overridesofa::simulation::Nodevirtual; getName() constsofa::core::objectmodel::Baseinline; getNameHelper()sofa::core::objectmodel::BaseContextinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNbParents() const =0sofa::core::objectmodel::BaseNodepure virtual; getNodeInGraph(const std::string &absolutePath) constsofa::simulation::Node; getNodeObject(Object *&result)sofa::simulation::Nodeinline; getNodeObject()sofa::simulation::Nodeinline; getNodeObjects(Container *list)sofa::simulation::Nodeinline; getNodeObjects(Container *result)sofa::simulation::Nodeinline; getNodeObjects(Container &result)sofa::simulation::Nodeinline; getNodeObjects()so,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:20551,Testability,log,logErrors,20551,"otected; setSleeping(bool val) overridesofa::simulation::Nodevirtual; setTime(SReal t)sofa::core::objectmodel::Contextvirtual; setTopology(BaseObject *)sofa::core::objectmodel::BaseContextinlinevirtual; shaderssofa::simulation::Node; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; Single typedefsofa::simulation::Node; SOFA_ABSTRACT_CLASS(BaseNode, Base)sofa::core::objectmodel::BaseNode; SOFA_ABSTRACT_CLASS2(Node, BaseNode, Context)sofa::simulation::Node; SOFA_CLASS(Context, BaseContext)sofa::core::objectmodel::Context; sofa::core::objectmodel::BaseContext::SOFA_CLASS(BaseContext, Base)sofa::core::objectmodel::BaseContext; solversofa::simulation::Node; SPtr typedefsofa::core::objectmodel::Base; statesofa::simulation::Node; time_sofa::core::objectmodel::Context; topologysofa::simulation::Node; topologyObjectsofa::simulation::Node; unsortedsofa::simulation::Node; updateContext()sofa::simulation::Nodevirtual; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; updateSimulationContext()sofa::simulation::Nodevirtual; updateVisualContext()sofa::simulation::Nodevirtual; Vec3 typedefsofa::core::objectmodel::BaseContext; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VisitorScheduler classsofa::simulation::Nodefriend; visualLoopsofa::simulation::Node; visualManagersofa::simulation::Node; visualModelsofa::simulation::Node; worldGravity_sofa::core::objectmodel::Context; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseContext() overridesofa::core::objectmodel::BaseContextprotected; ~BaseNode() overridesofa::core::objectmodel::BaseNodeprotected; ~Context() overridesofa::core::objectmodel::Contextinlineprotectedvirtual; ~Node() overridesofa::simulation::Nodeprotectedvirtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:2257,Usability,clear,clearLoggedMessages,2257,"core::objectmodel::BaseContextinlinevirtual; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName)=0sofa::simulation::Nodepure virtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html:2315,Usability,clear,clearObjectContext,2315,"Callback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; animate_sofa::core::objectmodel::Context; animationManagersofa::simulation::Node; Base()sofa::core::objectmodel::Baseprotected; BaseContext()sofa::core::objectmodel::BaseContextprotected; BaseNode()sofa::core::objectmodel::BaseNodeprotected; BaseType typedefsofa::core::objectmodel::Base; behaviorModelsofa::simulation::Node; canChangeSleepingState() const overridesofa::core::objectmodel::Contextvirtual; childsofa::simulation::Node; ChildIterator typedefsofa::simulation::Node; Children typedefsofa::core::objectmodel::BaseNode; clearLoggedMessages() constsofa::core::objectmodel::Base; clearObjectContext(BaseObject::SPtr obj)sofa::core::objectmodel::BaseNodeprotected; collisionModelsofa::simulation::Node; collisionPipelinesofa::simulation::Node; configurationSettingsofa::simulation::Node; constraintSetsofa::simulation::Node; constraintSolversofa::simulation::Node; Context()sofa::core::objectmodel::Contextprotected; contextObjectsofa::simulation::Node; copyContext(const Context &c)sofa::core::objectmodel::Context; copySimulationContext(const Context &c)sofa::core::objectmodel::Context; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg)sofa::simulation::Nodestatic; create(const std::string &name)sofa::simulation::Nodestatic; createChild(const std::string &nodeName)=0sofa::simulation::Nodepure virtual; d_canChangeSleepingStatesofa::core::objectmodel::Context; d_componentStatesofa::core::objectmodel::Base; d_isSleepingso",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23395,Availability,down,down,23395,"ontext, Base);  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23581,Availability,down,down,23581,"logy (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23774,Availability,down,down,23774," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23988,Availability,down,down,23988,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24212,Availability,down,down,24212,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24443,Availability,down,down,24443,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24669,Availability,down,down,24669," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24905,Availability,down,down,24905,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25148,Availability,down,down,25148," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25858,Availability,down,down,25858,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:26117,Availability,down,down,26117,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:26388,Availability,down,down,26388,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; template<class RealObject >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:41640,Availability,down,down,41640,">() ) { ... } . ◆ getNodeObjects() [2/4]. template<class Container > . Container& sofa::simulation::Node::getNodeObjects ; (; Container & ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getNodeObjects() [3/4]. template<class Object , class Container > . void sofa::simulation::Node::getNodeObjects ; (; Container * ; list). inline . List all objects of this node deriving from a given class. . ◆ getNodeObjects() [4/4]. template<class Container > . Container* sofa::simulation::Node::getNodeObjects ; (; Container * ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getObject() [1/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:42572,Availability,down,down,42572,"down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:43286,Availability,down,down,43286,"tObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getOdeSolver(). core::behavior::OdeSolver * sofa::simulation::Node::getOdeSolver ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getRootContext(). BaseContext* sofa::simulation::Node::getRootContext ; (; ); const. inlineoverridevirtual . Get the root context of the graph. ; Reimplemented from so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:43810,Availability,down,down,43810,"ame); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getOdeSolver(). core::behavior::OdeSolver * sofa::simulation::Node::getOdeSolver ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getRootContext(). BaseContext* sofa::simulation::Node::getRootContext ; (; ); const. inlineoverridevirtual . Get the root context of the graph. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getShader() [1/2]. core::visual::Shader * sofa::simulation::Node::getShader ; (; ); const. overridevirtual . Shader. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getShader() [2/2]. core::visual::Shader * sofa::simulation::Node::getShader ; (; const sofa::core::objectmodel::TagSet & ; t); const. virtual . ◆ getState(). core::BaseState * sofa::simulation::Node::getState ; (; ); const. overridevirtual . Degrees-of-Freedom. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:1647,Deployability,configurat,configurationSetting,1647," Public Attributes; NodeSequence< Node, true > child;  ; NodeSequence< sofa::core::objectmodel::BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::behavior::ConstraintSolver > constraintSolver;  ; NodeSequence< sofa::core::behavior::BaseLinearSolver > linearSolver;  ; NodeSequence< sofa::core::topology::BaseTopologyObject > topologyObject;  ; NodeSequence< sofa::core::behavior::BaseForceField > forceField;  ; NodeSequence< sofa::core::behavior::BaseInteractionForceField > interactionForceField;  ; NodeSequence< sofa::core::behavior::BaseProjectiveConstraintSet > projectiveConstraintSet;  ; NodeSequence< sofa::core::behavior::BaseConstraintSet > constraintSet;  ; NodeSequence< sofa::core::objectmodel::ContextObject > contextObject;  ; NodeSequence< sofa::core::objectmodel::ConfigurationSetting > configurationSetting;  ; NodeSequence< sofa::core::visual::Shader > shaders;  ; NodeSequence< sofa::core::visual::VisualModel > visualModel;  ; NodeSequence< sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:5719,Deployability,update,updateContext,5719,"r createChild (const std::string &nodeName)=0;  Create, add, then return the new child of this Node. More...;  ; virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the scene graph matching the given absolute path. More...;  ; Children getChildren () const override;  Get children nodes. More...;  ; BaseContext * getRootContext () const override;  Get the root context of the graph. More...;  ; Node * setDebug (bool);  ; bool getDebug () const;  ; void printComponents ();  ; const BaseContext * getContext () const override;  Get this node context. More...;  ; BaseContext * getContext () override;  Get this node context. More...;  ; virtual void updateContext ();  Update the whole context values, based on parent and local ContextObjects. More...;  ; virtual void updateSimulationContext ();  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; virtual void initVisualContext ();  Called during initialization to correctly propagate the visual context to the children. More...;  ; void propagateEvent (const sofa::core::ExecParams *params, sofa::core::objectmodel::Event *event) override;  Propagate an event. More...;  ; virtual void updateVisualContext ();  Update the visual context values, based on parent and local ContextObjects. More...;  ; virtual void initialize ();  Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. More...;  ; virtual void setDefaultVisualContextValue ();  Called after initialization to set the default value of the visual context. More...;  ; virtual Node * findCommonParent (simulation::Node *node2)=0;  return the smallest common parent betw",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:5838,Deployability,update,updateSimulationContext,5838,"virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the scene graph matching the given absolute path. More...;  ; Children getChildren () const override;  Get children nodes. More...;  ; BaseContext * getRootContext () const override;  Get the root context of the graph. More...;  ; Node * setDebug (bool);  ; bool getDebug () const;  ; void printComponents ();  ; const BaseContext * getContext () const override;  Get this node context. More...;  ; BaseContext * getContext () override;  Get this node context. More...;  ; virtual void updateContext ();  Update the whole context values, based on parent and local ContextObjects. More...;  ; virtual void updateSimulationContext ();  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; virtual void initVisualContext ();  Called during initialization to correctly propagate the visual context to the children. More...;  ; void propagateEvent (const sofa::core::ExecParams *params, sofa::core::objectmodel::Event *event) override;  Propagate an event. More...;  ; virtual void updateVisualContext ();  Update the visual context values, based on parent and local ContextObjects. More...;  ; virtual void initialize ();  Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. More...;  ; virtual void setDefaultVisualContextValue ();  Called after initialization to set the default value of the visual context. More...;  ; virtual Node * findCommonParent (simulation::Node *node2)=0;  return the smallest common parent between this and node2 (returns nullptr if separated sub-graphes) More...;  ; void setSleeping (bool val) override; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:6267,Deployability,update,updateVisualContext,6267,"hildren () const override;  Get children nodes. More...;  ; BaseContext * getRootContext () const override;  Get the root context of the graph. More...;  ; Node * setDebug (bool);  ; bool getDebug () const;  ; void printComponents ();  ; const BaseContext * getContext () const override;  Get this node context. More...;  ; BaseContext * getContext () override;  Get this node context. More...;  ; virtual void updateContext ();  Update the whole context values, based on parent and local ContextObjects. More...;  ; virtual void updateSimulationContext ();  Update the simulation context values(gravity, time...), based on parent and local ContextObjects. More...;  ; virtual void initVisualContext ();  Called during initialization to correctly propagate the visual context to the children. More...;  ; void propagateEvent (const sofa::core::ExecParams *params, sofa::core::objectmodel::Event *event) override;  Propagate an event. More...;  ; virtual void updateVisualContext ();  Update the visual context values, based on parent and local ContextObjects. More...;  ; virtual void initialize ();  Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. More...;  ; virtual void setDefaultVisualContextValue ();  Called after initialization to set the default value of the visual context. More...;  ; virtual Node * findCommonParent (simulation::Node *node2)=0;  return the smallest common parent between this and node2 (returns nullptr if separated sub-graphes) More...;  ; void setSleeping (bool val) override;  override context setSleeping to add notification. More...;  ; virtual void addListener (MutationListener *obj);  ; virtual void removeListener (MutationListener *obj);  ; High-level interface; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void init (const sofa::core::ExecParams *params);  Ini",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:18785,Deployability,update,updateLinks,18785,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:30390,Deployability,configurat,configurationSetting,30390,"r method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behavior::BaseConstraintSet> sofa::simulation::Node::constraintSet. ◆ constraintSolver. NodeSequence<sofa::core::behavior::ConstraintSolver> sofa::simulation::Node::constraintSolver. ◆ contextObject. NodeSequence<sofa::core::objectmodel::ContextObject> sofa::simulation::Node::contextObject. ◆ debug_. bool sofa::simulation::Node::debug_. protected . ◆ forceField. NodeSequence<sofa::core::behavior::BaseForceField> sofa::simulation::Node::forceField. ◆ initialized. bool sofa::simulation::Node::initialized. protected . ◆ interactionForceField. NodeSequence<sofa::core::behavior::BaseInteractionForceField> sofa::simulation::Node::interactionForceField. ◆ linearSolver. NodeSequence<sofa::core::behavior::BaseLinearSolver> sofa::simulation::Node::linearSolver. ◆ listener. type::vector<MutationListener*> sofa::simulation::Node::listener.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:30496,Deployability,configurat,configurationSetting,30496,"ns inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behavior::BaseConstraintSet> sofa::simulation::Node::constraintSet. ◆ constraintSolver. NodeSequence<sofa::core::behavior::ConstraintSolver> sofa::simulation::Node::constraintSolver. ◆ contextObject. NodeSequence<sofa::core::objectmodel::ContextObject> sofa::simulation::Node::contextObject. ◆ debug_. bool sofa::simulation::Node::debug_. protected . ◆ forceField. NodeSequence<sofa::core::behavior::BaseForceField> sofa::simulation::Node::forceField. ◆ initialized. bool sofa::simulation::Node::initialized. protected . ◆ interactionForceField. NodeSequence<sofa::core::behavior::BaseInteractionForceField> sofa::simulation::Node::interactionForceField. ◆ linearSolver. NodeSequence<sofa::core::behavior::BaseLinearSolver> sofa::simulation::Node::linearSolver. ◆ listener. type::vector<MutationListener*> sofa::simulation::Node::listener. protected . ◆ mapping. NodeSequence<sofa::core::BaseMapping> sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:50678,Deployability,update,updateContext,50678," depend on it. . ◆ removeChild(). void sofa::simulation::Node::removeChild ; (; BaseNode::SPtr ; node). finalvirtual . Remove a child node. ; Remove a child. ; Implements sofa::core::objectmodel::BaseNode. ◆ removeControllers(). void sofa::simulation::Node::removeControllers ; (; ). virtual . Remove odesolvers and mastercontroler. . ◆ removeListener(). void sofa::simulation::Node::removeListener ; (; MutationListener * ; obj). virtual . ◆ removeObject(). bool sofa::simulation::Node::removeObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj). finalvirtual . Remove an object. ; Implements sofa::core::objectmodel::BaseNode. ◆ setDebug(). Node * sofa::simulation::Node::setDebug ; (; bool ; b). ◆ setDefaultVisualContextValue(). void sofa::simulation::Node::setDefaultVisualContextValue ; (; ). virtual . Called after initialization to set the default value of the visual context. . ◆ setSleeping(). void sofa::simulation::Node::setSleeping ; (; bool ; val). overridevirtual . override context setSleeping to add notification. ; Reimplemented from sofa::core::objectmodel::Context. ◆ SOFA_ABSTRACT_CLASS2(). sofa::simulation::Node::SOFA_ABSTRACT_CLASS2 ; (; Node ; , . BaseNode ; , . Context ;  . ). ◆ updateContext(). void sofa::simulation::Node::updateContext ; (; ). virtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateSimulationContext(). void sofa::simulation::Node::updateSimulationContext ; (; ). virtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateVisualContext(). void sofa::simulation::Node::updateVisualContext ; (; ). virtual . Update the visual context values, based on parent and local ContextObjects. . Related details. ◆ VisitorScheduler. friend class VisitorScheduler. friend . sofasimulationNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:50724,Deployability,update,updateContext,50724," depend on it. . ◆ removeChild(). void sofa::simulation::Node::removeChild ; (; BaseNode::SPtr ; node). finalvirtual . Remove a child node. ; Remove a child. ; Implements sofa::core::objectmodel::BaseNode. ◆ removeControllers(). void sofa::simulation::Node::removeControllers ; (; ). virtual . Remove odesolvers and mastercontroler. . ◆ removeListener(). void sofa::simulation::Node::removeListener ; (; MutationListener * ; obj). virtual . ◆ removeObject(). bool sofa::simulation::Node::removeObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj). finalvirtual . Remove an object. ; Implements sofa::core::objectmodel::BaseNode. ◆ setDebug(). Node * sofa::simulation::Node::setDebug ; (; bool ; b). ◆ setDefaultVisualContextValue(). void sofa::simulation::Node::setDefaultVisualContextValue ; (; ). virtual . Called after initialization to set the default value of the visual context. . ◆ setSleeping(). void sofa::simulation::Node::setSleeping ; (; bool ; val). overridevirtual . override context setSleeping to add notification. ; Reimplemented from sofa::core::objectmodel::Context. ◆ SOFA_ABSTRACT_CLASS2(). sofa::simulation::Node::SOFA_ABSTRACT_CLASS2 ; (; Node ; , . BaseNode ; , . Context ;  . ). ◆ updateContext(). void sofa::simulation::Node::updateContext ; (; ). virtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateSimulationContext(). void sofa::simulation::Node::updateSimulationContext ; (; ). virtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateVisualContext(). void sofa::simulation::Node::updateVisualContext ; (; ). virtual . Update the visual context values, based on parent and local ContextObjects. . Related details. ◆ VisitorScheduler. friend class VisitorScheduler. friend . sofasimulationNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:50886,Deployability,update,updateSimulationContext,50886," depend on it. . ◆ removeChild(). void sofa::simulation::Node::removeChild ; (; BaseNode::SPtr ; node). finalvirtual . Remove a child node. ; Remove a child. ; Implements sofa::core::objectmodel::BaseNode. ◆ removeControllers(). void sofa::simulation::Node::removeControllers ; (; ). virtual . Remove odesolvers and mastercontroler. . ◆ removeListener(). void sofa::simulation::Node::removeListener ; (; MutationListener * ; obj). virtual . ◆ removeObject(). bool sofa::simulation::Node::removeObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj). finalvirtual . Remove an object. ; Implements sofa::core::objectmodel::BaseNode. ◆ setDebug(). Node * sofa::simulation::Node::setDebug ; (; bool ; b). ◆ setDefaultVisualContextValue(). void sofa::simulation::Node::setDefaultVisualContextValue ; (; ). virtual . Called after initialization to set the default value of the visual context. . ◆ setSleeping(). void sofa::simulation::Node::setSleeping ; (; bool ; val). overridevirtual . override context setSleeping to add notification. ; Reimplemented from sofa::core::objectmodel::Context. ◆ SOFA_ABSTRACT_CLASS2(). sofa::simulation::Node::SOFA_ABSTRACT_CLASS2 ; (; Node ; , . BaseNode ; , . Context ;  . ). ◆ updateContext(). void sofa::simulation::Node::updateContext ; (; ). virtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateSimulationContext(). void sofa::simulation::Node::updateSimulationContext ; (; ). virtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateVisualContext(). void sofa::simulation::Node::updateVisualContext ; (; ). virtual . Update the visual context values, based on parent and local ContextObjects. . Related details. ◆ VisitorScheduler. friend class VisitorScheduler. friend . sofasimulationNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:50942,Deployability,update,updateSimulationContext,50942," depend on it. . ◆ removeChild(). void sofa::simulation::Node::removeChild ; (; BaseNode::SPtr ; node). finalvirtual . Remove a child node. ; Remove a child. ; Implements sofa::core::objectmodel::BaseNode. ◆ removeControllers(). void sofa::simulation::Node::removeControllers ; (; ). virtual . Remove odesolvers and mastercontroler. . ◆ removeListener(). void sofa::simulation::Node::removeListener ; (; MutationListener * ; obj). virtual . ◆ removeObject(). bool sofa::simulation::Node::removeObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj). finalvirtual . Remove an object. ; Implements sofa::core::objectmodel::BaseNode. ◆ setDebug(). Node * sofa::simulation::Node::setDebug ; (; bool ; b). ◆ setDefaultVisualContextValue(). void sofa::simulation::Node::setDefaultVisualContextValue ; (; ). virtual . Called after initialization to set the default value of the visual context. . ◆ setSleeping(). void sofa::simulation::Node::setSleeping ; (; bool ; val). overridevirtual . override context setSleeping to add notification. ; Reimplemented from sofa::core::objectmodel::Context. ◆ SOFA_ABSTRACT_CLASS2(). sofa::simulation::Node::SOFA_ABSTRACT_CLASS2 ; (; Node ; , . BaseNode ; , . Context ;  . ). ◆ updateContext(). void sofa::simulation::Node::updateContext ; (; ). virtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateSimulationContext(). void sofa::simulation::Node::updateSimulationContext ; (; ). virtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateVisualContext(). void sofa::simulation::Node::updateVisualContext ; (; ). virtual . Update the visual context values, based on parent and local ContextObjects. . Related details. ◆ VisitorScheduler. friend class VisitorScheduler. friend . sofasimulationNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:51137,Deployability,update,updateVisualContext,51137," depend on it. . ◆ removeChild(). void sofa::simulation::Node::removeChild ; (; BaseNode::SPtr ; node). finalvirtual . Remove a child node. ; Remove a child. ; Implements sofa::core::objectmodel::BaseNode. ◆ removeControllers(). void sofa::simulation::Node::removeControllers ; (; ). virtual . Remove odesolvers and mastercontroler. . ◆ removeListener(). void sofa::simulation::Node::removeListener ; (; MutationListener * ; obj). virtual . ◆ removeObject(). bool sofa::simulation::Node::removeObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj). finalvirtual . Remove an object. ; Implements sofa::core::objectmodel::BaseNode. ◆ setDebug(). Node * sofa::simulation::Node::setDebug ; (; bool ; b). ◆ setDefaultVisualContextValue(). void sofa::simulation::Node::setDefaultVisualContextValue ; (; ). virtual . Called after initialization to set the default value of the visual context. . ◆ setSleeping(). void sofa::simulation::Node::setSleeping ; (; bool ; val). overridevirtual . override context setSleeping to add notification. ; Reimplemented from sofa::core::objectmodel::Context. ◆ SOFA_ABSTRACT_CLASS2(). sofa::simulation::Node::SOFA_ABSTRACT_CLASS2 ; (; Node ; , . BaseNode ; , . Context ;  . ). ◆ updateContext(). void sofa::simulation::Node::updateContext ; (; ). virtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateSimulationContext(). void sofa::simulation::Node::updateSimulationContext ; (; ). virtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateVisualContext(). void sofa::simulation::Node::updateVisualContext ; (; ). virtual . Update the visual context values, based on parent and local ContextObjects. . Related details. ◆ VisitorScheduler. friend class VisitorScheduler. friend . sofasimulationNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:51189,Deployability,update,updateVisualContext,51189," depend on it. . ◆ removeChild(). void sofa::simulation::Node::removeChild ; (; BaseNode::SPtr ; node). finalvirtual . Remove a child node. ; Remove a child. ; Implements sofa::core::objectmodel::BaseNode. ◆ removeControllers(). void sofa::simulation::Node::removeControllers ; (; ). virtual . Remove odesolvers and mastercontroler. . ◆ removeListener(). void sofa::simulation::Node::removeListener ; (; MutationListener * ; obj). virtual . ◆ removeObject(). bool sofa::simulation::Node::removeObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj). finalvirtual . Remove an object. ; Implements sofa::core::objectmodel::BaseNode. ◆ setDebug(). Node * sofa::simulation::Node::setDebug ; (; bool ; b). ◆ setDefaultVisualContextValue(). void sofa::simulation::Node::setDefaultVisualContextValue ; (; ). virtual . Called after initialization to set the default value of the visual context. . ◆ setSleeping(). void sofa::simulation::Node::setSleeping ; (; bool ; val). overridevirtual . override context setSleeping to add notification. ; Reimplemented from sofa::core::objectmodel::Context. ◆ SOFA_ABSTRACT_CLASS2(). sofa::simulation::Node::SOFA_ABSTRACT_CLASS2 ; (; Node ; , . BaseNode ; , . Context ;  . ). ◆ updateContext(). void sofa::simulation::Node::updateContext ; (; ). virtual . Update the whole context values, based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateSimulationContext(). void sofa::simulation::Node::updateSimulationContext ; (; ). virtual . Update the simulation context values(gravity, time...), based on parent and local ContextObjects. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ updateVisualContext(). void sofa::simulation::Node::updateVisualContext ; (; ). virtual . Update the visual context values, based on parent and local ContextObjects. . Related details. ◆ VisitorScheduler. friend class VisitorScheduler. friend . sofasimulationNode; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:2821,Integrability,message,messages,2821,"sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sofa::core::behavior::BaseAnimationLoop > animationManager;  ; NodeSingle< sofa::core::visual::VisualLoop > visualLoop;  ; NodeSingle< sofa::core::topology::Topology > topology;  ; NodeSingle< sofa::core::topology::BaseMeshTopology > meshTopology;  ; NodeSingle< sofa::core::BaseState > state;  ; NodeSingle< sofa::core::behavior::BaseMechanicalState > mechanicalState;  ; NodeSingle< sofa::core::BaseMapping > mechanicalMapping;  ; NodeSingle< sofa::core::behavior::BaseMass > mass;  ; NodeSingle< sofa::core::collision::Pipeline > collisionPipeline;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::objectmodel::Context; Data< bool > is_activated;  To Activate a node. More...;  ; Data< Vec3 > worldGravity_;  Gravity in the world coordinate system. More...;  ; Data< SReal > dt_;  Time step. More...;  ; Data< SReal > time_;  Current time. More...;  ; Data< bool > animate_;  Animate the Simulation(applied at initialization only) More...;  ; Data< bool > d_isSleeping;  The node is sl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:7052,Integrability,interface,interface,7052,"to the children. More...;  ; void propagateEvent (const sofa::core::ExecParams *params, sofa::core::objectmodel::Event *event) override;  Propagate an event. More...;  ; virtual void updateVisualContext ();  Update the visual context values, based on parent and local ContextObjects. More...;  ; virtual void initialize ();  Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. More...;  ; virtual void setDefaultVisualContextValue ();  Called after initialization to set the default value of the visual context. More...;  ; virtual Node * findCommonParent (simulation::Node *node2)=0;  return the smallest common parent between this and node2 (returns nullptr if separated sub-graphes) More...;  ; void setSleeping (bool val) override;  override context setSleeping to add notification. More...;  ; virtual void addListener (MutationListener *obj);  ; virtual void removeListener (MutationListener *obj);  ; High-level interface; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void init (const sofa::core::ExecParams *params);  Initialize the components. More...;  ; bool isInitialized () const;  ; void reinit (const sofa::core::ExecParams *params);  Apply modifications to the components. More...;  ; void draw (sofa::core::visual::VisualParams *params);  Draw the objects (using visual visitors) More...;  ; Visitor handling; Parameters. precomputedOrderis not used by default but could allow optimization on certain Node specializations . Warningwhen calling with precomputedOrder=true, the function ""precomputeTraversalOrder"" must be called before executing the visitor and the user must ensure by himself that the simulation graph has done been modified since the last call to ""precomputeTraversalOrder"" . virtual void doExecuteVisitor (Visitor *action, bool precomputedOrder=false)=0;  Execute a recu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:9949,Integrability,interface,interfaces,9949,"h traversal precomputation, not mandatory and does nothing by default. More...;  ; Set/get objects; virtual void addChild (BaseNode::SPtr node) final;  ; virtual void removeChild (BaseNode::SPtr node) final;  Remove a child node. More...;  ; virtual void moveChild (BaseNode::SPtr node, BaseNode::SPtr prev_parent) final;  Move a node in this from another node. More...;  ; virtual void moveChild (BaseNode::SPtr node) override=0;  Move a node in this from another node. More...;  ; virtual void doAddChild (BaseNode::SPtr node)=0;  ; virtual void doRemoveChild (BaseNode::SPtr node)=0;  Remove a child node. More...;  ; virtual void doMoveChild (BaseNode::SPtr node, BaseNode::SPtr prev_parent)=0;  Move a node from another node. More...;  ; virtual bool addObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) final;  Add an object and return this. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool removeObject (sofa::core::objectmodel::BaseObject::SPtr obj) final;  Remove an object. More...;  ; virtual void moveObject (sofa::core::objectmodel::BaseObject::SPtr obj) final;  Move an object from another node. More...;  ; sofa::core::objectmodel::BaseObject * getObject (const std::string &name) const;  Find an object given its name. More...;  ; Base * findLinkDestClass (const sofa::core::objectmodel::BaseClass *destType, const std::string &path, const sofa::core::objectmodel::BaseLink *link) override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, const sofa::core::objectmodel::TagSet &tags, SearchDirection dir=SearchUp) const override=0;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, SearchDirection dir=SearchUp) const override;  ; void * getObject (const sofa::core::objectmodel::ClassInfo &class_info, const std::string &path) const override=0;  ; void getObject",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:12926,Integrability,interface,interface,12926,"id getNodeObject (Object *&result);  ; template<class Object > ; Object * getNodeObject ();  ; template<class Object , class Container > ; void getTreeObjects (Container *list);  List all objects of this node and sub-nodes deriving from a given class. More...;  ; template<class Container > ; Container * getTreeObjects (Container *result);  List all objects of this node and sub-nodes deriving from a given class. More...;  ; template<class Container > ; Container & getTreeObjects (Container &result);  List all objects of this node and sub-nodes deriving from a given class. More...;  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getTreeObjects ();  ; template<class Object > ; void getTreeObject (Object *&result);  ; template<class Object > ; Object * getTreeObject ();  ; sofa::core::topology::Topology * getTopology () const override;  Topology. More...;  ; sofa::core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const override;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; sofa::core::BaseState * getState () const override;  Degrees-of-Freedom. More...;  ; sofa::core::behavior::BaseMechanicalState * getMechanicalState () const override;  Mechanical Degrees-of-Freedom. More...;  ; sofa::core::visual::Shader * getShader () const override;  Shader. More...;  ; virtual sofa::core::visual::Shader * getShader (const sofa::core::objectmodel::TagSet &t) const;  ; Solvers and main algorithms; sofa::core::behavior::BaseAnimationLoop * getAnimationLoop () const override;  ; sofa::core::behavior::OdeSolver * getOdeSolver () const override;  ; sofa::core::collision::Pipeline * getCollisionPipeline () const override;  ; sofa::core::visual::VisualLoop * getVisualLoop () const override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseNode;  SOFA_ABSTRACT_CLASS (BaseNode, Base);  ; virtual Parents getParents () const =0;  ; virtual size_t getNbPa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:22536,Integrability,interface,interface,22536," override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setChangeSleepingState (bool val) override;  Sleeping state change of the context. More...;  ; virtual void setDisplayWorldGravity (bool val);  Display flags: Gravity. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=Sea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23361,Integrability,wrap,wrapper,23361,"ontext, Base);  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23547,Integrability,wrap,wrapper,23547,"logy (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23740,Integrability,wrap,wrapper,23740," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23932,Integrability,wrap,wrapper,23932,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24156,Integrability,wrap,wrapper,24156,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24387,Integrability,wrap,wrapper,24387,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24605,Integrability,wrap,wrapper,24605," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24841,Integrability,wrap,wrapper,24841,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25084,Integrability,wrap,wrapper,25084," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25285,Integrability,wrap,wrapper,25285,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25449,Integrability,wrap,wrapper,25449,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25620,Integrability,wrap,wrapper,25620,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25824,Integrability,wrap,wrapper,25824,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:26061,Integrability,wrap,wrapper,26061,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:26324,Integrability,wrap,wrapper,26324,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; template<class RealObject >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:28113,Integrability,interface,interfaces,28113," *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; template<class RealObject > ; static Node::SPtr create (RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg);  ; static Node::SPtr create (const std::string &name);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:33766,Integrability,interface,interfaces,33766,"er. NodeSequence<sofa::core::visual::VisualManager> sofa::simulation::Node::visualManager. ◆ visualModel. NodeSequence<sofa::core::visual::VisualModel> sofa::simulation::Node::visualModel. Constructor details. ◆ Node(). sofa::simulation::Node::Node ; (; const std::string & ; name = """"). protected . ◆ ~Node(). sofa::simulation::Node::~Node ; (; ). overrideprotectedvirtual . Function details. ◆ addChild(). void sofa::simulation::Node::addChild ; (; BaseNode::SPtr ; node). finalvirtual . Pure Virtual method from BaseNode Add a child node ; Implements sofa::core::objectmodel::BaseNode. ◆ addListener(). void sofa::simulation::Node::addListener ; (; MutationListener * ; obj). virtual . ◆ addObject(). bool sofa::simulation::Node::addObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj, . sofa::core::objectmodel::TypeOfInsertion ; insertionLocation = sofa::core::objectmodel::TypeOfInsertion::AtEnd . ). finalvirtual . Add an object and return this. Detect the implemented interfaces and add the object to the corresponding lists. ; Add an object. Detect the implemented interfaces and add the object to the corresponding lists. ; Implements sofa::core::objectmodel::BaseNode. ◆ create() [1/2]. Node::SPtr sofa::simulation::Node::create ; (; const std::string & ; name). static . ◆ create() [2/2]. template<class RealObject > . Node::SPtr sofa::simulation::Node::create ; (; RealObject * ; , . sofa::core::objectmodel::BaseObjectDescription * ; arg . ). static . ◆ createChild(). virtual Node::SPtr sofa::simulation::Node::createChild ; (; const std::string & ; nodeName). pure virtual . Create, add, then return the new child of this Node. ; Implemented in sofa::simulation::graph::DAGNode. ◆ doAddChild(). virtual void sofa::simulation::Node::doAddChild ; (; BaseNode::SPtr ; node). pure virtual . Delegate methods overridden in child classes Add a child node ; Implemented in sofa::simulation::graph::DAGNode. ◆ doAddObject(). bool sofa::simulation::Node::doAddObject ; (; sofa::core::ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:33864,Integrability,interface,interfaces,33864,"lModel. NodeSequence<sofa::core::visual::VisualModel> sofa::simulation::Node::visualModel. Constructor details. ◆ Node(). sofa::simulation::Node::Node ; (; const std::string & ; name = """"). protected . ◆ ~Node(). sofa::simulation::Node::~Node ; (; ). overrideprotectedvirtual . Function details. ◆ addChild(). void sofa::simulation::Node::addChild ; (; BaseNode::SPtr ; node). finalvirtual . Pure Virtual method from BaseNode Add a child node ; Implements sofa::core::objectmodel::BaseNode. ◆ addListener(). void sofa::simulation::Node::addListener ; (; MutationListener * ; obj). virtual . ◆ addObject(). bool sofa::simulation::Node::addObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj, . sofa::core::objectmodel::TypeOfInsertion ; insertionLocation = sofa::core::objectmodel::TypeOfInsertion::AtEnd . ). finalvirtual . Add an object and return this. Detect the implemented interfaces and add the object to the corresponding lists. ; Add an object. Detect the implemented interfaces and add the object to the corresponding lists. ; Implements sofa::core::objectmodel::BaseNode. ◆ create() [1/2]. Node::SPtr sofa::simulation::Node::create ; (; const std::string & ; name). static . ◆ create() [2/2]. template<class RealObject > . Node::SPtr sofa::simulation::Node::create ; (; RealObject * ; , . sofa::core::objectmodel::BaseObjectDescription * ; arg . ). static . ◆ createChild(). virtual Node::SPtr sofa::simulation::Node::createChild ; (; const std::string & ; nodeName). pure virtual . Create, add, then return the new child of this Node. ; Implemented in sofa::simulation::graph::DAGNode. ◆ doAddChild(). virtual void sofa::simulation::Node::doAddChild ; (; BaseNode::SPtr ; node). pure virtual . Delegate methods overridden in child classes Add a child node ; Implemented in sofa::simulation::graph::DAGNode. ◆ doAddObject(). bool sofa::simulation::Node::doAddObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj, . sofa::core::objectmodel::TypeOfInsertion ; insertionLocation ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:34993,Integrability,interface,interfaces,34993,"lation::Node::create ; (; const std::string & ; name). static . ◆ create() [2/2]. template<class RealObject > . Node::SPtr sofa::simulation::Node::create ; (; RealObject * ; , . sofa::core::objectmodel::BaseObjectDescription * ; arg . ). static . ◆ createChild(). virtual Node::SPtr sofa::simulation::Node::createChild ; (; const std::string & ; nodeName). pure virtual . Create, add, then return the new child of this Node. ; Implemented in sofa::simulation::graph::DAGNode. ◆ doAddChild(). virtual void sofa::simulation::Node::doAddChild ; (; BaseNode::SPtr ; node). pure virtual . Delegate methods overridden in child classes Add a child node ; Implemented in sofa::simulation::graph::DAGNode. ◆ doAddObject(). bool sofa::simulation::Node::doAddObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj, . sofa::core::objectmodel::TypeOfInsertion ; insertionLocation = sofa::core::objectmodel::TypeOfInsertion::AtEnd . ). protectedvirtual . Add an object. Detect the implemented interfaces and add the object to the corresponding lists. . ◆ doExecuteVisitor(). virtual void sofa::simulation::Node::doExecuteVisitor ; (; Visitor * ; action, . bool ; precomputedOrder = false . ). pure virtual . Execute a recursive action starting from this node. ; Implemented in sofa::simulation::graph::DAGNode. ◆ doMoveChild(). virtual void sofa::simulation::Node::doMoveChild ; (; BaseNode::SPtr ; node, . BaseNode::SPtr ; prev_parent . ). pure virtual . Move a node from another node. ; Implemented in sofa::simulation::graph::DAGNode. ◆ doMoveObject(). void sofa::simulation::Node::doMoveObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; sobj, . Node * ; prev_parent . ). protectedvirtual . Remove an object. . ◆ doRemoveChild(). virtual void sofa::simulation::Node::doRemoveChild ; (; BaseNode::SPtr ; node). pure virtual . Remove a child node. ; Implemented in sofa::simulation::graph::DAGNode. ◆ doRemoveObject(). bool sofa::simulation::Node::doRemoveObject ; (; sofa::core::objectmodel::BaseObject",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:39501,Integrability,interface,interface,39501,"; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getContext() [1/2]. const core::objectmodel::BaseContext * sofa::simulation::Node::getContext ; (; ); const. overridevirtual . Get this node context. ; Implements sofa::core::objectmodel::BaseNode. ◆ getContext() [2/2]. core::objectmodel::BaseContext * sofa::simulation::Node::getContext ; (; ). overridevirtual . Get this node context. ; Implements sofa::core::objectmodel::BaseNode. ◆ getDebug(). bool sofa::simulation::Node::getDebug ; (; ); const. ◆ getMechanicalState(). core::behavior::BaseMechanicalState * sofa::simulation::Node::getMechanicalState ; (; ); const. overridevirtual . Mechanical Degrees-of-Freedom. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getMeshTopologyLink(). core::topology::BaseMeshTopology * sofa::simulation::Node::getMeshTopologyLink ; (; SearchDirection ; dir = SearchUp); const. overridevirtual . Mesh Topology (unified interface for both static and dynamic topologies) ; Reimplemented from sofa::core::objectmodel::BaseContext.; Reimplemented in sofa::simulation::graph::DAGNode. ◆ getNodeInGraph(). Node * sofa::simulation::Node::getNodeInGraph ; (; const std::string & ; absolutePath); const. Get a node in the scene graph matching the given absolute path. . ◆ getNodeObject() [1/2]. template<class Object > . Object* sofa::simulation::Node::getNodeObject ; (; ). inline . ◆ getNodeObject() [2/2]. template<class Object > . void sofa::simulation::Node::getNodeObject ; (; Object *& ; result). inline . Return an object of this node deriving from a given class, or nullptr if not found. Note that only the first object is returned. . ◆ getNodeObjects() [1/4]. template<class Object = sofa::core::objectmodel::BaseObject> . std::vector<Object*> sofa::simulation::Node::getNodeObjects ; (; ). inline . Returns a list of object of type passed as a parameter. This function is return object by copy but should be compatible with Return Value Optimization so the co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:41694,Integrability,wrap,wrapper,41694,">() ) { ... } . ◆ getNodeObjects() [2/4]. template<class Container > . Container& sofa::simulation::Node::getNodeObjects ; (; Container & ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getNodeObjects() [3/4]. template<class Object , class Container > . void sofa::simulation::Node::getNodeObjects ; (; Container * ; list). inline . List all objects of this node deriving from a given class. . ◆ getNodeObjects() [4/4]. template<class Container > . Container* sofa::simulation::Node::getNodeObjects ; (; Container * ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getObject() [1/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:42148,Integrability,wrap,wrapper,42148,"> . Container* sofa::simulation::Node::getNodeObjects ; (; Container * ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getObject() [1/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:42626,Integrability,wrap,wrapper,42626,"down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:43340,Integrability,wrap,wrapper,43340,"tObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getOdeSolver(). core::behavior::OdeSolver * sofa::simulation::Node::getOdeSolver ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getRootContext(). BaseContext* sofa::simulation::Node::getRootContext ; (; ); const. inlineoverridevirtual . Get the root context of the graph. ; Reimplemented from so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:43864,Integrability,wrap,wrapper,43864,"ame); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getOdeSolver(). core::behavior::OdeSolver * sofa::simulation::Node::getOdeSolver ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getRootContext(). BaseContext* sofa::simulation::Node::getRootContext ; (; ); const. inlineoverridevirtual . Get the root context of the graph. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getShader() [1/2]. core::visual::Shader * sofa::simulation::Node::getShader ; (; ); const. overridevirtual . Shader. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getShader() [2/2]. core::visual::Shader * sofa::simulation::Node::getShader ; (; const sofa::core::objectmodel::TagSet & ; t); const. virtual . ◆ getState(). core::BaseState * sofa::simulation::Node::getState ; (; ); const. overridevirtual . Degrees-of-Freedom. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:47110,Integrability,depend,depend,47110,"() ) { ... } . ◆ getTreeObjects() [2/4]. template<class Container > . Container& sofa::simulation::Node::getTreeObjects ; (; Container & ; result). inline . List all objects of this node and sub-nodes deriving from a given class. . ◆ getTreeObjects() [3/4]. template<class Object , class Container > . void sofa::simulation::Node::getTreeObjects ; (; Container * ; list). inline . List all objects of this node and sub-nodes deriving from a given class. . ◆ getTreeObjects() [4/4]. template<class Container > . Container* sofa::simulation::Node::getTreeObjects ; (; Container * ; result). inline . List all objects of this node and sub-nodes deriving from a given class. . ◆ getVisualLoop(). core::visual::VisualLoop * sofa::simulation::Node::getVisualLoop ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ init(). void sofa::simulation::Node::init ; (; const sofa::core::ExecParams * ; params). Initialize the components. ; Initialize the components of this node and all the nodes which depend on it. . ◆ initialize(). void sofa::simulation::Node::initialize ; (; ). virtual . Must be called after each graph modification. Do not call it directly, apply an InitVisitor instead. . ◆ initVisualContext(). virtual void sofa::simulation::Node::initVisualContext ; (; ). inlinevirtual . Called during initialization to correctly propagate the visual context to the children. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ isInitialized(). bool sofa::simulation::Node::isInitialized ; (; ); const. inline . ◆ moveChild() [1/2]. virtual void sofa::simulation::Node::moveChild ; (; BaseNode::SPtr ; node). overridepure virtual . Move a node in this from another node. ; Implements sofa::core::objectmodel::BaseNode.; Implemented in sofa::simulation::graph::DAGNode. ◆ moveChild() [2/2]. void sofa::simulation::Node::moveChild ; (; BaseNode::SPtr ; node, . BaseNode::SPtr ; prev_parent . ). finalvirtual . Move a node in this from another node. ; Move a node fro",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:49465,Integrability,depend,depend,49465,"bjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base. ◆ precomputeTraversalOrder(). virtual void sofa::simulation::Node::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; ). inlinevirtual . Possible optimization with traversal precomputation, not mandatory and does nothing by default. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ printComponents(). void sofa::simulation::Node::printComponents ; (; ). ◆ propagateEvent(). void sofa::simulation::Node::propagateEvent ; (; const sofa::core::ExecParams * ; params, . sofa::core::objectmodel::Event * ; event . ). overridevirtual . Propagate an event. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ reinit(). void sofa::simulation::Node::reinit ; (; const sofa::core::ExecParams * ; params). Apply modifications to the components. ; ReInitialize the components of this node and all the nodes which depend on it. . ◆ removeChild(). void sofa::simulation::Node::removeChild ; (; BaseNode::SPtr ; node). finalvirtual . Remove a child node. ; Remove a child. ; Implements sofa::core::objectmodel::BaseNode. ◆ removeControllers(). void sofa::simulation::Node::removeControllers ; (; ). virtual . Remove odesolvers and mastercontroler. . ◆ removeListener(). void sofa::simulation::Node::removeListener ; (; MutationListener * ; obj). virtual . ◆ removeObject(). bool sofa::simulation::Node::removeObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj). finalvirtual . Remove an object. ; Implements sofa::core::objectmodel::BaseNode. ◆ setDebug(). Node * sofa::simulation::Node::setDebug ; (; bool ; b). ◆ setDefaultVisualContextValue(). void sofa::simulation::Node::setDefaultVisualContextValue ; (; ). virtual . Called after initialization to set the default value of the visual context. . ◆ setSleeping(). void sofa::simulation::Node::setSleeping ; (; bool ; val). ove",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:1647,Modifiability,config,configurationSetting,1647," Public Attributes; NodeSequence< Node, true > child;  ; NodeSequence< sofa::core::objectmodel::BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::behavior::ConstraintSolver > constraintSolver;  ; NodeSequence< sofa::core::behavior::BaseLinearSolver > linearSolver;  ; NodeSequence< sofa::core::topology::BaseTopologyObject > topologyObject;  ; NodeSequence< sofa::core::behavior::BaseForceField > forceField;  ; NodeSequence< sofa::core::behavior::BaseInteractionForceField > interactionForceField;  ; NodeSequence< sofa::core::behavior::BaseProjectiveConstraintSet > projectiveConstraintSet;  ; NodeSequence< sofa::core::behavior::BaseConstraintSet > constraintSet;  ; NodeSequence< sofa::core::objectmodel::ContextObject > contextObject;  ; NodeSequence< sofa::core::objectmodel::ConfigurationSetting > configurationSetting;  ; NodeSequence< sofa::core::visual::Shader > shaders;  ; NodeSequence< sofa::core::visual::VisualModel > visualModel;  ; NodeSequence< sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:2572,Modifiability,inherit,inherited,2572,":BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::behavior::ConstraintSolver > constraintSolver;  ; NodeSequence< sofa::core::behavior::BaseLinearSolver > linearSolver;  ; NodeSequence< sofa::core::topology::BaseTopologyObject > topologyObject;  ; NodeSequence< sofa::core::behavior::BaseForceField > forceField;  ; NodeSequence< sofa::core::behavior::BaseInteractionForceField > interactionForceField;  ; NodeSequence< sofa::core::behavior::BaseProjectiveConstraintSet > projectiveConstraintSet;  ; NodeSequence< sofa::core::behavior::BaseConstraintSet > constraintSet;  ; NodeSequence< sofa::core::objectmodel::ContextObject > contextObject;  ; NodeSequence< sofa::core::objectmodel::ConfigurationSetting > configurationSetting;  ; NodeSequence< sofa::core::visual::Shader > shaders;  ; NodeSequence< sofa::core::visual::VisualModel > visualModel;  ; NodeSequence< sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sofa::core::behavior::BaseAnimationLoop > animationManager;  ; NodeSingle< sofa::core::visual::VisualLoop > visualLoop;  ; NodeSingle< sofa::core::topology::Topology > topology;  ; NodeSingle< sofa::core::topology::BaseMeshTopology > meshTopology;  ; NodeSingle< sofa::core::BaseState > state;  ; NodeSingle< sofa::core::behavior::BaseMechanicalState > mechanicalState;  ; NodeSingle< sofa::core::BaseMapping > mechanicalMapping;  ; NodeSingle< sofa::core::behavior::BaseMass > mass;  ; NodeSingle< sofa::core::collision::Pipeline > collisionPipeline;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:3391,Modifiability,inherit,inherited,3391,"anicalState > mechanicalState;  ; NodeSingle< sofa::core::BaseMapping > mechanicalMapping;  ; NodeSingle< sofa::core::behavior::BaseMass > mass;  ; NodeSingle< sofa::core::collision::Pipeline > collisionPipeline;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::objectmodel::Context; Data< bool > is_activated;  To Activate a node. More...;  ; Data< Vec3 > worldGravity_;  Gravity in the world coordinate system. More...;  ; Data< SReal > dt_;  Time step. More...;  ; Data< SReal > time_;  Current time. More...;  ; Data< bool > animate_;  Animate the Simulation(applied at initialization only) More...;  ; Data< bool > d_isSleeping;  The node is sleeping, and thus ignored by visitors. More...;  ; Data< bool > d_canChangeSleepingState;  The node can change its sleeping state. More...;  . Protected Attributes; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapDat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:4143,Modifiability,inherit,inherited,4143,"(Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Public Attributes inherited from sofa::core::objectmodel::Context; Data< bool > is_activated;  To Activate a node. More...;  ; Data< Vec3 > worldGravity_;  Gravity in the world coordinate system. More...;  ; Data< SReal > dt_;  Time step. More...;  ; Data< SReal > time_;  Current time. More...;  ; Data< bool > animate_;  Animate the Simulation(applied at initialization only) More...;  ; Data< bool > d_isSleeping;  The node is sleeping, and thus ignored by visitors. More...;  ; Data< bool > d_canChangeSleepingState;  The node can change its sleeping state. More...;  . Protected Attributes; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  . Public Member Functions;  SOFA_ABSTRACT_CLASS2 (Node, BaseNode, Context);  ; virtual Node::SPtr createChild (const std::string &nodeName)=0;  Create, add, then return the new child of this Node. More...;  ; virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given it",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:4572,Modifiability,inherit,inherited,4572,"me step. More...;  ; Data< SReal > time_;  Current time. More...;  ; Data< bool > animate_;  Animate the Simulation(applied at initialization only) More...;  ; Data< bool > d_isSleeping;  The node is sleeping, and thus ignored by visitors. More...;  ; Data< bool > d_canChangeSleepingState;  The node can change its sleeping state. More...;  . Protected Attributes; bool debug_;  ; bool initialized;  ; std::stack< Visitor * > actionStack;  ; BaseContext * _context;  ; type::vector< MutationListener * > listener;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseContext; ComponentNameHelper m_nameHelper;  . Public Member Functions;  SOFA_ABSTRACT_CLASS2 (Node, BaseNode, Context);  ; virtual Node::SPtr createChild (const std::string &nodeName)=0;  Create, add, then return the new child of this Node. More...;  ; virtual void removeControllers ();  Remove odesolvers and mastercontroler. More...;  ; Node * getChild (const std::string &name) const;  Find a child node given its name. More...;  ; Node * getTreeNode (const std::string &name) const;  Get a descendant node given its name. More...;  ; Node * getNodeInGraph (const std::string &absolutePath) const;  Get a node in the scene graph matching the given absolute path. More...;  ; Children getChildren () const override;  Get children nodes. More...;  ; BaseContext * getRootContext () const override;  Get the root context of the graph. More...;  ; Node * setDebug (bool);  ; bool getDebug () const;  ; void printComponents ();  ; const BaseContext * getContext () const override;  Get th",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:13728,Modifiability,inherit,inherited,13728,"t > ; void getTreeObject (Object *&result);  ; template<class Object > ; Object * getTreeObject ();  ; sofa::core::topology::Topology * getTopology () const override;  Topology. More...;  ; sofa::core::topology::BaseMeshTopology * getMeshTopologyLink (SearchDirection dir=SearchUp) const override;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; sofa::core::BaseState * getState () const override;  Degrees-of-Freedom. More...;  ; sofa::core::behavior::BaseMechanicalState * getMechanicalState () const override;  Mechanical Degrees-of-Freedom. More...;  ; sofa::core::visual::Shader * getShader () const override;  Shader. More...;  ; virtual sofa::core::visual::Shader * getShader (const sofa::core::objectmodel::TagSet &t) const;  ; Solvers and main algorithms; sofa::core::behavior::BaseAnimationLoop * getAnimationLoop () const override;  ; sofa::core::behavior::OdeSolver * getOdeSolver () const override;  ; sofa::core::collision::Pipeline * getCollisionPipeline () const override;  ; sofa::core::visual::VisualLoop * getVisualLoop () const override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseNode;  SOFA_ABSTRACT_CLASS (BaseNode, Base);  ; virtual Parents getParents () const =0;  ; virtual size_t getNbParents () const =0;  returns number of parents More...;  ; virtual BaseNode * getFirstParent () const =0;  return the first parent (returns nullptr if no parent) More...;  ; virtual BaseNode * getRoot () const;  returns the root by following up the first parent for multinodes More...;  ; virtual bool hasParent (const BaseNode *node) const =0;  Test if the given node is a parent of this node. More...;  ; virtual bool hasAncestor (const BaseNode *node) const =0;  ; virtual void detachFromGraph ()=0;  ; virtual std::string getPathName () const override;  Return the full path name of this node. More...;  ; virtual std::string getRootPath () const;  Return the path from this node to the root node. More...;  ;  Public",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:14623,Modifiability,inherit,inherited,14623,"s () const =0;  returns number of parents More...;  ; virtual BaseNode * getFirstParent () const =0;  return the first parent (returns nullptr if no parent) More...;  ; virtual BaseNode * getRoot () const;  returns the root by following up the first parent for multinodes More...;  ; virtual bool hasParent (const BaseNode *node) const =0;  Test if the given node is a parent of this node. More...;  ; virtual bool hasAncestor (const BaseNode *node) const =0;  ; virtual void detachFromGraph ()=0;  ; virtual std::string getPathName () const override;  Return the full path name of this node. More...;  ; virtual std::string getRootPath () const;  Return the path from this node to the root node. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:20749,Modifiability,inherit,inherited,20749," &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::objectmodel::Context;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context. More...;  ; bool isSleeping () const override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:20892,Modifiability,variab,variables,20892," &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More...;  ; void addAlias (BaseData *field, const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::objectmodel::Context;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context. More...;  ; bool isSleeping () const override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:21004,Modifiability,variab,variables,21004,"nk *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  ;  Public Member Functions inherited from sofa::core::objectmodel::Context;  SOFA_CLASS (Context, BaseContext);  ; void copyContext (const Context &c);  Copy the context variables from the given instance. More...;  ; void copySimulationContext (const Context &c);  Copy the context variables of visualization from the given instance. More...;  ; bool isActive () const override;  The Context is active. More...;  ; void setActive (bool val) override;  State of the context. More...;  ; bool isSleeping () const override;  The Context is sleeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setChangeSleepingState (bool val) override;  Sleep",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:22150,Modifiability,inherit,inherited,22150,"eeping. More...;  ; bool canChangeSleepingState () const override;  The Context can change its sleeping state. More...;  ; const Vec3 & getGravity () const override;  Gravity in local coordinates. More...;  ; void setGravity (const Vec3 &) override;  Gravity in local coordinates. More...;  ; SReal getDt () const override;  Simulation timestep. More...;  ; SReal getTime () const override;  Simulation time. More...;  ; bool getAnimate () const override;  Animation flag. More...;  ; void setDt (SReal dt) override;  Simulation timestep. More...;  ; virtual void setTime (SReal t);  Simulation time. More...;  ; void setAnimate (bool val) override;  Animation flag. More...;  ; void setChangeSleepingState (bool val) override;  Sleeping state change of the context. More...;  ; virtual void setDisplayWorldGravity (bool val);  Display flags: Gravity. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseContext;  SOFA_CLASS (BaseContext, Base);  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:27474,Modifiability,inherit,inherited,27474," More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; template<class RealObject > ; static Node::SPtr create (RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg);  ; static Node::SPtr create (const std::string &name);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:27703,Modifiability,inherit,inherited,27703," More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; template<class RealObject > ; static Node::SPtr create (RealObject *, sofa::core::objectmodel::BaseObjectDescription *arg);  ; static Node::SPtr create (const std::string &name);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:28445,Modifiability,inherit,inherited,28445,"e; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  C",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:28757,Modifiability,inherit,inherited,28757,"ode () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulatio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:29467,Modifiability,inherit,inherited,29467,"seObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behav",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:29593,Modifiability,inherit,inherited,29593,"seObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behav",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:30390,Modifiability,config,configurationSetting,30390,"r method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behavior::BaseConstraintSet> sofa::simulation::Node::constraintSet. ◆ constraintSolver. NodeSequence<sofa::core::behavior::ConstraintSolver> sofa::simulation::Node::constraintSolver. ◆ contextObject. NodeSequence<sofa::core::objectmodel::ContextObject> sofa::simulation::Node::contextObject. ◆ debug_. bool sofa::simulation::Node::debug_. protected . ◆ forceField. NodeSequence<sofa::core::behavior::BaseForceField> sofa::simulation::Node::forceField. ◆ initialized. bool sofa::simulation::Node::initialized. protected . ◆ interactionForceField. NodeSequence<sofa::core::behavior::BaseInteractionForceField> sofa::simulation::Node::interactionForceField. ◆ linearSolver. NodeSequence<sofa::core::behavior::BaseLinearSolver> sofa::simulation::Node::linearSolver. ◆ listener. type::vector<MutationListener*> sofa::simulation::Node::listener.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:30496,Modifiability,config,configurationSetting,30496,"ns inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseContext () override;  . Friends; class VisitorScheduler;  . Attribute details. ◆ _context. BaseContext* sofa::simulation::Node::_context. protected . ◆ actionStack. std::stack<Visitor*> sofa::simulation::Node::actionStack. protected . ◆ animationManager. NodeSingle<sofa::core::behavior::BaseAnimationLoop> sofa::simulation::Node::animationManager. ◆ behaviorModel. NodeSequence<sofa::core::BehaviorModel> sofa::simulation::Node::behaviorModel. ◆ child. NodeSequence<Node,true> sofa::simulation::Node::child. ◆ collisionModel. NodeSequence<sofa::core::CollisionModel> sofa::simulation::Node::collisionModel. ◆ collisionPipeline. NodeSingle<sofa::core::collision::Pipeline> sofa::simulation::Node::collisionPipeline. ◆ configurationSetting. NodeSequence<sofa::core::objectmodel::ConfigurationSetting> sofa::simulation::Node::configurationSetting. ◆ constraintSet. NodeSequence<sofa::core::behavior::BaseConstraintSet> sofa::simulation::Node::constraintSet. ◆ constraintSolver. NodeSequence<sofa::core::behavior::ConstraintSolver> sofa::simulation::Node::constraintSolver. ◆ contextObject. NodeSequence<sofa::core::objectmodel::ContextObject> sofa::simulation::Node::contextObject. ◆ debug_. bool sofa::simulation::Node::debug_. protected . ◆ forceField. NodeSequence<sofa::core::behavior::BaseForceField> sofa::simulation::Node::forceField. ◆ initialized. bool sofa::simulation::Node::initialized. protected . ◆ interactionForceField. NodeSequence<sofa::core::behavior::BaseInteractionForceField> sofa::simulation::Node::interactionForceField. ◆ linearSolver. NodeSequence<sofa::core::behavior::BaseLinearSolver> sofa::simulation::Node::linearSolver. ◆ listener. type::vector<MutationListener*> sofa::simulation::Node::listener. protected . ◆ mapping. NodeSequence<sofa::core::BaseMapping> sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:7673,Performance,optimiz,optimization,7673,"e * findCommonParent (simulation::Node *node2)=0;  return the smallest common parent between this and node2 (returns nullptr if separated sub-graphes) More...;  ; void setSleeping (bool val) override;  override context setSleeping to add notification. More...;  ; virtual void addListener (MutationListener *obj);  ; virtual void removeListener (MutationListener *obj);  ; High-level interface; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; void init (const sofa::core::ExecParams *params);  Initialize the components. More...;  ; bool isInitialized () const;  ; void reinit (const sofa::core::ExecParams *params);  Apply modifications to the components. More...;  ; void draw (sofa::core::visual::VisualParams *params);  Draw the objects (using visual visitors) More...;  ; Visitor handling; Parameters. precomputedOrderis not used by default but could allow optimization on certain Node specializations . Warningwhen calling with precomputedOrder=true, the function ""precomputeTraversalOrder"" must be called before executing the visitor and the user must ensure by himself that the simulation graph has done been modified since the last call to ""precomputeTraversalOrder"" . virtual void doExecuteVisitor (Visitor *action, bool precomputedOrder=false)=0;  Execute a recursive action starting from this node. More...;  ; void executeVisitor (Visitor *action, bool precomputedOrder=false) override;  Execute a recursive action starting from this node. More...;  ; void execute (Visitor &action, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; void execute (Visitor *p, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; template<class Act , class Params > ; void execute (const Params *params, bool precomputedOrder=false);  Execute a recursive action starting from",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:8949,Performance,optimiz,optimization,8949,"ast call to ""precomputeTraversalOrder"" . virtual void doExecuteVisitor (Visitor *action, bool precomputedOrder=false)=0;  Execute a recursive action starting from this node. More...;  ; void executeVisitor (Visitor *action, bool precomputedOrder=false) override;  Execute a recursive action starting from this node. More...;  ; void execute (Visitor &action, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; void execute (Visitor *p, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; template<class Act , class Params > ; void execute (const Params *params, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; template<class Act > ; void execute (sofa::core::visual::VisualParams *vparams, bool precomputedOrder=false);  Execute a recursive action starting from this node. More...;  ; virtual void precomputeTraversalOrder (const sofa::core::ExecParams *);  Possible optimization with traversal precomputation, not mandatory and does nothing by default. More...;  ; Set/get objects; virtual void addChild (BaseNode::SPtr node) final;  ; virtual void removeChild (BaseNode::SPtr node) final;  Remove a child node. More...;  ; virtual void moveChild (BaseNode::SPtr node, BaseNode::SPtr prev_parent) final;  Move a node in this from another node. More...;  ; virtual void moveChild (BaseNode::SPtr node) override=0;  Move a node in this from another node. More...;  ; virtual void doAddChild (BaseNode::SPtr node)=0;  ; virtual void doRemoveChild (BaseNode::SPtr node)=0;  Remove a child node. More...;  ; virtual void doMoveChild (BaseNode::SPtr node, BaseNode::SPtr prev_parent)=0;  Move a node from another node. More...;  ; virtual bool addObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd) final;  Add an object and return this. Detect the implemented ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:48795,Performance,optimiz,optimization,48795,"Node.; Implemented in sofa::simulation::graph::DAGNode. ◆ moveChild() [2/2]. void sofa::simulation::Node::moveChild ; (; BaseNode::SPtr ; node, . BaseNode::SPtr ; prev_parent . ). finalvirtual . Move a node in this from another node. ; Move a node from another node. ; Implements sofa::core::objectmodel::BaseNode. ◆ moveObject(). void sofa::simulation::Node::moveObject ; (; sofa::core::objectmodel::BaseObject::SPtr ; obj). finalvirtual . Move an object from another node. ; Implements sofa::core::objectmodel::BaseNode. ◆ parse(). void sofa::simulation::Node::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base. ◆ precomputeTraversalOrder(). virtual void sofa::simulation::Node::precomputeTraversalOrder ; (; const sofa::core::ExecParams * ; ). inlinevirtual . Possible optimization with traversal precomputation, not mandatory and does nothing by default. ; Reimplemented in sofa::simulation::graph::DAGNode. ◆ printComponents(). void sofa::simulation::Node::printComponents ; (; ). ◆ propagateEvent(). void sofa::simulation::Node::propagateEvent ; (; const sofa::core::ExecParams * ; params, . sofa::core::objectmodel::Event * ; event . ). overridevirtual . Propagate an event. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ reinit(). void sofa::simulation::Node::reinit ; (; const sofa::core::ExecParams * ; params). Apply modifications to the components. ; ReInitialize the components of this node and all the nodes which depend on it. . ◆ removeChild(). void sofa::simulation::Node::removeChild ; (; BaseNode::SPtr ; node). finalvirtual . Remove a child node. ; Remove a child. ; Implements sofa::core::objectmodel::BaseNode. ◆ removeControllers(). void sofa::simulation::Node::removeControllers ; (; ). virtual . Remove odesolvers and mastercontroler. . ◆ removeListener(). void sofa::sim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:551,Security,access,accessors,551,"﻿. SOFA API: sofa::simulation::Node Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members . sofa::simulation::Node Class Referenceabstract . #include <Node.h>. Inheritance diagram for sofa::simulation::Node:. [legend]; Detailed Description; Implements the object (component) management of the core::Context. Contains objects in lists and provides accessors. The other nodes are not visible (unknown scene graph).; AuthorThe SOFA team </www.sofa-framework.org> . Public Attributes; NodeSequence< Node, true > child;  ; NodeSequence< sofa::core::objectmodel::BaseObject, true > object;  ; NodeSequence< sofa::core::BehaviorModel > behaviorModel;  ; NodeSequence< sofa::core::BaseMapping > mapping;  ; NodeSequence< sofa::core::behavior::OdeSolver > solver;  ; NodeSequence< sofa::core::behavior::ConstraintSolver > constraintSolver;  ; NodeSequence< sofa::core::behavior::BaseLinearSolver > linearSolver;  ; NodeSequence< sofa::core::topology::BaseTopologyObject > topologyObject;  ; NodeSequence< sofa::core::behavior::BaseForceField > forceField;  ; NodeSequence< sofa::core::behavior::BaseInteractionForceField > interactionForceField;  ; NodeSequence< sofa::core::behavior::BaseProjectiveConstraintSet > projectiveConstraintSet;  ; NodeSequence< sofa::core::behavior::BaseConstraintSet > constraintSet;  ; NodeSequence< sofa::core::objectmodel::ContextObject > contextObject;  ; NodeSequence< sofa::core::objectmodel::ConfigurationSetting > configurationSetting;  ; NodeSequence< sofa::core::visual::Shader > shaders;  ; NodeSequence< sofa::core::visual::VisualModel > visualModel;  ; NodeSequence< sofa::core::visual::VisualManager > visualManager;  ; NodeSequence< sofa::core::CollisionModel > collisionModel;  ; NodeSequence< sofa::core::objectmodel::BaseObject > unsorted;  ; NodeSingle< sof",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23345,Security,access,access,23345,"ontext, Base);  ; virtual bool hasAncestor (const BaseContext *) const;  ; ComponentNameHelper & getNameHelper ();  Returns utilitary object to uniquely name objects in the context. More...;  ; virtual core::topology::BaseMeshTopology * getMeshTopology (SearchDirection dir=SearchUp) const;  Mesh Topology (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23531,Security,access,access,23531,"logy (unified interface for both static and dynamic topologies) More...;  ; virtual core::behavior::BaseMass * getMass () const;  Mass. More...;  ; template<class Object , class Container > ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23724,Security,access,access,23724," ; void getObjects (Container *list, SearchDirection dir=SearchUp);  List all objects of this node deriving from a given class. More...;  ; template<class Container > ; Container * getObjects (Container *result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:23916,Security,access,access,23916,"result, SearchDirection dir=SearchUp);  Returns a list of object of type passed as a parameter. More...;  ; template<class Container > ; Container & getObjects (Container &result, SearchDirection dir=SearchUp);  ; template<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24140,Security,access,access,24140,"ate<class Object = sofa::core::objectmodel::BaseObject> ; std::vector< Object * > getObjects (SearchDirection dir=SearchUp);  ; template<class T > ; T * get (SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly se",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24371,Security,access,access,24371,"wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24589,Security,access,access,24589," the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  G",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:24825,Security,access,access,24825,"late<class T > ; T * get (const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access templa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25068,Security,access,access,25068," (T *&ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25269,Security,access,access,25269,"late<class T > ; void get (sptr< T > &ptr, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirecti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25433,Security,access,access,25433,"possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25604,Security,access,access,25604,"ect access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (T *&ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:25808,Security,access,access,25808,"ection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:26045,Security,access,access,26045,"Direction dir=SearchUp) const;  Generic object access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; template<class T > ; T * get (const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *ma",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:26308,Security,access,access,26308,"rapper, given a path from the current context. More...;  ; template<class T > ; void get (T *&ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T > ; void get (sptr< T > &ptr, const std::string &path) const;  Generic object access template wrapper, given a path from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const Tag &tag, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a required tag, possibly searching up or down from the current context. More...;  ; template<class T , class Container > ; void get (Container *list, const TagSet &tags, SearchDirection dir=SearchUp) const;  Generic list of objects access template wrapper, given a set of required tags, possibly searching up or down from the current context. More...;  ; virtual void setMechanicalState (BaseObject *);  Mechanical Degrees-of-Freedom. More...;  ; virtual void setTopology (BaseObject *);  Topology. More...;  ; virtual bool addObject (sptr< BaseObject >, TypeOfInsertion=TypeOfInsertion::AtEnd);  Add an object, or return false if not supported. More...;  ; virtual bool removeObject (sptr< BaseObject >);  Remove an object, or return false if not supported. More...;  ; virtual void notifyAddSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyRemoveSlave (core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  ; virtual void notifyMoveSlave (core::objectmodel::BaseObject *previousMaster, core::objectmodel::BaseObject *master, core::objectmodel::BaseObject *slave);  . Static Public Member Functions; template<class RealObject >",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:41577,Security,access,access,41577,">() ) { ... } . ◆ getNodeObjects() [2/4]. template<class Container > . Container& sofa::simulation::Node::getNodeObjects ; (; Container & ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getNodeObjects() [3/4]. template<class Object , class Container > . void sofa::simulation::Node::getNodeObjects ; (; Container * ; list). inline . List all objects of this node deriving from a given class. . ◆ getNodeObjects() [4/4]. template<class Container > . Container* sofa::simulation::Node::getNodeObjects ; (; Container * ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getObject() [1/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:42078,Security,access,access,42078,"> . Container* sofa::simulation::Node::getNodeObjects ; (; Container * ; result). inline . Returns a list of object of type passed as a parameter. . ◆ getObject() [1/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic object access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:42539,Security,access,access,42539,"down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [2/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . const std::string & ; path . ); const. overridepure virtual . Generic object access, given a path from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:43223,Security,access,access,43223,"tObject() [3/4]. void* sofa::simulation::Node::getObject ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic object access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getObject() [4/4]. core::objectmodel::BaseObject * sofa::simulation::Node::getObject ; (; const std::string & ; name); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getOdeSolver(). core::behavior::OdeSolver * sofa::simulation::Node::getOdeSolver ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getRootContext(). BaseContext* sofa::simulation::Node::getRootContext ; (; ); const. inlineoverridevirtual . Get the root context of the graph. ; Reimplemented from so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:43777,Security,access,access,43777,"ame); const. Find an object given its name. . ◆ getObjects() [1/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . const sofa::core::objectmodel::TagSet & ; tags, . SearchDirection ; dir = SearchUp . ); const. overridepure virtual . Generic list of objects access, given a set of required tags, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext.; Implemented in sofa::simulation::graph::DAGNode. ◆ getObjects() [2/2]. void sofa::simulation::Node::getObjects ; (; const sofa::core::objectmodel::ClassInfo & ; class_info, . GetObjectsCallBack & ; container, . SearchDirection ; dir = SearchUp . ); const. inlineoverridevirtual . Generic list of objects access, possibly searching up or down from the current context; Note that the template wrapper method should generally be used to have the correct return type, ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getOdeSolver(). core::behavior::OdeSolver * sofa::simulation::Node::getOdeSolver ; (; ); const. overridevirtual . Reimplemented from sofa::core::objectmodel::BaseNode. ◆ getRootContext(). BaseContext* sofa::simulation::Node::getRootContext ; (; ); const. inlineoverridevirtual . Get the root context of the graph. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getShader() [1/2]. core::visual::Shader * sofa::simulation::Node::getShader ; (; ); const. overridevirtual . Shader. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ getShader() [2/2]. core::visual::Shader * sofa::simulation::Node::getShader ; (; const sofa::core::objectmodel::TagSet & ; t); const. virtual . ◆ getState(). core::BaseState * sofa::simulation::Node::getState ; (; ); const. overridevirtual . Degrees-of-Freedom. ; Reimplemented from sofa::core::objectmodel::BaseContext. ◆ ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:16641,Testability,log,logging,16641," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:16714,Testability,log,logging,16714," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:16756,Testability,log,logging,16756," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:16826,Testability,log,logging,16826," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:16937,Testability,log,logging,16937," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:16979,Testability,log,logging,16979," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:18803,Testability,log,logErrors,18803,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:17022,Usability,clear,clearLoggedMessages,17022," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html:28641,Usability,clear,clearObjectContext,28641,"tatic Public Member Functions inherited from sofa::core::objectmodel::BaseContext; static BaseContext * getDefault ();  . Protected Member Functions;  Node (const std::string &name="""");  ; virtual ~Node () override;  ; virtual bool doAddObject (sofa::core::objectmodel::BaseObject::SPtr obj, sofa::core::objectmodel::TypeOfInsertion insertionLocation=sofa::core::objectmodel::TypeOfInsertion::AtEnd);  Add an object. Detect the implemented interfaces and add the object to the corresponding lists. More...;  ; virtual bool doRemoveObject (sofa::core::objectmodel::BaseObject::SPtr obj);  Remove an object. More...;  ; virtual void doMoveObject (sofa::core::objectmodel::BaseObject::SPtr sobj, Node *prev_parent);  Remove an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseNode;  BaseNode ();  ;  ~BaseNode () override;  ; void setObjectContext (BaseObject::SPtr obj);  Set the context of an object to this. More...;  ; void clearObjectContext (BaseObject::SPtr obj);  Reset the context of an object. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Context;  Context ();  ; virtual ~Context () override;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseContext;  BaseContext ();  ;  ~BaseCo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html:9580,Deployability,update,updateCounter,9580,"jectmodel::BaseLinkinline; setPersistent(bool b)sofa::core::objectmodel::BaseLinkinline; setValidator(ValidatorFn fn)sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; storePath() constsofa::core::objectmodel::BaseLinkinline; swap(iterator a, iterator b)sofa::simulation::NodeSequence< T, strong >inline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TraitsContainer typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; TraitsDestPtr typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; TraitsValueType typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; value_type typedefsofa::simulation::NodeSequence< T, strong >; ValueType typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~MultiLink()sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html:9645,Deployability,update,updateLinks,9645,"jectmodel::BaseLinkinline; setPersistent(bool b)sofa::core::objectmodel::BaseLinkinline; setValidator(ValidatorFn fn)sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; storePath() constsofa::core::objectmodel::BaseLinkinline; swap(iterator a, iterator b)sofa::simulation::NodeSequence< T, strong >inline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TraitsContainer typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; TraitsDestPtr typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; TraitsValueType typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; value_type typedefsofa::simulation::NodeSequence< T, strong >; ValueType typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~MultiLink()sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html:258,Modifiability,inherit,inherited,258,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::NodeSequence< T, strong > Member List . This is the complete list of members for sofa::simulation::NodeSequence< T, strong >, including all inherited members. ActiveFlagssofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; add(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; add(DestPtr v, const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; sofa::core::objectmodel::BaseLink::add(Base *baseptr, const std::string &path)sofa::core::objectmodel::BaseLinkinline; addBegin(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; added(DestPtr val, std::size_t index)sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>inlineprotectedvirtual; addPath(const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; BaseLink(LinkFlags flags)sofa::core::objectmodel::BaseLink; BaseLink(const BaseInitLink &init, LinkFlags flags)sofa::core::objectmodel::BaseLink; begin() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; clear()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; const_iterator typedefsofa::simulation::NodeSequence< T, strong >; const_reverse_iterator typedefsofa::simulation::NodeSequence< T, strong >; Container typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; CreateString(const std::string &path, const std::string &data="""")sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, BaseData *data, Base *from)sofa::core::objectm",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html:1290,Usability,clear,clear,1290,":core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; add(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; add(DestPtr v, const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; sofa::core::objectmodel::BaseLink::add(Base *baseptr, const std::string &path)sofa::core::objectmodel::BaseLinkinline; addBegin(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; added(DestPtr val, std::size_t index)sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>inlineprotectedvirtual; addPath(const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; BaseLink(LinkFlags flags)sofa::core::objectmodel::BaseLink; BaseLink(const BaseInitLink &init, LinkFlags flags)sofa::core::objectmodel::BaseLink; begin() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; clear()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; const_iterator typedefsofa::simulation::NodeSequence< T, strong >; const_reverse_iterator typedefsofa::simulation::NodeSequence< T, strong >; Container typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; CreateString(const std::string &path, const std::string &data="""")sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateStringData(BaseData *data)sofa::core::objectmodel::BaseLinkstatic; CreateStringPath(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; DestPtr typedefsofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRO",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:3292,Deployability,update,updateLinks,3292,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:6105,Deployability,update,updateCounter,6105,"K :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSequence(). template<class T , bool strong = false> . sofa::simulation::NodeSequence< T, strong >::NodeSequence ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator[](). template<class T , bool strong = false> . value_type sofa::simulation::NodeSequence< T, strong >::operator[] ; (; std::size_t ; i); const. inline . ◆ swap(). template<class T , bool str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:2407,Integrability,message,message,2407,"or a, iterator b);  Swap two values in the list. Uses a const_cast to violate the read-only iterators. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:2477,Integrability,message,message,2477,"tor end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:665,Modifiability,inherit,inherited,665,"or a, iterator b);  Swap two values in the list. Uses a const_cast to violate the read-only iterators. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:1155,Modifiability,inherit,inherited,1155,"or a, iterator b);  Swap two values in the list. Uses a const_cast to violate the read-only iterators. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:2110,Modifiability,inherit,inherited,2110,"or a, iterator b);  Swap two values in the list. Uses a const_cast to violate the read-only iterators. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:3394,Modifiability,variab,variable,3394,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:3496,Modifiability,variab,variable,3496,"g &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:3607,Modifiability,variab,variable,3607,"More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:4042,Modifiability,inherit,inherited,4042,"the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string Creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:4423,Modifiability,inherit,inherited,4423,"the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string Creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:4623,Modifiability,inherit,inherited,4623,"the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string Creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:4781,Modifiability,inherit,inherited,4781,"the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string Creat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:4996,Modifiability,inherit,inherited,4996,"K :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSequence(). template<class T , bool strong = false> . sofa::simulation::NodeSequence< T, strong >::NodeSequence ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator[](). template<class T , bool strong = false> . value_type sofa::simulation::NodeSequence< T, strong >::operator[] ; (; std::size_t ; i); const. inline . ◆ swap(). template<class T , bool str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:5616,Modifiability,inherit,inherited,5616,"K :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSequence(). template<class T , bool strong = false> . sofa::simulation::NodeSequence< T, strong >::NodeSequence ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator[](). template<class T , bool strong = false> . value_type sofa::simulation::NodeSequence< T, strong >::operator[] ; (; std::size_t ; i); const. inline . ◆ swap(). template<class T , bool str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:5892,Modifiability,inherit,inherited,5892,"K :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSequence(). template<class T , bool strong = false> . sofa::simulation::NodeSequence< T, strong >::NodeSequence ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator[](). template<class T , bool strong = false> . value_type sofa::simulation::NodeSequence< T, strong >::operator[] ; (; std::size_t ; i); const. inline . ◆ swap(). template<class T , bool str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:6050,Modifiability,inherit,inherited,6050,"K :BaseLink::FLAG_DUPLICATE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>; void added (DestPtr val, std::size_t index);  ; void removed (DestPtr val, std::size_t index);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSequence(). template<class T , bool strong = false> . sofa::simulation::NodeSequence< T, strong >::NodeSequence ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator[](). template<class T , bool strong = false> . value_type sofa::simulation::NodeSequence< T, strong >::operator[] ; (; std::size_t ; i); const. inline . ◆ swap(). template<class T , bool str",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:1564,Usability,clear,clear,1564,"or a, iterator b);  Swap two values in the list. Uses a const_cast to violate the read-only iterators. More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::MultiLink< Node, T, BaseLink::FLAG_DOUBLELINK|(false ? BaseLink::FLAG_STRONGLINK :BaseLink::FLAG_DUPLICATE)>;  MultiLink ();  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init);  ;  MultiLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~MultiLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get (std::size_t index) const;  ; DestType * operator[] (std::size_t index) const;  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html:3086,Usability,clear,clear,3086,"ted from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlag",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_sequence.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html:10681,Deployability,update,updateCounter,10681,"ink::InitLink< OwnerType > &init)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inline; SingleLink(const BaseLink::InitLink< OwnerType > &init, DestPtr val)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; storePath() constsofa::core::objectmodel::BaseLinkinline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TraitsContainer typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; TraitsDestPtr typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; TraitsValueType typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; value_type typedefsofa::simulation::NodeSingle< T, duplicate >; ValueType typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~SingleLink()sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html:10746,Deployability,update,updateLinks,10746,"ink::InitLink< OwnerType > &init)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inline; SingleLink(const BaseLink::InitLink< OwnerType > &init, DestPtr val)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inline; size() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; StorePathsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; storePath() constsofa::core::objectmodel::BaseLinkinline; TLink()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TLink(const InitLink< OwnerType > &init)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; TraitsContainer typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; TraitsDestPtr typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; TraitsValueType typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; updateCounter()sofa::core::objectmodel::BaseLinkinlineprotected; updateLinks()sofa::core::objectmodel::BaseLink; ValidatorFn typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; value_type typedefsofa::simulation::NodeSingle< T, duplicate >; ValueType typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; ~BaseLink()sofa::core::objectmodel::BaseLinkvirtual; ~SingleLink()sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inlinevirtual; ~TLink() overridesofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::NodeSingle< T, duplicate > Member List . This is the complete list of members for sofa::simulation::NodeSingle< T, duplicate >, including all inherited members. ActiveFlagssofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >static; add(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; add(DestPtr v, const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; sofa::core::objectmodel::BaseLink::add(Base *baseptr, const std::string &path)sofa::core::objectmodel::BaseLinkinline; addBegin(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; added(DestPtr val, std::size_t)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inlineprotectedvirtual; addPath(const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; BaseLink(LinkFlags flags)sofa::core::objectmodel::BaseLink; BaseLink(const BaseInitLink &init, LinkFlags flags)sofa::core::objectmodel::BaseLink; begin() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; changed(DestPtr before, DestPtr val)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inlineprotected; clear()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; const_iterator typedefsofa::simulation::NodeSingle< T, duplicate >; const_reverse_iterator typedefsofa::simulation::NodeSingle< T, duplicate >; Container typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; CreateString(const std::string &path, const std::string &data="""")sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, Base *from)sofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html:1460,Usability,clear,clear,1460,"nst std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; sofa::core::objectmodel::BaseLink::add(Base *baseptr, const std::string &path)sofa::core::objectmodel::BaseLinkinline; addBegin(DestPtr v)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; added(DestPtr val, std::size_t)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inlineprotectedvirtual; addPath(const std::string &path)sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; BaseLink(LinkFlags flags)sofa::core::objectmodel::BaseLink; BaseLink(const BaseInitLink &init, LinkFlags flags)sofa::core::objectmodel::BaseLink; begin() constsofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; changed(DestPtr before, DestPtr val)sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>inlineprotected; clear()sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >inline; const_iterator typedefsofa::simulation::NodeSingle< T, duplicate >; const_reverse_iterator typedefsofa::simulation::NodeSingle< T, duplicate >; Container typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; CreateString(const std::string &path, const std::string &data="""")sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateString(Base *object, BaseData *data, Base *from)sofa::core::objectmodel::BaseLinkstatic; CreateStringData(BaseData *data)sofa::core::objectmodel::BaseLinkstatic; CreateStringPath(Base *object, Base *from)sofa::core::objectmodel::BaseLinkstatic; DestPtr typedefsofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICAT",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:3821,Deployability,update,updateLinks,3821,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:6657,Deployability,update,updateCounter,6657,"nk::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; void added (DestPtr val, std::size_t);  ; void removed (DestPtr val, std::size_t);  ; void changed (DestPtr before, DestPtr val);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSingle(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::NodeSingle ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator T*(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::operator T* ; (; ); const. inline . ◆ operator*(). template<class T , bool duplic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:564,Integrability,interface,interface,564,"﻿. SOFA API: sofa::simulation::NodeSingle< T, duplicate > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::NodeSingle< T, duplicate > Class Template Reference . #include <Node.h>. Inheritance diagram for sofa::simulation::NodeSingle< T, duplicate >:. [legend]; Detailed Description; template<class T, bool duplicate = true>; class sofa::simulation::NodeSingle< T, duplicate >; Class to hold 0-or-1 object. Public access is only readonly using an interface similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. UPDATE: it is now an alias for the Link pointer container . Public Member Functions;  NodeSingle (const BaseLink::InitLink< Node > &init);  ; T * operator-> () const;  ; T & operator* () const;  ;  operator T* () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>;  SingleLink ();  ;  SingleLink (const BaseLink::InitLink< OwnerType > &init);  ;  SingleLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~SingleLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get () const;  ; void reset ();  ; void set (DestPtr v);  ; void set (DestPtr v, const std::string &path);  ; void setPath (const std::string &path);  ;  operator DestType * () const;  Convenient operators to make a SingleLink appear as a regular pointer. More...;  ; DestType * operator-> () const;  ; DestType & operator* () const;  ; DestPtr operator= (DestPtr v);  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:2936,Integrability,message,message,2936,"alidator (ValidatorFn fn);  ; DestType * get () const;  ; void reset ();  ; void set (DestPtr v);  ; void set (DestPtr v, const std::string &path);  ; void setPath (const std::string &path);  ;  operator DestType * () const;  Convenient operators to make a SingleLink appear as a regular pointer. More...;  ; DestType * operator-> () const;  ; DestType & operator* () const;  ; DestPtr operator= (DestPtr v);  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleL",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:3006,Integrability,message,message,3006,"tor end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:911,Modifiability,inherit,inherited,911," multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::NodeSingle< T, duplicate > Class Template Reference . #include <Node.h>. Inheritance diagram for sofa::simulation::NodeSingle< T, duplicate >:. [legend]; Detailed Description; template<class T, bool duplicate = true>; class sofa::simulation::NodeSingle< T, duplicate >; Class to hold 0-or-1 object. Public access is only readonly using an interface similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. UPDATE: it is now an alias for the Link pointer container . Public Member Functions;  NodeSingle (const BaseLink::InitLink< Node > &init);  ; T * operator-> () const;  ; T & operator* () const;  ;  operator T* () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>;  SingleLink ();  ;  SingleLink (const BaseLink::InitLink< OwnerType > &init);  ;  SingleLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~SingleLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get () const;  ; void reset ();  ; void set (DestPtr v);  ; void set (DestPtr v, const std::string &path);  ; void setPath (const std::string &path);  ;  operator DestType * () const;  Convenient operators to make a SingleLink appear as a regular pointer. More...;  ; DestType * operator-> () const;  ; DestType & operator* () const;  ; DestPtr operator= (DestPtr v);  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v); ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:1684,Modifiability,inherit,inherited,1684,"alidator (ValidatorFn fn);  ; DestType * get () const;  ; void reset ();  ; void set (DestPtr v);  ; void set (DestPtr v, const std::string &path);  ; void setPath (const std::string &path);  ;  operator DestType * () const;  Convenient operators to make a SingleLink appear as a regular pointer. More...;  ; DestType * operator-> () const;  ; DestType & operator* () const;  ; DestPtr operator= (DestPtr v);  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleL",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:2639,Modifiability,inherit,inherited,2639,"alidator (ValidatorFn fn);  ; DestType * get () const;  ; void reset ();  ; void set (DestPtr v);  ; void set (DestPtr v, const std::string &path);  ; void setPath (const std::string &path);  ;  operator DestType * () const;  Convenient operators to make a SingleLink appear as a regular pointer. More...;  ; DestType * operator-> () const;  ; DestType & operator* () const;  ; DestPtr operator= (DestPtr v);  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleL",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:3923,Modifiability,variab,variable,3923,"tring &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:4025,Modifiability,variab,variable,4025,"g &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:4136,Modifiability,variab,variable,4136,"More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:4571,Modifiability,inherit,inherited,4571,"nt the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateSt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:4952,Modifiability,inherit,inherited,4952,"nt the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateSt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:5146,Modifiability,inherit,inherited,5146,"nt the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateSt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:5304,Modifiability,inherit,inherited,5304,"nt the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; static constexpr unsigned ActiveFlags = TFlags;  ; static constexpr bool IsStrongLink = (ActiveFlags & FLAG_STRONGLINK) != 0;  ; static constexpr bool IsMultiLink = (ActiveFlags & FLAG_MULTILINK) != 0;  ; static constexpr bool StorePath = (ActiveFlags & FLAG_STOREPATH) != 0;  ;  Protected Attributes inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateSt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:5519,Modifiability,inherit,inherited,5519,"nk::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; void added (DestPtr val, std::size_t);  ; void removed (DestPtr val, std::size_t);  ; void changed (DestPtr before, DestPtr val);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSingle(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::NodeSingle ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator T*(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::operator T* ; (; ); const. inline . ◆ operator*(). template<class T , bool duplic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:6139,Modifiability,inherit,inherited,6139,"nk::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; void added (DestPtr val, std::size_t);  ; void removed (DestPtr val, std::size_t);  ; void changed (DestPtr before, DestPtr val);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSingle(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::NodeSingle ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator T*(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::operator T* ; (; ); const. inline . ◆ operator*(). template<class T , bool duplic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:6444,Modifiability,inherit,inherited,6444,"nk::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; void added (DestPtr val, std::size_t);  ; void removed (DestPtr val, std::size_t);  ; void changed (DestPtr before, DestPtr val);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSingle(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::NodeSingle ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator T*(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::operator T* ; (; ); const. inline . ◆ operator*(). template<class T , bool duplic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:6602,Modifiability,inherit,inherited,6602,"nk::FLAG_NONE)>; ValidatorFn m_validator;  ;  Protected Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; OwnerType * m_owner {nullptr};  ; Container m_value;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseLink; unsigned int m_flags;  ; std::string m_name;  ; std::string m_help;  ; int m_counter;  Number of changes since creation. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseLink; static bool ParseString (const std::string &text, std::string *path, std::string *data=nullptr, Base *start=nullptr);  ; static std::string CreateString (const std::string &path, const std::string &data="""");  ; static std::string CreateStringPath (Base *object, Base *from);  ; static std::string CreateStringData (BaseData *data);  ; static std::string CreateString (Base *object, Base *from);  ; static std::string CreateString (BaseData *data, Base *from);  ; static std::string CreateString (Base *object, BaseData *data, Base *from);  ;  Protected Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>; void added (DestPtr val, std::size_t);  ; void removed (DestPtr val, std::size_t);  ; void changed (DestPtr before, DestPtr val);  ;  Protected Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >; DestType * getIndex (std::size_t index) const;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseLink; void updateCounter ();  . Constructor details. ◆ NodeSingle(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::NodeSingle ; (; const BaseLink::InitLink< Node > & ; init). inline . Function details. ◆ operator T*(). template<class T , bool duplicate = true> . sofa::simulation::NodeSingle< T, duplicate >::operator T* ; (; ); const. inline . ◆ operator*(). template<class T , bool duplic",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:531,Security,access,access,531,"﻿. SOFA API: sofa::simulation::NodeSingle< T, duplicate > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::NodeSingle< T, duplicate > Class Template Reference . #include <Node.h>. Inheritance diagram for sofa::simulation::NodeSingle< T, duplicate >:. [legend]; Detailed Description; template<class T, bool duplicate = true>; class sofa::simulation::NodeSingle< T, duplicate >; Class to hold 0-or-1 object. Public access is only readonly using an interface similar to std::vector (size/[]/begin/end), plus an automatic conversion to one pointer. UPDATE: it is now an alias for the Link pointer container . Public Member Functions;  NodeSingle (const BaseLink::InitLink< Node > &init);  ; T * operator-> () const;  ; T & operator* () const;  ;  operator T* () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::SingleLink< Node, T, BaseLink::FLAG_DOUBLELINK|(true ? BaseLink::FLAG_DUPLICATE :BaseLink::FLAG_NONE)>;  SingleLink ();  ;  SingleLink (const BaseLink::InitLink< OwnerType > &init);  ;  SingleLink (const BaseLink::InitLink< OwnerType > &init, DestPtr val);  ; virtual ~SingleLink ();  ; void setValidator (ValidatorFn fn);  ; DestType * get () const;  ; void reset ();  ; void set (DestPtr v);  ; void set (DestPtr v, const std::string &path);  ; void setPath (const std::string &path);  ;  operator DestType * () const;  Convenient operators to make a SingleLink appear as a regular pointer. More...;  ; DestType * operator-> () const;  ; DestType & operator* () const;  ; DestPtr operator= (DestPtr v);  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:2093,Usability,clear,clear,2093,"alidator (ValidatorFn fn);  ; DestType * get () const;  ; void reset ();  ; void set (DestPtr v);  ; void set (DestPtr v, const std::string &path);  ; void setPath (const std::string &path);  ;  operator DestType * () const;  Convenient operators to make a SingleLink appear as a regular pointer. More...;  ; DestType * operator-> () const;  ; DestType & operator* () const;  ; DestPtr operator= (DestPtr v);  ;  Public Member Functions inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlags >;  TLink ();  ;  TLink (const InitLink< OwnerType > &init);  ;  ~TLink () override;  ; size_t size () const;  ; bool empty () const;  ; const Container & getValue () const;  ; const_iterator begin () const;  ; const_iterator end () const;  ; const_reverse_iterator rbegin () const;  ; const_reverse_iterator rend () const;  ; void clear ();  ; bool addBegin (DestPtr v);  ; bool add (DestPtr v);  ; bool add (DestPtr v, const std::string &path);  ; bool addPath (const std::string &path);  ; bool remove (DestPtr v);  ; bool removeAt (std::size_t index);  ; bool removePath (const std::string &path);  ; const BaseClass * getDestClass () const override;  ; const BaseClass * getOwnerClass () const override;  ; size_t getSize () const override;  ; sofa::core::objectmodel::Base * getOwnerBase () const override;  ; void setOwner (OwnerType *owner);  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleL",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html:3615,Usability,clear,clear,3615,"ted from sofa::core::objectmodel::BaseLink;  BaseLink (LinkFlags flags);  ;  BaseLink (const BaseInitLink &init, LinkFlags flags);  ; virtual ~BaseLink ();  ; const std::string & getName () const;  ; void setName (const std::string &name);  ; const std::string & getHelp () const;  Get help message. More...;  ; void setHelp (const std::string &val);  Set help message. More...;  ; void setFlag (LinkFlagsEnum flag, bool b);  Set one of the flags. More...;  ; bool getFlag (LinkFlagsEnum flag) const;  Get one flag. More...;  ; bool isMultiLink () const;  ; bool isStrongLink () const;  ; bool isDoubleLink () const;  ; bool isDuplicate () const;  ; bool storePath () const;  ; void setPersistent (bool b);  Alias to match BaseData API. More...;  ; bool isPersistent () const;  ; bool isReadOnly () const;  Alias to match BaseData API. More...;  ; int getCounter () const;  ; void setLinkedBase (Base *link);  ; Base * getLinkedBase (std::size_t index=0) const;  ; void clear ();  ; std::string getLinkedPath (const std::size_t index=0) const;  ; std::string getPath (std::size_t index=0) const;  ; bool read (const std::string &str);  Read the command line. More...;  ; bool updateLinks ();  ; virtual void printValue (std::ostream &) const;  Print the value of the associated variable. More...;  ; virtual std::string getValueString () const;  Print the value of the associated variable. More...;  ; virtual std::string getValueTypeString () const;  Print the value type of the associated variable. More...;  ; bool parseString (const std::string &text, std::string *path, std::string *data=nullptr) const;  ; Base * getOwner () const;  ; void setOwner (Base *owner);  ; bool add (Base *baseptr, const std::string &path);  Add a new target to the link. More...;  ; bool set (Base *baseptr, size_t index=0);  Change the link's target at the provided index. More...;  . Additional Inherited Members;  Static Public Attributes inherited from sofa::core::objectmodel::TLink< TOwnerType, TDestType, TFlag",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_node_single.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product-members.html:310,Modifiability,inherit,inherited,310,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType > Member List . This is the complete list of members for sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >, including all inherited members. computeIntersection()sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protected; computeProduct(bool forceComputeIntersection=false)sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; computeProductFromIntersection() overridesofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >inlinevirtual; computeRegularProduct()sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; getProductResult() constsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >inline; Index typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; invalidateIntersection()sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; LhsCleaned typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; LhsScalar typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; m_hasComputedIntersectionsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protected; m_intersectionABsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protected; m_lhssofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; m_productResultsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >protected; m_rhssofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ProductResult typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ResultCleaned typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ResultScalar typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; RhsCleaned typedefsofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; RhsScalar typedefsofa::linearalgebra::SparseMa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html:582,Modifiability,inherit,inherited,582,"﻿. SOFA API: sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType > Class Template Reference . #include <ParallelSparseMatrixProduct.h>. Inheritance diagram for sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >:. [legend]. Public Attributes; TaskScheduler * taskScheduler { nullptr };  ;  Public Attributes inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; const LhsCleaned * m_lhs { nullptr };  Left side of the product A*B. More...;  ; const RhsCleaned * m_rhs { nullptr };  Right side of the product A*B. More...;  . Public Member Functions; void computeProductFromIntersection () override;  ;  Public Member Functions inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; void computeProduct (bool forceComputeIntersection=false);  ; void computeRegularProduct ();  ; const ResultType & getProductResult () const;  ; void invalidateIntersection ();  ;  SparseMatrixProduct (Lhs *lhs, Rhs *rhs);  ;  SparseMatrixProduct ()=default;  ; virtual ~SparseMatrixProduct ()=default;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ProductResult m_productResult;  ; bool m_hasComputedIntersection { false };  Result of LHS * RHS. More...;  ; Intersection m_intersectionAB;  ;  Protected Member Functions inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; void computeIntersection ();  . Attribute details. ◆ taskScheduler. template<class Lhs , class Rhs , class ResultType > . TaskScheduler* sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >::taskScheduler { nullptr }. Function details. ◆ computeProductFromIntersection(). template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html:928,Modifiability,inherit,inherited,928," ResultType > Class Template Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType > Class Template Reference . #include <ParallelSparseMatrixProduct.h>. Inheritance diagram for sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >:. [legend]. Public Attributes; TaskScheduler * taskScheduler { nullptr };  ;  Public Attributes inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; const LhsCleaned * m_lhs { nullptr };  Left side of the product A*B. More...;  ; const RhsCleaned * m_rhs { nullptr };  Right side of the product A*B. More...;  . Public Member Functions; void computeProductFromIntersection () override;  ;  Public Member Functions inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; void computeProduct (bool forceComputeIntersection=false);  ; void computeRegularProduct ();  ; const ResultType & getProductResult () const;  ; void invalidateIntersection ();  ;  SparseMatrixProduct (Lhs *lhs, Rhs *rhs);  ;  SparseMatrixProduct ()=default;  ; virtual ~SparseMatrixProduct ()=default;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ProductResult m_productResult;  ; bool m_hasComputedIntersection { false };  Result of LHS * RHS. More...;  ; Intersection m_intersectionAB;  ;  Protected Member Functions inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; void computeIntersection ();  . Attribute details. ◆ taskScheduler. template<class Lhs , class Rhs , class ResultType > . TaskScheduler* sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >::taskScheduler { nullptr }. Function details. ◆ computeProductFromIntersection(). template<class Lhs , class Rhs , class ResultType > . void sofa::simulation::Par",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html:1367,Modifiability,inherit,inherited,1367,"eMatrixProduct.h>. Inheritance diagram for sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >:. [legend]. Public Attributes; TaskScheduler * taskScheduler { nullptr };  ;  Public Attributes inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; const LhsCleaned * m_lhs { nullptr };  Left side of the product A*B. More...;  ; const RhsCleaned * m_rhs { nullptr };  Right side of the product A*B. More...;  . Public Member Functions; void computeProductFromIntersection () override;  ;  Public Member Functions inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; void computeProduct (bool forceComputeIntersection=false);  ; void computeRegularProduct ();  ; const ResultType & getProductResult () const;  ; void invalidateIntersection ();  ;  SparseMatrixProduct (Lhs *lhs, Rhs *rhs);  ;  SparseMatrixProduct ()=default;  ; virtual ~SparseMatrixProduct ()=default;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ProductResult m_productResult;  ; bool m_hasComputedIntersection { false };  Result of LHS * RHS. More...;  ; Intersection m_intersectionAB;  ;  Protected Member Functions inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; void computeIntersection ();  . Attribute details. ◆ taskScheduler. template<class Lhs , class Rhs , class ResultType > . TaskScheduler* sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >::taskScheduler { nullptr }. Function details. ◆ computeProductFromIntersection(). template<class Lhs , class Rhs , class ResultType > . void sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >::computeProductFromIntersection ; (; ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >. sofasimulationParallelSparseMatrixProduct; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html:1620,Modifiability,inherit,inherited,1620,"eMatrixProduct.h>. Inheritance diagram for sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >:. [legend]. Public Attributes; TaskScheduler * taskScheduler { nullptr };  ;  Public Attributes inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; const LhsCleaned * m_lhs { nullptr };  Left side of the product A*B. More...;  ; const RhsCleaned * m_rhs { nullptr };  Right side of the product A*B. More...;  . Public Member Functions; void computeProductFromIntersection () override;  ;  Public Member Functions inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; void computeProduct (bool forceComputeIntersection=false);  ; void computeRegularProduct ();  ; const ResultType & getProductResult () const;  ; void invalidateIntersection ();  ;  SparseMatrixProduct (Lhs *lhs, Rhs *rhs);  ;  SparseMatrixProduct ()=default;  ; virtual ~SparseMatrixProduct ()=default;  . Additional Inherited Members;  Protected Attributes inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; ProductResult m_productResult;  ; bool m_hasComputedIntersection { false };  Result of LHS * RHS. More...;  ; Intersection m_intersectionAB;  ;  Protected Member Functions inherited from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >; void computeIntersection ();  . Attribute details. ◆ taskScheduler. template<class Lhs , class Rhs , class ResultType > . TaskScheduler* sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >::taskScheduler { nullptr }. Function details. ◆ computeProductFromIntersection(). template<class Lhs , class Rhs , class ResultType > . void sofa::simulation::ParallelSparseMatrixProduct< Lhs, Rhs, ResultType >::computeProductFromIntersection ; (; ). inlineoverridevirtual . Reimplemented from sofa::linearalgebra::SparseMatrixProduct< Lhs, Rhs, ResultType >. sofasimulationParallelSparseMatrixProduct; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_parallel_sparse_matrix_product.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event-members.html:228,Modifiability,inherit,inherited,228,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::PauseEvent Member List . This is the complete list of members for sofa::simulation::PauseEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::PauseEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; PauseEvent()sofa::simulation::PauseEvent; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual; ~PauseEvent() overridesofa::simulation::PauseEvent. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html:522,Modifiability,inherit,inherited,522,"﻿. SOFA API: sofa::simulation::PauseEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::PauseEvent Class Reference . #include <PauseEvent.h>. Inheritance diagram for sofa::simulation::PauseEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  PauseEvent ();  ;  ~PauseEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ PauseEvent(). sofa::simulation::PauseEvent::PauseEvent ; (; ). ◆ ~PauseEvent(). sofa::simulation::PauseEvent::~PauseEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::PauseEvent::GetClassName ; (; ). inlinestatic . sofasimulationPauseEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html:994,Modifiability,inherit,inherited,994,"﻿. SOFA API: sofa::simulation::PauseEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::PauseEvent Class Reference . #include <PauseEvent.h>. Inheritance diagram for sofa::simulation::PauseEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  PauseEvent ();  ;  ~PauseEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ PauseEvent(). sofa::simulation::PauseEvent::PauseEvent ; (; ). ◆ ~PauseEvent(). sofa::simulation::PauseEvent::~PauseEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::PauseEvent::GetClassName ; (; ). inlinestatic . sofasimulationPauseEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html:1172,Modifiability,inherit,inherited,1172,"﻿. SOFA API: sofa::simulation::PauseEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::PauseEvent Class Reference . #include <PauseEvent.h>. Inheritance diagram for sofa::simulation::PauseEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  PauseEvent ();  ;  ~PauseEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ PauseEvent(). sofa::simulation::PauseEvent::PauseEvent ; (; ). ◆ ~PauseEvent(). sofa::simulation::PauseEvent::~PauseEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::PauseEvent::GetClassName ; (; ). inlinestatic . sofasimulationPauseEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html:1267,Modifiability,inherit,inherited,1267,"﻿. SOFA API: sofa::simulation::PauseEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::PauseEvent Class Reference . #include <PauseEvent.h>. Inheritance diagram for sofa::simulation::PauseEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  PauseEvent ();  ;  ~PauseEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ PauseEvent(). sofa::simulation::PauseEvent::PauseEvent ; (; ). ◆ ~PauseEvent(). sofa::simulation::PauseEvent::~PauseEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::PauseEvent::GetClassName ; (; ). inlinestatic . sofasimulationPauseEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pause_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:11129,Deployability,update,updateInternal,11129,"el::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Pipeline, sofa::core::objectmodel::BaseObject)sofa::core::collision::Pipeline; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Pipeline() overridesofa::core::collision::Pipelineprotected; ~PipelineImpl() overridesofa::simulation::PipelineImplprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:11182,Deployability,update,updateLinks,11182,"el::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Pipeline, sofa::core::objectmodel::BaseObject)sofa::core::collision::Pipeline; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Pipeline() overridesofa::core::collision::Pipelineprotected; ~PipelineImpl() overridesofa::simulation::PipelineImplprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::PipelineImpl Member List . This is the complete list of members for sofa::simulation::PipelineImpl, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; broadPhaseDetectionsofa::core::collision::Pipelineprotected; broadPhaseDetectionssofa::core::collision::Pipelineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; cle",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:10574,Performance,load,loader,10574,"reinit()sofa::core::objectmodel::BaseObjectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(objectmodel::BaseNode *node) overridesofa::core::collision::Pipelinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Pipeline, sofa::core::objectmodel::BaseObject)sofa::core::collision::Pipeline; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:700,Testability,log,logging,700," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; broadPhaseDetectionsofa::core::collision::Pipelineprotected; broadPhaseDetectionssofa::core::collision::Pipelineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; cle",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:2580,Testability,log,logging,2580," BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollisionDetection() overridesofa::simulation::PipelineImplvirtual; computeCollisionReset() overridesofa::simulation::PipelineImplvirtual; computeCollisionResponse() overridesofa::simulation::PipelineImplvirtual; computeCollisions()sofa::core::collision::Pipelineinline; contactManagersofa::core::collision::Pipelineprotected; contactManagerssofa::core::collision::Pipelineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doCollisionDetection(const sofa::type::vector< core::CollisionModel * > &collisionModels)=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionReset()=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionResponse()=0sofa::core::collision::Pipelineprotectedpure virtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Ba",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:2622,Testability,log,logging,2622,"fa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollisionDetection() overridesofa::simulation::PipelineImplvirtual; computeCollisionReset() overridesofa::simulation::PipelineImplvirtual; computeCollisionResponse() overridesofa::simulation::PipelineImplvirtual; computeCollisions()sofa::core::collision::Pipelineinline; contactManagersofa::core::collision::Pipelineprotected; contactManagerssofa::core::collision::Pipelineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doCollisionDetection(const sofa::type::vector< core::CollisionModel * > &collisionModels)=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionReset()=0sofa::core::collision::Pipelineprotectedpure virtual; doCollisionResponse()=0sofa::core::collision::Pipelineprotectedpure virtual; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::objectmodel::Base; findDataLinkDest(BaseData *&ptr, const",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:5165,Testability,log,logging,5165,e; getBroadPhaseDetection() constsofa::core::collision::Pipeline; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNarrowPhaseDetection() constsofa::core::collision::Pipeline; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getResponseList() const =0sofa::core::collision::Pipelinepure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; groupManagersofa::core::collision::Pipelineprotected; groupManagerssofa::core::collision::Pipelineprotected; handleEvent(Event *)so,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:5207,Testability,log,logging,5207,e::collision::Pipeline; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClass() constsofa::core::objectmodel::Baseinlinevirtual; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getNarrowPhaseDetection() constsofa::core::collision::Pipeline; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getResponseList() const =0sofa::core::collision::Pipelinepure virtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; groupManagersofa::core::collision::Pipelineprotected; groupManagerssofa::core::collision::Pipelineprotected; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:11199,Testability,log,logErrors,11199,"el::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; reset() overridesofa::simulation::PipelineImplvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_ABSTRACT_CLASS(Pipeline, sofa::core::objectmodel::BaseObject)sofa::core::collision::Pipeline; SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~Pipeline() overridesofa::core::collision::Pipelineprotected; ~PipelineImpl() overridesofa::simulation::PipelineImplprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html:1998,Usability,clear,clearLoggedMessages,1998,"ack(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; broadPhaseDetectionsofa::core::collision::Pipelineprotected; broadPhaseDetectionssofa::core::collision::Pipelineprotected; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; computeCollisionDetection() overridesofa::simulation::PipelineImplvirtual; computeCollisionReset() overridesofa::simulation::PipelineImplvirtual; computeCollisionResponse() overridesofa::simulation::PipelineImplvirtual; computeCollisions()sofa::core::collision::Pipelineinline; contactManagersofa::core::collision::Pipelineprotected; contactManagerssofa::core::collision::Pipelineprotected; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_messageLogCountsofa::core::objectmodel::Basemutable; doCollisionDetection(const sofa::type::vector< core::CollisionModel * > &collisionModels)=0sofa::core::collisi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:482,Availability,down,down,482,"﻿. SOFA API: sofa::simulation::PipelineImpl Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::PipelineImpl Class Reference . #include <PipelineImpl.h>. Inheritance diagram for sofa::simulation::PipelineImpl:. [legend]. Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1419,Availability,avail,available,1419,"ride;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:15752,Availability,down,down,15752,"s) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ PipelineImpl(). sofa::simulation::PipelineImpl::PipelineImpl ; (; ). protected . ◆ ~PipelineImpl(). sofa::simulation::PipelineImpl::~PipelineImpl ; (; ). overrideprotected . Function details. ◆ computeCollisionDetection(). void sofa::simulation::PipelineImpl::computeCollisionDetection ; (; ). overridevirtual . Detect new collisions. Note that this step must not modify the simulation graph. ; Implements sofa::core::collision::Pipeline. ◆ computeCollisionReset(). void sofa::simulation::PipelineImpl::computeCollisionReset ; (; ). overridevirtual . Remove collision response from last step. ; Implements sofa::core::collision::Pipeline. ◆ computeCollisionResponse(). void sofa::simulation::PipelineImpl::computeCollisionResponse ; (; ). overridevirtual . Add collision response in the simulation graph. ; Implements sofa::core::collision::Pipeline. ◆ init(). void sofa::simulation::PipelineImpl::init ; (; void ; ). overridevirtual . Initialization method called at graph creation and modification, during top-down traversal. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ reset(). void sofa::simulation::PipelineImpl::reset ; (; void ; ). overridevirtual . Reset to initial state. ; Implements sofa::core::collision::Pipeline. sofasimulationPipelineImpl; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1456,Deployability,pipeline,pipeline,1456,"ride;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:3388,Deployability,update,updateInternal,3388,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:7823,Deployability,update,updateLinks,7823,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:10548,Deployability,update,update,10548," MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  PipelineImpl ();  ;  ~PipelineImpl () override;  ;  Protected Member Functions inherited from sofa::core::collision::Pipeline;  Pipeline ();  ;  ~Pipeline () override;  ; virtual void doCollisionReset ()=0;  Remove collision response from last step. More...;  ; virtual void doCollisionDetection (const sofa::type::vector< core::CollisionModel * > &collisionModels)=0;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; virtual void doCollisionResponse ()=0;  Add collision response in the simulation graph. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:2043,Integrability,depend,dependent,2043," sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:12251,Integrability,message,messages,12251,"tData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::collision::Pipeline; sofa::type::vector< Intersection * > intersectionMethods;  ; sofa::type::vector< BroadPhaseDetection * > broadPhaseDetections;  ; sofa::type::vector< NarrowPhaseDetection * > narrowPhaseDetections;  ; sofa::type::vector< ContactManager * > contactManagers;  ; sofa::type::vector< CollisionGroupManager * > groupManagers;  ; Intersection * intersectionMethod;  ; B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:933,Modifiability,inherit,inherited,933,"s Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::PipelineImpl Class Reference . #include <PipelineImpl.h>. Inheritance diagram for sofa::simulation::PipelineImpl:. [legend]. Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect depend",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1624,Modifiability,inherit,inherited,1624,"ep. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:3324,Modifiability,variab,variables,3324," getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:3434,Modifiability,variab,variables,3434,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:3476,Modifiability,variab,variables,3476,"time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:3661,Modifiability,inherit,inherited,3661,"al void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:9870,Modifiability,inherit,inherited,9870," const char *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  PipelineImpl ();  ;  ~PipelineImpl () override;  ;  Protected Member Functions inherited from sofa::core::collision::Pipeline;  Pipeline ();  ;  ~Pipeline () override;  ; virtual void doCollisionReset ()=0;  Remove collision response from last step. More...;  ; virtual void doCollisionDetection (const sofa::type::vector< core::CollisionModel * > &collisionModels)=0;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; virtual void doCollisionResponse ()=0;  Add collision response in the simulation graph. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:10382,Modifiability,inherit,inherited,10382," MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  PipelineImpl ();  ;  ~PipelineImpl () override;  ;  Protected Member Functions inherited from sofa::core::collision::Pipeline;  Pipeline ();  ;  ~Pipeline () override;  ; virtual void doCollisionReset ()=0;  Remove collision response from last step. More...;  ; virtual void doCollisionDetection (const sofa::type::vector< core::CollisionModel * > &collisionModels)=0;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; virtual void doCollisionResponse ()=0;  Add collision response in the simulation graph. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *na",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:11105,Modifiability,inherit,inherited,11105,"the simulation graph. More...;  ; virtual void doCollisionResponse ()=0;  Add collision response in the simulation graph. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_pr",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:11836,Modifiability,inherit,inherited,11836,"a to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::collision::Pipeline; sofa::typ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:12002,Modifiability,inherit,inherited,12002,"ted Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::collision::Pipeline; sofa::type::vector< Intersection * > intersectionMethods;  ; sofa::type::vector< BroadPhaseDetection * > broadPhaseDetections;  ; sofa::type::vector< NarrowPhaseDetection * > narrowPhaseDetections;  ; sofa::type::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:12824,Modifiability,inherit,inherited,12824,"emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::collision::Pipeline; sofa::type::vector< Intersection * > intersectionMethods;  ; sofa::type::vector< BroadPhaseDetection * > broadPhaseDetections;  ; sofa::type::vector< NarrowPhaseDetection * > narrowPhaseDetections;  ; sofa::type::vector< ContactManager * > contactManagers;  ; sofa::type::vector< CollisionGroupManager * > groupManagers;  ; Intersection * intersectionMethod;  ; BroadPhaseDetection * broadPhaseDetection;  ; NarrowPhaseDetection * narrowPhaseDetection;  ; ContactManager * contactManager;  ; CollisionGroupManager * groupManager;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:13427,Modifiability,inherit,inherited,13427,"emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::collision::Pipeline; sofa::type::vector< Intersection * > intersectionMethods;  ; sofa::type::vector< BroadPhaseDetection * > broadPhaseDetections;  ; sofa::type::vector< NarrowPhaseDetection * > narrowPhaseDetections;  ; sofa::type::vector< ContactManager * > contactManagers;  ; sofa::type::vector< CollisionGroupManager * > groupManagers;  ; Intersection * intersectionMethod;  ; BroadPhaseDetection * broadPhaseDetection;  ; NarrowPhaseDetection * narrowPhaseDetection;  ; ContactManager * contactManager;  ; CollisionGroupManager * groupManager;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:13681,Modifiability,inherit,inherited,13681,"emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  ;  Protected Attributes inherited from sofa::core::collision::Pipeline; sofa::type::vector< Intersection * > intersectionMethods;  ; sofa::type::vector< BroadPhaseDetection * > broadPhaseDetections;  ; sofa::type::vector< NarrowPhaseDetection * > narrowPhaseDetections;  ; sofa::type::vector< ContactManager * > contactManagers;  ; sofa::type::vector< CollisionGroupManager * > groupManagers;  ; Intersection * intersectionMethod;  ; BroadPhaseDetection * broadPhaseDetection;  ; NarrowPhaseDetection * narrowPhaseDetection;  ; ContactManager * contactManager;  ; CollisionGroupManager * groupManager;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:14120,Modifiability,inherit,inherited,14120,"rsection * intersectionMethod;  ; BroadPhaseDetection * broadPhaseDetection;  ; NarrowPhaseDetection * narrowPhaseDetection;  ; ContactManager * contactManager;  ; CollisionGroupManager * groupManager;  ;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ PipelineImpl(). sofa::simulation::PipelineImpl::PipelineImpl ; (; ). protected . ◆ ~PipelineImpl(). sofa::simulation::PipelineImpl::~PipelineImpl ; (; ). overrideprotected . Function details. ◆ computeCollisionDetection(). void sofa::simulation::PipelineImpl::computeCollisionDetection ; (; ). overridevirtual . Detect new collisions. Note that this step must not modify the simulation graph. ; Implements sofa::core::collision::Pipeline. ◆ computeCollisionRes",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:14520,Modifiability,inherit,inherited,14520,"bject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Constructor details. ◆ PipelineImpl(). sofa::simulation::PipelineImpl::PipelineImpl ; (; ). protected . ◆ ~PipelineImpl(). sofa::simulation::PipelineImpl::~PipelineImpl ; (; ). overrideprotected . Function details. ◆ computeCollisionDetection(). void sofa::simulation::PipelineImpl::computeCollisionDetection ; (; ). overridevirtual . Detect new collisions. Note that this step must not modify the simulation graph. ; Implements sofa::core::collision::Pipeline. ◆ computeCollisionReset(). void sofa::simulation::PipelineImpl::computeCollisionReset ; (; ). overridevirtual . Remove collision response from last step. ; Implements sofa::core::collision::Pipeline. ◆ computeCollisionResponse(). void sofa::simulation::PipelineImpl::computeCollisionResponse ; (; ). overridevirtual . Add collision response in the simulation graph. ; Implements sofa::core::collision::Pipeline. ◆ init().",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:2124,Performance,load,loader,2124,"tion * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; void parse (BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modificatio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1168,Safety,detect,detection,1168,"s Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::PipelineImpl Class Reference . #include <PipelineImpl.h>. Inheritance diagram for sofa::simulation::PipelineImpl:. [legend]. Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect depend",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1294,Safety,detect,detection,1294,". #include <PipelineImpl.h>. Inheritance diagram for sofa::simulation::PipelineImpl:. [legend]. Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &pa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1185,Security,access,accessor,1185,"s Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::PipelineImpl Class Reference . #include <PipelineImpl.h>. Inheritance diagram for sofa::simulation::PipelineImpl:. [legend]. Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect depend",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:1311,Security,access,accessor,1311,". #include <PipelineImpl.h>. Inheritance diagram for sofa::simulation::PipelineImpl:. [legend]. Public Member Functions; void init () override;  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; void reset () override;  Reset to initial state. More...;  ; void computeCollisionReset () override;  Remove collision response from last step. More...;  ; void computeCollisionDetection () override;  Detect new collisions. Note that this step must not modify the simulation graph. More...;  ; void computeCollisionResponse () override;  Add collision response in the simulation graph. More...;  ;  Public Member Functions inherited from sofa::core::collision::Pipeline;  SOFA_ABSTRACT_CLASS (Pipeline, sofa::core::objectmodel::BaseObject);  ; void computeCollisions ();  ; const BroadPhaseDetection * getBroadPhaseDetection () const;  Broad phase collision detection method accessor. More...;  ; const NarrowPhaseDetection * getNarrowPhaseDetection () const;  Narrow phase collision detection method accessor. More...;  ; virtual std::set< std::string > getResponseList () const =0;  get the set of response available with the current collision pipeline More...;  ; bool insertInNode (objectmodel::BaseNode *node) override;  ; bool removeInNode (objectmodel::BaseNode *node) override;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &pa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:5679,Testability,log,logging,5679," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:5752,Testability,log,logging,5752," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:5794,Testability,log,logging,5794," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:5864,Testability,log,logging,5864," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:5975,Testability,log,logging,5975," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:6017,Testability,log,logging,6017," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:7841,Testability,log,logErrors,7841,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html:6060,Usability,clear,clearLoggedMessages,6060," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_pipeline_impl.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::PositionEvent Member List . This is the complete list of members for sofa::simulation::PositionEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::PositionEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; PositionEvent()sofa::simulation::PositionEvent; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; ~Event()sofa::core::objectmodel::Eventvirtual; ~PositionEvent() overridesofa::simulation::PositionEvent. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_position_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html:528,Modifiability,inherit,inherited,528,"﻿. SOFA API: sofa::simulation::PositionEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::PositionEvent Class Reference . #include <PositionEvent.h>. Inheritance diagram for sofa::simulation::PositionEvent:. [legend]; Detailed Description; Event modify the position of model . Public Member Functions;  PositionEvent ();  ;  ~PositionEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ PositionEvent(). sofa::simulation::PositionEvent::PositionEvent ; (; ). ◆ ~PositionEvent(). sofa::simulation::PositionEvent::~PositionEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::PositionEvent::GetClassName ; (; ). inlinestatic . sofasimulationPositionEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html:1000,Modifiability,inherit,inherited,1000,"﻿. SOFA API: sofa::simulation::PositionEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::PositionEvent Class Reference . #include <PositionEvent.h>. Inheritance diagram for sofa::simulation::PositionEvent:. [legend]; Detailed Description; Event modify the position of model . Public Member Functions;  PositionEvent ();  ;  ~PositionEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ PositionEvent(). sofa::simulation::PositionEvent::PositionEvent ; (; ). ◆ ~PositionEvent(). sofa::simulation::PositionEvent::~PositionEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::PositionEvent::GetClassName ; (; ). inlinestatic . sofasimulationPositionEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html:1178,Modifiability,inherit,inherited,1178,"﻿. SOFA API: sofa::simulation::PositionEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::PositionEvent Class Reference . #include <PositionEvent.h>. Inheritance diagram for sofa::simulation::PositionEvent:. [legend]; Detailed Description; Event modify the position of model . Public Member Functions;  PositionEvent ();  ;  ~PositionEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ PositionEvent(). sofa::simulation::PositionEvent::PositionEvent ; (; ). ◆ ~PositionEvent(). sofa::simulation::PositionEvent::~PositionEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::PositionEvent::GetClassName ; (; ). inlinestatic . sofasimulationPositionEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html:1273,Modifiability,inherit,inherited,1273,"﻿. SOFA API: sofa::simulation::PositionEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::PositionEvent Class Reference . #include <PositionEvent.h>. Inheritance diagram for sofa::simulation::PositionEvent:. [legend]; Detailed Description; Event modify the position of model . Public Member Functions;  PositionEvent ();  ;  ~PositionEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ PositionEvent(). sofa::simulation::PositionEvent::PositionEvent ; (; ). ◆ ~PositionEvent(). sofa::simulation::PositionEvent::~PositionEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::PositionEvent::GetClassName ; (; ). inlinestatic . sofasimulationPositionEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_position_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::PrintVisitor Member List . This is the complete list of members for sofa::simulation::PrintVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor-members.html:4233,Testability,test,testTags,4233,"se)sofa::simulation::PrintVisitorinline; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::PrintVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::PrintVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(T obj)sofa::simulation::PrintVisitor; processObjects(Seq &list, const char *name)sofa::simulation::PrintVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; setVerbose(int v)sofa::simulation::PrintVisitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat) overridesofa::simulation::PrintVisitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; verbosesofa::simulation::PrintVisitorprotected; visitingOrdersofa::simulation::PrintVisitorprotected; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:7117,Deployability,configurat,configurations,7117,"on but can print the graph visiting by setting visitingOrder at true . Constructor details. ◆ PrintVisitor(). sofa::simulation::PrintVisitor::PrintVisitor ; (; const sofa::core::ExecParams * ; params, . bool ; visitingOrder = false . ). inline . Function details. ◆ getClassName(). const char* sofa::simulation::PrintVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getVerbose(). int sofa::simulation::PrintVisitor::getVerbose ; (; ); const. inline . ◆ processNodeBottomUp(). void sofa::simulation::PrintVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::PrintVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ processObject(). template<class T > . void sofa::simulation::PrintVisitor::processObject ; (; T ; obj). ◆ processObjects(). template<class Seq > . void sofa::simulation::PrintVisitor::processObjects ; (; Seq & ; list, . const char * ; name . ). ◆ setVerbose(). void sofa::simulation::PrintVisitor::setVerbose ; (; int ; v). inline . ◆ treeTraversal(). bool sofa::simulation::PrintVisitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). inlineoverridevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented from sofa::simulation::Visitor. sofasimulationPrintVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:564,Modifiability,inherit,inherited,564,"﻿. SOFA API: sofa::simulation::PrintVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::PrintVisitor Class Reference . #include <PrintVisitor.h>. Inheritance diagram for sofa::simulation::PrintVisitor:. [legend]. Protected Attributes; int verbose;  ; int level;  ; bool visitingOrder;  by default print the graph organisation but can print the graph visiting by setting visitingOrder at true More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  PrintVisitor (const sofa::core::ExecParams *params, bool visitingOrder=false);  ; void setVerbose (int v);  ; int getVerbose () const;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  ; template<class T > ; void processObject (T obj);  ; template<class Seq > ; void processObjects (Seq &list, const char *name);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:1440,Modifiability,inherit,inherited,1440,"otected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  PrintVisitor (const sofa::core::ExecParams *params, bool visitingOrder=false);  ; void setVerbose (int v);  ; int getVerbose () const;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  ; template<class T > ; void processObject (T obj);  ; template<class Seq > ; void processObjects (Seq &list, const char *name);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:3508,Modifiability,inherit,inherited,3508,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:3715,Modifiability,inherit,inherited,3715,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ level. int sofa::simulation::PrintVisitor::level. protected . ◆ verbose. int sofa::simulation::PrintVisitor::verbose. protected . ◆ visitingOrder. bool sofa::simulation::PrintVisitor::visitingOrder. protected . by default print the graph organisation but can print the graph visiting by setting visitingOrder at true . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:7117,Modifiability,config,configurations,7117,"on but can print the graph visiting by setting visitingOrder at true . Constructor details. ◆ PrintVisitor(). sofa::simulation::PrintVisitor::PrintVisitor ; (; const sofa::core::ExecParams * ; params, . bool ; visitingOrder = false . ). inline . Function details. ◆ getClassName(). const char* sofa::simulation::PrintVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getVerbose(). int sofa::simulation::PrintVisitor::getVerbose ; (; ); const. inline . ◆ processNodeBottomUp(). void sofa::simulation::PrintVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::PrintVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ processObject(). template<class T > . void sofa::simulation::PrintVisitor::processObject ; (; T ; obj). ◆ processObjects(). template<class Seq > . void sofa::simulation::PrintVisitor::processObjects ; (; Seq & ; list, . const char * ; name . ). ◆ setVerbose(). void sofa::simulation::PrintVisitor::setVerbose ; (; int ; v). inline . ◆ treeTraversal(). bool sofa::simulation::PrintVisitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). inlineoverridevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented from sofa::simulation::Visitor. sofasimulationPrintVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:3652,Security,access,access,3652,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html:1839,Testability,test,testTags,1839,"class T > ; void processObject (T obj);  ; template<class Seq > ; void processObjects (Seq &list, const char *name);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & a",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::PropagateEventVisitor Member List . This is the complete list of members for sofa::simulation::PropagateEventVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor-members.html:4151,Testability,test,testTags,4151,"ion::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::PropagateEventVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(simulation::Node *, core::objectmodel::BaseObject *obj)sofa::simulation::PropagateEventVisitor; PropagateEventVisitor(const core::ExecParams *params, sofa::core::objectmodel::Event *e)sofa::simulation::PropagateEventVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~PropagateEventVisitor() overridesofa::simulation::PropagateEventVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html:491,Availability,down,down,491,"﻿. SOFA API: sofa::simulation::PropagateEventVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::PropagateEventVisitor Class Reference . #include <PropagateEventVisitor.h>. Inheritance diagram for sofa::simulation::PropagateEventVisitor:. [legend]; Detailed Description; Visitor used to propagate an event in the data structure. Propagation is done top-down until the event is handled. @author The SOFA team </www.sofa-framework.org>; . Protected Attributes; sofa::core::objectmodel::Event * m_event;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  PropagateEventVisitor (const core::ExecParams *params, sofa::core::objectmodel::Event *e);  ;  ~PropagateEventVisitor () override;  ; Visitor::Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processObject (simulation::Node *, core::objectmodel::BaseObject *obj);  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html:664,Modifiability,inherit,inherited,664,"﻿. SOFA API: sofa::simulation::PropagateEventVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::PropagateEventVisitor Class Reference . #include <PropagateEventVisitor.h>. Inheritance diagram for sofa::simulation::PropagateEventVisitor:. [legend]; Detailed Description; Visitor used to propagate an event in the data structure. Propagation is done top-down until the event is handled. @author The SOFA team </www.sofa-framework.org>; . Protected Attributes; sofa::core::objectmodel::Event * m_event;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  PropagateEventVisitor (const core::ExecParams *params, sofa::core::objectmodel::Event *e);  ;  ~PropagateEventVisitor () override;  ; Visitor::Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processObject (simulation::Node *, core::objectmodel::BaseObject *obj);  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html:1306,Modifiability,inherit,inherited,1306,"tVisitor:. [legend]; Detailed Description; Visitor used to propagate an event in the data structure. Propagation is done top-down until the event is handled. @author The SOFA team </www.sofa-framework.org>; . Protected Attributes; sofa::core::objectmodel::Event * m_event;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  PropagateEventVisitor (const core::ExecParams *params, sofa::core::objectmodel::Event *e);  ;  ~PropagateEventVisitor () override;  ; Visitor::Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processObject (simulation::Node *, core::objectmodel::BaseObject *obj);  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html:3567,Modifiability,inherit,inherited,3567,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html:3774,Modifiability,inherit,inherited,3774,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_event. sofa::core::objectmodel::Event* sofa::simulation::PropagateEventVisitor::m_event. protected . Constructor details. ◆ PropagateEventVisitor(). sofa::simulation::PropagateEventVisitor::PropagateEventVisitor ; (; const core::ExecParams * ; params, . sofa::core::objectmodel::Event * ; e . ). ◆ ~PropagateEventVisi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html:3711,Security,access,access,3711,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html:1898,Testability,test,testTags,1898,"eTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processObject (simulation::Node *, core::objectmodel::BaseObject *obj);  ; const char * getClassName () const override;  ; virtual std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_propagate_event_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:10131,Deployability,update,updateInternal,10131,"ag t)sofa::core::objectmodel::Base; RequiredPlugin()sofa::simulation::RequiredPluginprotected; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(RequiredPlugin, core::objectmodel::BaseObject)sofa::simulation::RequiredPlugin; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~RequiredPlugin() override=defaultsofa::simulation::RequiredPluginprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:10184,Deployability,update,updateLinks,10184,"ag t)sofa::core::objectmodel::Base; RequiredPlugin()sofa::simulation::RequiredPluginprotected; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(RequiredPlugin, core::objectmodel::BaseObject)sofa::simulation::RequiredPlugin; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~RequiredPlugin() override=defaultsofa::simulation::RequiredPluginprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::RequiredPlugin Member List . This is the complete list of members for sofa::simulation::RequiredPlugin, including all inherited members. addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:7272,Performance,load,loadPlugin,7272,"ar *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinline; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseprotected; initData0(BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags)sofa::core::objectmodel::Baseprotected; initData0(Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false)sofa::core::objectmodel::Baseinlineprotected; insertInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; isComponentStateValid() constsofa::core::objectmodel::Baseinline; l_contextsofa::core::objectmodel::BaseObjectprotected; l_mastersofa::core::objectmodel::BaseObjectprotected; l_slavessofa::core::objectmodel::BaseObjectprotected; LinkSlaves typedefsofa::core::objectmodel::BaseObject; loadPlugin()sofa::simulation::RequiredPlugin; m_aliasDatasofa::core::objectmodel::Baseprotected; m_aliasLinksofa::core::objectmodel::Baseprotected; m_definitionSourceFileNamesofa::core::objectmodel::Base; m_definitionSourceFilePossofa::core::objectmodel::Base; m_instanciationSourceFileNamesofa::core::objectmodel::Base; m_instanciationSourceFilePossofa::core::objectmodel::Base; m_internalEnginesofa::core::objectmodel::Baseprotected; m_oldAttributessofa::core::objectmodel::Base; m_vecDatasofa::core::objectmodel::Baseprotected; m_vecLinksofa::core::objectmodel::Baseprotected; MapData typedefsofa::core::objectmodel::Base; MapLink typedefsofa::core::objectmodel::Base; MyClass typedefsofa::core::objectmodel::Base; namesofa::core::objectmodel::Base; notMuted() constsofa::core::objectmodel::Baseinline; parse(sofa::core::objectmodel::BaseObjectDescription *arg) overridesofa::simulation::RequiredPluginvirtual; parseField(const std::string &attribute, const std::string &value)sofa::core::objectmodel::B",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:9547,Performance,load,loader,9547,"jectvirtual; removeData(BaseData *f)sofa::core::objectmodel::Base; removeInNode(BaseNode *)sofa::core::objectmodel::BaseObjectinlinevirtual; removeSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; removeTag(Tag t)sofa::core::objectmodel::Base; RequiredPlugin()sofa::simulation::RequiredPluginprotected; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(RequiredPlugin, core::objectmodel::BaseObject)sofa::simulation::RequiredPlugin; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")so",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:704,Testability,log,logging,704," addAlias(BaseData *field, const char *alias)sofa::core::objectmodel::Base; addAlias(BaseLink *link, const char *alias)sofa::core::objectmodel::Base; addData(BaseData *f, const std::string &name)sofa::core::objectmodel::Base; addData(BaseData *f)sofa::core::objectmodel::Base; addDeprecatedAttribute(lifecycle::DeprecatedData *attribute)sofa::core::objectmodel::Base; addLink(BaseLink *l)sofa::core::objectmodel::Base; addMessage(const sofa::helper::logging::Message &m) constsofa::core::objectmodel::Base; addOutputsToCallback(const std::string &name, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; addSlave(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::obj",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:2070,Testability,log,logging,2070," > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_loadedPluginssofa::simulation::RequiredPlugin; d_messageLogCountsofa::core::objectmodel::Basemutable; d_pluginNamesofa::simulation::RequiredPlugin; d_requireAllsofa::simulation::RequiredPlugin; d_requireOnesofa::simulation::RequiredPlugin; d_stopAfterFirstNameFoundsofa::simulation::RequiredPlugin; d_stopAfterFirstSuffixFoundsofa::simulation::RequiredPlugin; d_suffixMapsofa::simulation::RequiredPlugin; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(c",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:2112,Testability,log,logging,2112,"ctmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_loadedPluginssofa::simulation::RequiredPlugin; d_messageLogCountsofa::core::objectmodel::Basemutable; d_pluginNamesofa::simulation::RequiredPlugin; d_requireAllsofa::simulation::RequiredPlugin; d_requireOnesofa::simulation::RequiredPlugin; d_stopAfterFirstNameFoundsofa::simulation::RequiredPlugin; d_stopAfterFirstSuffixFoundsofa::simulation::RequiredPlugin; d_suffixMapsofa::simulation::RequiredPlugin; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinlinevirtual; f_bboxsofa::core::objectmodel::Base; f_listeningsofa::core::objectmodel::BaseObject; f_printLogsofa::core::objectmodel::Base; f_tagssofa::core::objectmodel::Base; findData(const std::string &name) constsofa::core::o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:4648,Testability,log,logging,4648,inks(const std::string &name) constsofa::core::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)s,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:4690,Testability,log,logging,4690,ore::objectmodel::Base; getClass() constsofa::core::objectmodel::Baseinlinevirtual; GetClass()sofa::core::objectmodel::Baseinlinestatic; getClassName() constsofa::core::objectmodel::Basevirtual; getComponentState() constsofa::core::objectmodel::Baseinline; getContext() constsofa::core::objectmodel::BaseObject; getContext()sofa::core::objectmodel::BaseObject; getDataAliases() constsofa::core::objectmodel::Baseinline; getDataFields() constsofa::core::objectmodel::Baseinline; getDefinitionSourceFileName() constsofa::core::objectmodel::Base; getDefinitionSourceFilePos() constsofa::core::objectmodel::Base; getInstanciationSourceFileName() constsofa::core::objectmodel::Base; getInstanciationSourceFilePos() constsofa::core::objectmodel::Base; getLinkAliases() constsofa::core::objectmodel::Baseinline; getLinks() constsofa::core::objectmodel::Baseinline; getLoggedMessages() constsofa::core::objectmodel::Base; getLoggedMessagesAsString(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; getMaster() constsofa::core::objectmodel::BaseObject; getMaster()sofa::core::objectmodel::BaseObject; getName() constsofa::core::objectmodel::Baseinline; getNameSpaceName() constsofa::core::objectmodel::Base; getPathName() const overridesofa::core::objectmodel::BaseObjectvirtual; getSlave(const std::string &name) constsofa::core::objectmodel::BaseObject; getSlaves() constsofa::core::objectmodel::BaseObject; getTags() constsofa::core::objectmodel::Baseinline; getTemplateName() const finalsofa::core::objectmodel::Basevirtual; getTime() constsofa::core::objectmodel::BaseObject; getTypeName() constsofa::core::objectmodel::Base; handleEvent(Event *)sofa::core::objectmodel::BaseObjectvirtual; handleTopologyChange()sofa::core::objectmodel::BaseObjectinlinevirtual; handleTopologyChange(core::topology::Topology *t)sofa::core::objectmodel::BaseObjectvirtual; hasDataChanged(const BaseData &data)sofa::core::objectmodel::BaseObjectprotecte,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:10201,Testability,log,logErrors,10201,"ag t)sofa::core::objectmodel::Base; RequiredPlugin()sofa::simulation::RequiredPluginprotected; reset()sofa::core::objectmodel::BaseObjectvirtual; setDefinitionSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setDefinitionSourceFilePos(const int)sofa::core::objectmodel::Base; setInstanciationSourceFileName(const std::string &sourceFileName)sofa::core::objectmodel::Base; setInstanciationSourceFilePos(const int)sofa::core::objectmodel::Base; setName(const std::string &n)sofa::core::objectmodel::Base; setName(const std::string &n, int counter)sofa::core::objectmodel::Base; setSrc(const std::string &v, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; setSrc(const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr)sofa::core::objectmodel::BaseObject; shortName(const T *ptr=nullptr, BaseObjectDescription *=nullptr)sofa::core::objectmodel::Baseinlinestatic; SOFA_CLASS(RequiredPlugin, core::objectmodel::BaseObject)sofa::simulation::RequiredPlugin; sofa::core::objectmodel::BaseObject::SOFA_CLASS(BaseObject, Base)sofa::core::objectmodel::BaseObject; SPtr typedefsofa::core::objectmodel::Base; storeResetState()sofa::core::objectmodel::BaseObjectvirtual; trackInternalData(const BaseData &data)sofa::core::objectmodel::BaseObjectprotected; updateInternal()sofa::core::objectmodel::BaseObject; updateLinks(bool logErrors=true)sofa::core::objectmodel::Basevirtual; VecData typedefsofa::core::objectmodel::Base; VecLink typedefsofa::core::objectmodel::Base; VecSlaves typedefsofa::core::objectmodel::BaseObject; writeDatas(std::map< std::string, std::string * > &str)sofa::core::objectmodel::Base; writeDatas(std::ostream &out, const std::string &separator="" "")sofa::core::objectmodel::Base; ~Base()sofa::core::objectmodel::Baseprotectedvirtual; ~BaseObject() overridesofa::core::objectmodel::BaseObjectprotected; ~RequiredPlugin() override=defaultsofa::simulation::RequiredPluginprotected.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html:1879,Usability,clear,clearLoggedMessages,1879,"e(BaseObject::SPtr s)sofa::core::objectmodel::BaseObjectvirtual; addTag(Tag t)sofa::core::objectmodel::Base; addUpdateCallback(const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs)sofa::core::objectmodel::Base; Base()sofa::core::objectmodel::Baseprotected; BaseObject()sofa::core::objectmodel::BaseObjectprotected; BaseType typedefsofa::core::objectmodel::Base; bwdInit()sofa::core::objectmodel::BaseObjectvirtual; canCreate(T *, BaseContext *, BaseObjectDescription *)sofa::core::objectmodel::BaseObjectinlinestatic; changeContextLink(BaseContext *before, BaseContext *&after)sofa::core::objectmodel::BaseObjectprotected; changeSlavesLink(BaseObject::SPtr ptr, std::size_t, bool add)sofa::core::objectmodel::BaseObjectprotected; cleanTracker()sofa::core::objectmodel::BaseObjectprotected; cleanup()sofa::core::objectmodel::BaseObjectvirtual; clearLoggedMessages() constsofa::core::objectmodel::Base; computeBBox(const core::ExecParams *, bool=false)sofa::core::objectmodel::BaseObjectinlinevirtual; countLoggedMessages(sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) constsofa::core::objectmodel::Base; create(T *, BaseContext *context, BaseObjectDescription *arg)sofa::core::objectmodel::BaseObjectinlinestatic; d_componentStatesofa::core::objectmodel::Base; d_loadedPluginssofa::simulation::RequiredPlugin; d_messageLogCountsofa::core::objectmodel::Basemutable; d_pluginNamesofa::simulation::RequiredPlugin; d_requireAllsofa::simulation::RequiredPlugin; d_requireOnesofa::simulation::RequiredPlugin; d_stopAfterFirstNameFoundsofa::simulation::RequiredPlugin; d_stopAfterFirstSuffixFoundsofa::simulation::RequiredPlugin; d_suffixMapsofa::simulation::RequiredPlugin; doUpdateInternal()sofa::core::objectmodel::BaseObjectprotectedvirtual; draw(const core::visual::VisualParams *)sofa::core::objectmodel::BaseObjectinl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1251,Availability,error,error,1251,"mulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1386,Availability,error,error,1386,"egend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Inval",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:4492,Availability,down,down,4492,"e...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14608,Availability,error,error,14608," check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14776,Availability,error,error,14776,"d called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:4766,Deployability,update,updateInternal,4766,");  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:9261,Deployability,update,updateLinks,9261,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:11486,Deployability,update,update,11486,"har *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  RequiredPlugin ();  ;  ~RequiredPlugin () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1257,Integrability,message,message,1257,"mulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1392,Integrability,message,message,1392,"egend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Inval",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:2025,Integrability,message,messages,2025,"fully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool loadPlugin ();  load a list of plugins requested in Data More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  S",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:3374,Integrability,depend,dependent,3374,"tState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool loadPlugin ();  load a list of plugins requested in Data More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14614,Integrability,message,message,14614," check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14782,Integrability,message,message,14782,"d called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:481,Modifiability,plugin,plugin,481,"﻿. SOFA API: sofa::simulation::RequiredPlugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:541,Modifiability,plugin,plugins,541,"﻿. SOFA API: sofa::simulation::RequiredPlugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:554,Modifiability,plugin,plugin,554,"﻿. SOFA API: sofa::simulation::RequiredPlugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:753,Modifiability,plugin,plugin,753,"﻿. SOFA API: sofa::simulation::RequiredPlugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:975,Modifiability,plugin,plugin,975,"﻿. SOFA API: sofa::simulation::RequiredPlugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1105,Modifiability,plugin,plugin,1105,"framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1271,Modifiability,plugin,plugin,1271,"mulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1407,Modifiability,plugin,plugin,1407,"egend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Inval",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1544,Modifiability,plugin,plugins,1544," you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSou",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1610,Modifiability,inherit,inherited,1610,"td::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1776,Modifiability,inherit,inherited,1776,"sent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; boo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:2892,Modifiability,plugin,plugins,2892,"ta< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool loadPlugin ();  load a list of plugins requested in Data More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseCon",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:2955,Modifiability,inherit,inherited,2955,"me. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool loadPlugin ();  load a list of plugins requested in Data More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & ge",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:4702,Modifiability,variab,variables,4702,"l path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:4812,Modifiability,variab,variables,4812,");  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:4854,Modifiability,variab,variables,4854,");  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:5099,Modifiability,inherit,inherited,5099,"yChange (core::topology::Topology *t);  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization method called at graph creation and modification, during bottom-up traversal. More...;  ; virtual void reinit ();  Update method called when variables used in precomputation are modified. More...;  ; void updateInternal ();  Update method called when variables (used to compute other internal variables) are modified. More...;  ; virtual void storeResetState ();  Save the initial state for later uses in reset() More...;  ; virtual void reset ();  Reset to initial state. More...;  ; virtual void cleanup ();  ;  Public Member Functions inherited from sofa::core::objectmodel::Base; virtual const BaseClass * getClass () const;  ; void addDeprecatedAttribute (lifecycle::DeprecatedData *attribute);  ; void addUpdateCallback (const std::string &name, std::initializer_list< BaseData * > inputs, std::function< sofa::core::objectmodel::ComponentState(const DataTracker &)> function, std::initializer_list< BaseData * > outputs);  ; void addOutputsToCallback (const std::string &name, std::initializer_list< BaseData * > outputs);  ; const std::string & getName () const;  Accessor to the object name. More...;  ; void setName (const std::string &n);  Set the name of this object. More...;  ; void setName (const std::string &n, int counter);  Set the name of this object, adding an integer counter. More...;  ; std::string getTypeName () const;  Get the type name of this object (i.e. class and template types) More...;  ; virtual std::string getClassName () const;  Get the class name of this object. More...;  ; virtual std::string getTemplateName () const final;  Get the template type names (if any) used to instantiate this object. More...;  ; std::string getNameSpaceName () const;  Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionS",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:11320,Modifiability,inherit,inherited,11320,"har *alias);  Add an alias to a Data. More...;  ; void addLink (BaseLink *l);  Add a link. More...;  ; void addAlias (BaseLink *link, const char *alias);  Add an alias to a Link. More...;  ; const VecData & getDataFields () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapData & getDataAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; const VecLink & getLinks () const;  Accessor to the vector containing all the fields of this object. More...;  ; const MapLink & getLinkAliases () const;  Accessor to the map containing all the aliases of this object. More...;  ; virtual bool findDataLinkDest (BaseData *&ptr, const std::string &path, const BaseLink *link);  ; template<class T > ; bool findLinkDest (T *&ptr, const std::string &path, const BaseLink *link);  . Protected Member Functions;  RequiredPlugin ();  ;  ~RequiredPlugin () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:12043,Modifiability,inherit,inherited,12043,"::string &path, const BaseLink *link);  . Protected Member Functions;  RequiredPlugin ();  ;  ~RequiredPlugin () override=default;  ;  Protected Member Functions inherited from sofa::core::objectmodel::BaseObject;  BaseObject ();  ;  ~BaseObject () override;  ; virtual void doUpdateInternal ();  Implementation of the internal update. More...;  ; void changeContextLink (BaseContext *before, BaseContext *&after);  ; void changeSlavesLink (BaseObject::SPtr ptr, std::size_t, bool add);  This method insures that slaves objects have master and context links set correctly. More...;  ; void trackInternalData (const BaseData &data);  Method called to add the Data to the DataTracker (listing the Data to track) More...;  ; void cleanTracker ();  ; bool hasDataChanged (const BaseData &data);  Method called to know if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecD",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:12777,Modifiability,inherit,inherited,12777,"now if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:13031,Modifiability,inherit,inherited,13031,"now if a tracked Data has changed. More...;  ;  Protected Member Functions inherited from sofa::core::objectmodel::Base;  Base ();  ; virtual ~Base ();  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  ; void initData0 (BaseData *field, BaseData::BaseInitData &res, const char *name, const char *help, BaseData::DataFlags dataFlags);  Helper method used by initData() More...;  ; template<class T > ; void initData0 (Data< T > *field, typename Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<cl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:13470,Modifiability,inherit,inherited,13470,"ame Data< T >::InitData &res, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used by initData() More...;  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::BaseObject; SingleLink< BaseObject, BaseContext, BaseLink::FLAG_DOUBLELINK > l_context;  ; LinkSlaves l_slaves;  ; SingleLink< BaseObject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:13870,Modifiability,inherit,inherited,13870,"bject, BaseObject, BaseLink::FLAG_DOUBLELINK > l_master;  ;  Protected Attributes inherited from sofa::core::objectmodel::Base; std::map< std::string, sofa::core::DataTrackerCallback > m_internalEngine;  ; VecData m_vecData;  List of fields (Data instances) More...;  ; MapData m_aliasData;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFir",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14226,Modifiability,plugin,plugins,14226,"ta;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14385,Modifiability,plugin,plugin,14385,"tatic Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14445,Modifiability,plugin,plugins,14445,"tatic Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14458,Modifiability,plugin,plugin,14458,"tatic Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14629,Modifiability,plugin,plugin,14629," check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14796,Modifiability,plugin,plugin,14796,"d called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14984,Modifiability,plugin,plugin,14984,"ing shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:15166,Modifiability,plugin,plugin,15166,"::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:15431,Modifiability,plugin,plugin,15431," need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::simulation::RequiredPlugin::SOFA_CLASS ; (; RequiredPlugin ; , . core::objectmodel::BaseObject ;  . ). sofasimulationRequiredPlugin; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:15879,Modifiability,plugin,plugins,15879," need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::simulation::RequiredPlugin::SOFA_CLASS ; (; RequiredPlugin ; , . core::objectmodel::BaseObject ;  . ). sofasimulationRequiredPlugin; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:526,Performance,load,load,526,"﻿. SOFA API: sofa::simulation::RequiredPlugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:995,Performance,load,loaded,995,"﻿. SOFA API: sofa::simulation::RequiredPlugin Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1154,Performance,load,loaded,1154,"framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1302,Performance,load,loaded,1302,"mulation::RequiredPlugin Class Reference . #include <RequiredPlugin.h>. Inheritance diagram for sofa::simulation::RequiredPlugin:. [legend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1433,Performance,load,loaded,1433,"egend]. Public Attributes; sofa::core::objectmodel::Data< type::vector< std::string > > d_pluginName;  plugin name (or several names if you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Inval",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:1571,Performance,load,loaded,1571," you need to load different plugins or a plugin with several alternate names) More...;  ; sofa::core::objectmodel::Data< type::vector< type::fixed_array< std::string, 2 > > > d_suffixMap;  standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstNameFound;  Stop after the first plugin name that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_stopAfterFirstSuffixFound;  For each plugin name, stop after the first suffix that is loaded successfully. More...;  ; sofa::core::objectmodel::Data< bool > d_requireOne;  Display an error message if no plugin names were successfully loaded. More...;  ; sofa::core::objectmodel::Data< bool > d_requireAll;  Display an error message if any plugin names failed to be loaded. More...;  ; sofa::core::objectmodel::Data< type::vector< std::string > > d_loadedPlugins;  List of the plugins that are have been loaded. More...;  ;  Public Attributes inherited from sofa::core::objectmodel::BaseObject; Data< bool > f_listening;  if true, handle the events, otherwise ignore the events More...;  ;  Public Attributes inherited from sofa::core::objectmodel::Base; std::vector< lifecycle::DeprecatedData * > m_oldAttributes;  ; Data< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSou",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:2861,Performance,load,loadPlugin,2861,"ta< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool loadPlugin ();  load a list of plugins requested in Data More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseCon",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:2877,Performance,load,load,2877,"ta< int > d_messageLogCount;  ; Data< std::string > name;  Name of the object. More...;  ; Data< bool > f_printLog;  if true, emits extra messages at runtime. More...;  ; Data< sofa::core::objectmodel::TagSet > f_tags;  list of the subsets the object belongs to More...;  ; Data< sofa::type::BoundingBox > f_bbox;  this object bounding box More...;  ; Data< sofa::core::objectmodel::ComponentState > d_componentState;  The state of the component among (Dirty, Valid, Undefined, Loading, Invalid). More...;  ; std::string m_definitionSourceFileName {""""};  ; int m_definitionSourceFilePos {-1};  ; std::string m_instanciationSourceFileName {""""};  ; int m_instanciationSourceFilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool loadPlugin ();  load a list of plugins requested in Data More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseCon",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:3455,Performance,load,loader,3455,"ilePos {-1};  . Public Member Functions;  SOFA_CLASS (RequiredPlugin, core::objectmodel::BaseObject);  ; void parse (sofa::core::objectmodel::BaseObjectDescription *arg) override;  Parse the given description to assign values to this object's fields and potentially other parameters. More...;  ; bool loadPlugin ();  load a list of plugins requested in Data More...;  ;  Public Member Functions inherited from sofa::core::objectmodel::BaseObject;  SOFA_CLASS (BaseObject, Base);  ; virtual void draw (const core::visual::VisualParams *);  Render internal data of this object, for debugging purposes. More...;  ; virtual void computeBBox (const core::ExecParams *, bool=false);  ; void setSrc (const std::string &v, std::vector< std::string > *attributeList=nullptr);  Sets a source Object and parses it to collect dependent Data. More...;  ; void setSrc (const std::string &v, const BaseObject *loader, std::vector< std::string > *attributeList=nullptr);  ; Base * findLinkDestClass (const BaseClass *destType, const std::string &path, const BaseLink *link) override;  ; virtual std::string getPathName () const override;  Return the full path name of this object. More...;  ; virtual bool insertInNode (BaseNode *);  ; virtual bool removeInNode (BaseNode *);  ; SReal getTime () const;  Current time. More...;  ; const BaseContext * getContext () const;  ; BaseContext * getContext ();  ; const BaseObject * getMaster () const;  ; BaseObject * getMaster ();  ; const VecSlaves & getSlaves () const;  ; BaseObject * getSlave (const std::string &name) const;  ; virtual void addSlave (BaseObject::SPtr s);  ; virtual void removeSlave (BaseObject::SPtr s);  ; virtual void handleEvent (Event *);  Handle an event. More...;  ; virtual void handleTopologyChange ();  ; virtual void handleTopologyChange (core::topology::Topology *t);  ; virtual void init ();  Initialization method called at graph creation and modification, during top-down traversal. More...;  ; virtual void bwdInit ();  Initialization ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14253,Performance,load,loaded,14253,"ta;  name -> Data multi-map (includes names and aliases) More...;  ; VecLink m_vecLink;  List of links. More...;  ; MapLink m_aliasLink;  name -> Link multi-map (includes names and aliases) More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. .",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14430,Performance,load,load,14430,"tatic Public Member Functions inherited from sofa::core::objectmodel::BaseObject; template<class T > ; static bool canCreate (T *, BaseContext *, BaseObjectDescription *);  Pre-construction check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14655,Performance,load,loaded,14655," check method called by ObjectFactory. More...;  ; template<class T > ; static T::SPtr create (T *, BaseContext *context, BaseObjectDescription *arg);  Construction method called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:14827,Performance,load,loaded,14827,"d called by ObjectFactory. More...;  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Base; static const BaseClass * GetClass ();  ; template<class T > ; static std::string shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:15004,Performance,load,loaded,15004,"ing shortName (const T *ptr=nullptr, BaseObjectDescription *=nullptr);  . Attribute details. ◆ d_loadedPlugins. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:15215,Performance,load,loaded,15215,"::d_loadedPlugins. List of the plugins that are have been loaded. . ◆ d_pluginName. sofa::core::objectmodel::Data<type::vector<std::string> > sofa::simulation::RequiredPlugin::d_pluginName. plugin name (or several names if you need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::Base",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:15792,Performance,load,loadPlugin,15792," need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::simulation::RequiredPlugin::SOFA_CLASS ; (; RequiredPlugin ; , . core::objectmodel::BaseObject ;  . ). sofasimulationRequiredPlugin; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:15845,Performance,load,loadPlugin,15845," need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::simulation::RequiredPlugin::SOFA_CLASS ; (; RequiredPlugin ; , . core::objectmodel::BaseObject ;  . ). sofasimulationRequiredPlugin; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:15864,Performance,load,load,15864," need to load different plugins or a plugin with several alternate names) . ◆ d_requireAll. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireAll. Display an error message if any plugin names failed to be loaded. . ◆ d_requireOne. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_requireOne. Display an error message if no plugin names were successfully loaded. . ◆ d_stopAfterFirstNameFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstNameFound. Stop after the first plugin name that is loaded successfully. . ◆ d_stopAfterFirstSuffixFound. sofa::core::objectmodel::Data<bool> sofa::simulation::RequiredPlugin::d_stopAfterFirstSuffixFound. For each plugin name, stop after the first suffix that is loaded successfully. . ◆ d_suffixMap. sofa::core::objectmodel::Data<type::vector<type::fixed_array<std::string,2> > > sofa::simulation::RequiredPlugin::d_suffixMap. standard->custom suffixes pairs (to be used if the plugin is compiled outside of Sofa with a non standard way of differentiating versions), using ! to represent empty suffix . Constructor details. ◆ RequiredPlugin(). sofa::simulation::RequiredPlugin::RequiredPlugin ; (; ). protected . ◆ ~RequiredPlugin(). sofa::simulation::RequiredPlugin::~RequiredPlugin ; (; ). overrideprotecteddefault . Function details. ◆ loadPlugin(). bool sofa::simulation::RequiredPlugin::loadPlugin ; (; ). load a list of plugins requested in Data . ◆ parse(). void sofa::simulation::RequiredPlugin::parse ; (; sofa::core::objectmodel::BaseObjectDescription * ; arg). overridevirtual . Parse the given description to assign values to this object's fields and potentially other parameters. ; Reimplemented from sofa::core::objectmodel::BaseObject. ◆ SOFA_CLASS(). sofa::simulation::RequiredPlugin::SOFA_CLASS ; (; RequiredPlugin ; , . core::objectmodel::BaseObject ;  . ). sofasimulationRequiredPlugin; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:7117,Testability,log,logging,7117," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:7190,Testability,log,logging,7190," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:7232,Testability,log,logging,7232," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:7302,Testability,log,logging,7302," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:7413,Testability,log,logging,7413," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:7455,Testability,log,logging,7455," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:9279,Testability,log,logErrors,9279,"d::string > &str);  Assign the field values stored in the given list of name + value pairs of strings. More...;  ; virtual void parseFields (const std::map< std::string, std::string * > &str);  Assign the field values stored in the given map of name -> value pairs. More...;  ; void writeDatas (std::map< std::string, std::string * > &str);  Write the current field values to the given map of name -> value pairs. More...;  ; void writeDatas (std::ostream &out, const std::string &separator="" "");  ; BaseData * findData (const std::string &name) const;  ; std::vector< BaseData * > findGlobalField (const std::string &name) const;  Find data fields given a name: several can be found as we look into the alias map. More...;  ; BaseLink * findLink (const std::string &name) const;  ; std::vector< BaseLink * > findLinks (const std::string &name) const;  Find link fields given a name: several can be found as we look into the alias map. More...;  ; virtual void updateLinks (bool logErrors=true);  Update pointers in case the pointed-to objects have appeared. More...;  ; template<class T > ; BaseData::BaseInitData initData (::sofa::core::objectmodel::Data< T > *field, const char *name, const char *help, ::sofa::core::objectmodel::BaseData::DataFlags dataflags);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; BaseData::BaseInitData initData (Data< T > *field, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; template<class T > ; Data< T >::InitData initData (Data< T > *field, const T &value, const char *name, const char *help, bool isDisplayed=true, bool isReadOnly=false);  Helper method used to initialize a data field containing a value of type T. More...;  ; void addData (BaseData *f, const std::string &name);  ; void addData (BaseData *f);  ; void removeData (BaseData *f);  Remove a data field. More..",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html:7498,Usability,clear,clearLoggedMessages,7498," Get the template type names (if any) used to instantiate this object. More...;  ; void setDefinitionSourceFileName (const std::string &sourceFileName);  Set the source filename (where the component is implemented) More...;  ; const std::string & getDefinitionSourceFileName () const;  Get the source filename (where the component is implemented) More...;  ; void setDefinitionSourceFilePos (const int);  Set the source location (where the component is implemented) More...;  ; int getDefinitionSourceFilePos () const;  Get the source location (where the component is implemented) More...;  ; void setInstanciationSourceFileName (const std::string &sourceFileName);  ; const std::string & getInstanciationSourceFileName () const;  ; void setInstanciationSourceFilePos (const int);  ; int getInstanciationSourceFilePos () const;  ; void addMessage (const sofa::helper::logging::Message &m) const;  ; size_t countLoggedMessages (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; const std::deque< sofa::helper::logging::Message > & getLoggedMessages () const;  ; const std::string getLoggedMessagesAsString (sofa::helper::logging::Message::TypeSet t=sofa::helper::logging::Message::AnyTypes) const;  ; void clearLoggedMessages () const;  ; bool notMuted () const;  ; const sofa::core::objectmodel::TagSet & getTags () const;  Represents the subsets the object belongs to. More...;  ; bool hasTag (Tag t) const;  Return true if the object belong to the given subset. More...;  ; void addTag (Tag t);  Add a subset qualification to the object. More...;  ; void removeTag (Tag t);  Remove a subset qualification to the object. More...;  ; ComponentState getComponentState () const;  ; bool isComponentStateValid () const;  ; virtual bool parseField (const std::string &attribute, const std::string &value);  Assign one field value (Data or Link) More...;  ; virtual bool hasField (const std::string &attribute) const;  Check if a given Data field or Link exists.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_required_plugin.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::ResetVisitor Member List . This is the complete list of members for sofa::simulation::ResetVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor-members.html:4012,Testability,test,testTags,4012,"virtual; isThreadSafe() const overridesofa::simulation::ResetVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::ResetVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::ResetVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(core::objectmodel::BaseObject *obj)sofa::simulation::ResetVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; ResetVisitor(const core::ExecParams *params)sofa::simulation::ResetVisitorinline; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html:995,Modifiability,inherit,inherited,995,"ework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::ResetVisitor Class Reference . #include <ResetVisitor.h>. Inheritance diagram for sofa::simulation::ResetVisitor:. [legend]. Public Member Functions;  ResetVisitor (const core::ExecParams *params);  ; void processObject (core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html:3029,Modifiability,inherit,inherited,3029,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html:3230,Modifiability,inherit,inherited,3230,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ ResetVisitor(). sofa::simulation::ResetVisitor::ResetVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::ResetVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html:3342,Modifiability,inherit,inherited,3342,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ ResetVisitor(). sofa::simulation::ResetVisitor::ResetVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::ResetVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name f",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html:3173,Security,access,access,3173,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html:1459,Testability,test,testTags,1459,"essNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class Vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_reset_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check-members.html:228,Modifiability,inherit,inherited,228,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneCheck Member List . This is the complete list of members for sofa::simulation::SceneCheck, including all inherited members. checkOn(sofa::simulation::Node *node, simulation::SceneLoader *sceneLoader)sofa::simulation::SceneCheckvirtual; doCheckOn(sofa::simulation::Node *node)=0sofa::simulation::SceneCheckpure virtual; doInit(sofa::simulation::Node *node)sofa::simulation::SceneCheckvirtual; doPrintSummary()sofa::simulation::SceneCheckvirtual; getDesc()=0sofa::simulation::SceneCheckpure virtual; getName()=0sofa::simulation::SceneCheckpure virtual; init(sofa::simulation::Node *node, simulation::SceneLoader *sceneLoader)sofa::simulation::SceneCheckvirtual; printSummary(simulation::SceneLoader *sceneLoader)sofa::simulation::SceneCheckvirtual; SPtr typedefsofa::simulation::SceneCheck; ~SceneCheck()sofa::simulation::SceneCheckvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneCheckMainRegistry Member List . This is the complete list of members for sofa::simulation::SceneCheckMainRegistry, including all inherited members. addToRegistry(const SceneCheck::SPtr &sceneCheck)sofa::simulation::SceneCheckMainRegistrystatic; clearRegistry()sofa::simulation::SceneCheckMainRegistrystatic; getRegisteredSceneChecks()sofa::simulation::SceneCheckMainRegistrystatic; removeFromRegistry(const SceneCheck::SPtr &sceneCheck)sofa::simulation::SceneCheckMainRegistrystatic. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry-members.html:368,Usability,clear,clearRegistry,368,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneCheckMainRegistry Member List . This is the complete list of members for sofa::simulation::SceneCheckMainRegistry, including all inherited members. addToRegistry(const SceneCheck::SPtr &sceneCheck)sofa::simulation::SceneCheckMainRegistrystatic; clearRegistry()sofa::simulation::SceneCheckMainRegistrystatic; getRegisteredSceneChecks()sofa::simulation::SceneCheckMainRegistrystatic; removeFromRegistry(const SceneCheck::SPtr &sceneCheck)sofa::simulation::SceneCheckMainRegistrystatic. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html:480,Usability,clear,clearRegistry,480,﻿. SOFA API: sofa::simulation::SceneCheckMainRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::SceneCheckMainRegistry Class Reference . #include <SceneCheckMainRegistry.h>. Static Public Member Functions; static bool addToRegistry (const SceneCheck::SPtr &sceneCheck);  ; static void removeFromRegistry (const SceneCheck::SPtr &sceneCheck);  ; static void clearRegistry ();  ; static const type::vector< SceneCheck::SPtr > & getRegisteredSceneChecks ();  . Function details. ◆ addToRegistry(). bool sofa::simulation::SceneCheckMainRegistry::addToRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). static . ◆ clearRegistry(). void sofa::simulation::SceneCheckMainRegistry::clearRegistry ; (; ). static . ◆ getRegisteredSceneChecks(). const type::vector< SceneCheck::SPtr > & sofa::simulation::SceneCheckMainRegistry::getRegisteredSceneChecks ; (; ). static . ◆ removeFromRegistry(). void sofa::simulation::SceneCheckMainRegistry::removeFromRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). static . sofasimulationSceneCheckMainRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html:735,Usability,clear,clearRegistry,735,﻿. SOFA API: sofa::simulation::SceneCheckMainRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::SceneCheckMainRegistry Class Reference . #include <SceneCheckMainRegistry.h>. Static Public Member Functions; static bool addToRegistry (const SceneCheck::SPtr &sceneCheck);  ; static void removeFromRegistry (const SceneCheck::SPtr &sceneCheck);  ; static void clearRegistry ();  ; static const type::vector< SceneCheck::SPtr > & getRegisteredSceneChecks ();  . Function details. ◆ addToRegistry(). bool sofa::simulation::SceneCheckMainRegistry::addToRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). static . ◆ clearRegistry(). void sofa::simulation::SceneCheckMainRegistry::clearRegistry ; (; ). static . ◆ getRegisteredSceneChecks(). const type::vector< SceneCheck::SPtr > & sofa::simulation::SceneCheckMainRegistry::getRegisteredSceneChecks ; (; ). static . ◆ removeFromRegistry(). void sofa::simulation::SceneCheckMainRegistry::removeFromRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). static . sofasimulationSceneCheckMainRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html:799,Usability,clear,clearRegistry,799,﻿. SOFA API: sofa::simulation::SceneCheckMainRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::simulation::SceneCheckMainRegistry Class Reference . #include <SceneCheckMainRegistry.h>. Static Public Member Functions; static bool addToRegistry (const SceneCheck::SPtr &sceneCheck);  ; static void removeFromRegistry (const SceneCheck::SPtr &sceneCheck);  ; static void clearRegistry ();  ; static const type::vector< SceneCheck::SPtr > & getRegisteredSceneChecks ();  . Function details. ◆ addToRegistry(). bool sofa::simulation::SceneCheckMainRegistry::addToRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). static . ◆ clearRegistry(). void sofa::simulation::SceneCheckMainRegistry::clearRegistry ; (; ). static . ◆ getRegisteredSceneChecks(). const type::vector< SceneCheck::SPtr > & sofa::simulation::SceneCheckMainRegistry::getRegisteredSceneChecks ; (; ). static . ◆ removeFromRegistry(). void sofa::simulation::SceneCheckMainRegistry::removeFromRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). static . sofasimulationSceneCheckMainRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_main_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneCheckRegistry Member List . This is the complete list of members for sofa::simulation::SceneCheckRegistry, including all inherited members. addToRegistry(const SceneCheck::SPtr &sceneCheck)sofa::simulation::SceneCheckRegistry; clearRegistry()sofa::simulation::SceneCheckRegistry; getRegisteredSceneChecks() constsofa::simulation::SceneCheckRegistry; removeFromRegistry(const SceneCheck::SPtr &sceneCheck)sofa::simulation::SceneCheckRegistry. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry-members.html:350,Usability,clear,clearRegistry,350,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneCheckRegistry Member List . This is the complete list of members for sofa::simulation::SceneCheckRegistry, including all inherited members. addToRegistry(const SceneCheck::SPtr &sceneCheck)sofa::simulation::SceneCheckRegistry; clearRegistry()sofa::simulation::SceneCheckRegistry; getRegisteredSceneChecks() constsofa::simulation::SceneCheckRegistry; removeFromRegistry(const SceneCheck::SPtr &sceneCheck)sofa::simulation::SceneCheckRegistry. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html:433,Usability,clear,clearRegistry,433,﻿. SOFA API: sofa::simulation::SceneCheckRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SceneCheckRegistry Class Reference . #include <SceneCheckRegistry.h>. Public Member Functions; bool addToRegistry (const SceneCheck::SPtr &sceneCheck);  ; void removeFromRegistry (const SceneCheck::SPtr &sceneCheck);  ; void clearRegistry ();  ; const type::vector< SceneCheck::SPtr > & getRegisteredSceneChecks () const;  . Function details. ◆ addToRegistry(). bool sofa::simulation::SceneCheckRegistry::addToRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). ◆ clearRegistry(). void sofa::simulation::SceneCheckRegistry::clearRegistry ; (; ). ◆ getRegisteredSceneChecks(). const type::vector< SceneCheck::SPtr > & sofa::simulation::SceneCheckRegistry::getRegisteredSceneChecks ; (; ); const. ◆ removeFromRegistry(). void sofa::simulation::SceneCheckRegistry::removeFromRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). sofasimulationSceneCheckRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html:674,Usability,clear,clearRegistry,674,﻿. SOFA API: sofa::simulation::SceneCheckRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SceneCheckRegistry Class Reference . #include <SceneCheckRegistry.h>. Public Member Functions; bool addToRegistry (const SceneCheck::SPtr &sceneCheck);  ; void removeFromRegistry (const SceneCheck::SPtr &sceneCheck);  ; void clearRegistry ();  ; const type::vector< SceneCheck::SPtr > & getRegisteredSceneChecks () const;  . Function details. ◆ addToRegistry(). bool sofa::simulation::SceneCheckRegistry::addToRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). ◆ clearRegistry(). void sofa::simulation::SceneCheckRegistry::clearRegistry ; (; ). ◆ getRegisteredSceneChecks(). const type::vector< SceneCheck::SPtr > & sofa::simulation::SceneCheckRegistry::getRegisteredSceneChecks ; (; ); const. ◆ removeFromRegistry(). void sofa::simulation::SceneCheckRegistry::removeFromRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). sofasimulationSceneCheckRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html:734,Usability,clear,clearRegistry,734,﻿. SOFA API: sofa::simulation::SceneCheckRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SceneCheckRegistry Class Reference . #include <SceneCheckRegistry.h>. Public Member Functions; bool addToRegistry (const SceneCheck::SPtr &sceneCheck);  ; void removeFromRegistry (const SceneCheck::SPtr &sceneCheck);  ; void clearRegistry ();  ; const type::vector< SceneCheck::SPtr > & getRegisteredSceneChecks () const;  . Function details. ◆ addToRegistry(). bool sofa::simulation::SceneCheckRegistry::addToRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). ◆ clearRegistry(). void sofa::simulation::SceneCheckRegistry::clearRegistry ; (; ). ◆ getRegisteredSceneChecks(). const type::vector< SceneCheck::SPtr > & sofa::simulation::SceneCheckRegistry::getRegisteredSceneChecks ; (; ); const. ◆ removeFromRegistry(). void sofa::simulation::SceneCheckRegistry::removeFromRegistry ; (; const SceneCheck::SPtr & ; sceneCheck). sofasimulationSceneCheckRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_check_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html:230,Modifiability,inherit,inherited,230,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneLoader Member List . This is the complete list of members for sofa::simulation::SceneLoader, including all inherited members. addListener(Listener *l)sofa::simulation::SceneLoaderstatic; canLoadFileExtension(const char *extension)=0sofa::simulation::SceneLoaderpure virtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *)sofa::simulation::SceneLoaderinlinevirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs)=0sofa::simulation::SceneLoaderpure virtual; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list)=0sofa::simulation::SceneLoaderpure virtual; getFileTypeDesc()=0sofa::simulation::SceneLoaderpure virtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded)sofa::simulation::SceneLoadervirtual; write(sofa::simulation::Node *, const char *)sofa::simulat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html:1786,Modifiability,plugin,pluginName,1786,"e complete list of members for sofa::simulation::SceneLoader, including all inherited members. addListener(Listener *l)sofa::simulation::SceneLoaderstatic; canLoadFileExtension(const char *extension)=0sofa::simulation::SceneLoaderpure virtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *)sofa::simulation::SceneLoaderinlinevirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs)=0sofa::simulation::SceneLoaderpure virtual; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list)=0sofa::simulation::SceneLoaderpure virtual; getFileTypeDesc()=0sofa::simulation::SceneLoaderpure virtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded)sofa::simulation::SceneLoadervirtual; write(sofa::simulation::Node *, const char *)sofa::simulation::SceneLoaderinlinevirtual; ~SceneLoader()=defaultsofa::simulation::SceneLoadervirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html:1006,Performance,load,load,1006,"e complete list of members for sofa::simulation::SceneLoader, including all inherited members. addListener(Listener *l)sofa::simulation::SceneLoaderstatic; canLoadFileExtension(const char *extension)=0sofa::simulation::SceneLoaderpure virtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *)sofa::simulation::SceneLoaderinlinevirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs)=0sofa::simulation::SceneLoaderpure virtual; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list)=0sofa::simulation::SceneLoaderpure virtual; getFileTypeDesc()=0sofa::simulation::SceneLoaderpure virtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded)sofa::simulation::SceneLoadervirtual; write(sofa::simulation::Node *, const char *)sofa::simulation::SceneLoaderinlinevirtual; ~SceneLoader()=defaultsofa::simulation::SceneLoadervirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:714,Integrability,interface,interface,714,"﻿. SOFA API: sofa::simulation::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Static Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; List of all members . sofa::simulation::SceneLoader Class Referenceabstract . #include <SceneLoaderFactory.h>; Main class used to register scene file loaders. ; More... Inheritance diagram for sofa::simulation::SceneLoader:. [legend]; Detailed Description; Main class used to register scene file loaders. ; It uses the Factory design pattern, where each class is registered in a map, and dynamically retrieved given the type name. Abstract interface of a scene loader . Classes; struct  Listener;  to be able to inform when a scene is loaded More...;  . Static Protected Attributes; static Listeners s_listeners;  . Public Member Functions; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:5771,Integrability,depend,depends,5771," description ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ load(). sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::load ; (; const std::string & ; filename, . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector<std::string>(0) . ). load the file . ◆ notifyLoadingSceneAfter(). void sofa::simulation::SceneLoader::notifyLoadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyLoadingSceneBefore(). void sofa::simulation::SceneLoader::notifyLoadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ notifyReloadingSceneAfter(). void sofa::simulation::SceneLoader::notifyReloadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyReloadingSceneBefore(). void sofa::simulation::SceneLoader::notifyReloadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ removeListener(). void sofa::simulation::SceneLoader::removeListener ; (; Listener * ; l). static . removing a listener . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoader::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). virtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented in sofa::simulation::SceneLoaderXML. ◆ write(). virtual void sofa::simulation::SceneLoader::write ; (; sofa::simulation::Node * ; , . const char * ;  . ). inlinevirtual . write scene graph in the file ; Reimplemented in sofa::simulation::SceneLoaderXML. sofasimulationSceneLoader; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:1898,Modifiability,plugin,pluginName,1898,"ceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Static Public Member Functions; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Static Protected Member Functions; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ s_listeners. SceneLoader::Listeners sofa::simulation::SceneLoader::s_listeners. staticprotected . Constructor details. ◆ ~SceneLoader(). virtual sofa::simulation::SceneLoader::~SceneLoader ; (; ). virtualdefault . Function details. ◆ addListener(). void sofa::simulation::SceneLoader::addListener ; (; Listener * ; l). static . add",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:5526,Modifiability,plugin,pluginName,5526," description ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ load(). sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::load ; (; const std::string & ; filename, . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector<std::string>(0) . ). load the file . ◆ notifyLoadingSceneAfter(). void sofa::simulation::SceneLoader::notifyLoadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyLoadingSceneBefore(). void sofa::simulation::SceneLoader::notifyLoadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ notifyReloadingSceneAfter(). void sofa::simulation::SceneLoader::notifyReloadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyReloadingSceneBefore(). void sofa::simulation::SceneLoader::notifyReloadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ removeListener(). void sofa::simulation::SceneLoader::removeListener ; (; Listener * ; l). static . removing a listener . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoader::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). virtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented in sofa::simulation::SceneLoaderXML. ◆ write(). virtual void sofa::simulation::SceneLoader::write ; (; sofa::simulation::Node * ; , . const char * ;  . ). inlinevirtual . write scene graph in the file ; Reimplemented in sofa::simulation::SceneLoaderXML. sofasimulationSceneLoader; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:424,Performance,load,loaders,424,"﻿. SOFA API: sofa::simulation::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Static Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; List of all members . sofa::simulation::SceneLoader Class Referenceabstract . #include <SceneLoaderFactory.h>; Main class used to register scene file loaders. ; More... Inheritance diagram for sofa::simulation::SceneLoader:. [legend]; Detailed Description; Main class used to register scene file loaders. ; It uses the Factory design pattern, where each class is registered in a map, and dynamically retrieved given the type name. Abstract interface of a scene loader . Classes; struct  Listener;  to be able to inform when a scene is loaded More...;  . Static Protected Attributes; static Listeners s_listeners;  . Public Member Functions; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:570,Performance,load,loaders,570,"﻿. SOFA API: sofa::simulation::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Static Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; List of all members . sofa::simulation::SceneLoader Class Referenceabstract . #include <SceneLoaderFactory.h>; Main class used to register scene file loaders. ; More... Inheritance diagram for sofa::simulation::SceneLoader:. [legend]; Detailed Description; Main class used to register scene file loaders. ; It uses the Factory design pattern, where each class is registered in a map, and dynamically retrieved given the type name. Abstract interface of a scene loader . Classes; struct  Listener;  to be able to inform when a scene is loaded More...;  . Static Protected Attributes; static Listeners s_listeners;  . Public Member Functions; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:735,Performance,load,loader,735,"﻿. SOFA API: sofa::simulation::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Static Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; List of all members . sofa::simulation::SceneLoader Class Referenceabstract . #include <SceneLoaderFactory.h>; Main class used to register scene file loaders. ; More... Inheritance diagram for sofa::simulation::SceneLoader:. [legend]; Detailed Description; Main class used to register scene file loaders. ; It uses the Factory design pattern, where each class is registered in a map, and dynamically retrieved given the type name. Abstract interface of a scene loader . Classes; struct  Listener;  to be able to inform when a scene is loaded More...;  . Static Protected Attributes; static Listeners s_listeners;  . Public Member Functions; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:809,Performance,load,loaded,809,"﻿. SOFA API: sofa::simulation::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Static Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; List of all members . sofa::simulation::SceneLoader Class Referenceabstract . #include <SceneLoaderFactory.h>; Main class used to register scene file loaders. ; More... Inheritance diagram for sofa::simulation::SceneLoader:. [legend]; Detailed Description; Main class used to register scene file loaders. ; It uses the Factory design pattern, where each class is registered in a map, and dynamically retrieved given the type name. Abstract interface of a scene loader . Classes; struct  Listener;  to be able to inform when a scene is loaded More...;  . Static Protected Attributes; static Listeners s_listeners;  . Public Member Functions; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:1009,Performance,load,loading,1009,"﻿. SOFA API: sofa::simulation::SceneLoader Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Static Protected Attributes |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; List of all members . sofa::simulation::SceneLoader Class Referenceabstract . #include <SceneLoaderFactory.h>; Main class used to register scene file loaders. ; More... Inheritance diagram for sofa::simulation::SceneLoader:. [legend]; Detailed Description; Main class used to register scene file loaders. ; It uses the Factory design pattern, where each class is registered in a map, and dynamically retrieved given the type name. Abstract interface of a scene loader . Classes; struct  Listener;  to be able to inform when a scene is loaded More...;  . Static Protected Attributes; static Listeners s_listeners;  . Public Member Functions; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:1266,Performance,load,load,1266,"ions |; List of all members . sofa::simulation::SceneLoader Class Referenceabstract . #include <SceneLoaderFactory.h>; Main class used to register scene file loaders. ; More... Inheritance diagram for sofa::simulation::SceneLoader:. [legend]; Detailed Description; Main class used to register scene file loaders. ; It uses the Factory design pattern, where each class is registered in a map, and dynamically retrieved given the type name. Abstract interface of a scene loader . Classes; struct  Listener;  to be able to inform when a scene is loaded More...;  . Static Protected Attributes; static Listeners s_listeners;  . Public Member Functions; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Static Public Member Functions; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Static Protected Member Functions; static void notifyLoadingSceneBe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:1397,Performance,load,load,1397,"ions |; List of all members . sofa::simulation::SceneLoader Class Referenceabstract . #include <SceneLoaderFactory.h>; Main class used to register scene file loaders. ; More... Inheritance diagram for sofa::simulation::SceneLoader:. [legend]; Detailed Description; Main class used to register scene file loaders. ; It uses the Factory design pattern, where each class is registered in a map, and dynamically retrieved given the type name. Abstract interface of a scene loader . Classes; struct  Listener;  to be able to inform when a scene is loaded More...;  . Static Protected Attributes; static Listeners s_listeners;  . Public Member Functions; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canLoadFileExtension (const char *extension)=0;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs)=0;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual std::string getFileTypeDesc ()=0;  get the file type description More...;  ; virtual void getExtensionList (ExtensionList *list)=0;  get the list of file extensions More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Static Public Member Functions; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Static Protected Member Functions; static void notifyLoadingSceneBe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:3286,Performance,load,loading,3286,"Loader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ s_listeners. SceneLoader::Listeners sofa::simulation::SceneLoader::s_listeners. staticprotected . Constructor details. ◆ ~SceneLoader(). virtual sofa::simulation::SceneLoader::~SceneLoader ; (; ). virtualdefault . Function details. ◆ addListener(). void sofa::simulation::SceneLoader::addListener ; (; Listener * ; l). static . adding a listener . ◆ canLoadFileExtension(). virtual bool sofa::simulation::SceneLoader::canLoadFileExtension ; (; const char * ; extension). pure virtual . Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ canLoadFileName(). bool sofa::simulation::SceneLoader::canLoadFileName ; (; const char * ; filename). virtual . Pre-loading check. . ◆ canWriteFileExtension(). virtual bool sofa::simulation::SceneLoader::canWriteFileExtension ; (; const char * ; ). inlinevirtual . Reimplemented in sofa::simulation::SceneLoaderXML. ◆ canWriteFileName(). bool sofa::simulation::SceneLoader::canWriteFileName ; (; const char * ; filename). virtual . Pre-saving check. . ◆ doLoad(). virtual sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). pure virtual . Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ getExtensionList(). virtual void sofa::simulation::SceneLoader::getExtensionList ; (; ExtensionList * ; list). pure virtual . get the list of file extensions ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ getFileTypeDesc(). virtual std::string sofa::simulation::SceneLoader::getFileTypeDesc ; (; ). pure virtual . get the file type description ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:4381,Performance,load,load,4381,"ileExtension ; (; const char * ; ). inlinevirtual . Reimplemented in sofa::simulation::SceneLoaderXML. ◆ canWriteFileName(). bool sofa::simulation::SceneLoader::canWriteFileName ; (; const char * ; filename). virtual . Pre-saving check. . ◆ doLoad(). virtual sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). pure virtual . Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ getExtensionList(). virtual void sofa::simulation::SceneLoader::getExtensionList ; (; ExtensionList * ; list). pure virtual . get the list of file extensions ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ getFileTypeDesc(). virtual std::string sofa::simulation::SceneLoader::getFileTypeDesc ; (; ). pure virtual . get the file type description ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ load(). sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::load ; (; const std::string & ; filename, . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector<std::string>(0) . ). load the file . ◆ notifyLoadingSceneAfter(). void sofa::simulation::SceneLoader::notifyLoadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyLoadingSceneBefore(). void sofa::simulation::SceneLoader::notifyLoadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ notifyReloadingSceneAfter(). void sofa::simulation::SceneLoader::notifyReloadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyReloadingSceneBefore(). void sofa::simulation::SceneLoader::notifyReloadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ removeListener(). void sofa::simulation::SceneLoader::removeListener ; (; Listener * ; l). static . removin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:4447,Performance,load,load,4447,"plemented in sofa::simulation::SceneLoaderXML. ◆ canWriteFileName(). bool sofa::simulation::SceneLoader::canWriteFileName ; (; const char * ; filename). virtual . Pre-saving check. . ◆ doLoad(). virtual sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). pure virtual . Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ getExtensionList(). virtual void sofa::simulation::SceneLoader::getExtensionList ; (; ExtensionList * ; list). pure virtual . get the list of file extensions ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ getFileTypeDesc(). virtual std::string sofa::simulation::SceneLoader::getFileTypeDesc ; (; ). pure virtual . get the file type description ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ load(). sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::load ; (; const std::string & ; filename, . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector<std::string>(0) . ). load the file . ◆ notifyLoadingSceneAfter(). void sofa::simulation::SceneLoader::notifyLoadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyLoadingSceneBefore(). void sofa::simulation::SceneLoader::notifyLoadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ notifyReloadingSceneAfter(). void sofa::simulation::SceneLoader::notifyReloadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyReloadingSceneBefore(). void sofa::simulation::SceneLoader::notifyReloadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ removeListener(). void sofa::simulation::SceneLoader::removeListener ; (; Listener * ; l). static . removing a listener . ◆ syntaxForAddingRequiredPlugin(). bool s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html:4598,Performance,load,load,4598,"-saving check. . ◆ doLoad(). virtual sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). pure virtual . Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ getExtensionList(). virtual void sofa::simulation::SceneLoader::getExtensionList ; (; ExtensionList * ; list). pure virtual . get the list of file extensions ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ getFileTypeDesc(). virtual std::string sofa::simulation::SceneLoader::getFileTypeDesc ; (; ). pure virtual . get the file type description ; Implemented in sofa::simulation::SceneLoaderXML, and sofa::simulation::SceneLoaderPHP. ◆ load(). sofa::simulation::NodeSPtr sofa::simulation::SceneLoader::load ; (; const std::string & ; filename, . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector<std::string>(0) . ). load the file . ◆ notifyLoadingSceneAfter(). void sofa::simulation::SceneLoader::notifyLoadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyLoadingSceneBefore(). void sofa::simulation::SceneLoader::notifyLoadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ notifyReloadingSceneAfter(). void sofa::simulation::SceneLoader::notifyReloadingSceneAfter ; (; sofa::simulation::NodeSPtr ; node, . SceneLoader * ; sceneLoader . ). staticprotected . ◆ notifyReloadingSceneBefore(). void sofa::simulation::SceneLoader::notifyReloadingSceneBefore ; (; SceneLoader * ; sceneLoader). staticprotected . ◆ removeListener(). void sofa::simulation::SceneLoader::removeListener ; (; Listener * ; l). static . removing a listener . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoader::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostre",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneLoaderFactory Member List . This is the complete list of members for sofa::simulation::SceneLoaderFactory, including all inherited members. addEntry(SceneLoader *loader)sofa::simulation::SceneLoaderFactory; extensions()sofa::simulation::SceneLoaderFactory; getEntries()sofa::simulation::SceneLoaderFactoryinline; getEntryFileExtension(std::string extension)sofa::simulation::SceneLoaderFactory; getEntryFileName(std::string filename)sofa::simulation::SceneLoaderFactory; getExporterEntryFileExtension(std::string extension)sofa::simulation::SceneLoaderFactory; getExporterEntryFileName(std::string filename)sofa::simulation::SceneLoaderFactory; getInstance()sofa::simulation::SceneLoaderFactorystatic; registrysofa::simulation::SceneLoaderFactoryprotected; SceneLoaderList typedefsofa::simulation::SceneLoaderFactory; ~SceneLoaderFactory()sofa::simulation::SceneLoaderFactory. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory-members.html:285,Performance,load,loader,285,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneLoaderFactory Member List . This is the complete list of members for sofa::simulation::SceneLoaderFactory, including all inherited members. addEntry(SceneLoader *loader)sofa::simulation::SceneLoaderFactory; extensions()sofa::simulation::SceneLoaderFactory; getEntries()sofa::simulation::SceneLoaderFactoryinline; getEntryFileExtension(std::string extension)sofa::simulation::SceneLoaderFactory; getEntryFileName(std::string filename)sofa::simulation::SceneLoaderFactory; getExporterEntryFileExtension(std::string extension)sofa::simulation::SceneLoaderFactory; getExporterEntryFileName(std::string filename)sofa::simulation::SceneLoaderFactory; getInstance()sofa::simulation::SceneLoaderFactorystatic; registrysofa::simulation::SceneLoaderFactoryprotected; SceneLoaderList typedefsofa::simulation::SceneLoaderFactory; ~SceneLoaderFactory()sofa::simulation::SceneLoaderFactory. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:1850,Energy Efficiency,reduce,reduced,1850,ader * getExporterEntryFileName (std::string filename);  Get an exporter entry given a file name. More...;  ; SceneLoader * addEntry (SceneLoader *loader);  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileExtension ; (; std::string ; extension). Get an entry given a file extension. . ◆ getEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileName ; (; std::string ; filename). Get an entry given a file name. ; Get an entry given a file extension. . ◆ getExporterEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileExtension ; (; std::string ; extension). Get an exporter entry given a file extension. . ◆ getExporterEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileName ; (; std::string ; filename). Get an exporter entry given a file name. . ◆ getInstance(). SceneLoaderFactory * sofa::simulation::SceneLoaderFactory::getInstance ;,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:964,Performance,load,loader,964,﻿. SOFA API: sofa::simulation::SceneLoaderFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SceneLoaderFactory Class Reference . #include <SceneLoaderFactory.h>. Protected Attributes; SceneLoaderList registry;  Main class registry. More...;  . Public Member Functions;  ~SceneLoaderFactory ();  ; SceneLoader * getEntryFileExtension (std::string extension);  Get an entry given a file extension. More...;  ; SceneLoader * getEntryFileName (std::string filename);  Get an entry given a file name. More...;  ; SceneLoader * getExporterEntryFileExtension (std::string extension);  Get an exporter entry given a file extension. More...;  ; SceneLoader * getExporterEntryFileName (std::string filename);  Get an exporter entry given a file name. More...;  ; SceneLoader * addEntry (SceneLoader *loader);  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFile,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:986,Performance,load,loader,986,﻿. SOFA API: sofa::simulation::SceneLoaderFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SceneLoaderFactory Class Reference . #include <SceneLoaderFactory.h>. Protected Attributes; SceneLoaderList registry;  Main class registry. More...;  . Public Member Functions;  ~SceneLoaderFactory ();  ; SceneLoader * getEntryFileExtension (std::string extension);  Get an entry given a file extension. More...;  ; SceneLoader * getEntryFileName (std::string filename);  Get an entry given a file name. More...;  ; SceneLoader * getExporterEntryFileExtension (std::string extension);  Get an exporter entry given a file extension. More...;  ; SceneLoader * getExporterEntryFileName (std::string filename);  Get an exporter entry given a file name. More...;  ; SceneLoader * addEntry (SceneLoader *loader);  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFile,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:1056,Performance,load,loaders,1056,ceneLoaderFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SceneLoaderFactory Class Reference . #include <SceneLoaderFactory.h>. Protected Attributes; SceneLoaderList registry;  Main class registry. More...;  . Public Member Functions;  ~SceneLoaderFactory ();  ; SceneLoader * getEntryFileExtension (std::string extension);  Get an entry given a file extension. More...;  ; SceneLoader * getEntryFileName (std::string filename);  Get an entry given a file name. More...;  ; SceneLoader * getExporterEntryFileExtension (std::string extension);  Get an exporter entry given a file extension. More...;  ; SceneLoader * getExporterEntryFileName (std::string filename);  Get an exporter entry given a file name. More...;  ; SceneLoader * addEntry (SceneLoader *loader);  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFileExtension(). SceneLoader * sofa:,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:1609,Performance,load,loader,1609,ore...;  ; SceneLoader * getEntryFileName (std::string filename);  Get an entry given a file name. More...;  ; SceneLoader * getExporterEntryFileExtension (std::string extension);  Get an exporter entry given a file extension. More...;  ; SceneLoader * getExporterEntryFileName (std::string filename);  Get an exporter entry given a file name. More...;  ; SceneLoader * addEntry (SceneLoader *loader);  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileExtension ; (; std::string ; extension). Get an entry given a file extension. . ◆ getEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileName ; (; std::string ; filename). Get an entry given a file name. ; Get an entry given a file extension. . ◆ getExporterEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileExtension ; (; std::string ; extension). Get an exporter entry given a file extension. . ◆ getExporterEntryFileNa,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:1630,Performance,load,loader,1630,ilename);  Get an entry given a file name. More...;  ; SceneLoader * getExporterEntryFileExtension (std::string extension);  Get an exporter entry given a file extension. More...;  ; SceneLoader * getExporterEntryFileName (std::string filename);  Get an exporter entry given a file name. More...;  ; SceneLoader * addEntry (SceneLoader *loader);  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileExtension ; (; std::string ; extension). Get an entry given a file extension. . ◆ getEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileName ; (; std::string ; filename). Get an entry given a file name. ; Get an entry given a file extension. . ◆ getExporterEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileExtension ; (; std::string ; extension). Get an exporter entry given a file extension. . ◆ getExporterEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactor,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:1821,Performance,optimiz,optimized,1821,ader * getExporterEntryFileName (std::string filename);  Get an exporter entry given a file name. More...;  ; SceneLoader * addEntry (SceneLoader *loader);  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileExtension ; (; std::string ; extension). Get an entry given a file extension. . ◆ getEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileName ; (; std::string ; filename). Get an entry given a file name. ; Get an entry given a file extension. . ◆ getExporterEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileExtension ; (; std::string ; extension). Get an exporter entry given a file extension. . ◆ getExporterEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileName ; (; std::string ; filename). Get an exporter entry given a file name. . ◆ getInstance(). SceneLoaderFactory * sofa::simulation::SceneLoaderFactory::getInstance ;,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html:1976,Performance,load,loaders,1976,;  Add a scene loader. More...;  ; SceneLoaderList * getEntries ();  Get the list of loaders. More...;  ; std::vector< std::string > extensions ();  . Static Public Member Functions; static SceneLoaderFactory * getInstance ();  Get the ObjectFactory singleton instance. More...;  . Attribute details. ◆ registry. SceneLoaderList sofa::simulation::SceneLoaderFactory::registry. protected . Main class registry. . Constructor details. ◆ ~SceneLoaderFactory(). sofa::simulation::SceneLoaderFactory::~SceneLoaderFactory ; (; ). Function details. ◆ addEntry(). SceneLoader * sofa::simulation::SceneLoaderFactory::addEntry ; (; SceneLoader * ; loader). Add a scene loader. . ◆ extensions(). std::vector< std::string > sofa::simulation::SceneLoaderFactory::extensions ; (; ). Get the list of supported extension. It returns a vector of string but it is RVO optimized so the overhead is reduced. . ◆ getEntries(). SceneLoaderList* sofa::simulation::SceneLoaderFactory::getEntries ; (; ). inline . Get the list of loaders. . ◆ getEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileExtension ; (; std::string ; extension). Get an entry given a file extension. . ◆ getEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getEntryFileName ; (; std::string ; filename). Get an entry given a file name. ; Get an entry given a file extension. . ◆ getExporterEntryFileExtension(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileExtension ; (; std::string ; extension). Get an exporter entry given a file extension. . ◆ getExporterEntryFileName(). SceneLoader * sofa::simulation::SceneLoaderFactory::getExporterEntryFileName ; (; std::string ; filename). Get an exporter entry given a file name. . ◆ getInstance(). SceneLoaderFactory * sofa::simulation::SceneLoaderFactory::getInstance ; (; ). static . Get the ObjectFactory singleton instance. . sofasimulationSceneLoaderFactory; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 .,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneLoaderPHP Member List . This is the complete list of members for sofa::simulation::SceneLoaderPHP, including all inherited members. addListener(Listener *l)sofa::simulation::SceneLoaderstatic; canLoadFileExtension(const char *extension) overridesofa::simulation::SceneLoaderPHPvirtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *)sofa::simulation::SceneLoaderinlinevirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs) overridesofa::simulation::SceneLoaderPHPvirtual; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list) overridesofa::simulation::SceneLoaderPHPvirtual; getFileTypeDesc() overridesofa::simulation::SceneLoaderPHPvirtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded)sofa::simulation::SceneLoadervirtual; write(sofa::simulation::Node *, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html:1812,Modifiability,plugin,pluginName,1812,"ers for sofa::simulation::SceneLoaderPHP, including all inherited members. addListener(Listener *l)sofa::simulation::SceneLoaderstatic; canLoadFileExtension(const char *extension) overridesofa::simulation::SceneLoaderPHPvirtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *)sofa::simulation::SceneLoaderinlinevirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs) overridesofa::simulation::SceneLoaderPHPvirtual; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list) overridesofa::simulation::SceneLoaderPHPvirtual; getFileTypeDesc() overridesofa::simulation::SceneLoaderPHPvirtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded)sofa::simulation::SceneLoadervirtual; write(sofa::simulation::Node *, const char *)sofa::simulation::SceneLoaderinlinevirtual; ~SceneLoader()=defaultsofa::simulation::SceneLoadervirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html:1032,Performance,load,load,1032,"ers for sofa::simulation::SceneLoaderPHP, including all inherited members. addListener(Listener *l)sofa::simulation::SceneLoaderstatic; canLoadFileExtension(const char *extension) overridesofa::simulation::SceneLoaderPHPvirtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *)sofa::simulation::SceneLoaderinlinevirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs) overridesofa::simulation::SceneLoaderPHPvirtual; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list) overridesofa::simulation::SceneLoaderPHPvirtual; getFileTypeDesc() overridesofa::simulation::SceneLoaderPHPvirtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded)sofa::simulation::SceneLoadervirtual; write(sofa::simulation::Node *, const char *)sofa::simulation::SceneLoaderinlinevirtual; ~SceneLoader()=defaultsofa::simulation::SceneLoadervirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:822,Modifiability,inherit,inherited,822,"﻿. SOFA API: sofa::simulation::SceneLoaderPHP Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SceneLoaderPHP Class Reference . #include <SceneLoaderPHP.h>. Inheritance diagram for sofa::simulation::SceneLoaderPHP:. [legend]. Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:1479,Modifiability,plugin,pluginName,1479,"string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderPHP::canLoadFileExtension ; (; const char * ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:1662,Modifiability,inherit,inherited,1662,"override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderPHP::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderPHP::doLoad ; (; const std::string & ; filename, . const std::vector< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:1773,Modifiability,inherit,inherited,1773,"override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderPHP::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderPHP::doLoad ; (; const std::string & ; filename, . const std::vector< ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:1999,Modifiability,inherit,inherited,1999,":string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderPHP::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderPHP::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ getExtensionList(). void sofa::simulation::SceneLoaderPHP::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderPHP::getFileTypeDesc ; (; ). overridevirtual . get the fi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:425,Performance,load,loading,425,"﻿. SOFA API: sofa::simulation::SceneLoaderPHP Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SceneLoaderPHP Class Reference . #include <SceneLoaderPHP.h>. Inheritance diagram for sofa::simulation::SceneLoaderPHP:. [legend]. Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:580,Performance,load,load,580,"﻿. SOFA API: sofa::simulation::SceneLoaderPHP Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SceneLoaderPHP Class Reference . #include <SceneLoaderPHP.h>. Inheritance diagram for sofa::simulation::SceneLoaderPHP:. [legend]. Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:962,Performance,load,loading,962,"﻿. SOFA API: sofa::simulation::SceneLoaderPHP Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SceneLoaderPHP Class Reference . #include <SceneLoaderPHP.h>. Inheritance diagram for sofa::simulation::SceneLoaderPHP:. [legend]. Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:1155,Performance,load,load,1155,"ofa::simulation::SceneLoaderPHP Class Reference . #include <SceneLoaderPHP.h>. Inheritance diagram for sofa::simulation::SceneLoaderPHP:. [legend]. Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; stat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:1286,Performance,load,load,1286,"ofa::simulation::SceneLoaderPHP Class Reference . #include <SceneLoaderPHP.h>. Inheritance diagram for sofa::simulation::SceneLoaderPHP:. [legend]. Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; virtual bool canWriteFileExtension (const char *);  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  ; virtual void write (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; stat",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:2543,Performance,load,loading,2543,"te (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderPHP::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderPHP::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ getExtensionList(). void sofa::simulation::SceneLoaderPHP::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderPHP::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. sofasimulationSceneLoaderPHP; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html:2793,Performance,load,load,2793,"te (sofa::simulation::Node *, const char *);  write scene graph in the file More...;  ; virtual bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded);  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderPHP::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderPHP::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ getExtensionList(). void sofa::simulation::SceneLoaderPHP::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderPHP::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. sofasimulationSceneLoaderPHP; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_p_h_p.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SceneLoaderXML Member List . This is the complete list of members for sofa::simulation::SceneLoaderXML, including all inherited members. addListener(Listener *l)sofa::simulation::SceneLoaderstatic; canLoadFileExtension(const char *extension) overridesofa::simulation::SceneLoaderXMLvirtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *extension) overridesofa::simulation::SceneLoaderXMLvirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs) overridesofa::simulation::SceneLoaderXMLvirtual; doLoadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXML; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list) overridesofa::simulation::SceneLoaderXMLvirtual; getFileTypeDesc() overridesofa::simulation::SceneLoaderXMLvirtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; loadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXMLstatic; loadSucceedsofa::simulation::SceneLoaderXMLstatic; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; processXML(xml::BaseElement *xml, const char *filename)sofa::simulation::SceneLoaderXMLstatic; removeListener",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html:2157,Modifiability,plugin,pluginName,2157,"eFileExtension(const char *extension) overridesofa::simulation::SceneLoaderXMLvirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs) overridesofa::simulation::SceneLoaderXMLvirtual; doLoadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXML; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list) overridesofa::simulation::SceneLoaderXMLvirtual; getFileTypeDesc() overridesofa::simulation::SceneLoaderXMLvirtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; loadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXMLstatic; loadSucceedsofa::simulation::SceneLoaderXMLstatic; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; processXML(xml::BaseElement *xml, const char *filename)sofa::simulation::SceneLoaderXMLstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) overridesofa::simulation::SceneLoaderXMLvirtual; write(sofa::simulation::Node *node, const char *filename) overridesofa::simulation::SceneLoaderXMLvirtual; ~SceneLoader()=defaultsofa::simulation::SceneLoadervirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html:1137,Performance,load,load,1137," addListener(Listener *l)sofa::simulation::SceneLoaderstatic; canLoadFileExtension(const char *extension) overridesofa::simulation::SceneLoaderXMLvirtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *extension) overridesofa::simulation::SceneLoaderXMLvirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs) overridesofa::simulation::SceneLoaderXMLvirtual; doLoadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXML; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list) overridesofa::simulation::SceneLoaderXMLvirtual; getFileTypeDesc() overridesofa::simulation::SceneLoaderXMLvirtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; loadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXMLstatic; loadSucceedsofa::simulation::SceneLoaderXMLstatic; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; processXML(xml::BaseElement *xml, const char *filename)sofa::simulation::SceneLoaderXMLstatic; removeListener",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html:1295,Performance,load,loadFromMemory,1295,"Loaderstatic; canLoadFileExtension(const char *extension) overridesofa::simulation::SceneLoaderXMLvirtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *extension) overridesofa::simulation::SceneLoaderXMLvirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs) overridesofa::simulation::SceneLoaderXMLvirtual; doLoadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXML; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list) overridesofa::simulation::SceneLoaderXMLvirtual; getFileTypeDesc() overridesofa::simulation::SceneLoaderXMLvirtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; loadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXMLstatic; loadSucceedsofa::simulation::SceneLoaderXMLstatic; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; processXML(xml::BaseElement *xml, const char *filename)sofa::simulation::SceneLoaderXMLstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) overridesofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html:1389,Performance,load,loadSucceedsofa,1389,"XMLvirtual; canLoadFileName(const char *filename)sofa::simulation::SceneLoadervirtual; canWriteFileExtension(const char *extension) overridesofa::simulation::SceneLoaderXMLvirtual; canWriteFileName(const char *filename)sofa::simulation::SceneLoadervirtual; doLoad(const std::string &filename, const std::vector< std::string > &sceneArgs) overridesofa::simulation::SceneLoaderXMLvirtual; doLoadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXML; ExtensionList typedefsofa::simulation::SceneLoader; getExtensionList(ExtensionList *list) overridesofa::simulation::SceneLoaderXMLvirtual; getFileTypeDesc() overridesofa::simulation::SceneLoaderXMLvirtual; Listeners typedefsofa::simulation::SceneLoaderprotected; load(const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))sofa::simulation::SceneLoader; loadFromMemory(const char *filename, const char *data)sofa::simulation::SceneLoaderXMLstatic; loadSucceedsofa::simulation::SceneLoaderXMLstatic; notifyLoadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyLoadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneAfter(sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; notifyReloadingSceneBefore(SceneLoader *sceneLoader)sofa::simulation::SceneLoaderprotectedstatic; processXML(xml::BaseElement *xml, const char *filename)sofa::simulation::SceneLoaderXMLstatic; removeListener(Listener *l)sofa::simulation::SceneLoaderstatic; s_listenerssofa::simulation::SceneLoaderprotectedstatic; syntaxForAddingRequiredPlugin(const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) overridesofa::simulation::SceneLoaderXMLvirtual; write(sofa::simulation::Node *node, const char *filename) overridesofa:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:5252,Integrability,depend,depends,5252," ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . generic function to process xml tree (after loading the xml structure) ; Load a scene from a file. . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoaderXML::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). overridevirtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented from sofa::simulation::SceneLoader. ◆ write(). void sofa::simulation::SceneLoaderXML::write ; (; sofa::simulation::Node * ; node, . const char * ; filename . ). overridevirtual . write the file ; Reimplemented from sofa::simulation::SceneLoader. sofasimulationSceneLoaderXML; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:1310,Modifiability,plugin,pluginName,1310,"oadSucceed = true;  . Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; bool canWriteFileExtension (const char *extension) override;  Pre-saving check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  remov",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:1468,Modifiability,inherit,inherited,1468,"oadSucceed = true;  . Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; bool canWriteFileExtension (const char *extension) override;  Pre-saving check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  remov",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:2272,Modifiability,inherit,inherited,2272," &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderXML::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implement",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:2522,Modifiability,inherit,inherited,2522,"eSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderXML::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ canWriteFileExtension(). bool sofa::simulation::SceneLoaderXML::canWriteFileExtension ; (; const char * ; extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . lo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:2636,Modifiability,inherit,inherited,2636,"eSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderXML::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ canWriteFileExtension(). bool sofa::simulation::SceneLoaderXML::canWriteFileExtension ; (; const char * ; extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . lo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:4999,Modifiability,plugin,pluginName,4999," ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . generic function to process xml tree (after loading the xml structure) ; Load a scene from a file. . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoaderXML::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). overridevirtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented from sofa::simulation::SceneLoader. ◆ write(). void sofa::simulation::SceneLoaderXML::write ; (; sofa::simulation::Node * ; node, . const char * ; filename . ). overridevirtual . write the file ; Reimplemented from sofa::simulation::SceneLoader. sofasimulationSceneLoaderXML; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:435,Performance,load,loadSucceed,435,"﻿. SOFA API: sofa::simulation::SceneLoaderXML Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SceneLoaderXML Class Reference . #include <SceneLoaderXML.h>. Inheritance diagram for sofa::simulation::SceneLoaderXML:. [legend]. Static Public Attributes; static bool loadSucceed = true;  . Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; bool canWriteFileExtension (const char *extension) override;  Pre-saving check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *fi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:548,Performance,load,loading,548,"﻿. SOFA API: sofa::simulation::SceneLoaderXML Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SceneLoaderXML Class Reference . #include <SceneLoaderXML.h>. Inheritance diagram for sofa::simulation::SceneLoaderXML:. [legend]. Static Public Attributes; static bool loadSucceed = true;  . Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; bool canWriteFileExtension (const char *extension) override;  Pre-saving check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *fi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:795,Performance,load,load,795,"﻿. SOFA API: sofa::simulation::SceneLoaderXML Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SceneLoaderXML Class Reference . #include <SceneLoaderXML.h>. Inheritance diagram for sofa::simulation::SceneLoaderXML:. [legend]. Static Public Attributes; static bool loadSucceed = true;  . Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; bool canWriteFileExtension (const char *extension) override;  Pre-saving check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *fi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:992,Performance,load,load,992,"﻿. SOFA API: sofa::simulation::SceneLoaderXML Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SceneLoaderXML Class Reference . #include <SceneLoaderXML.h>. Inheritance diagram for sofa::simulation::SceneLoaderXML:. [legend]. Static Public Attributes; static bool loadSucceed = true;  . Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; bool canWriteFileExtension (const char *extension) override;  Pre-saving check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *fi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:1608,Performance,load,loading,1608,"oadSucceed = true;  . Public Member Functions; bool canLoadFileExtension (const char *extension) override;  Pre-loading check. More...;  ; bool canWriteFileExtension (const char *extension) override;  Pre-saving check. More...;  ; virtual sofa::simulation::NodeSPtr doLoad (const std::string &filename, const std::vector< std::string > &sceneArgs) override;  load the file More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  remov",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:1747,Performance,load,load,1747,"le More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:1878,Performance,load,load,1878,"le More...;  ; void write (sofa::simulation::Node *node, const char *filename) override;  write the file More...;  ; NodeSPtr doLoadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:2055,Performance,load,loading,2055,"d a scene from memory (typically : an xml into a string) More...;  ; virtual std::string getFileTypeDesc () override;  get the file type description More...;  ; void getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, Sce",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:2110,Performance,load,loadFromMemory,2110,"getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtens",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:2168,Performance,load,load,2168,"getExtensionList (ExtensionList *list) override;  get the list of file extensions More...;  ; bool syntaxForAddingRequiredPlugin (const std::string &pluginName, const std::vector< std::string > &listComponents, std::ostream &ss, sofa::simulation::Node *nodeWhereAdded) override;  ;  Public Member Functions inherited from sofa::simulation::SceneLoader; virtual ~SceneLoader ()=default;  ; virtual bool canLoadFileName (const char *filename);  Pre-loading check. More...;  ; virtual bool canWriteFileName (const char *filename);  Pre-saving check. More...;  ; sofa::simulation::NodeSPtr load (const std::string &filename, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0));  load the file More...;  . Static Public Member Functions; static NodeSPtr processXML (xml::BaseElement *xml, const char *filename);  generic function to process xml tree (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtens",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:3043,Performance,load,loadSucceed,3043," (after loading the xml structure) More...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderXML::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ canWriteFileExtension(). bool sofa::simulation::SceneLoaderXML::canWriteFileExtension ; (; const char * ; extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::Scen",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:3095,Performance,load,loadSucceed,3095,"re...;  ; static NodeSPtr loadFromMemory (const char *filename, const char *data);  load a scene from memory (typically : an xml into a string) More...;  ;  Static Public Member Functions inherited from sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderXML::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ canWriteFileExtension(). bool sofa::simulation::SceneLoaderXML::canWriteFileExtension ; (; const char * ; extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; Ext",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:3282,Performance,load,loading,3282," sofa::simulation::SceneLoader; static void addListener (Listener *l);  adding a listener More...;  ; static void removeListener (Listener *l);  removing a listener More...;  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::simulation::SceneLoader; static Listeners s_listeners;  ;  Static Protected Member Functions inherited from sofa::simulation::SceneLoader; static void notifyLoadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderXML::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ canWriteFileExtension(). bool sofa::simulation::SceneLoaderXML::canWriteFileExtension ; (; const char * ; extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:3740,Performance,load,load,3740,"ReloadingSceneBefore (SceneLoader *sceneLoader);  ; static void notifyLoadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  ; static void notifyReloadingSceneAfter (sofa::simulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderXML::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ canWriteFileExtension(). bool sofa::simulation::SceneLoaderXML::canWriteFileExtension ; (; const char * ; extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . g",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:3937,Performance,load,load,3937,"mulation::NodeSPtr node, SceneLoader *sceneLoader);  . Attribute details. ◆ loadSucceed. bool sofa::simulation::SceneLoaderXML::loadSucceed = true. static . Function details. ◆ canLoadFileExtension(). bool sofa::simulation::SceneLoaderXML::canLoadFileExtension ; (; const char * ; extension). overridevirtual . Pre-loading check. ; Implements sofa::simulation::SceneLoader. ◆ canWriteFileExtension(). bool sofa::simulation::SceneLoaderXML::canWriteFileExtension ; (; const char * ; extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . generic function to process xml tree (after loading the xml structure) ; Load a scene from a file. . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoaderXML::syntaxForAddingRequiredPl",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:4386,Performance,load,loadFromMemory,4386,"eneLoaderXML::canWriteFileExtension ; (; const char * ; extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . generic function to process xml tree (after loading the xml structure) ; Load a scene from a file. . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoaderXML::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). overridevirtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false other",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:4449,Performance,load,loadFromMemory,4449,"extension). overridevirtual . Pre-saving check. ; Reimplemented from sofa::simulation::SceneLoader. ◆ doLoad(). sofa::simulation::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . generic function to process xml tree (after loading the xml structure) ; Load a scene from a file. . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoaderXML::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). overridevirtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented from sofa::simulation::SceneLoader",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:4530,Performance,load,load,4530,"on::Node::SPtr sofa::simulation::SceneLoaderXML::doLoad ; (; const std::string & ; filename, . const std::vector< std::string > & ; sceneArgs . ). overridevirtual . load the file ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . generic function to process xml tree (after loading the xml structure) ; Load a scene from a file. . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoaderXML::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). overridevirtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented from sofa::simulation::SceneLoader. ◆ write(). void sofa::simulation::SceneLoaderXML::write ; (; sofa::simulation::Node * ; node, . const char * ; filename . ).",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html:4811,Performance,load,loading,4811," ; Implements sofa::simulation::SceneLoader. ◆ doLoadFromMemory(). NodeSPtr sofa::simulation::SceneLoaderXML::doLoadFromMemory ; (; const char * ; filename, . const char * ; data . ). load a scene from memory (typically : an xml into a string) . ◆ getExtensionList(). void sofa::simulation::SceneLoaderXML::getExtensionList ; (; ExtensionList * ; list). overridevirtual . get the list of file extensions ; Implements sofa::simulation::SceneLoader. ◆ getFileTypeDesc(). std::string sofa::simulation::SceneLoaderXML::getFileTypeDesc ; (; ). overridevirtual . get the file type description ; Implements sofa::simulation::SceneLoader. ◆ loadFromMemory(). Node::SPtr sofa::simulation::SceneLoaderXML::loadFromMemory ; (; const char * ; filename, . const char * ; data . ). static . load a scene from memory (typically : an xml into a string) ; Load from a string in memory. . ◆ processXML(). Node::SPtr sofa::simulation::SceneLoaderXML::processXML ; (; xml::BaseElement * ; xml, . const char * ; filename . ). static . generic function to process xml tree (after loading the xml structure) ; Load a scene from a file. . ◆ syntaxForAddingRequiredPlugin(). bool sofa::simulation::SceneLoaderXML::syntaxForAddingRequiredPlugin ; (; const std::string & ; pluginName, . const std::vector< std::string > & ; listComponents, . std::ostream & ; ss, . sofa::simulation::Node * ; nodeWhereAdded . ). overridevirtual . Write into a ostream the syntax to add a RequiredPlugin component in the scene file. The syntax depends on the file format, hence the SceneLoader. The function returns true if the derived SceneLoader implements this function, false otherwise. ; Reimplemented from sofa::simulation::SceneLoader. ◆ write(). void sofa::simulation::SceneLoaderXML::write ; (; sofa::simulation::Node * ; node, . const char * ; filename . ). overridevirtual . write the file ; Reimplemented from sofa::simulation::SceneLoader. sofasimulationSceneLoaderXML; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scene_loader_x_m_l.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scoped_lock-members.html:228,Modifiability,inherit,inherited,228,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::ScopedLock Member List . This is the complete list of members for sofa::simulation::ScopedLock, including all inherited members. operator=(ScopedLock const &)=deletesofa::simulation::ScopedLock; ScopedLock(SpinLock &lock)sofa::simulation::ScopedLockinlineexplicit; ScopedLock(ScopedLock const &)=deletesofa::simulation::ScopedLock; ~ScopedLock()sofa::simulation::ScopedLockinline. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_scoped_lock-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_scoped_lock-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html:2080,Deployability,update,updateContext,2080," *root, SReal *minBBox, SReal *maxBBox, bool init=true)=deletesofa::simulation::Simulationvirtual; computeTotalBBox(Node *root, SReal *minBBox, SReal *maxBBox)=deletesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name)=0sofa::simulation::Simulationpure virtual; createNewNode(const std::string &name)=0sofa::simulation::Simulationpure virtual; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph()=0sofa::simulation::Simulationpure virtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html:2149,Deployability,update,updateVisual,2149," *root, SReal *minBBox, SReal *maxBBox, bool init=true)=deletesofa::simulation::Simulationvirtual; computeTotalBBox(Node *root, SReal *minBBox, SReal *maxBBox)=deletesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name)=0sofa::simulation::Simulationpure virtual; createNewNode(const std::string &name)=0sofa::simulation::Simulationpure virtual; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph()=0sofa::simulation::Simulationpure virtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html:2217,Deployability,update,updateVisualContext,2217," *root, SReal *minBBox, SReal *maxBBox, bool init=true)=deletesofa::simulation::Simulationvirtual; computeTotalBBox(Node *root, SReal *minBBox, SReal *maxBBox)=deletesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name)=0sofa::simulation::Simulationpure virtual; createNewNode(const std::string &name)=0sofa::simulation::Simulationpure virtual; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph()=0sofa::simulation::Simulationpure virtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html:228,Modifiability,inherit,inherited,228,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Simulation Member List . This is the complete list of members for sofa::simulation::Simulation, including all inherited members. animate(Node *root, SReal dt=0.0)=deletesofa::simulation::Simulationvirtual; computeBBox(Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=deletesofa::simulation::Simulationvirtual; computeTotalBBox(Node *root, SReal *minBBox, SReal *maxBBox)=deletesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name)=0sofa::simulation::Simulationpure virtual; createNewNode(const std::string &name)=0sofa::simulation::Simulationpure virtual; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph()=0sofa::simulation::Simulationpure virtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html:1456,Performance,load,load,1456," *root, SReal *minBBox, SReal *maxBBox, bool init=true)=deletesofa::simulation::Simulationvirtual; computeTotalBBox(Node *root, SReal *minBBox, SReal *maxBBox)=deletesofa::simulation::Simulationvirtual; createNewGraph(const std::string &name)=0sofa::simulation::Simulationpure virtual; createNewNode(const std::string &name)=0sofa::simulation::Simulationpure virtual; draw(sofa::core::visual::VisualParams *vparams, Node *root)=deletesofa::simulation::Simulationvirtual; dumpState(Node *root, std::ofstream &out)=deletesofa::simulation::Simulationvirtual; exportGraph(Node *root, const char *filename=nullptr)=deletesofa::simulation::Simulationvirtual; exportOBJ(Node *root, const char *filename, bool exportMTL=true)=deletesofa::simulation::Simulationvirtual; exportXML(Node *root, const char *fileName=nullptr)=deletesofa::simulation::Simulationvirtual; init(Node *root)=deletesofa::simulation::Simulationvirtual; initNode(Node *node)=deletesofa::simulation::Simulationvirtual; initTextures(Node *root)=deletesofa::simulation::Simulationvirtual; isDirectedAcyclicGraph()=0sofa::simulation::Simulationpure virtual; load(const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=deletesofa::simulation::Simulationvirtual; operator=(const Simulation &n)=deletesofa::simulation::Simulation; print(Node *root)=deletesofa::simulation::Simulationvirtual; reset(Node *root)=deletesofa::simulation::Simulationvirtual; Simulation()sofa::simulation::Simulation; Simulation(const Simulation &n)=deletesofa::simulation::Simulation; SPtr typedefsofa::simulation::Simulation; theSimulationsofa::simulation::Simulationinlinestatic; unload(NodeSPtr root)=deletesofa::simulation::Simulationvirtual; updateContext(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisual(Node *root)=deletesofa::simulation::Simulationvirtual; updateVisualContext(Node *root)=deletesofa::simulation::Simulationvirtual; ~Simulation()sofa::simulation::Simulationvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:461,Deployability,update,updated,461,"﻿. SOFA API: sofa::simulation::Simulation Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::Simulation Class Referenceabstract . #include <Simulation.h>. Inheritance diagram for sofa::simulation::Simulation:. [legend]; Detailed Description; Main controller of the scene. Defines how the scene is inited at the beginning, and updated at each time step. Derives from Base in order to use smart pointers and model the parameters as Datas, which makes their edition easy in the GUI. . Static Public Attributes; static Simulation::SPtr theSimulation { nullptr };  . Public Member Functions;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBB",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:1305,Deployability,update,updateVisual,1305,"ation:. [legend]; Detailed Description; Main controller of the scene. Defines how the scene is inited at the beginning, and updated at each time step. Derives from Base in order to use smart pointers and model the parameters as Datas, which makes their edition easy in the GUI. . Static Public Attributes; static Simulation::SPtr theSimulation { nullptr };  . Public Member Functions;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=n",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:1576,Deployability,update,updateContext,1576,"tion easy in the GUI. . Static Public Attributes; static Simulation::SPtr theSimulation { nullptr };  . Public Member Functions;  Simulation ();  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:1716,Deployability,update,updateVisualContext,1716,";  ; virtual ~Simulation ();  ;  Simulation (const Simulation &n)=delete;  ; Simulation & operator= (const Simulation &n)=delete;  ; virtual void print (Node *root)=delete;  Print all object in the graph. More...;  ; virtual void init (Node *root)=delete;  Initialize the objects. More...;  ; virtual void initNode (Node *node)=delete;  Init a node without changing the context of the simulation. More...;  ; virtual void animate (Node *root, SReal dt=0.0)=delete;  Execute one timestep. If dt is 0, the dt parameter in the graph will be used. More...;  ; virtual void updateVisual (Node *root)=delete;  Update the Visual Models: triggers the Mappings. More...;  ; virtual void reset (Node *root)=delete;  Reset to initial state. More...;  ; virtual void initTextures (Node *root)=delete;  Initialize the textures. More...;  ; virtual void updateContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void updateVisualContext (Node *root)=delete;  Update contexts. Required before drawing the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; virtual void dumpState (Node *root, std::ofstream &out)=delete;  Dump the current state in the given stream. More...;  ; virtual NodeSPtr load",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:7559,Deployability,update,updateContext,7559,"ion::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ; (; Node * ; root). virtualdelete . Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). virtual void sofa::simulation::Simulation::updateVisualContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationSimulation; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:7619,Deployability,update,updateContext,7619,"ion::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ; (; Node * ; root). virtualdelete . Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). virtual void sofa::simulation::Simulation::updateVisualContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationSimulation; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:7753,Deployability,update,updateVisual,7753,"ion::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ; (; Node * ; root). virtualdelete . Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). virtual void sofa::simulation::Simulation::updateVisualContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationSimulation; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:7812,Deployability,update,updateVisual,7812,"ion::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ; (; Node * ; root). virtualdelete . Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). virtual void sofa::simulation::Simulation::updateVisualContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationSimulation; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:7915,Deployability,update,updateVisualContext,7915,"ion::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ; (; Node * ; root). virtualdelete . Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). virtual void sofa::simulation::Simulation::updateVisualContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationSimulation; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:7981,Deployability,update,updateVisualContext,7981,"ion::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ; (; Node * ; root). virtualdelete . Update the Visual Models: triggers the Mappings. . ◆ updateVisualContext(). virtual void sofa::simulation::Simulation::updateVisualContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . sofasimulationSimulation; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:2732,Performance,load,load,2732," the scene if root flags are modified. More...;  ; virtual void computeBBox (Node *root, SReal *minBBox, SReal *maxBBox, bool init=true)=delete;  ; virtual void computeTotalBBox (Node *root, SReal *minBBox, SReal *maxBBox)=delete;  ; virtual void draw (sofa::core::visual::VisualParams *vparams, Node *root)=delete;  Render the scene. More...;  ; virtual void exportOBJ (Node *root, const char *filename, bool exportMTL=true)=delete;  Export a scene to an OBJ 3D Scene. More...;  ; virtual void exportXML (Node *root, const char *fileName=nullptr)=delete;  Print all object in the graph in XML format. More...;  ; virtual void exportGraph (Node *root, const char *filename=nullptr)=delete;  Print all objects in the graph in the given file (format is given by the filename extension) More...;  ; virtual void dumpState (Node *root, std::ofstream &out)=delete;  Dump the current state in the given stream. More...;  ; virtual NodeSPtr load (const std::string &, bool reload=false, const std::vector< std::string > &sceneArgs=std::vector< std::string >(0))=delete;  Load a scene from a file. More...;  ; virtual void unload (NodeSPtr root)=delete;  Unload a scene from a Node. More...;  ; virtual NodeSPtr createNewGraph (const std::string &name)=0;  create a new graph(or tree) and return its root node. More...;  ; virtual NodeSPtr createNewNode (const std::string &name)=0;  creates and returns a new node. More...;  ; virtual bool isDirectedAcyclicGraph ()=0;  Can the simulation handle a directed acyclic graph? More...;  . Attribute details. ◆ theSimulation. Simulation::SPtr sofa::simulation::Simulation::theSimulation { nullptr }. inlinestatic . Constructor details. ◆ Simulation() [1/2]. sofa::simulation::Simulation::Simulation ; (; ). ◆ ~Simulation(). sofa::simulation::Simulation::~Simulation ; (; ). virtual . ◆ Simulation() [2/2]. sofa::simulation::Simulation::Simulation ; (; const Simulation & ; n). delete . Function details. ◆ animate(). virtual void sofa::simulation::Simulation::anim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:6823,Performance,load,load,6823,":Simulation::exportOBJ ; (; Node * ; root, . const char * ; filename, . bool ; exportMTL = true . ). virtualdelete . Export a scene to an OBJ 3D Scene. . ◆ exportXML(). virtual void sofa::simulation::Simulation::exportXML ; (; Node * ; root, . const char * ; fileName = nullptr . ). virtualdelete . Print all object in the graph in XML format. . ◆ init(). virtual void sofa::simulation::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html:6878,Performance,load,load,6878,"onst char * ; filename, . bool ; exportMTL = true . ). virtualdelete . Export a scene to an OBJ 3D Scene. . ◆ exportXML(). virtual void sofa::simulation::Simulation::exportXML ; (; Node * ; root, . const char * ; fileName = nullptr . ). virtualdelete . Print all object in the graph in XML format. . ◆ init(). virtual void sofa::simulation::Simulation::init ; (; Node * ; root). virtualdelete . Initialize the objects. . ◆ initNode(). virtual void sofa::simulation::Simulation::initNode ; (; Node * ; node). virtualdelete . Init a node without changing the context of the simulation. . ◆ initTextures(). virtual void sofa::simulation::Simulation::initTextures ; (; Node * ; root). virtualdelete . Initialize the textures. . ◆ isDirectedAcyclicGraph(). virtual bool sofa::simulation::Simulation::isDirectedAcyclicGraph ; (; ). pure virtual . Can the simulation handle a directed acyclic graph? ; Implemented in sofa::simulation::graph::DAGSimulation. ◆ load(). virtual NodeSPtr sofa::simulation::Simulation::load ; (; const std::string & ; , . bool ; reload = false, . const std::vector< std::string > & ; sceneArgs = std::vector< std::string >(0) . ). virtualdelete . Load a scene from a file. . ◆ operator=(). Simulation& sofa::simulation::Simulation::operator= ; (; const Simulation & ; n). delete . ◆ print(). virtual void sofa::simulation::Simulation::print ; (; Node * ; root). virtualdelete . Print all object in the graph. . ◆ reset(). virtual void sofa::simulation::Simulation::reset ; (; Node * ; root). virtualdelete . Reset to initial state. . ◆ unload(). virtual void sofa::simulation::Simulation::unload ; (; NodeSPtr ; root). virtualdelete . Unload a scene from a Node. . ◆ updateContext(). virtual void sofa::simulation::Simulation::updateContext ; (; Node * ; root). virtualdelete . Update contexts. Required before drawing the scene if root flags are modified. . ◆ updateVisual(). virtual void sofa::simulation::Simulation::updateVisual ; (; Node * ; root). virtualdelete . Update the",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SimulationInitDoneEvent Member List . This is the complete list of members for sofa::simulation::SimulationInitDoneEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::SimulationInitDoneEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; SimulationInitDoneEvent()sofa::simulation::SimulationInitDoneEvent; ~Event()sofa::core::objectmodel::Eventvirtual; ~SimulationInitDoneEvent() overridesofa::simulation::SimulationInitDoneEvent. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html:600,Modifiability,inherit,inherited,600,"﻿. SOFA API: sofa::simulation::SimulationInitDoneEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitDoneEvent Class Reference . #include <SimulationInitDoneEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitDoneEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationInitDoneEvent ();  ;  ~SimulationInitDoneEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitDoneEvent(). sofa::simulation::SimulationInitDoneEvent::SimulationInitDoneEvent ; (; ). ◆ ~SimulationInitDoneEvent(). sofa::simulation::SimulationInitDoneEvent::~SimulationInitDoneEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitDoneEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitDoneEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html:1072,Modifiability,inherit,inherited,1072,"﻿. SOFA API: sofa::simulation::SimulationInitDoneEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitDoneEvent Class Reference . #include <SimulationInitDoneEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitDoneEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationInitDoneEvent ();  ;  ~SimulationInitDoneEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitDoneEvent(). sofa::simulation::SimulationInitDoneEvent::SimulationInitDoneEvent ; (; ). ◆ ~SimulationInitDoneEvent(). sofa::simulation::SimulationInitDoneEvent::~SimulationInitDoneEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitDoneEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitDoneEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html:1250,Modifiability,inherit,inherited,1250,"﻿. SOFA API: sofa::simulation::SimulationInitDoneEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitDoneEvent Class Reference . #include <SimulationInitDoneEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitDoneEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationInitDoneEvent ();  ;  ~SimulationInitDoneEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitDoneEvent(). sofa::simulation::SimulationInitDoneEvent::SimulationInitDoneEvent ; (; ). ◆ ~SimulationInitDoneEvent(). sofa::simulation::SimulationInitDoneEvent::~SimulationInitDoneEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitDoneEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitDoneEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html:1345,Modifiability,inherit,inherited,1345,"﻿. SOFA API: sofa::simulation::SimulationInitDoneEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitDoneEvent Class Reference . #include <SimulationInitDoneEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitDoneEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationInitDoneEvent ();  ;  ~SimulationInitDoneEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitDoneEvent(). sofa::simulation::SimulationInitDoneEvent::SimulationInitDoneEvent ; (; ). ◆ ~SimulationInitDoneEvent(). sofa::simulation::SimulationInitDoneEvent::~SimulationInitDoneEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitDoneEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitDoneEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_done_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SimulationInitStartEvent Member List . This is the complete list of members for sofa::simulation::SimulationInitStartEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::SimulationInitStartEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; SimulationInitStartEvent()sofa::simulation::SimulationInitStartEvent; ~Event()sofa::core::objectmodel::Eventvirtual; ~SimulationInitStartEvent() overridesofa::simulation::SimulationInitStartEvent. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html:606,Modifiability,inherit,inherited,606,"﻿. SOFA API: sofa::simulation::SimulationInitStartEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitStartEvent Class Reference . #include <SimulationInitStartEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitStartEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationInitStartEvent ();  ;  ~SimulationInitStartEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitStartEvent(). sofa::simulation::SimulationInitStartEvent::SimulationInitStartEvent ; (; ). ◆ ~SimulationInitStartEvent(). sofa::simulation::SimulationInitStartEvent::~SimulationInitStartEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitStartEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitStartEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html:1078,Modifiability,inherit,inherited,1078,"﻿. SOFA API: sofa::simulation::SimulationInitStartEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitStartEvent Class Reference . #include <SimulationInitStartEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitStartEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationInitStartEvent ();  ;  ~SimulationInitStartEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitStartEvent(). sofa::simulation::SimulationInitStartEvent::SimulationInitStartEvent ; (; ). ◆ ~SimulationInitStartEvent(). sofa::simulation::SimulationInitStartEvent::~SimulationInitStartEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitStartEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitStartEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html:1256,Modifiability,inherit,inherited,1256,"﻿. SOFA API: sofa::simulation::SimulationInitStartEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitStartEvent Class Reference . #include <SimulationInitStartEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitStartEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationInitStartEvent ();  ;  ~SimulationInitStartEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitStartEvent(). sofa::simulation::SimulationInitStartEvent::SimulationInitStartEvent ; (; ). ◆ ~SimulationInitStartEvent(). sofa::simulation::SimulationInitStartEvent::~SimulationInitStartEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitStartEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitStartEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html:1351,Modifiability,inherit,inherited,1351,"﻿. SOFA API: sofa::simulation::SimulationInitStartEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitStartEvent Class Reference . #include <SimulationInitStartEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitStartEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationInitStartEvent ();  ;  ~SimulationInitStartEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitStartEvent(). sofa::simulation::SimulationInitStartEvent::SimulationInitStartEvent ; (; ). ◆ ~SimulationInitStartEvent(). sofa::simulation::SimulationInitStartEvent::~SimulationInitStartEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitStartEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitStartEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_start_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event-members.html:270,Modifiability,inherit,inherited,270,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SimulationInitTexturesDoneEvent Member List . This is the complete list of members for sofa::simulation::SimulationInitTexturesDoneEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::SimulationInitTexturesDoneEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; SimulationInitTexturesDoneEvent()=defaultsofa::simulation::SimulationInitTexturesDoneEvent; ~Event()sofa::core::objectmodel::Eventvirtual; ~SimulationInitTexturesDoneEvent() override=defaultsofa::simulation::SimulationInitTexturesDoneEvent. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html:694,Modifiability,inherit,inherited,694,"﻿. SOFA API: sofa::simulation::SimulationInitTexturesDoneEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitTexturesDoneEvent Class Reference . #include <SimulationInitTexturesDoneEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitTexturesDoneEvent:. [legend]; Detailed Description; Event fired when sofa::simulation::Simulation::initTextures has been called. . Public Member Functions;  SimulationInitTexturesDoneEvent ()=default;  ;  ~SimulationInitTexturesDoneEvent () override=default;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitTexturesDoneEvent(). sofa::simulation::SimulationInitTexturesDoneEvent::SimulationInitTexturesDoneEvent ; (; ). default . ◆ ~SimulationInitTexturesDoneEvent(). sofa::simulation::SimulationInitTexturesDoneEvent::~SimulationInitTexturesDoneEvent ; (; ). overridedefault . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitTexturesDoneEvent::GetClassName ; (; ). in",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html:1166,Modifiability,inherit,inherited,1166,"k for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitTexturesDoneEvent Class Reference . #include <SimulationInitTexturesDoneEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitTexturesDoneEvent:. [legend]; Detailed Description; Event fired when sofa::simulation::Simulation::initTextures has been called. . Public Member Functions;  SimulationInitTexturesDoneEvent ()=default;  ;  ~SimulationInitTexturesDoneEvent () override=default;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitTexturesDoneEvent(). sofa::simulation::SimulationInitTexturesDoneEvent::SimulationInitTexturesDoneEvent ; (; ). default . ◆ ~SimulationInitTexturesDoneEvent(). sofa::simulation::SimulationInitTexturesDoneEvent::~SimulationInitTexturesDoneEvent ; (; ). overridedefault . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitTexturesDoneEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitTexturesDoneEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html:1344,Modifiability,inherit,inherited,1344,"k for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitTexturesDoneEvent Class Reference . #include <SimulationInitTexturesDoneEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitTexturesDoneEvent:. [legend]; Detailed Description; Event fired when sofa::simulation::Simulation::initTextures has been called. . Public Member Functions;  SimulationInitTexturesDoneEvent ()=default;  ;  ~SimulationInitTexturesDoneEvent () override=default;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitTexturesDoneEvent(). sofa::simulation::SimulationInitTexturesDoneEvent::SimulationInitTexturesDoneEvent ; (; ). default . ◆ ~SimulationInitTexturesDoneEvent(). sofa::simulation::SimulationInitTexturesDoneEvent::~SimulationInitTexturesDoneEvent ; (; ). overridedefault . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitTexturesDoneEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitTexturesDoneEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html:1439,Modifiability,inherit,inherited,1439,"k for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationInitTexturesDoneEvent Class Reference . #include <SimulationInitTexturesDoneEvent.h>. Inheritance diagram for sofa::simulation::SimulationInitTexturesDoneEvent:. [legend]; Detailed Description; Event fired when sofa::simulation::Simulation::initTextures has been called. . Public Member Functions;  SimulationInitTexturesDoneEvent ()=default;  ;  ~SimulationInitTexturesDoneEvent () override=default;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationInitTexturesDoneEvent(). sofa::simulation::SimulationInitTexturesDoneEvent::SimulationInitTexturesDoneEvent ; (; ). default . ◆ ~SimulationInitTexturesDoneEvent(). sofa::simulation::SimulationInitTexturesDoneEvent::~SimulationInitTexturesDoneEvent ; (; ). overridedefault . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationInitTexturesDoneEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationInitTexturesDoneEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_init_textures_done_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SimulationStartEvent Member List . This is the complete list of members for sofa::simulation::SimulationStartEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::SimulationStartEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; SimulationStartEvent()sofa::simulation::SimulationStartEvent; ~Event()sofa::core::objectmodel::Eventvirtual; ~SimulationStartEvent() overridesofa::simulation::SimulationStartEvent. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html:582,Modifiability,inherit,inherited,582,"﻿. SOFA API: sofa::simulation::SimulationStartEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationStartEvent Class Reference . #include <SimulationStartEvent.h>. Inheritance diagram for sofa::simulation::SimulationStartEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationStartEvent ();  ;  ~SimulationStartEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationStartEvent(). sofa::simulation::SimulationStartEvent::SimulationStartEvent ; (; ). ◆ ~SimulationStartEvent(). sofa::simulation::SimulationStartEvent::~SimulationStartEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationStartEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationStartEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html:1054,Modifiability,inherit,inherited,1054,"﻿. SOFA API: sofa::simulation::SimulationStartEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationStartEvent Class Reference . #include <SimulationStartEvent.h>. Inheritance diagram for sofa::simulation::SimulationStartEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationStartEvent ();  ;  ~SimulationStartEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationStartEvent(). sofa::simulation::SimulationStartEvent::SimulationStartEvent ; (; ). ◆ ~SimulationStartEvent(). sofa::simulation::SimulationStartEvent::~SimulationStartEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationStartEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationStartEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html:1232,Modifiability,inherit,inherited,1232,"﻿. SOFA API: sofa::simulation::SimulationStartEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationStartEvent Class Reference . #include <SimulationStartEvent.h>. Inheritance diagram for sofa::simulation::SimulationStartEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationStartEvent ();  ;  ~SimulationStartEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationStartEvent(). sofa::simulation::SimulationStartEvent::SimulationStartEvent ; (; ). ◆ ~SimulationStartEvent(). sofa::simulation::SimulationStartEvent::~SimulationStartEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationStartEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationStartEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html:1327,Modifiability,inherit,inherited,1327,"﻿. SOFA API: sofa::simulation::SimulationStartEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationStartEvent Class Reference . #include <SimulationStartEvent.h>. Inheritance diagram for sofa::simulation::SimulationStartEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationStartEvent ();  ;  ~SimulationStartEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationStartEvent(). sofa::simulation::SimulationStartEvent::SimulationStartEvent ; (; ). ◆ ~SimulationStartEvent(). sofa::simulation::SimulationStartEvent::~SimulationStartEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationStartEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationStartEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_start_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SimulationStopEvent Member List . This is the complete list of members for sofa::simulation::SimulationStopEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::SimulationStopEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; SimulationStopEvent()sofa::simulation::SimulationStopEvent; ~Event()sofa::core::objectmodel::Eventvirtual; ~SimulationStopEvent() overridesofa::simulation::SimulationStopEvent. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html:576,Modifiability,inherit,inherited,576,"﻿. SOFA API: sofa::simulation::SimulationStopEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationStopEvent Class Reference . #include <SimulationStopEvent.h>. Inheritance diagram for sofa::simulation::SimulationStopEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationStopEvent ();  ;  ~SimulationStopEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationStopEvent(). sofa::simulation::SimulationStopEvent::SimulationStopEvent ; (; ). ◆ ~SimulationStopEvent(). sofa::simulation::SimulationStopEvent::~SimulationStopEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationStopEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationStopEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html:1048,Modifiability,inherit,inherited,1048,"﻿. SOFA API: sofa::simulation::SimulationStopEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationStopEvent Class Reference . #include <SimulationStopEvent.h>. Inheritance diagram for sofa::simulation::SimulationStopEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationStopEvent ();  ;  ~SimulationStopEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationStopEvent(). sofa::simulation::SimulationStopEvent::SimulationStopEvent ; (; ). ◆ ~SimulationStopEvent(). sofa::simulation::SimulationStopEvent::~SimulationStopEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationStopEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationStopEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html:1226,Modifiability,inherit,inherited,1226,"﻿. SOFA API: sofa::simulation::SimulationStopEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationStopEvent Class Reference . #include <SimulationStopEvent.h>. Inheritance diagram for sofa::simulation::SimulationStopEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationStopEvent ();  ;  ~SimulationStopEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationStopEvent(). sofa::simulation::SimulationStopEvent::SimulationStopEvent ; (; ). ◆ ~SimulationStopEvent(). sofa::simulation::SimulationStopEvent::~SimulationStopEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationStopEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationStopEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html:1321,Modifiability,inherit,inherited,1321,"﻿. SOFA API: sofa::simulation::SimulationStopEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SimulationStopEvent Class Reference . #include <SimulationStopEvent.h>. Inheritance diagram for sofa::simulation::SimulationStopEvent:. [legend]; Detailed Description; Event fired when needed to stop the animation. . Public Member Functions;  SimulationStopEvent ();  ;  ~SimulationStopEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SimulationStopEvent(). sofa::simulation::SimulationStopEvent::SimulationStopEvent ; (; ). ◆ ~SimulationStopEvent(). sofa::simulation::SimulationStopEvent::~SimulationStopEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::SimulationStopEvent::GetClassName ; (; ). inlinestatic . sofasimulationSimulationStopEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_simulation_stop_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event-members.html:266,Modifiability,inherit,inherited,266,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SolveConstraintSystemEndEvent Member List . This is the complete list of members for sofa::simulation::SolveConstraintSystemEndEvent, including all inherited members. Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::SolveConstraintSystemEndEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; SolveConstraintSystemEndEvent()sofa::simulation::SolveConstraintSystemEndEventinline; ~Event()sofa::core::objectmodel::Eventvirtual; ~SolveConstraintSystemEndEvent() overridesofa::simulation::SolveConstraintSystemEndEventinline. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html:565,Modifiability,inherit,inherited,565,"﻿. SOFA API: sofa::simulation::SolveConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SolveConstraintSystemEndEvent Class Reference . #include <SolveConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::SolveConstraintSystemEndEvent:. [legend]. Public Member Functions;  SolveConstraintSystemEndEvent ();  ;  ~SolveConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SolveConstraintSystemEndEvent(). sofa::simulation::SolveConstraintSystemEndEvent::SolveConstraintSystemEndEvent ; (; ). inline . ◆ ~SolveConstraintSystemEndEvent(). sofa::simulation::SolveConstraintSystemEndEvent::~SolveConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::SolveConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationSolveConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html:1037,Modifiability,inherit,inherited,1037,"﻿. SOFA API: sofa::simulation::SolveConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SolveConstraintSystemEndEvent Class Reference . #include <SolveConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::SolveConstraintSystemEndEvent:. [legend]. Public Member Functions;  SolveConstraintSystemEndEvent ();  ;  ~SolveConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SolveConstraintSystemEndEvent(). sofa::simulation::SolveConstraintSystemEndEvent::SolveConstraintSystemEndEvent ; (; ). inline . ◆ ~SolveConstraintSystemEndEvent(). sofa::simulation::SolveConstraintSystemEndEvent::~SolveConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::SolveConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationSolveConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html:1215,Modifiability,inherit,inherited,1215,"﻿. SOFA API: sofa::simulation::SolveConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SolveConstraintSystemEndEvent Class Reference . #include <SolveConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::SolveConstraintSystemEndEvent:. [legend]. Public Member Functions;  SolveConstraintSystemEndEvent ();  ;  ~SolveConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SolveConstraintSystemEndEvent(). sofa::simulation::SolveConstraintSystemEndEvent::SolveConstraintSystemEndEvent ; (; ). inline . ◆ ~SolveConstraintSystemEndEvent(). sofa::simulation::SolveConstraintSystemEndEvent::~SolveConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::SolveConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationSolveConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html:1310,Modifiability,inherit,inherited,1310,"﻿. SOFA API: sofa::simulation::SolveConstraintSystemEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::SolveConstraintSystemEndEvent Class Reference . #include <SolveConstraintSystemEndEvent.h>. Inheritance diagram for sofa::simulation::SolveConstraintSystemEndEvent:. [legend]. Public Member Functions;  SolveConstraintSystemEndEvent ();  ;  ~SolveConstraintSystemEndEvent () override;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  ;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Constructor details. ◆ SolveConstraintSystemEndEvent(). sofa::simulation::SolveConstraintSystemEndEvent::SolveConstraintSystemEndEvent ; (; ). inline . ◆ ~SolveConstraintSystemEndEvent(). sofa::simulation::SolveConstraintSystemEndEvent::~SolveConstraintSystemEndEvent ; (; ). inlineoverride . Function details. ◆ GetClassName(). static const char* sofa::simulation::SolveConstraintSystemEndEvent::GetClassName ; (; ). inlinestatic . sofasimulationSolveConstraintSystemEndEvent; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_constraint_system_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SolveVisitor Member List . This is the complete list of members for sofa::simulation::SolveVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; dtsofa::simulation::SolveVisitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor-members.html:5185,Testability,test,testTags,5185,"core::behavior::OdeSolver *b)sofa::simulation::SolveVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; sequentialSolve(simulation::Node *node)sofa::simulation::SolveVisitorprotected; setDt(SReal _dt)sofa::simulation::SolveVisitor; setTags(const TagSet &t)sofa::simulation::Visitorinline; SolveVisitor(const sofa::core::ExecParams *params, SReal _dt, sofa::core::MultiVecCoordId X=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId V=sofa::core::VecDerivId::velocity(), bool _parallelSolve=false, bool computeForceIsolatedInteractionForceFields=false)sofa::simulation::SolveVisitor; SolveVisitor(const sofa::core::ExecParams *params, SReal _dt, bool free, bool _parallelSolve=false, bool computeForceIsolatedInteractionForceFields=false)sofa::simulation::SolveVisitor; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; vsofa::simulation::SolveVisitorprotected; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; xsofa::simulation::SolveVisitorprotected; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:4495,Energy Efficiency,schedul,scheduler,4495," ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Protected Member Functions; void sequentialSolve (simulation::Node *node);  Function called if the solvers run sequentially. More...;  ; void parallelSolve (simulation::Node *node);  ; void initializeTaskScheduler ();  Initialize the task scheduler if it is not done already. More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:8361,Energy Efficiency,schedul,scheduler,8361,"ee, . bool ; _parallelSolve = false, . bool ; computeForceIsolatedInteractionForceFields = false . ). Function details. ◆ fwdInteractionForceField(). void sofa::simulation::SolveVisitor::fwdInteractionForceField ; (; Node * ; node, . core::behavior::BaseInteractionForceField * ; forceField . ). ◆ getCategoryName(). const char* sofa::simulation::SolveVisitor::getCategoryName ; (; ); const. inlineoverridevirtual . Return a category name for this action. Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getClassName(). const char* sofa::simulation::SolveVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getDt(). SReal sofa::simulation::SolveVisitor::getDt ; (; ); const. ◆ initializeTaskScheduler(). void sofa::simulation::SolveVisitor::initializeTaskScheduler ; (; ). protected . Initialize the task scheduler if it is not done already. . ◆ isThreadSafe(). bool sofa::simulation::SolveVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ parallelSolve(). void sofa::simulation::SolveVisitor::parallelSolve ; (; simulation::Node * ; node). protected . Function called if the solvers run concurrently Solving tasks are added to the list of tasks and start to run. However, there is no check that the tasks finished. This is done later, once all nodes have been traversed. . ◆ processNodeBottomUp(). void sofa::simulation::SolveVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::SolveVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback met",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:944,Modifiability,inherit,inherited,944,"﻿. SOFA API: sofa::simulation::SolveVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::SolveVisitor Class Reference . #include <SolveVisitor.h>. Inheritance diagram for sofa::simulation::SolveVisitor:. [legend]; Detailed Description; Used by the animation loop: send the solve signal to the others solvers This visitor is able to run the solvers sequentially or concurrently. . Protected Attributes; SReal dt;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ; bool m_parallelSolve {false };  ; bool m_computeForceIsolatedInteractionForceFields { false };  ; std::list< SolveVisitorTask > m_tasks;  Container for the parallel tasks. More...;  ; sofa::simulation::CpuTask::Status m_status;  Status for the parallel tasks. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  SolveVisitor (const sofa::core::ExecParams *params, SReal _dt, sofa::core::MultiVecCoordId X=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId V=sofa::core::VecDerivId::velocity(), bool _parallelSolve=false, bool computeForceIsolatedInteractionForceFields=false);  ;  SolveVisitor (const sofa::core::ExecParams *params, SReal _dt, bool free, bool _parallelSolve=false, bool computeForceIsolatedInteractionForceFields=false);  ; virtual void processSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *b);  ; void fwdInteractionForceField (Node *node, core::behavior::BaseInteractionForceField *forceField);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *) override;  Callback method called after child node have been processed and befor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:2321,Modifiability,inherit,inherited,2321,"ams *params, SReal _dt, bool free, bool _parallelSolve=false, bool computeForceIsolatedInteractionForceFields=false);  ; virtual void processSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *b);  ; void fwdInteractionForceField (Node *node, core::behavior::BaseInteractionForceField *forceField);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; void setDt (SReal _dt);  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:4572,Modifiability,inherit,inherited,4572,"ntext *, PointedType *), const std::string &typeInfo);  . Protected Member Functions; void sequentialSolve (simulation::Node *node);  Function called if the solvers run sequentially. More...;  ; void parallelSolve (simulation::Node *node);  ; void initializeTaskScheduler ();  Initialize the task scheduler if it is not done already. More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ dt. SReal sofa::simulation::SolveVisitor::dt. protected . ◆ m_computeForceIsolatedInteracti",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:5908,Modifiability,inherit,inherited,5908,"ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ dt. SReal sofa::simulation::SolveVisitor::dt. protected . ◆ m_computeForceIsolatedInteractionForceFields. bool sofa::simulation::SolveVisitor::m_computeForceIsolatedInteractionForceFields { false }. protected . ◆ m_parallelSolve. bool sofa::simulation::SolveVisitor::m_parallelSolve {false }. protected . ◆ m_status. sofa::simulation::CpuTask::Status sofa::simulation::SolveVisitor::m_status. protected . Status for the parallel tasks. . ◆ m_tasks. std::list<SolveVisitorTask> sofa::simulation::SolveVisitor::m_tasks. protected . Container for the parallel tasks. . ◆ v. sofa::core::MultiVecDerivId sofa::simulation::SolveVisitor::v. protected . ◆ x. sofa::core::MultiVecCoordId sofa::simulation::SolveVisitor::x. protected . Constructor details. ◆ SolveVisitor() [1/2]. sofa::simulation::SolveVisitor::SolveVisitor ; (; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:531,Performance,concurren,concurrently,531,"﻿. SOFA API: sofa::simulation::SolveVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::SolveVisitor Class Reference . #include <SolveVisitor.h>. Inheritance diagram for sofa::simulation::SolveVisitor:. [legend]; Detailed Description; Used by the animation loop: send the solve signal to the others solvers This visitor is able to run the solvers sequentially or concurrently. . Protected Attributes; SReal dt;  ; sofa::core::MultiVecCoordId x;  ; sofa::core::MultiVecDerivId v;  ; bool m_parallelSolve {false };  ; bool m_computeForceIsolatedInteractionForceFields { false };  ; std::list< SolveVisitorTask > m_tasks;  Container for the parallel tasks. More...;  ; sofa::simulation::CpuTask::Status m_status;  Status for the parallel tasks. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  SolveVisitor (const sofa::core::ExecParams *params, SReal _dt, sofa::core::MultiVecCoordId X=sofa::core::VecCoordId::position(), sofa::core::MultiVecDerivId V=sofa::core::VecDerivId::velocity(), bool _parallelSolve=false, bool computeForceIsolatedInteractionForceFields=false);  ;  SolveVisitor (const sofa::core::ExecParams *params, SReal _dt, bool free, bool _parallelSolve=false, bool computeForceIsolatedInteractionForceFields=false);  ; virtual void processSolver (simulation::Node *node, sofa::core::behavior::OdeSolver *b);  ; void fwdInteractionForceField (Node *node, core::behavior::BaseInteractionForceField *forceField);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *) override;  Callback method called after child node have been processed and befor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:8754,Performance,concurren,concurrently,8754,"evirtual . Return a category name for this action. Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getClassName(). const char* sofa::simulation::SolveVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getDt(). SReal sofa::simulation::SolveVisitor::getDt ; (; ); const. ◆ initializeTaskScheduler(). void sofa::simulation::SolveVisitor::initializeTaskScheduler ; (; ). protected . Initialize the task scheduler if it is not done already. . ◆ isThreadSafe(). bool sofa::simulation::SolveVisitor::isThreadSafe ; (; ); const. inlineoverridevirtual . Specify whether this action can be parallelized. ; Reimplemented from sofa::simulation::Visitor. ◆ parallelSolve(). void sofa::simulation::SolveVisitor::parallelSolve ; (; simulation::Node * ; node). protected . Function called if the solvers run concurrently Solving tasks are added to the list of tasks and start to run. However, there is no check that the tasks finished. This is done later, once all nodes have been traversed. . ◆ processNodeBottomUp(). void sofa::simulation::SolveVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::SolveVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ processSolver(). void sofa::simulation::SolveVisitor::processSolver ; (; simulation::Node * ; node, . sofa::core::behavior::OdeSolver * ; b . ). virtual . ◆ sequentialSolve(). void sofa::simulation::SolveVisitor::sequentialSolve ; (; simulation::Node * ; n",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:6052,Security,access,access,6052,", class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Attribute details. ◆ dt. SReal sofa::simulation::SolveVisitor::dt. protected . ◆ m_computeForceIsolatedInteractionForceFields. bool sofa::simulation::SolveVisitor::m_computeForceIsolatedInteractionForceFields { false }. protected . ◆ m_parallelSolve. bool sofa::simulation::SolveVisitor::m_parallelSolve {false }. protected . ◆ m_status. sofa::simulation::CpuTask::Status sofa::simulation::SolveVisitor::m_status. protected . Status for the parallel tasks. . ◆ m_tasks. std::list<SolveVisitorTask> sofa::simulation::SolveVisitor::m_tasks. protected . Container for the parallel tasks. . ◆ v. sofa::core::MultiVecDerivId sofa::simulation::SolveVisitor::v. protected . ◆ x. sofa::core::MultiVecCoordId sofa::simulation::SolveVisitor::x. protected . Constructor details. ◆ SolveVisitor() [1/2]. sofa::simulation::SolveVisitor::SolveVisitor ; (; const sofa::core::ExecParams * ; params, . SReal ; _dt, . sofa::core::MultiVecCoordId ; X = sofa::core::VecCoord",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html:2735,Testability,test,testTags,2735,"when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; void setDt (SReal _dt);  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html:287,Energy Efficiency,schedul,scheduledThread,287,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SolveVisitorTask Member List . This is the complete list of members for sofa::simulation::SolveVisitorTask, including all inherited members. CpuTask(Status *status, int scheduledThread=-1)sofa::simulation::CpuTask; Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const override finalsofa::simulation::CpuTaskvirtual; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run() finalsofa::simulation::SolveVisitorTaskvirtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; SolveVisitorTask(sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v)sofa::simulation::SolveVisitorTaskinline; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Status typedefsofa::simulation::CpuTask; Task(int scheduledThread)sofa::simulation::Task; ~CpuTask()=defaultsofa::simulation::CpuTaskvirtual; ~SolveVisitorTask() override=defaultsofa::simulation::SolveVisitorTask; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html:1425,Energy Efficiency,schedul,scheduledThread,1425,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SolveVisitorTask Member List . This is the complete list of members for sofa::simulation::SolveVisitorTask, including all inherited members. CpuTask(Status *status, int scheduledThread=-1)sofa::simulation::CpuTask; Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const override finalsofa::simulation::CpuTaskvirtual; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run() finalsofa::simulation::SolveVisitorTaskvirtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; SolveVisitorTask(sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v)sofa::simulation::SolveVisitorTaskinline; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Status typedefsofa::simulation::CpuTask; Task(int scheduledThread)sofa::simulation::Task; ~CpuTask()=defaultsofa::simulation::CpuTaskvirtual; ~SolveVisitorTask() override=defaultsofa::simulation::SolveVisitorTask; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SolveVisitorTask Member List . This is the complete list of members for sofa::simulation::SolveVisitorTask, including all inherited members. CpuTask(Status *status, int scheduledThread=-1)sofa::simulation::CpuTask; Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const override finalsofa::simulation::CpuTaskvirtual; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run() finalsofa::simulation::SolveVisitorTaskvirtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; SolveVisitorTask(sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v)sofa::simulation::SolveVisitorTaskinline; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Status typedefsofa::simulation::CpuTask; Task(int scheduledThread)sofa::simulation::Task; ~CpuTask()=defaultsofa::simulation::CpuTaskvirtual; ~SolveVisitorTask() override=defaultsofa::simulation::SolveVisitorTask; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:296,Energy Efficiency,schedul,scheduler,296,"﻿. SOFA API: sofa::simulation::SolveVisitorTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SolveVisitorTask Class Reference . #include <SolveVisitor.h>; A task to provide to a task scheduler in which a solver solves. ; More... Inheritance diagram for sofa::simulation::SolveVisitorTask:. [legend]; Detailed Description; A task to provide to a task scheduler in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecPar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:463,Energy Efficiency,schedul,scheduler,463,"﻿. SOFA API: sofa::simulation::SolveVisitorTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SolveVisitorTask Class Reference . #include <SolveVisitor.h>; A task to provide to a task scheduler in which a solver solves. ; More... Inheritance diagram for sofa::simulation::SolveVisitorTask:. [legend]; Detailed Description; A task to provide to a task scheduler in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecPar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:990,Energy Efficiency,schedul,scheduledThread,990,"﻿. SOFA API: sofa::simulation::SolveVisitorTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SolveVisitorTask Class Reference . #include <SolveVisitor.h>; A task to provide to a task scheduler in which a solver solves. ; More... Inheritance diagram for sofa::simulation::SolveVisitorTask:. [legend]; Detailed Description; A task to provide to a task scheduler in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecPar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:1121,Energy Efficiency,schedul,scheduledThread,1121,"﻿. SOFA API: sofa::simulation::SolveVisitorTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SolveVisitorTask Class Reference . #include <SolveVisitor.h>; A task to provide to a task scheduler in which a solver solves. ; More... Inheritance diagram for sofa::simulation::SolveVisitorTask:. [legend]; Detailed Description; A task to provide to a task scheduler in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecPar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:867,Modifiability,inherit,inherited,867,"﻿. SOFA API: sofa::simulation::SolveVisitorTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SolveVisitorTask Class Reference . #include <SolveVisitor.h>; A task to provide to a task scheduler in which a solver solves. ; More... Inheritance diagram for sofa::simulation::SolveVisitorTask:. [legend]; Detailed Description; A task to provide to a task scheduler in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecPar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:1071,Modifiability,inherit,inherited,1071,"﻿. SOFA API: sofa::simulation::SolveVisitorTask Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::SolveVisitorTask Class Reference . #include <SolveVisitor.h>; A task to provide to a task scheduler in which a solver solves. ; More... Inheritance diagram for sofa::simulation::SolveVisitorTask:. [legend]; Detailed Description; A task to provide to a task scheduler in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecPar",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:1256,Modifiability,inherit,inherited,1256," in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecParams * ; params, . SReal ; dt, . sofa::core::MultiVecCoordId ; x, . sofa::core::MultiVecDerivId ; v . ). inline . ◆ ~SolveVisitorTask(). sofa::simulation::SolveVisitorTask::~SolveVisitorTask ; (; ). overridedefault . Function details. ◆ run(). sofa::simulation::Task::MemoryAlloc sofa::simulation::SolveVisitorTask::run ; (; ). finalvirtual . Implements sofa::simulation::Task. sofasimulationSolveVisitorTask; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:1330,Modifiability,inherit,inherited,1330," in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecParams * ; params, . SReal ; dt, . sofa::core::MultiVecCoordId ; x, . sofa::core::MultiVecDerivId ; v . ). inline . ◆ ~SolveVisitorTask(). sofa::simulation::SolveVisitorTask::~SolveVisitorTask ; (; ). overridedefault . Function details. ◆ run(). sofa::simulation::Task::MemoryAlloc sofa::simulation::SolveVisitorTask::run ; (; ). finalvirtual . Implements sofa::simulation::Task. sofasimulationSolveVisitorTask; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html:1427,Modifiability,inherit,inherited,1427," in which a solver solves. . Public Member Functions;  SolveVisitorTask (sofa::simulation::CpuTask::Status *status, sofa::core::behavior::OdeSolver *odeSolver, const sofa::core::ExecParams *params, SReal dt, sofa::core::MultiVecCoordId x, sofa::core::MultiVecDerivId v);  ;  ~SolveVisitorTask () override=default;  ; sofa::simulation::Task::MemoryAlloc run () final;  ;  Public Member Functions inherited from sofa::simulation::CpuTask; Status * getStatus (void) const override final;  ;  CpuTask (Status *status, int scheduledThread=-1);  ; virtual ~CpuTask ()=default;  ;  Public Member Functions inherited from sofa::simulation::Task;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; int getScheduledThread () const;  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Task; int m_id;  ;  Protected Attributes inherited from sofa::simulation::Task; int m_scheduledThread;  ;  Static Public Member Functions inherited from sofa::simulation::Task; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Constructor details. ◆ SolveVisitorTask(). sofa::simulation::SolveVisitorTask::SolveVisitorTask ; (; sofa::simulation::CpuTask::Status * ; status, . sofa::core::behavior::OdeSolver * ; odeSolver, . const sofa::core::ExecParams * ; params, . SReal ; dt, . sofa::core::MultiVecCoordId ; x, . sofa::core::MultiVecDerivId ; v . ). inline . ◆ ~SolveVisitorTask(). sofa::simulation::SolveVisitorTask::~SolveVisitorTask ; (; ). overridedefault . Function details. ◆ run(). sofa::simulation::Task::MemoryAlloc sofa::simulation::SolveVisitorTask::run ; (; ). finalvirtual . Implements sofa::simulation::Task. sofasimulationSolveVisitorTask; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_solve_visitor_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_spin_lock-members.html:224,Modifiability,inherit,inherited,224,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::SpinLock Member List . This is the complete list of members for sofa::simulation::SpinLock, including all inherited members. lock()sofa::simulation::SpinLockinline; SpinLock()sofa::simulation::SpinLockinline; try_lock()sofa::simulation::SpinLockinline; unlock()sofa::simulation::SpinLockinline; ~SpinLock()sofa::simulation::SpinLockinline. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_spin_lock-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_spin_lock-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::StateChangeVisitor Member List . This is the complete list of members for sofa::simulation::StateChangeVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor-members.html:4211,Testability,test,testTags,4211,"m valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::StateChangeVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processStateChange(sofa::core::behavior::BaseMechanicalState *obj)sofa::simulation::StateChangeVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rootsofa::simulation::StateChangeVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; StateChangeVisitor(const sofa::core::ExecParams *params, sofa::core::topology::Topology *source)sofa::simulation::StateChangeVisitor; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html:479,Modifiability,inherit,inherited,479,"﻿. SOFA API: sofa::simulation::StateChangeVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::StateChangeVisitor Class Reference . #include <StateChangeVisitor.h>. Inheritance diagram for sofa::simulation::StateChangeVisitor:. [legend]. Protected Attributes; bool root;  ; sofa::core::topology::Topology * m_source;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  StateChangeVisitor (const sofa::core::ExecParams *params, sofa::core::topology::Topology *source);  ; virtual void processStateChange (sofa::core::behavior::BaseMechanicalState *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html:1184,Modifiability,inherit,inherited,1184,"ChangeVisitor.h>. Inheritance diagram for sofa::simulation::StateChangeVisitor:. [legend]. Protected Attributes; bool root;  ; sofa::core::topology::Topology * m_source;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  StateChangeVisitor (const sofa::core::ExecParams *params, sofa::core::topology::Topology *source);  ; virtual void processStateChange (sofa::core::behavior::BaseMechanicalState *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html:3338,Modifiability,inherit,inherited,3338,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html:3545,Modifiability,inherit,inherited,3545,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_source. sofa::core::topology::Topology* sofa::simulation::StateChangeVisitor::m_source. protected . ◆ root. bool sofa::simulation::StateChangeVisitor::root. protected . Constructor details. ◆ StateChangeVisitor(). sofa::simulation::StateChangeVisitor::StateChangeVisitor ; (; const sofa::core::ExecParams * ; params, ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html:3482,Security,access,access,3482,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html:1768,Testability,test,testTags,1768,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_state_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html:259,Energy Efficiency,allocate,allocate,259,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::StdTaskAllocator Member List . This is the complete list of members for sofa::simulation::StdTaskAllocator, including all inherited members. allocate(std::size_t sz) finalsofa::simulation::StdTaskAllocatorinlinevirtual; free(void *ptr, std::size_t sz) finalsofa::simulation::StdTaskAllocatorinlinevirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::StdTaskAllocator Member List . This is the complete list of members for sofa::simulation::StdTaskAllocator, including all inherited members. allocate(std::size_t sz) finalsofa::simulation::StdTaskAllocatorinlinevirtual; free(void *ptr, std::size_t sz) finalsofa::simulation::StdTaskAllocatorinlinevirtual. Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html:344,Energy Efficiency,allocate,allocate,344,"﻿. SOFA API: sofa::simulation::StdTaskAllocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::StdTaskAllocator Class Reference . Inheritance diagram for sofa::simulation::StdTaskAllocator:. [legend]. Public Member Functions; void * allocate (std::size_t sz) final;  ; void free (void *ptr, std::size_t sz) final;  . Function details. ◆ allocate(). void* sofa::simulation::StdTaskAllocator::allocate ; (; std::size_t ; sz). inlinefinalvirtual . Implements sofa::simulation::Task::Allocator. ◆ free(). void sofa::simulation::StdTaskAllocator::free ; (; void * ; ptr, . std::size_t ; sz . ). inlinefinalvirtual . Implements sofa::simulation::Task::Allocator. sofasimulationStdTaskAllocator; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html:448,Energy Efficiency,allocate,allocate,448,"﻿. SOFA API: sofa::simulation::StdTaskAllocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::StdTaskAllocator Class Reference . Inheritance diagram for sofa::simulation::StdTaskAllocator:. [legend]. Public Member Functions; void * allocate (std::size_t sz) final;  ; void free (void *ptr, std::size_t sz) final;  . Function details. ◆ allocate(). void* sofa::simulation::StdTaskAllocator::allocate ; (; std::size_t ; sz). inlinefinalvirtual . Implements sofa::simulation::Task::Allocator. ◆ free(). void sofa::simulation::StdTaskAllocator::free ; (; void * ; ptr, . std::size_t ; sz . ). inlinefinalvirtual . Implements sofa::simulation::Task::Allocator. sofasimulationStdTaskAllocator; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html:502,Energy Efficiency,allocate,allocate,502,"﻿. SOFA API: sofa::simulation::StdTaskAllocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::StdTaskAllocator Class Reference . Inheritance diagram for sofa::simulation::StdTaskAllocator:. [legend]. Public Member Functions; void * allocate (std::size_t sz) final;  ; void free (void *ptr, std::size_t sz) final;  . Function details. ◆ allocate(). void* sofa::simulation::StdTaskAllocator::allocate ; (; std::size_t ; sz). inlinefinalvirtual . Implements sofa::simulation::Task::Allocator. ◆ free(). void sofa::simulation::StdTaskAllocator::free ; (; void * ; ptr, . std::size_t ; sz . ). inlinefinalvirtual . Implements sofa::simulation::Task::Allocator. sofasimulationStdTaskAllocator; Generated on Mon Nov 11 2024 03:33:58 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_std_task_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor-members.html:252,Modifiability,inherit,inherited,252,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::StoreResetStateVisitor Member List . This is the complete list of members for sofa::simulation::StoreResetStateVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor-members.html:4102,Testability,test,testTags,4102,"eResetStateVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::StoreResetStateVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::StoreResetStateVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(core::objectmodel::BaseObject *obj)sofa::simulation::StoreResetStateVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; StoreResetStateVisitor(const core::ExecParams *params)sofa::simulation::StoreResetStateVisitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html:1035,Modifiability,inherit,inherited,1035,"ion. Public Member Functions |; List of all members . sofa::simulation::StoreResetStateVisitor Class Reference . #include <ResetVisitor.h>. Inheritance diagram for sofa::simulation::StoreResetStateVisitor:. [legend]. Public Member Functions;  StoreResetStateVisitor (const core::ExecParams *params);  ; void processObject (core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html:3069,Modifiability,inherit,inherited,3069,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html:3270,Modifiability,inherit,inherited,3270,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ StoreResetStateVisitor(). sofa::simulation::StoreResetStateVisitor::StoreResetStateVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::StoreResetStateVisitor::getClassName ; (; ); const. inlin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html:3382,Modifiability,inherit,inherited,3382,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ StoreResetStateVisitor(). sofa::simulation::StoreResetStateVisitor::StoreResetStateVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::StoreResetStateVisitor::getClassName ; (; ); const. inlin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html:3213,Security,access,access,3213,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html:1499,Testability,test,testTags,1499,"essNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class Vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_store_reset_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html:1010,Energy Efficiency,schedul,scheduledThread,1010,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Task Member List . This is the complete list of members for sofa::simulation::Task, including all inherited members. Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const =0sofa::simulation::Taskpure virtual; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run()=0sofa::simulation::Taskpure virtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Task(int scheduledThread)sofa::simulation::Task; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html:216,Modifiability,inherit,inherited,216,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Task Member List . This is the complete list of members for sofa::simulation::Task, including all inherited members. Dynamic enum valuesofa::simulation::Task; getAllocator()sofa::simulation::Taskstatic; getScheduledThread() constsofa::simulation::Task; getStatus(void) const =0sofa::simulation::Taskpure virtual; m_idsofa::simulation::Task; m_scheduledThreadsofa::simulation::Taskprotected; MemoryAlloc enum namesofa::simulation::Task; operator delete(void *ptr)sofa::simulation::Taskstatic; operator delete(void *ptr, std::size_t sz)sofa::simulation::Taskstatic; operator new(std::size_t sz)sofa::simulation::Taskstatic; operator new[](std::size_t sz)=deletesofa::simulation::Taskstatic; run()=0sofa::simulation::Taskpure virtual; setAllocator(Task::Allocator *allocator)sofa::simulation::Taskstatic; Stack enum valuesofa::simulation::Task; Static enum valuesofa::simulation::Task; Task(int scheduledThread)sofa::simulation::Task; ~Task()=defaultsofa::simulation::Taskvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:505,Energy Efficiency,allocate,allocate,505,"﻿. SOFA API: sofa::simulation::Task Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::Task Class Referenceabstract . #include <Task.h>. Inheritance diagram for sofa::simulation::Task:. [legend]; Detailed Description; Task class interface . Classes; class  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ op",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:732,Energy Efficiency,schedul,scheduledThread,732,"﻿. SOFA API: sofa::simulation::Task Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::Task Class Referenceabstract . #include <Task.h>. Inheritance diagram for sofa::simulation::Task:. [legend]; Detailed Description; Task class interface . Classes; class  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ op",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:1460,Energy Efficiency,schedul,scheduledThread,1460,"lass  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ operator delete() [2/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr, . std::size_t ; sz . ). static . ◆ operator new(). void * sofa::simulation::Task::operator new ; (; std::size_t ; sz). static . ◆ operator new[](). static void* sofa::simulation::Task::operator new[] ; (; std::size_t ; sz). staticdelete . ◆ run(). virtual MemoryAlloc sofa::simulation::Task::run ; (; ). pure virtual . Implemented in sofa::simulation::InitPerT",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:426,Integrability,interface,interface,426,"﻿. SOFA API: sofa::simulation::Task Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::Task Class Referenceabstract . #include <Task.h>. Inheritance diagram for sofa::simulation::Task:. [legend]; Detailed Description; Task class interface . Classes; class  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ op",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:487,Integrability,interface,interface,487,"﻿. SOFA API: sofa::simulation::Task Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::Task Class Referenceabstract . #include <Task.h>. Inheritance diagram for sofa::simulation::Task:. [legend]; Detailed Description; Task class interface . Classes; class  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ op",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:567,Integrability,interface,interface,567,"﻿. SOFA API: sofa::simulation::Task Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::Task Class Referenceabstract . #include <Task.h>. Inheritance diagram for sofa::simulation::Task:. [legend]; Detailed Description; Task class interface . Classes; class  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ op",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html:585,Integrability,synchroniz,synchronize,585,"﻿. SOFA API: sofa::simulation::Task Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::Task Class Referenceabstract . #include <Task.h>. Inheritance diagram for sofa::simulation::Task:. [legend]; Detailed Description; Task class interface . Classes; class  Allocator;  Task Allocator class interface used to allocate tasks. More...;  ; class  Status;  Task Status class interface used to synchronize tasks. More...;  . Public Attributes; int m_id;  . Protected Attributes; int m_scheduledThread;  . Public Member Functions;  Task (int scheduledThread);  ; virtual ~Task ()=default;  ; virtual MemoryAlloc run ()=0;  ; virtual Task::Status * getStatus (void) const =0;  ; int getScheduledThread () const;  . Static Public Member Functions; static void * operator new (std::size_t sz);  ; static void operator delete (void *ptr);  ; static void operator delete (void *ptr, std::size_t sz);  ; static void * operator new[] (std::size_t sz)=delete;  ; static Task::Allocator * getAllocator ();  ; static void setAllocator (Task::Allocator *allocator);  . Attribute details. ◆ m_id. int sofa::simulation::Task::m_id. ◆ m_scheduledThread. int sofa::simulation::Task::m_scheduledThread. protected . Constructor details. ◆ Task(). sofa::simulation::Task::Task ; (; int ; scheduledThread). ◆ ~Task(). virtual sofa::simulation::Task::~Task ; (; ). virtualdefault . Function details. ◆ getAllocator(). Task::Allocator * sofa::simulation::Task::getAllocator ; (; ). static . ◆ getScheduledThread(). int sofa::simulation::Task::getScheduledThread ; (; ); const. ◆ getStatus(). virtual Task::Status* sofa::simulation::Task::getStatus ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::CpuTask. ◆ operator delete() [1/2]. void sofa::simulation::Task::operator delete ; (; void * ; ptr). static . ◆ op",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html:257,Energy Efficiency,allocate,allocate,257,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Task::Allocator Member List . This is the complete list of members for sofa::simulation::Task::Allocator, including all inherited members. allocate(std::size_t sz)=0sofa::simulation::Task::Allocatorpure virtual; free(void *ptr, std::size_t sz)=0sofa::simulation::Task::Allocatorpure virtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Task::Allocator Member List . This is the complete list of members for sofa::simulation::Task::Allocator, including all inherited members. allocate(std::size_t sz)=0sofa::simulation::Task::Allocatorpure virtual; free(void *ptr, std::size_t sz)=0sofa::simulation::Task::Allocatorpure virtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html:305,Energy Efficiency,allocate,allocate,305,"﻿. SOFA API: sofa::simulation::Task::Allocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Allocator Class Referenceabstract . #include <Task.h>; Task Allocator class interface used to allocate tasks. ; More... Inheritance diagram for sofa::simulation::Task::Allocator:. [legend]; Detailed Description; Task Allocator class interface used to allocate tasks. . Public Member Functions; virtual void * allocate (std::size_t sz)=0;  ; virtual void free (void *ptr, std::size_t sz)=0;  . Function details. ◆ allocate(). virtual void* sofa::simulation::Task::Allocator::allocate ; (; std::size_t ; sz). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. ◆ free(). virtual void sofa::simulation::Task::Allocator::free ; (; void * ; ptr, . std::size_t ; sz . ). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. sofasimulationTaskAllocator; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html:462,Energy Efficiency,allocate,allocate,462,"﻿. SOFA API: sofa::simulation::Task::Allocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Allocator Class Referenceabstract . #include <Task.h>; Task Allocator class interface used to allocate tasks. ; More... Inheritance diagram for sofa::simulation::Task::Allocator:. [legend]; Detailed Description; Task Allocator class interface used to allocate tasks. . Public Member Functions; virtual void * allocate (std::size_t sz)=0;  ; virtual void free (void *ptr, std::size_t sz)=0;  . Function details. ◆ allocate(). virtual void* sofa::simulation::Task::Allocator::allocate ; (; std::size_t ; sz). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. ◆ free(). virtual void sofa::simulation::Task::Allocator::free ; (; void * ; ptr, . std::size_t ; sz . ). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. sofasimulationTaskAllocator; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html:520,Energy Efficiency,allocate,allocate,520,"﻿. SOFA API: sofa::simulation::Task::Allocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Allocator Class Referenceabstract . #include <Task.h>; Task Allocator class interface used to allocate tasks. ; More... Inheritance diagram for sofa::simulation::Task::Allocator:. [legend]; Detailed Description; Task Allocator class interface used to allocate tasks. . Public Member Functions; virtual void * allocate (std::size_t sz)=0;  ; virtual void free (void *ptr, std::size_t sz)=0;  . Function details. ◆ allocate(). virtual void* sofa::simulation::Task::Allocator::allocate ; (; std::size_t ; sz). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. ◆ free(). virtual void sofa::simulation::Task::Allocator::free ; (; void * ; ptr, . std::size_t ; sz . ). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. sofasimulationTaskAllocator; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html:624,Energy Efficiency,allocate,allocate,624,"﻿. SOFA API: sofa::simulation::Task::Allocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Allocator Class Referenceabstract . #include <Task.h>; Task Allocator class interface used to allocate tasks. ; More... Inheritance diagram for sofa::simulation::Task::Allocator:. [legend]; Detailed Description; Task Allocator class interface used to allocate tasks. . Public Member Functions; virtual void * allocate (std::size_t sz)=0;  ; virtual void free (void *ptr, std::size_t sz)=0;  . Function details. ◆ allocate(). virtual void* sofa::simulation::Task::Allocator::allocate ; (; std::size_t ; sz). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. ◆ free(). virtual void sofa::simulation::Task::Allocator::free ; (; void * ; ptr, . std::size_t ; sz . ). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. sofasimulationTaskAllocator; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html:685,Energy Efficiency,allocate,allocate,685,"﻿. SOFA API: sofa::simulation::Task::Allocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Allocator Class Referenceabstract . #include <Task.h>; Task Allocator class interface used to allocate tasks. ; More... Inheritance diagram for sofa::simulation::Task::Allocator:. [legend]; Detailed Description; Task Allocator class interface used to allocate tasks. . Public Member Functions; virtual void * allocate (std::size_t sz)=0;  ; virtual void free (void *ptr, std::size_t sz)=0;  . Function details. ◆ allocate(). virtual void* sofa::simulation::Task::Allocator::allocate ; (; std::size_t ; sz). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. ◆ free(). virtual void sofa::simulation::Task::Allocator::free ; (; void * ; ptr, . std::size_t ; sz . ). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. sofasimulationTaskAllocator; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html:287,Integrability,interface,interface,287,"﻿. SOFA API: sofa::simulation::Task::Allocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Allocator Class Referenceabstract . #include <Task.h>; Task Allocator class interface used to allocate tasks. ; More... Inheritance diagram for sofa::simulation::Task::Allocator:. [legend]; Detailed Description; Task Allocator class interface used to allocate tasks. . Public Member Functions; virtual void * allocate (std::size_t sz)=0;  ; virtual void free (void *ptr, std::size_t sz)=0;  . Function details. ◆ allocate(). virtual void* sofa::simulation::Task::Allocator::allocate ; (; std::size_t ; sz). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. ◆ free(). virtual void sofa::simulation::Task::Allocator::free ; (; void * ; ptr, . std::size_t ; sz . ). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. sofasimulationTaskAllocator; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html:444,Integrability,interface,interface,444,"﻿. SOFA API: sofa::simulation::Task::Allocator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Allocator Class Referenceabstract . #include <Task.h>; Task Allocator class interface used to allocate tasks. ; More... Inheritance diagram for sofa::simulation::Task::Allocator:. [legend]; Detailed Description; Task Allocator class interface used to allocate tasks. . Public Member Functions; virtual void * allocate (std::size_t sz)=0;  ; virtual void free (void *ptr, std::size_t sz)=0;  . Function details. ◆ allocate(). virtual void* sofa::simulation::Task::Allocator::allocate ; (; std::size_t ; sz). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. ◆ free(). virtual void sofa::simulation::Task::Allocator::free ; (; void * ; ptr, . std::size_t ; sz . ). pure virtual . Implemented in sofa::simulation::StdTaskAllocator. sofasimulationTaskAllocator; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_allocator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Task::Status Member List . This is the complete list of members for sofa::simulation::Task::Status, including all inherited members. isBusy() const =0sofa::simulation::Task::Statuspure virtual; setBusy(bool busy)=0sofa::simulation::Task::Statuspure virtual; ~Status()=defaultsofa::simulation::Task::Statusvirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html:278,Integrability,interface,interface,278,﻿. SOFA API: sofa::simulation::Task::Status Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Status Class Referenceabstract . #include <Task.h>; Task Status class interface used to synchronize tasks. ; More... Inheritance diagram for sofa::simulation::Task::Status:. [legend]; Detailed Description; Task Status class interface used to synchronize tasks. . Public Member Functions; virtual ~Status ()=default;  ; virtual bool isBusy () const =0;  ; virtual int setBusy (bool busy)=0;  . Constructor details. ◆ ~Status(). virtual sofa::simulation::Task::Status::~Status ; (; ). virtualdefault . Function details. ◆ isBusy(). virtual bool sofa::simulation::Task::Status::isBusy ; (; ); const. pure virtual . Implemented in sofa::simulation::CpuTaskStatus. ◆ setBusy(). virtual int sofa::simulation::Task::Status::setBusy ; (; bool ; busy). pure virtual . Implemented in sofa::simulation::CpuTaskStatus. sofasimulationTaskStatus; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html:296,Integrability,synchroniz,synchronize,296,﻿. SOFA API: sofa::simulation::Task::Status Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Status Class Referenceabstract . #include <Task.h>; Task Status class interface used to synchronize tasks. ; More... Inheritance diagram for sofa::simulation::Task::Status:. [legend]; Detailed Description; Task Status class interface used to synchronize tasks. . Public Member Functions; virtual ~Status ()=default;  ; virtual bool isBusy () const =0;  ; virtual int setBusy (bool busy)=0;  . Constructor details. ◆ ~Status(). virtual sofa::simulation::Task::Status::~Status ; (; ). virtualdefault . Function details. ◆ isBusy(). virtual bool sofa::simulation::Task::Status::isBusy ; (; ); const. pure virtual . Implemented in sofa::simulation::CpuTaskStatus. ◆ setBusy(). virtual int sofa::simulation::Task::Status::setBusy ; (; bool ; busy). pure virtual . Implemented in sofa::simulation::CpuTaskStatus. sofasimulationTaskStatus; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html:432,Integrability,interface,interface,432,﻿. SOFA API: sofa::simulation::Task::Status Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Status Class Referenceabstract . #include <Task.h>; Task Status class interface used to synchronize tasks. ; More... Inheritance diagram for sofa::simulation::Task::Status:. [legend]; Detailed Description; Task Status class interface used to synchronize tasks. . Public Member Functions; virtual ~Status ()=default;  ; virtual bool isBusy () const =0;  ; virtual int setBusy (bool busy)=0;  . Constructor details. ◆ ~Status(). virtual sofa::simulation::Task::Status::~Status ; (; ). virtualdefault . Function details. ◆ isBusy(). virtual bool sofa::simulation::Task::Status::isBusy ; (; ); const. pure virtual . Implemented in sofa::simulation::CpuTaskStatus. ◆ setBusy(). virtual int sofa::simulation::Task::Status::setBusy ; (; bool ; busy). pure virtual . Implemented in sofa::simulation::CpuTaskStatus. sofasimulationTaskStatus; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html:450,Integrability,synchroniz,synchronize,450,﻿. SOFA API: sofa::simulation::Task::Status Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::Task::Status Class Referenceabstract . #include <Task.h>; Task Status class interface used to synchronize tasks. ; More... Inheritance diagram for sofa::simulation::Task::Status:. [legend]; Detailed Description; Task Status class interface used to synchronize tasks. . Public Member Functions; virtual ~Status ()=default;  ; virtual bool isBusy () const =0;  ; virtual int setBusy (bool busy)=0;  . Constructor details. ◆ ~Status(). virtual sofa::simulation::Task::Status::~Status ; (; ). virtualdefault . Function details. ◆ isBusy(). virtual bool sofa::simulation::Task::Status::isBusy ; (; ); const. pure virtual . Implemented in sofa::simulation::CpuTaskStatus. ◆ setBusy(). virtual int sofa::simulation::Task::Status::setBusy ; (; bool ; busy). pure virtual . Implemented in sofa::simulation::CpuTaskStatus. sofasimulationTaskStatus; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_1_1_status.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::TaskScheduler Member List . This is the complete list of members for sofa::simulation::TaskScheduler, including all inherited members. addTask(Task *task)=0sofa::simulation::TaskSchedulerpure virtual; addTask(Task::Status &status, const std::function< void()> &task)sofa::simulation::TaskSchedulervirtual; getCurrentThreadName()=0sofa::simulation::TaskSchedulerpure virtual; getCurrentThreadType()=0sofa::simulation::TaskSchedulerpure virtual; GetHardwareThreadsCount()sofa::simulation::TaskSchedulerstatic; getTaskAllocator()=0sofa::simulation::TaskSchedulerpure virtual; getThreadCount(void) const =0sofa::simulation::TaskSchedulerpure virtual; init(const unsigned int nbThread=0)=0sofa::simulation::TaskSchedulerpure virtual; stop(void)=0sofa::simulation::TaskSchedulerpure virtual; Task classsofa::simulation::TaskSchedulerfriend; workUntilDone(Task::Status *status)=0sofa::simulation::TaskSchedulerpure virtual; ~TaskScheduler()=defaultsofa::simulation::TaskSchedulervirtual. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html:428,Energy Efficiency,schedul,scheduler,428,"﻿. SOFA API: sofa::simulation::TaskScheduler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::simulation::TaskScheduler Class Referenceabstract . #include <TaskScheduler.h>. Inheritance diagram for sofa::simulation::TaskScheduler:. [legend]; Detailed Description; Base class for a task scheduler; The API allows to:; initialize the scheduler with a number of dedicated threads; add a task to the scheduler; wait until all tasks are done etc. . Public Member Functions; virtual ~TaskScheduler ()=default;  ; virtual void init (const unsigned int nbThread=0)=0;  ; virtual void stop (void)=0;  ; virtual unsigned int getThreadCount (void) const =0;  ; virtual const char * getCurrentThreadName ()=0;  ; virtual int getCurrentThreadType ()=0;  ; virtual bool addTask (Task *task)=0;  ; virtual bool addTask (Task::Status &status, const std::function< void()> &task);  ; virtual void workUntilDone (Task::Status *status)=0;  ; virtual Task::Allocator * getTaskAllocator ()=0;  . Static Public Member Functions; static unsigned GetHardwareThreadsCount ();  . Friends; class Task;  . Constructor details. ◆ ~TaskScheduler(). virtual sofa::simulation::TaskScheduler::~TaskScheduler ; (; ). virtualdefault . Function details. ◆ addTask() [1/2]. virtual bool sofa::simulation::TaskScheduler::addTask ; (; Task * ; task). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ addTask() [2/2]. bool sofa::simulation::TaskScheduler::addTask ; (; Task::Status & ; status, . const std::function< void()> & ; task . ). virtual . ◆ getCurrentThreadName(). virtual const char* sofa::simulation::TaskScheduler::getCurrentThreadName ; (; ). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ getCurrentThreadType(). virtual int sofa::simulation::TaskScheduler::getCurrentThreadType ; (; ). pure virtual . Implemented in sofa::simulation::D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html:474,Energy Efficiency,schedul,scheduler,474,"﻿. SOFA API: sofa::simulation::TaskScheduler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::simulation::TaskScheduler Class Referenceabstract . #include <TaskScheduler.h>. Inheritance diagram for sofa::simulation::TaskScheduler:. [legend]; Detailed Description; Base class for a task scheduler; The API allows to:; initialize the scheduler with a number of dedicated threads; add a task to the scheduler; wait until all tasks are done etc. . Public Member Functions; virtual ~TaskScheduler ()=default;  ; virtual void init (const unsigned int nbThread=0)=0;  ; virtual void stop (void)=0;  ; virtual unsigned int getThreadCount (void) const =0;  ; virtual const char * getCurrentThreadName ()=0;  ; virtual int getCurrentThreadType ()=0;  ; virtual bool addTask (Task *task)=0;  ; virtual bool addTask (Task::Status &status, const std::function< void()> &task);  ; virtual void workUntilDone (Task::Status *status)=0;  ; virtual Task::Allocator * getTaskAllocator ()=0;  . Static Public Member Functions; static unsigned GetHardwareThreadsCount ();  . Friends; class Task;  . Constructor details. ◆ ~TaskScheduler(). virtual sofa::simulation::TaskScheduler::~TaskScheduler ; (; ). virtualdefault . Function details. ◆ addTask() [1/2]. virtual bool sofa::simulation::TaskScheduler::addTask ; (; Task * ; task). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ addTask() [2/2]. bool sofa::simulation::TaskScheduler::addTask ; (; Task::Status & ; status, . const std::function< void()> & ; task . ). virtual . ◆ getCurrentThreadName(). virtual const char* sofa::simulation::TaskScheduler::getCurrentThreadName ; (; ). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ getCurrentThreadType(). virtual int sofa::simulation::TaskScheduler::getCurrentThreadType ; (; ). pure virtual . Implemented in sofa::simulation::D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html:538,Energy Efficiency,schedul,scheduler,538,"﻿. SOFA API: sofa::simulation::TaskScheduler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; Static Public Member Functions |; Friends |; List of all members . sofa::simulation::TaskScheduler Class Referenceabstract . #include <TaskScheduler.h>. Inheritance diagram for sofa::simulation::TaskScheduler:. [legend]; Detailed Description; Base class for a task scheduler; The API allows to:; initialize the scheduler with a number of dedicated threads; add a task to the scheduler; wait until all tasks are done etc. . Public Member Functions; virtual ~TaskScheduler ()=default;  ; virtual void init (const unsigned int nbThread=0)=0;  ; virtual void stop (void)=0;  ; virtual unsigned int getThreadCount (void) const =0;  ; virtual const char * getCurrentThreadName ()=0;  ; virtual int getCurrentThreadType ()=0;  ; virtual bool addTask (Task *task)=0;  ; virtual bool addTask (Task::Status &status, const std::function< void()> &task);  ; virtual void workUntilDone (Task::Status *status)=0;  ; virtual Task::Allocator * getTaskAllocator ()=0;  . Static Public Member Functions; static unsigned GetHardwareThreadsCount ();  . Friends; class Task;  . Constructor details. ◆ ~TaskScheduler(). virtual sofa::simulation::TaskScheduler::~TaskScheduler ; (; ). virtualdefault . Function details. ◆ addTask() [1/2]. virtual bool sofa::simulation::TaskScheduler::addTask ; (; Task * ; task). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ addTask() [2/2]. bool sofa::simulation::TaskScheduler::addTask ; (; Task::Status & ; status, . const std::function< void()> & ; task . ). virtual . ◆ getCurrentThreadName(). virtual const char* sofa::simulation::TaskScheduler::getCurrentThreadName ; (; ). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ getCurrentThreadType(). virtual int sofa::simulation::TaskScheduler::getCurrentThreadType ; (; ). pure virtual . Implemented in sofa::simulation::D",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html:2145,Performance,concurren,concurrent,2145,"hreadsCount ();  . Friends; class Task;  . Constructor details. ◆ ~TaskScheduler(). virtual sofa::simulation::TaskScheduler::~TaskScheduler ; (; ). virtualdefault . Function details. ◆ addTask() [1/2]. virtual bool sofa::simulation::TaskScheduler::addTask ; (; Task * ; task). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ addTask() [2/2]. bool sofa::simulation::TaskScheduler::addTask ; (; Task::Status & ; status, . const std::function< void()> & ; task . ). virtual . ◆ getCurrentThreadName(). virtual const char* sofa::simulation::TaskScheduler::getCurrentThreadName ; (; ). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ getCurrentThreadType(). virtual int sofa::simulation::TaskScheduler::getCurrentThreadType ; (; ). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ GetHardwareThreadsCount(). unsigned sofa::simulation::TaskScheduler::GetHardwareThreadsCount ; (; ). static . Assuming 2 concurrent threads by CPU core, return the number of CPU core on the system . ◆ getTaskAllocator(). virtual Task::Allocator* sofa::simulation::TaskScheduler::getTaskAllocator ; (; ). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ getThreadCount(). virtual unsigned int sofa::simulation::TaskScheduler::getThreadCount ; (; void ; ); const. pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ init(). virtual void sofa::simulation::TaskScheduler::init ; (; const unsigned int ; nbThread = 0). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ stop(). virtual void sofa::simulation::TaskScheduler::stop ; (; void ; ). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. ◆ workUntilDone(). virtual void sofa::simulation::TaskScheduler::workUntilDone ; (; Task::Status * ; status). pure virtual . Implemented in sofa::simulation::DefaultTaskScheduler. Related details. ◆ Task. friend class Task. friend . sofasimulationTaskScheduler; Generated on Mon No",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::TaskSchedulerFactory Member List . This is the complete list of members for sofa::simulation::TaskSchedulerFactory, including all inherited members. getAvailableSchedulers()sofa::simulation::TaskSchedulerFactory; instantiate(const std::string &name)sofa::simulation::TaskSchedulerFactory; registerScheduler(const std::string &name, const std::function< TaskScheduler *()> &creatorFunc)sofa::simulation::TaskSchedulerFactory. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html:882,Energy Efficiency,schedul,schedulers,882,"﻿. SOFA API: sofa::simulation::TaskSchedulerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::TaskSchedulerFactory Class Reference . #include <TaskSchedulerFactory.h>; Detailed Description; Simple factory structure used to instantiate a @TaskScheduler based on a name. The name and a creation function must be registered before trying to instantiate. . Public Member Functions; bool registerScheduler (const std::string &name, const std::function< TaskScheduler *()> &creatorFunc);  ; TaskScheduler * instantiate (const std::string &name);  ; std::set< std::string > getAvailableSchedulers ();  . Function details. ◆ getAvailableSchedulers(). std::set< std::string > sofa::simulation::TaskSchedulerFactory::getAvailableSchedulers ; (; ). Returnsa list of registered schedulers . ◆ instantiate(). TaskScheduler * sofa::simulation::TaskSchedulerFactory::instantiate ; (; const std::string & ; name). ◆ registerScheduler(). bool sofa::simulation::TaskSchedulerFactory::registerScheduler ; (; const std::string & ; name, . const std::function< TaskScheduler *()> & ; creatorFunc . ). Register a new scheduler in the factory; Parameters. namekey in the factory ; creatorFuncfunction creating a new TaskScheduler or a derived class . Returnsfalse if scheduler could not be registered . sofasimulationTaskSchedulerFactory; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html:1211,Energy Efficiency,schedul,scheduler,1211,"﻿. SOFA API: sofa::simulation::TaskSchedulerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::TaskSchedulerFactory Class Reference . #include <TaskSchedulerFactory.h>; Detailed Description; Simple factory structure used to instantiate a @TaskScheduler based on a name. The name and a creation function must be registered before trying to instantiate. . Public Member Functions; bool registerScheduler (const std::string &name, const std::function< TaskScheduler *()> &creatorFunc);  ; TaskScheduler * instantiate (const std::string &name);  ; std::set< std::string > getAvailableSchedulers ();  . Function details. ◆ getAvailableSchedulers(). std::set< std::string > sofa::simulation::TaskSchedulerFactory::getAvailableSchedulers ; (; ). Returnsa list of registered schedulers . ◆ instantiate(). TaskScheduler * sofa::simulation::TaskSchedulerFactory::instantiate ; (; const std::string & ; name). ◆ registerScheduler(). bool sofa::simulation::TaskSchedulerFactory::registerScheduler ; (; const std::string & ; name, . const std::function< TaskScheduler *()> & ; creatorFunc . ). Register a new scheduler in the factory; Parameters. namekey in the factory ; creatorFuncfunction creating a new TaskScheduler or a derived class . Returnsfalse if scheduler could not be registered . sofasimulationTaskSchedulerFactory; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html:1360,Energy Efficiency,schedul,scheduler,1360,"﻿. SOFA API: sofa::simulation::TaskSchedulerFactory Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::TaskSchedulerFactory Class Reference . #include <TaskSchedulerFactory.h>; Detailed Description; Simple factory structure used to instantiate a @TaskScheduler based on a name. The name and a creation function must be registered before trying to instantiate. . Public Member Functions; bool registerScheduler (const std::string &name, const std::function< TaskScheduler *()> &creatorFunc);  ; TaskScheduler * instantiate (const std::string &name);  ; std::set< std::string > getAvailableSchedulers ();  . Function details. ◆ getAvailableSchedulers(). std::set< std::string > sofa::simulation::TaskSchedulerFactory::getAvailableSchedulers ; (; ). Returnsa list of registered schedulers . ◆ instantiate(). TaskScheduler * sofa::simulation::TaskSchedulerFactory::instantiate ; (; const std::string & ; name). ◆ registerScheduler(). bool sofa::simulation::TaskSchedulerFactory::registerScheduler ; (; const std::string & ; name, . const std::function< TaskScheduler *()> & ; creatorFunc . ). Register a new scheduler in the factory; Parameters. namekey in the factory ; creatorFuncfunction creating a new TaskScheduler or a derived class . Returnsfalse if scheduler could not be registered . sofasimulationTaskSchedulerFactory; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_factory.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::TaskSchedulerRegistry Member List . This is the complete list of members for sofa::simulation::TaskSchedulerRegistry, including all inherited members. addTaskSchedulerToRegistry(TaskScheduler *taskScheduler, const std::string &taskSchedulerName)sofa::simulation::TaskSchedulerRegistry; clear()sofa::simulation::TaskSchedulerRegistry; getLastInserted() constsofa::simulation::TaskSchedulerRegistry; getTaskScheduler(const std::string &taskSchedulerName) constsofa::simulation::TaskSchedulerRegistry; hasScheduler(const std::string &taskSchedulerName) constsofa::simulation::TaskSchedulerRegistry; m_lastInsertedsofa::simulation::TaskSchedulerRegistryprotected; m_schedulerssofa::simulation::TaskSchedulerRegistryprotected; ~TaskSchedulerRegistry()sofa::simulation::TaskSchedulerRegistry. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry-members.html:404,Usability,clear,clear,404,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::TaskSchedulerRegistry Member List . This is the complete list of members for sofa::simulation::TaskSchedulerRegistry, including all inherited members. addTaskSchedulerToRegistry(TaskScheduler *taskScheduler, const std::string &taskSchedulerName)sofa::simulation::TaskSchedulerRegistry; clear()sofa::simulation::TaskSchedulerRegistry; getLastInserted() constsofa::simulation::TaskSchedulerRegistry; getTaskScheduler(const std::string &taskSchedulerName) constsofa::simulation::TaskSchedulerRegistry; hasScheduler(const std::string &taskSchedulerName) constsofa::simulation::TaskSchedulerRegistry; m_lastInsertedsofa::simulation::TaskSchedulerRegistryprotected; m_schedulerssofa::simulation::TaskSchedulerRegistryprotected; ~TaskSchedulerRegistry()sofa::simulation::TaskSchedulerRegistry. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:352,Energy Efficiency,schedul,schedulers,352,"﻿. SOFA API: sofa::simulation::TaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::TaskSchedulerRegistry Class Reference . #include <TaskSchedulerRegistry.h>; Detailed Description; Container for task schedulers and its associated name The registry is also owner of the schedulers: it destroys them in its destructor . Protected Attributes; std::map< std::string, TaskScheduler * > m_schedulers;  ; std::optional< std::pair< std::string, TaskScheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedule",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:421,Energy Efficiency,schedul,schedulers,421,"﻿. SOFA API: sofa::simulation::TaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::TaskSchedulerRegistry Class Reference . #include <TaskSchedulerRegistry.h>; Detailed Description; Container for task schedulers and its associated name The registry is also owner of the schedulers: it destroys them in its destructor . Protected Attributes; std::map< std::string, TaskScheduler * > m_schedulers;  ; std::optional< std::pair< std::string, TaskScheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedule",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:1680,Energy Efficiency,schedul,scheduler,1680,"Scheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedulerRegistry::getLastInserted ; (; ); const. ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::TaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName); const. Returnsa @TaskScheduler if the scheduler name is found in the registry, nullptr otherwise . ◆ hasScheduler(). bool sofa::simulation::TaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName); const. Returnstrue if the scheduler name is found in the registry, false otherwise . sofasimulationTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:1846,Energy Efficiency,schedul,schedulers,1846,"Scheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedulerRegistry::getLastInserted ; (; ); const. ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::TaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName); const. Returnsa @TaskScheduler if the scheduler name is found in the registry, nullptr otherwise . ◆ hasScheduler(). bool sofa::simulation::TaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName); const. Returnstrue if the scheduler name is found in the registry, false otherwise . sofasimulationTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:2224,Energy Efficiency,schedul,scheduler,2224,"Scheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedulerRegistry::getLastInserted ; (; ); const. ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::TaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName); const. Returnsa @TaskScheduler if the scheduler name is found in the registry, nullptr otherwise . ◆ hasScheduler(). bool sofa::simulation::TaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName); const. Returnstrue if the scheduler name is found in the registry, false otherwise . sofasimulationTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:2435,Energy Efficiency,schedul,scheduler,2435,"Scheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedulerRegistry::getLastInserted ; (; ); const. ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::TaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName); const. Returnsa @TaskScheduler if the scheduler name is found in the registry, nullptr otherwise . ◆ hasScheduler(). bool sofa::simulation::TaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName); const. Returnstrue if the scheduler name is found in the registry, false otherwise . sofasimulationTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:1011,Usability,clear,clear,1011,"﻿. SOFA API: sofa::simulation::TaskSchedulerRegistry Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::TaskSchedulerRegistry Class Reference . #include <TaskSchedulerRegistry.h>; Detailed Description; Container for task schedulers and its associated name The registry is also owner of the schedulers: it destroys them in its destructor . Protected Attributes; std::map< std::string, TaskScheduler * > m_schedulers;  ; std::optional< std::pair< std::string, TaskScheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedule",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:1737,Usability,clear,clear,1737,"Scheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedulerRegistry::getLastInserted ; (; ); const. ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::TaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName); const. Returnsa @TaskScheduler if the scheduler name is found in the registry, nullptr otherwise . ◆ hasScheduler(). bool sofa::simulation::TaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName); const. Returnstrue if the scheduler name is found in the registry, false otherwise . sofasimulationTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html:1792,Usability,clear,clear,1792,"Scheduler * > > m_lastInserted {};  . Public Member Functions; bool addTaskSchedulerToRegistry (TaskScheduler *taskScheduler, const std::string &taskSchedulerName);  ; TaskScheduler * getTaskScheduler (const std::string &taskSchedulerName) const;  ; bool hasScheduler (const std::string &taskSchedulerName) const;  ; const std::optional< std::pair< std::string, TaskScheduler * > > & getLastInserted () const;  ; void clear ();  ;  ~TaskSchedulerRegistry ();  . Attribute details. ◆ m_lastInserted. std::optional<std::pair<std::string, TaskScheduler*> > sofa::simulation::TaskSchedulerRegistry::m_lastInserted {}. protected . ◆ m_schedulers. std::map<std::string, TaskScheduler*> sofa::simulation::TaskSchedulerRegistry::m_schedulers. protected . Constructor details. ◆ ~TaskSchedulerRegistry(). sofa::simulation::TaskSchedulerRegistry::~TaskSchedulerRegistry ; (; ). Function details. ◆ addTaskSchedulerToRegistry(). bool sofa::simulation::TaskSchedulerRegistry::addTaskSchedulerToRegistry ; (; TaskScheduler * ; taskScheduler, . const std::string & ; taskSchedulerName . ). Add a task scheduler to the registry and transfer the ownership . ◆ clear(). void sofa::simulation::TaskSchedulerRegistry::clear ; (; ). Clear the registry and destroy the task schedulers sstored in the registry . ◆ getLastInserted(). const std::optional< std::pair< std::string, TaskScheduler * > > & sofa::simulation::TaskSchedulerRegistry::getLastInserted ; (; ); const. ◆ getTaskScheduler(). TaskScheduler * sofa::simulation::TaskSchedulerRegistry::getTaskScheduler ; (; const std::string & ; taskSchedulerName); const. Returnsa @TaskScheduler if the scheduler name is found in the registry, nullptr otherwise . ◆ hasScheduler(). bool sofa::simulation::TaskSchedulerRegistry::hasScheduler ; (; const std::string & ; taskSchedulerName); const. Returnstrue if the scheduler name is found in the registry, false otherwise . sofasimulationTaskSchedulerRegistry; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_task_scheduler_registry.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::TopologyChangeVisitor Member List . This is the complete list of members for sofa::simulation::TopologyChangeVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor-members.html:4136,Testability,test,testTags,4136,"de *node) overridesofa::simulation::TopologyChangeVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::TopologyChangeVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processTopologyChange(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj)sofa::simulation::TopologyChangeVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; TopologyChangeVisitor(const sofa::core::ExecParams *params, sofa::core::topology::Topology *source)sofa::simulation::TopologyChangeVisitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~TopologyChangeVisitor() overridesofa::simulation::TopologyChangeVisitorinline; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html:477,Modifiability,inherit,inherited,477,"﻿. SOFA API: sofa::simulation::TopologyChangeVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::TopologyChangeVisitor Class Reference . #include <TopologyChangeVisitor.h>. Inheritance diagram for sofa::simulation::TopologyChangeVisitor:. [legend]. Protected Attributes; sofa::core::topology::Topology * m_source;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  TopologyChangeVisitor (const sofa::core::ExecParams *params, sofa::core::topology::Topology *source);  ;  ~TopologyChangeVisitor () override;  ; virtual void processTopologyChange (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for co",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html:1464,Modifiability,inherit,inherited,1464,"st sofa::core::ExecParams * params;  . Public Member Functions;  TopologyChangeVisitor (const sofa::core::ExecParams *params, sofa::core::topology::Topology *source);  ;  ~TopologyChangeVisitor () override;  ; virtual void processTopologyChange (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html:3406,Modifiability,inherit,inherited,3406,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html:3613,Modifiability,inherit,inherited,3613,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_source. sofa::core::topology::Topology* sofa::simulation::TopologyChangeVisitor::m_source. protected . Constructor details. ◆ TopologyChangeVisitor(). sofa::simulation::TopologyChangeVisitor::TopologyChangeVisitor ; (; const sofa::core::ExecParams * ; params, . sofa::core::topology::Topology * ; source . ). ◆ ~Topol",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html:3550,Security,access,access,3550,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html:1836,Testability,test,testTags,1836,";  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; std::string getInfos () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container ,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_topology_change_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::TransformationVisitor Member List . This is the complete list of members for sofa::simulation::TransformationVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor-members.html:4598,Testability,test,testTags,4598,"n::Visitorvirtual; processVisualModel(simulation::Node *node, core::visual::VisualModel *v)sofa::simulation::TransformationVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; rotationsofa::simulation::TransformationVisitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; scalesofa::simulation::TransformationVisitorprotected; setRotation(SReal rx, SReal ry, SReal rz)sofa::simulation::TransformationVisitorinline; setScale(SReal sx, SReal sy, SReal sz)sofa::simulation::TransformationVisitorinline; setTags(const TagSet &t)sofa::simulation::Visitorinline; setTranslation(SReal dx, SReal dy, SReal dz)sofa::simulation::TransformationVisitorinline; SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER(Vector3, sofa::type::Vec3)sofa::simulation::TransformationVisitor; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; TransformationVisitor(const sofa::core::ExecParams *params)sofa::simulation::TransformationVisitor; translationsofa::simulation::TransformationVisitorprotected; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html:485,Modifiability,inherit,inherited,485,"﻿. SOFA API: sofa::simulation::TransformationVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::TransformationVisitor Class Reference . #include <TransformationVisitor.h>. Inheritance diagram for sofa::simulation::TransformationVisitor:. [legend]. Protected Attributes; Vec3 translation;  ; Vec3 rotation;  ; Vec3 scale;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Vector3, sofa::type::Vec3);  ;  TransformationVisitor (const sofa::core::ExecParams *params);  ; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; void processVisualModel (simulation::Node *node, core::visual::VisualModel *v);  ; void processMechanicalState (simulation::Node *node, core::behavior::BaseMechanicalState *m);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &rep",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html:1473,Modifiability,inherit,inherited,1473,"ic Member Functions;  SOFA_ATTRIBUTE_REPLACED__TYPEMEMBER (Vector3, sofa::type::Vec3);  ;  TransformationVisitor (const sofa::core::ExecParams *params);  ; void setTranslation (SReal dx, SReal dy, SReal dz);  ; void setRotation (SReal rx, SReal ry, SReal rz);  ; void setScale (SReal sx, SReal sy, SReal sz);  ; void processVisualModel (simulation::Node *node, core::visual::VisualModel *v);  ; void processMechanicalState (simulation::Node *node, core::behavior::BaseMechanicalState *m);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html:3627,Modifiability,inherit,inherited,3627,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html:3834,Modifiability,inherit,inherited,3834,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ rotation. Vec3 sofa::simulation::TransformationVisitor::rotation. protected . ◆ scale. Vec3 sofa::simulation::TransformationVisitor::scale. protected . ◆ translation. Vec3 sofa::simulation::TransformationVisitor::translation. protected . Constructor details. ◆ TransformationVisitor(). sofa::simulation::TransformationV",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html:3771,Security,access,access,3771,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html:2057,Testability,test,testTags,2057,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_transformation_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::UpdateBoundingBoxVisitor Member List . This is the complete list of members for sofa::simulation::UpdateBoundingBoxVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html:3869,Testability,test,testTags,3869,"getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() constsofa::simulation::Visitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::UpdateBoundingBoxVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateBoundingBoxVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateBoundingBoxVisitor(const sofa::core::ExecParams *params)sofa::simulation::UpdateBoundingBoxVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html:854,Modifiability,inherit,inherited,854,"﻿. SOFA API: sofa::simulation::UpdateBoundingBoxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateBoundingBoxVisitor Class Reference . #include <UpdateBoundingBoxVisitor.h>. Inheritance diagram for sofa::simulation::UpdateBoundingBoxVisitor:. [legend]. Public Member Functions;  UpdateBoundingBoxVisitor (const sofa::core::ExecParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual const char * getClassName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html:3034,Modifiability,inherit,inherited,3034,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html:3235,Modifiability,inherit,inherited,3235,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateBoundingBoxVisitor(). sofa::simulation::UpdateBoundingBoxVisitor::UpdateBoundingBoxVisitor ; (; const sofa::core::ExecParams * ; params). Function details. ◆ processNodeBottomUp(). void sofa::simulation::UpdateBoundingBoxVisitor::processNodeBottomUp ; (; sim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html:3347,Modifiability,inherit,inherited,3347,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateBoundingBoxVisitor(). sofa::simulation::UpdateBoundingBoxVisitor::UpdateBoundingBoxVisitor ; (; const sofa::core::ExecParams * ; params). Function details. ◆ processNodeBottomUp(). void sofa::simulation::UpdateBoundingBoxVisitor::processNodeBottomUp ; (; sim",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html:3178,Security,access,access,3178,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html:1365,Testability,test,testTags,1365,"sitor:. [legend]. Public Member Functions;  UpdateBoundingBoxVisitor (const sofa::core::ExecParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual const char * getClassName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_bounding_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::UpdateContextVisitor Member List . This is the complete list of members for sofa::simulation::UpdateContextVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html:3933,Testability,test,testTags,3933,"::simulation::Visitorinlinevirtual; isThreadSafe() const overridesofa::simulation::UpdateContextVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; startingNodesofa::simulation::UpdateContextVisitorprotected; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateContextVisitor(const core::ExecParams *params)sofa::simulation::UpdateContextVisitorinline; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html:451,Modifiability,inherit,inherited,451,"﻿. SOFA API: sofa::simulation::UpdateContextVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::UpdateContextVisitor Class Reference . #include <UpdateContextVisitor.h>. Inheritance diagram for sofa::simulation::UpdateContextVisitor:. [legend]. Protected Attributes; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  UpdateContextVisitor (const core::ExecParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html:1027,Modifiability,inherit,inherited,1027,"ber Functions |; List of all members . sofa::simulation::UpdateContextVisitor Class Reference . #include <UpdateContextVisitor.h>. Inheritance diagram for sofa::simulation::UpdateContextVisitor:. [legend]. Protected Attributes; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  UpdateContextVisitor (const core::ExecParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html:3181,Modifiability,inherit,inherited,3181,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html:3388,Modifiability,inherit,inherited,3388,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ startingNode. Node* sofa::simulation::UpdateContextVisitor::startingNode. protected . Constructor details. ◆ UpdateContextVisitor(). sofa::simulation::UpdateContextVisitor::UpdateContextVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::Update",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html:3325,Security,access,access,3325,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html:1611,Testability,test,testTags,1611,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html:258,Modifiability,inherit,inherited,258,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::UpdateInternalDataVisitor Member List . This is the complete list of members for sofa::simulation::UpdateInternalDataVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation:",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html:4042,Testability,test,testTags,4042,"taVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateInternalDataVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processUpdateInternalData(simulation::Node *node, sofa::core::objectmodel::BaseObject *baseObj)sofa::simulation::UpdateInternalDataVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateInternalDataVisitor(const core::ExecParams *params)sofa::simulation::UpdateInternalDataVisitorinline; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:414,Deployability,update,updateInternal,414,"﻿. SOFA API: sofa::simulation::UpdateInternalDataVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateInternalDataVisitor Class Reference . #include <UpdateInternalDataVisitor.h>. Inheritance diagram for sofa::simulation::UpdateInternalDataVisitor:. [legend]; Detailed Description; Triggers the updateInternal() function to update method called when variables (used to compute other internal variables) are modified . Public Member Functions;  UpdateInternalDataVisitor (const core::ExecParams *params);  ; void processUpdateInternalData (simulation::Node *node, sofa::core::objectmodel::BaseObject *baseObj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:443,Deployability,update,update,443,"﻿. SOFA API: sofa::simulation::UpdateInternalDataVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateInternalDataVisitor Class Reference . #include <UpdateInternalDataVisitor.h>. Inheritance diagram for sofa::simulation::UpdateInternalDataVisitor:. [legend]; Detailed Description; Triggers the updateInternal() function to update method called when variables (used to compute other internal variables) are modified . Public Member Functions;  UpdateInternalDataVisitor (const core::ExecParams *params);  ; void processUpdateInternalData (simulation::Node *node, sofa::core::objectmodel::BaseObject *baseObj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:469,Modifiability,variab,variables,469,"﻿. SOFA API: sofa::simulation::UpdateInternalDataVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateInternalDataVisitor Class Reference . #include <UpdateInternalDataVisitor.h>. Inheritance diagram for sofa::simulation::UpdateInternalDataVisitor:. [legend]; Detailed Description; Triggers the updateInternal() function to update method called when variables (used to compute other internal variables) are modified . Public Member Functions;  UpdateInternalDataVisitor (const core::ExecParams *params);  ; void processUpdateInternalData (simulation::Node *node, sofa::core::objectmodel::BaseObject *baseObj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:511,Modifiability,variab,variables,511,"﻿. SOFA API: sofa::simulation::UpdateInternalDataVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateInternalDataVisitor Class Reference . #include <UpdateInternalDataVisitor.h>. Inheritance diagram for sofa::simulation::UpdateInternalDataVisitor:. [legend]; Detailed Description; Triggers the updateInternal() function to update method called when variables (used to compute other internal variables) are modified . Public Member Functions;  UpdateInternalDataVisitor (const core::ExecParams *params);  ; void processUpdateInternalData (simulation::Node *node, sofa::core::objectmodel::BaseObject *baseObj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:1140,Modifiability,inherit,inherited,1140," Class Reference . #include <UpdateInternalDataVisitor.h>. Inheritance diagram for sofa::simulation::UpdateInternalDataVisitor:. [legend]; Detailed Description; Triggers the updateInternal() function to update method called when variables (used to compute other internal variables) are modified . Public Member Functions;  UpdateInternalDataVisitor (const core::ExecParams *params);  ; void processUpdateInternalData (simulation::Node *node, sofa::core::objectmodel::BaseObject *baseObj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:3294,Modifiability,inherit,inherited,3294,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:3495,Modifiability,inherit,inherited,3495,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateInternalDataVisitor(). sofa::simulation::UpdateInternalDataVisitor::UpdateInternalDataVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::UpdateInternalDataVisitor::getCategoryName ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:3607,Modifiability,inherit,inherited,3607,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateInternalDataVisitor(). sofa::simulation::UpdateInternalDataVisitor::UpdateInternalDataVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::UpdateInternalDataVisitor::getCategoryName ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:3438,Security,access,access,3438,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html:1724,Testability,test,testTags,1724,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_internal_data_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::UpdateLinksVisitor Member List . This is the complete list of members for sofa::simulation::UpdateLinksVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html:3972,Testability,test,testTags,3972,"desofa::simulation::UpdateLinksVisitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::UpdateLinksVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateLinksVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(core::objectmodel::BaseObject *obj)sofa::simulation::UpdateLinksVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateLinksVisitor(const core::ExecParams *params)sofa::simulation::UpdateLinksVisitorinline; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html:1025,Modifiability,inherit,inherited,1025,"simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateLinksVisitor Class Reference . #include <UpdateLinksVisitor.h>. Inheritance diagram for sofa::simulation::UpdateLinksVisitor:. [legend]. Public Member Functions;  UpdateLinksVisitor (const core::ExecParams *params);  ; void processObject (core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html:3059,Modifiability,inherit,inherited,3059,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html:3260,Modifiability,inherit,inherited,3260,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateLinksVisitor(). sofa::simulation::UpdateLinksVisitor::UpdateLinksVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::UpdateLinksVisitor::getClassName ; (; ); const. inlineoverridevirtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html:3372,Modifiability,inherit,inherited,3372,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateLinksVisitor(). sofa::simulation::UpdateLinksVisitor::UpdateLinksVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::UpdateLinksVisitor::getClassName ; (; ); const. inlineoverridevirtual",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html:3203,Security,access,access,3203,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html:1489,Testability,test,testTags,1489,"essNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class Vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_links_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::UpdateMappingEndEvent Member List . This is the complete list of members for sofa::simulation::UpdateMappingEndEvent, including all inherited members. dtsofa::simulation::UpdateMappingEndEventprotected; Event()sofa::core::objectmodel::Event; GetClassName()sofa::simulation::UpdateMappingEndEventinlinestatic; getClassName() constsofa::core::objectmodel::Eventinlinevirtual; getDt() constsofa::simulation::UpdateMappingEndEventinline; getEventTypeCount()sofa::core::objectmodel::Eventinlinestatic; getEventTypeIndex() const =0sofa::core::objectmodel::Eventpure virtual; isHandled() constsofa::core::objectmodel::Event; m_handledsofa::core::objectmodel::Eventprotected; s_lastEventTypeIndexsofa::core::objectmodel::Eventprotectedstatic; setHandled()sofa::core::objectmodel::Event; UpdateMappingEndEvent(SReal dt)sofa::simulation::UpdateMappingEndEvent; ~Event()sofa::core::objectmodel::Eventvirtual; ~UpdateMappingEndEvent() overridesofa::simulation::UpdateMappingEndEvent. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html:598,Modifiability,inherit,inherited,598,"﻿. SOFA API: sofa::simulation::UpdateMappingEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::UpdateMappingEndEvent Class Reference . #include <UpdateMappingEndEvent.h>. Inheritance diagram for sofa::simulation::UpdateMappingEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  UpdateMappingEndEvent (SReal dt);  ;  ~UpdateMappingEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::UpdateMappingEndEvent::dt. protected . Constructor details. ◆ UpdateMappingEndEvent(). sofa::simulation::UpdateMappingEndEvent::UpdateMappingEndEvent ; (; SReal ; dt). ◆ ~UpdateMappingEndEvent(). sofa::simulation::UpdateMappingEndEvent::~UpdateMappingEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html:817,Modifiability,inherit,inherited,817,"﻿. SOFA API: sofa::simulation::UpdateMappingEndEvent Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::simulation::UpdateMappingEndEvent Class Reference . #include <UpdateMappingEndEvent.h>. Inheritance diagram for sofa::simulation::UpdateMappingEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  UpdateMappingEndEvent (SReal dt);  ;  ~UpdateMappingEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::UpdateMappingEndEvent::dt. protected . Constructor details. ◆ UpdateMappingEndEvent(). sofa::simulation::UpdateMappingEndEvent::UpdateMappingEndEvent ; (; SReal ; dt). ◆ ~UpdateMappingEndEvent(). sofa::simulation::UpdateMappingEndEvent::~UpdateMappingEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html:1289,Modifiability,inherit,inherited,1289,"s . sofa::simulation::UpdateMappingEndEvent Class Reference . #include <UpdateMappingEndEvent.h>. Inheritance diagram for sofa::simulation::UpdateMappingEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  UpdateMappingEndEvent (SReal dt);  ;  ~UpdateMappingEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::UpdateMappingEndEvent::dt. protected . Constructor details. ◆ UpdateMappingEndEvent(). sofa::simulation::UpdateMappingEndEvent::UpdateMappingEndEvent ; (; SReal ; dt). ◆ ~UpdateMappingEndEvent(). sofa::simulation::UpdateMappingEndEvent::~UpdateMappingEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::UpdateMappingEndEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::simulation::UpdateMappingEndEvent::getDt ; (; ); const. inline . sofasimulationUpdateMappingEndEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html:1474,Modifiability,inherit,inherited,1474,"s . sofa::simulation::UpdateMappingEndEvent Class Reference . #include <UpdateMappingEndEvent.h>. Inheritance diagram for sofa::simulation::UpdateMappingEndEvent:. [legend]; Detailed Description; Event fired by Simulation::animate() after computing a new animation step. AuthorJeremie Allard . Protected Attributes; SReal dt;  ;  Protected Attributes inherited from sofa::core::objectmodel::Event; bool m_handled;  . Public Member Functions;  UpdateMappingEndEvent (SReal dt);  ;  ~UpdateMappingEndEvent () override;  ; SReal getDt () const;  ;  Public Member Functions inherited from sofa::core::objectmodel::Event;  Event ();  ; virtual ~Event ();  ; void setHandled ();  Tag the event as handled, i.e. the event needs not be propagated further. More...;  ; bool isHandled () const;  Returns true of the event has been handled. More...;  ; virtual const char * getClassName () const;  ; virtual size_t getEventTypeIndex () const =0;  . Static Public Member Functions; static const char * GetClassName ();  ;  Static Public Member Functions inherited from sofa::core::objectmodel::Event; static const char * GetClassName ();  ; static size_t getEventTypeCount ();  . Additional Inherited Members;  Static Protected Attributes inherited from sofa::core::objectmodel::Event; static size_t s_lastEventTypeIndex = 0;  storing the last given id More...;  . Attribute details. ◆ dt. SReal sofa::simulation::UpdateMappingEndEvent::dt. protected . Constructor details. ◆ UpdateMappingEndEvent(). sofa::simulation::UpdateMappingEndEvent::UpdateMappingEndEvent ; (; SReal ; dt). ◆ ~UpdateMappingEndEvent(). sofa::simulation::UpdateMappingEndEvent::~UpdateMappingEndEvent ; (; ). override . Function details. ◆ GetClassName(). static const char* sofa::simulation::UpdateMappingEndEvent::GetClassName ; (; ). inlinestatic . ◆ getDt(). SReal sofa::simulation::UpdateMappingEndEvent::getDt ; (; ); const. inline . sofasimulationUpdateMappingEndEvent; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_end_event.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::UpdateMappingVisitor Member List . This is the complete list of members for sofa::simulation::UpdateMappingVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html:4082,Testability,test,testTags,4082,"ion::Visitor; paramssofa::simulation::Visitorprotected; processMapping(simulation::Node *node, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processMechanicalMapping(simulation::Node *, core::BaseMapping *obj)sofa::simulation::UpdateMappingVisitor; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateMappingVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateMappingVisitor(const sofa::core::ExecParams *params)sofa::simulation::UpdateMappingVisitorinline; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html:1192,Modifiability,inherit,inherited,1192,"itor:. [legend]; Detailed Description; propagating position and velocity through non-mechanical mappings (while MechanicalPropagateOnlyPositionAndVelocityVisitor is propagating mechanical mappings) . Public Member Functions;  UpdateMappingVisitor (const sofa::core::ExecParams *params);  ; void processMapping (simulation::Node *node, core::BaseMapping *obj);  ; void processMechanicalMapping (simulation::Node *, core::BaseMapping *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html:3346,Modifiability,inherit,inherited,3346,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html:3547,Modifiability,inherit,inherited,3547,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateMappingVisitor(). sofa::simulation::UpdateMappingVisitor::UpdateMappingVisitor ; (; const sofa::core::ExecParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::UpdateMappingVisitor::getCategoryName ; (; ); const. i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html:3659,Modifiability,inherit,inherited,3659,"sk)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateMappingVisitor(). sofa::simulation::UpdateMappingVisitor::UpdateMappingVisitor ; (; const sofa::core::ExecParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::UpdateMappingVisitor::getCategoryName ; (; ); const. i",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html:3490,Security,access,access,3490,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_e",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html:1776,Testability,test,testTags,1776,"ation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_mapping_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor-members.html:268,Modifiability,inherit,inherited,268,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::UpdateSimulationContextVisitor Member List . This is the complete list of members for sofa::simulation::UpdateSimulationContextVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::s",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor-members.html:3973,Testability,test,testTags,3973,"ION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateSimulationContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; startingNodesofa::simulation::UpdateContextVisitorprotected; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateContextVisitor(const core::ExecParams *params)sofa::simulation::UpdateContextVisitorinline; UpdateSimulationContextVisitor(const core::ExecParams *params)sofa::simulation::UpdateSimulationContextVisitorinline; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:741,Modifiability,inherit,inherited,741,"﻿. SOFA API: sofa::simulation::UpdateSimulationContextVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateSimulationContextVisitor Class Reference . #include <UpdateContextVisitor.h>. Inheritance diagram for sofa::simulation::UpdateSimulationContextVisitor:. [legend]. Public Member Functions;  UpdateSimulationContextVisitor (const core::ExecParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::UpdateContextVisitor;  UpdateContextVisitor (const core::ExecParams *params);  ; const char * getCategoryName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:1030,Modifiability,inherit,inherited,1030,"List of all members . sofa::simulation::UpdateSimulationContextVisitor Class Reference . #include <UpdateContextVisitor.h>. Inheritance diagram for sofa::simulation::UpdateSimulationContextVisitor:. [legend]. Public Member Functions;  UpdateSimulationContextVisitor (const core::ExecParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::UpdateContextVisitor;  UpdateContextVisitor (const core::ExecParams *params);  ; const char * getCategoryName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:3184,Modifiability,inherit,inherited,3184,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:3385,Modifiability,inherit,inherited,3385,"typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateSimulationContextVisitor(). sofa::simulation::UpdateSimulationContextVisitor::UpdateSimulationContextVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:3486,Modifiability,inherit,inherited,3486,"typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateSimulationContextVisitor(). sofa::simulation::UpdateSimulationContextVisitor::UpdateSimulationContextVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:3598,Modifiability,inherit,inherited,3598,"typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateSimulationContextVisitor(). sofa::simulation::UpdateSimulationContextVisitor::UpdateSimulationContextVisitor ; (; const core::ExecParams * ; params). inline . Function details. ◆ getClassName(). const char* ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:3328,Security,access,access,3328,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , cla",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html:1614,Testability,test,testTags,1614,". More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::UpdateContextVisitor;  UpdateContextVisitor (const core::ExecParams *params);  ; const char * getCategoryName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_simulation_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html:260,Modifiability,inherit,inherited,260,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::UpdateVisualContextVisitor Member List . This is the complete list of members for sofa::simulation::UpdateVisualContextVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulatio",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html:3957,Testability,test,testTags,3957,"TION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::UpdateVisualContextVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; startingNodesofa::simulation::UpdateContextVisitorprotected; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; UpdateContextVisitor(const core::ExecParams *params)sofa::simulation::UpdateContextVisitorinline; UpdateVisualContextVisitor(const sofa::core::visual::VisualParams *vparams)sofa::simulation::UpdateVisualContextVisitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:742,Modifiability,inherit,inherited,742,"﻿. SOFA API: sofa::simulation::UpdateVisualContextVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::UpdateVisualContextVisitor Class Reference . #include <UpdateContextVisitor.h>. Inheritance diagram for sofa::simulation::UpdateVisualContextVisitor:. [legend]. Public Member Functions;  UpdateVisualContextVisitor (const sofa::core::visual::VisualParams *vparams);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::UpdateContextVisitor;  UpdateContextVisitor (const core::ExecParams *params);  ; const char * getCategoryName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *nod",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:1031,Modifiability,inherit,inherited,1031,"of all members . sofa::simulation::UpdateVisualContextVisitor Class Reference . #include <UpdateContextVisitor.h>. Inheritance diagram for sofa::simulation::UpdateVisualContextVisitor:. [legend]. Public Member Functions;  UpdateVisualContextVisitor (const sofa::core::visual::VisualParams *vparams);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::UpdateContextVisitor;  UpdateContextVisitor (const core::ExecParams *params);  ; const char * getCategoryName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:3185,Modifiability,inherit,inherited,3185,"ing(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *,",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:3386,Modifiability,inherit,inherited,3386,"typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateVisualContextVisitor(). sofa::simulation::UpdateVisualContextVisitor::UpdateVisualContextVisitor ; (; const sofa::core::visual::VisualParams * ; vparams). Function details. ◆ getClassName(). const char* sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:3487,Modifiability,inherit,inherited,3487,"typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateVisualContextVisitor(). sofa::simulation::UpdateVisualContextVisitor::UpdateVisualContextVisitor ; (; const sofa::core::visual::VisualParams * ; vparams). Function details. ◆ getClassName(). const char* sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:3599,Modifiability,inherit,inherited,3599,"typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ UpdateVisualContextVisitor(). sofa::simulation::UpdateVisualContextVisitor::UpdateVisualContextVisitor ; (; const sofa::core::visual::VisualParams * ; vparams). Function details. ◆ getClassName(). const char* sofa",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:3329,Security,access,access,3329,"t *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::UpdateContextVisitor; Node * startingNode;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , cla",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html:1615,Testability,test,testTags,1615,". More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::UpdateContextVisitor;  UpdateContextVisitor (const core::ExecParams *params);  ; const char * getCategoryName () const override;  ; bool isThreadSafe () const override;  Specify whether this action can be parallelized. More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContex",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_update_visual_context_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::VelocityThresholdVisitor Member List . This is the complete list of members for sofa::simulation::VelocityThresholdVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor-members.html:3870,Testability,test,testTags,3870,"torinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::VelocityThresholdVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; thresholdsofa::simulation::VelocityThresholdVisitorprotected; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; VelocityThresholdVisitor(const core::ExecParams *params, core::MultiVecId v, SReal threshold)sofa::simulation::VelocityThresholdVisitor; vidsofa::simulation::VelocityThresholdVisitorprotected; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html:592,Modifiability,inherit,inherited,592,"﻿. SOFA API: sofa::simulation::VelocityThresholdVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::VelocityThresholdVisitor Class Reference . #include <VelocityThresholdVisitor.h>. Inheritance diagram for sofa::simulation::VelocityThresholdVisitor:. [legend]. Protected Attributes; core::MultiVecId vid;  Id of the vector to process. More...;  ; SReal threshold;  All the entries below this threshold will be set to 0. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions; Visitor::Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ;  VelocityThresholdVisitor (const core::ExecParams *params, core::MultiVecId v, SReal threshold);  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, cons",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html:1119,Modifiability,inherit,inherited,1119,"; Public Member Functions |; List of all members . sofa::simulation::VelocityThresholdVisitor Class Reference . #include <VelocityThresholdVisitor.h>. Inheritance diagram for sofa::simulation::VelocityThresholdVisitor:. [legend]. Protected Attributes; core::MultiVecId vid;  Id of the vector to process. More...;  ; SReal threshold;  All the entries below this threshold will be set to 0. More...;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions; Visitor::Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ;  VelocityThresholdVisitor (const core::ExecParams *params, core::MultiVecId v, SReal threshold);  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html:3372,Modifiability,inherit,inherited,3372,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html:3579,Modifiability,inherit,inherited,3579,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ threshold. SReal sofa::simulation::VelocityThresholdVisitor::threshold. protected . All the entries below this threshold will be set to 0. . ◆ vid. core::MultiVecId sofa::simulation::VelocityThresholdVisitor::vid. protected . Id of the vector to process. . Constructor details. ◆ VelocityThresholdVisitor(). sofa::simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html:3516,Security,access,access,3516,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html:1703,Testability,test,testTags,1703,"tion::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ;  VelocityThresholdVisitor (const core::ExecParams *params, core::MultiVecId v, SReal threshold);  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_velocity_threshold_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor-members.html:222,Modifiability,inherit,inherited,222,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Visitor Member List . This is the complete list of members for sofa::simulation::Visitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(VisitorType *visi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor-members.html:3733,Testability,test,testTags,3733,")(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; getCategoryName() constsofa::simulation::Visitorinlinevirtual; getClassName() constsofa::simulation::Visitorinlinevirtual; getInfos() constsofa::simulation::Visitorinlinevirtual; isThreadSafe() constsofa::simulation::Visitorinlinevirtual; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:28980,Deployability,configurat,configurations,28980,"ag(). Visitor& sofa::simulation::Visitor::removeTag ; (; Tag ; t). inline . ◆ runVisitorTask() [1/2]. template<class VisitorType , class VContext , class ObjectType > . Visitor::Result sofa::simulation::Visitor::runVisitorTask ; (; VisitorType * ; visitor, . VContext * ; ctx, . Result(VisitorType::*)(VContext *, ObjectType *) ; task, . ObjectType * ; ptr, . const std::string & ; typeInfo = std::string(""type"") . ). protected . Function to be called when a visitor executes a main task It surrounds the task function with debug information . ◆ runVisitorTask() [2/2]. template<class VisitorType , class VContext , class ObjectType > . void sofa::simulation::Visitor::runVisitorTask ; (; VisitorType * ; visitor, . VContext * ; ctx, . void(VisitorType::*)(VContext *, ObjectType *) ; task, . ObjectType * ; ptr, . const std::string & ; typeInfo = std::string(""type"") . ). protected . Function to be called when a visitor executes a main task It surrounds the task function with debug information . ◆ setTags(). Visitor& sofa::simulation::Visitor::setTags ; (; const TagSet & ; t). inline . ◆ testTags(). bool sofa::simulation::Visitor::testTags ; (; sofa::core::objectmodel::BaseObject * ; obj). ◆ treeTraversal(). virtual bool sofa::simulation::Visitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). inlinevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented in sofa::simulation::XMLPrintVisitor, sofa::simulation::VisualVisitor, and sofa::simulation::PrintVisitor. Enum details. ◆ Result. enum sofa::simulation::Visitor::Result. EnumeratorRESULT_CONTINUE ; RESULT_PRUNE . ◆ TreeTraversalRepetition. enum sofa::simulation::Visitor::TreeTraversalRepetition. EnumeratorNO_REPETITION ; REPEAT_ALL ; REPEAT_ONCE . sofasimulationVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:5552,Modifiability,extend,extended,5552,"""type""));  . Attribute details. ◆ canAccessSleepingNode. bool sofa::simulation::Visitor::canAccessSleepingNode. Can the visitor access sleeping nodes? . ◆ params. const sofa::core::ExecParams* sofa::simulation::Visitor::params. protected . ◆ subsetsToManage. TagSet sofa::simulation::Visitor::subsetsToManage. list of the subsets . Constructor details. ◆ Visitor(). sofa::simulation::Visitor::Visitor ; (; const sofa::core::ExecParams * ; params). explicit . ◆ ~Visitor(). sofa::simulation::Visitor::~Visitor ; (; ). virtualdefault . Function details. ◆ addTag(). Visitor& sofa::simulation::Visitor::addTag ; (; Tag ; t). inline . ◆ begin() [1/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ begin() [2/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Visitor::VisitorContext * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ childOrderReversed(). virtual bool sofa::simulation::Visitor::childOrderReversed ; (; simulation::Node * ; ). inlinevirtual . Return true to reverse the order of traversal of child nodes. ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv. ◆ debug_write_state_after(). void sofa::simulation::Visitor::debug_write_state_after ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ debug_write_state_before(). void sofa::simulation::Visitor::debug_write_state_",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:5993,Modifiability,extend,extended,5993,"rams). explicit . ◆ ~Visitor(). sofa::simulation::Visitor::~Visitor ; (; ). virtualdefault . Function details. ◆ addTag(). Visitor& sofa::simulation::Visitor::addTag ; (; Tag ; t). inline . ◆ begin() [1/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ begin() [2/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Visitor::VisitorContext * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ childOrderReversed(). virtual bool sofa::simulation::Visitor::childOrderReversed ; (; simulation::Node * ; ). inlinevirtual . Return true to reverse the order of traversal of child nodes. ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv. ◆ debug_write_state_after(). void sofa::simulation::Visitor::debug_write_state_after ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ debug_write_state_before(). void sofa::simulation::Visitor::debug_write_state_before ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ end() [1/2]. void sofa::simulation::Visitor::end ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ end() [2/2]. voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:6923,Modifiability,extend,extended,6923,"he for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ childOrderReversed(). virtual bool sofa::simulation::Visitor::childOrderReversed ; (; simulation::Node * ; ). inlinevirtual . Return true to reverse the order of traversal of child nodes. ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv. ◆ debug_write_state_after(). void sofa::simulation::Visitor::debug_write_state_after ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ debug_write_state_before(). void sofa::simulation::Visitor::debug_write_state_before ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ end() [1/2]. void sofa::simulation::Visitor::end ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ end() [2/2]. void sofa::simulation::Visitor::end ; (; simulation::Visitor::VisitorContext * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ execParams(). const sofa::core::ExecParams* sofa::simulation::Visitor::execParams ; (; ); const. inline . ◆ execute(). void sofa::simulation::Visitor::execute ; (; sofa::core::objectmodel::BaseContext * ; node, . bool ; precomputedOrder = false . ). virtual . Alias for context->executeVisitor(this) ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor, and sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor. ◆ for_each() [1/4]. template<class Visit , class VContext , class Container , typename PointedType = typename Conta",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:7295,Modifiability,extend,extended,7295,"hanicalAccumulateMatrixDeriv. ◆ debug_write_state_after(). void sofa::simulation::Visitor::debug_write_state_after ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ debug_write_state_before(). void sofa::simulation::Visitor::debug_write_state_before ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ end() [1/2]. void sofa::simulation::Visitor::end ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ end() [2/2]. void sofa::simulation::Visitor::end ; (; simulation::Visitor::VisitorContext * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ execParams(). const sofa::core::ExecParams* sofa::simulation::Visitor::execParams ; (; ); const. inline . ◆ execute(). void sofa::simulation::Visitor::execute ; (; sofa::core::objectmodel::BaseContext * ; node, . bool ; precomputedOrder = false . ). virtual . Alias for context->executeVisitor(this) ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor, and sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor. ◆ for_each() [1/4]. template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> . Visitor::Result sofa::simulation::Visitor::for_each ; (; Visit * ; visitor, . VContext * ; ctx, . const Container & ; list, . Visitor::Result(Visit::*)(VContext *, PointedType *) ; task, . const std::string & ; typeInfo = std::string(""type"") . ). protected . ◆ for_each() [2/4]. template<class Visit , class VContext , class Container , typename Poin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:28980,Modifiability,config,configurations,28980,"ag(). Visitor& sofa::simulation::Visitor::removeTag ; (; Tag ; t). inline . ◆ runVisitorTask() [1/2]. template<class VisitorType , class VContext , class ObjectType > . Visitor::Result sofa::simulation::Visitor::runVisitorTask ; (; VisitorType * ; visitor, . VContext * ; ctx, . Result(VisitorType::*)(VContext *, ObjectType *) ; task, . ObjectType * ; ptr, . const std::string & ; typeInfo = std::string(""type"") . ). protected . Function to be called when a visitor executes a main task It surrounds the task function with debug information . ◆ runVisitorTask() [2/2]. template<class VisitorType , class VContext , class ObjectType > . void sofa::simulation::Visitor::runVisitorTask ; (; VisitorType * ; visitor, . VContext * ; ctx, . void(VisitorType::*)(VContext *, ObjectType *) ; task, . ObjectType * ; ptr, . const std::string & ; typeInfo = std::string(""type"") . ). protected . Function to be called when a visitor executes a main task It surrounds the task function with debug information . ◆ setTags(). Visitor& sofa::simulation::Visitor::setTags ; (; const TagSet & ; t). inline . ◆ testTags(). bool sofa::simulation::Visitor::testTags ; (; sofa::core::objectmodel::BaseObject * ; obj). ◆ treeTraversal(). virtual bool sofa::simulation::Visitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). inlinevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented in sofa::simulation::XMLPrintVisitor, sofa::simulation::VisualVisitor, and sofa::simulation::PrintVisitor. Enum details. ◆ Result. enum sofa::simulation::Visitor::Result. EnumeratorRESULT_CONTINUE ; RESULT_PRUNE . ◆ TreeTraversalRepetition. enum sofa::simulation::Visitor::TreeTraversalRepetition. EnumeratorNO_REPETITION ; REPEAT_ALL ; REPEAT_ONCE . sofasimulationVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:725,Security,access,access,725,"﻿. SOFA API: sofa::simulation::Visitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Attributes |; Protected Attributes |; Public Member Functions |; Protected Member Functions |; List of all members . sofa::simulation::Visitor Class Reference . #include <Visitor.h>; Base class for visitors propagated recursively through the scenegraph. ; More... Inheritance diagram for sofa::simulation::Visitor:. [legend]; Detailed Description; Base class for visitors propagated recursively through the scenegraph. . Classes; class  VisitorContext;  . Public Attributes; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; const sofa::core::ExecParams * params;  . Public Member Functions;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual Result processNodeTopDown (simulation::Node *);  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual const char * getClassName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:4676,Security,access,access,4676,"g &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ canAccessSleepingNode. bool sofa::simulation::Visitor::canAccessSleepingNode. Can the visitor access sleeping nodes? . ◆ params. const sofa::core::ExecParams* sofa::simulation::Visitor::params. protected . ◆ subsetsToManage. TagSet sofa::simulation::Visitor::subsetsToManage. list of the subsets . Constructor details. ◆ Visitor(). sofa::simulation::Visitor::Visitor ; (; const sofa::core::ExecParams * ; params). explicit . ◆ ~Visitor(). sofa::simulation::Visitor::~Visitor ; (; ). virtualdefault . Function details. ◆ addTag(). Visitor& sofa::simulation::Visitor::addTag ; (; Tag ; t). inline . ◆ begin() [1/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ begin() [2/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:1668,Testability,test,testTags,1668,"subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Protected Attributes; const sofa::core::ExecParams * params;  . Public Member Functions;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual Result processNodeTopDown (simulation::Node *);  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual const char * getClassName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:5530,Testability,log,logging,5530,"""type""));  . Attribute details. ◆ canAccessSleepingNode. bool sofa::simulation::Visitor::canAccessSleepingNode. Can the visitor access sleeping nodes? . ◆ params. const sofa::core::ExecParams* sofa::simulation::Visitor::params. protected . ◆ subsetsToManage. TagSet sofa::simulation::Visitor::subsetsToManage. list of the subsets . Constructor details. ◆ Visitor(). sofa::simulation::Visitor::Visitor ; (; const sofa::core::ExecParams * ; params). explicit . ◆ ~Visitor(). sofa::simulation::Visitor::~Visitor ; (; ). virtualdefault . Function details. ◆ addTag(). Visitor& sofa::simulation::Visitor::addTag ; (; Tag ; t). inline . ◆ begin() [1/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ begin() [2/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Visitor::VisitorContext * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ childOrderReversed(). virtual bool sofa::simulation::Visitor::childOrderReversed ; (; simulation::Node * ; ). inlinevirtual . Return true to reverse the order of traversal of child nodes. ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv. ◆ debug_write_state_after(). void sofa::simulation::Visitor::debug_write_state_after ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ debug_write_state_before(). void sofa::simulation::Visitor::debug_write_state_",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:5971,Testability,log,logging,5971,"rams). explicit . ◆ ~Visitor(). sofa::simulation::Visitor::~Visitor ; (; ). virtualdefault . Function details. ◆ addTag(). Visitor& sofa::simulation::Visitor::addTag ; (; Tag ; t). inline . ◆ begin() [1/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ begin() [2/2]. simulation::Visitor::ctime_t sofa::simulation::Visitor::begin ; (; simulation::Visitor::VisitorContext * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . const std::string & ; typeInfo = std::string(""type"") . ). virtual . Optional helper method to call before handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ childOrderReversed(). virtual bool sofa::simulation::Visitor::childOrderReversed ; (; simulation::Node * ; ). inlinevirtual . Return true to reverse the order of traversal of child nodes. ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv. ◆ debug_write_state_after(). void sofa::simulation::Visitor::debug_write_state_after ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ debug_write_state_before(). void sofa::simulation::Visitor::debug_write_state_before ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ end() [1/2]. void sofa::simulation::Visitor::end ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ end() [2/2]. voi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:6901,Testability,log,logging,6901,"he for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ childOrderReversed(). virtual bool sofa::simulation::Visitor::childOrderReversed ; (; simulation::Node * ; ). inlinevirtual . Return true to reverse the order of traversal of child nodes. ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalAccumulateMatrixDeriv. ◆ debug_write_state_after(). void sofa::simulation::Visitor::debug_write_state_after ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ debug_write_state_before(). void sofa::simulation::Visitor::debug_write_state_before ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ end() [1/2]. void sofa::simulation::Visitor::end ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ end() [2/2]. void sofa::simulation::Visitor::end ; (; simulation::Visitor::VisitorContext * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ execParams(). const sofa::core::ExecParams* sofa::simulation::Visitor::execParams ; (; ); const. inline . ◆ execute(). void sofa::simulation::Visitor::execute ; (; sofa::core::objectmodel::BaseContext * ; node, . bool ; precomputedOrder = false . ). virtual . Alias for context->executeVisitor(this) ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor, and sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor. ◆ for_each() [1/4]. template<class Visit , class VContext , class Container , typename PointedType = typename Conta",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:7273,Testability,log,logging,7273,"hanicalAccumulateMatrixDeriv. ◆ debug_write_state_after(). void sofa::simulation::Visitor::debug_write_state_after ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ debug_write_state_before(). void sofa::simulation::Visitor::debug_write_state_before ; (; sofa::core::objectmodel::BaseObject * ; obj). protected . ◆ end() [1/2]. void sofa::simulation::Visitor::end ; (; simulation::Node * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ end() [2/2]. void sofa::simulation::Visitor::end ; (; simulation::Visitor::VisitorContext * ; node, . sofa::core::objectmodel::BaseObject * ; obj, . ctime_t ; t0 . ). virtual . Optional helper method to call after handling an object if not using the for_each method. It currently takes care of time logging, but could be extended (step-by-step execution for instance) . ◆ execParams(). const sofa::core::ExecParams* sofa::simulation::Visitor::execParams ; (; ); const. inline . ◆ execute(). void sofa::simulation::Visitor::execute ; (; sofa::core::objectmodel::BaseContext * ; node, . bool ; precomputedOrder = false . ). virtual . Alias for context->executeVisitor(this) ; Reimplemented in sofa::simulation::mechanicalvisitor::MechanicalComputeEnergyVisitor, and sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor. ◆ for_each() [1/4]. template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> . Visitor::Result sofa::simulation::Visitor::for_each ; (; Visit * ; visitor, . VContext * ; ctx, . const Container & ; list, . Visitor::Result(Visit::*)(VContext *, PointedType *) ; task, . const std::string & ; typeInfo = std::string(""type"") . ). protected . ◆ for_each() [2/4]. template<class Visit , class VContext , class Container , typename Poin",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:16754,Testability,test,testing,16754,"a::simulation::mechanicalvisitor::MechanicalAccumulateJacobian, sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor, sofa::simulation::InitVisitor, sofa::simulation::ExportVisualModelOBJVisitor, sofa::simulation::ExportGnuplotVisitor, sofa::simulation::InitGnuplotVisitor, sofa::simulation::graph::ExportDotVisitor, sofa::simulation::DeleteVisitor, sofa::simulation::DeactivationVisitor, sofa::simulation::CollisionResponseVisitor, sofa::simulation::CollisionDetectionVisitor, sofa::simulation::CollisionResetVisitor, sofa::simulation::CollisionVisitor, sofa::simulation::CleanupVisitor, sofa::simulation::BehaviorUpdatePositionVisitor, sofa::simulation::BaseMechanicalVisitor, sofa::simulation::AnimateVisitor, sofa::simulation::TransformationVisitor, sofa::simulation::FindByTypeVisitor< T >, sofa::component::playback::WriteTopologyActivator, sofa::component::playback::WriteTopologyCreator, sofa::component::playback::WriteStateActivator, sofa::component::playback::WriteStateCreator, sofa::component::playback::ReadTopologyModifier, sofa::component::playback::ReadTopologyActivator, sofa::component::playback::ReadTopologyCreator, sofa::component::playback::ReadStateModifier, sofa::component::playback::ReadStateActivator, sofa::component::playback::ReadStateCreator, sofa::component::playback::CompareTopologyResult, sofa::component::playback::CompareTopologyCreator, sofa::component::playback::CompareStateResult, sofa::component::playback::CompareStateCreator, sofa::component::odesolver::testing::GetAssembledSizeVisitor, sofa::component::odesolver::testing::GetVectorVisitor, sofa::component::linearsystem::DispatchFromGlobalVectorToLocalVectorVisitor, sofa::component::linearsystem::AssembleGlobalVectorFromLocalVectorVisitor, sofa::component::constraint::lagrangian::solver::MechanicalGetConstraintViolationVisitor, sofa::component::constraint::lagrangian::solver::MechanicalGetConstraintResolutionVisitor, and sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:16816,Testability,test,testing,16816,"a::simulation::mechanicalvisitor::MechanicalAccumulateJacobian, sofa::simulation::mechanicalvisitor::MechanicalAccFromFVisitor, sofa::simulation::InitVisitor, sofa::simulation::ExportVisualModelOBJVisitor, sofa::simulation::ExportGnuplotVisitor, sofa::simulation::InitGnuplotVisitor, sofa::simulation::graph::ExportDotVisitor, sofa::simulation::DeleteVisitor, sofa::simulation::DeactivationVisitor, sofa::simulation::CollisionResponseVisitor, sofa::simulation::CollisionDetectionVisitor, sofa::simulation::CollisionResetVisitor, sofa::simulation::CollisionVisitor, sofa::simulation::CleanupVisitor, sofa::simulation::BehaviorUpdatePositionVisitor, sofa::simulation::BaseMechanicalVisitor, sofa::simulation::AnimateVisitor, sofa::simulation::TransformationVisitor, sofa::simulation::FindByTypeVisitor< T >, sofa::component::playback::WriteTopologyActivator, sofa::component::playback::WriteTopologyCreator, sofa::component::playback::WriteStateActivator, sofa::component::playback::WriteStateCreator, sofa::component::playback::ReadTopologyModifier, sofa::component::playback::ReadTopologyActivator, sofa::component::playback::ReadTopologyCreator, sofa::component::playback::ReadStateModifier, sofa::component::playback::ReadStateActivator, sofa::component::playback::ReadStateCreator, sofa::component::playback::CompareTopologyResult, sofa::component::playback::CompareTopologyCreator, sofa::component::playback::CompareStateResult, sofa::component::playback::CompareStateCreator, sofa::component::odesolver::testing::GetAssembledSizeVisitor, sofa::component::odesolver::testing::GetVectorVisitor, sofa::component::linearsystem::DispatchFromGlobalVectorToLocalVectorVisitor, sofa::component::linearsystem::AssembleGlobalVectorFromLocalVectorVisitor, sofa::component::constraint::lagrangian::solver::MechanicalGetConstraintViolationVisitor, sofa::component::constraint::lagrangian::solver::MechanicalGetConstraintResolutionVisitor, and sofa::simulation::mechanicalvisitor::MechanicalGetMomentumVisitor.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:26113,Testability,test,testing,26113,"a::simulation::UpdateLinksVisitor, sofa::simulation::UpdateInternalDataVisitor, sofa::simulation::UpdateVisualContextVisitor, sofa::simulation::UpdateSimulationContextVisitor, sofa::simulation::UpdateContextVisitor, sofa::simulation::UpdateBoundingBoxVisitor, sofa::simulation::TopologyChangeVisitor, sofa::simulation::StateChangeVisitor, sofa::simulation::SolveVisitor, sofa::simulation::StoreResetStateVisitor, sofa::simulation::ResetVisitor, sofa::simulation::PropagateEventVisitor, sofa::simulation::PrintVisitor, sofa::simulation::DofPrintVisitor, sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor, sofa::simulation::MechanicalVPrintVisitor, sofa::simulation::InitVisitor, sofa::simulation::ExportGnuplotVisitor, sofa::simulation::InitGnuplotVisitor, sofa::simulation::DeactivationVisitor, sofa::simulation::CollisionVisitor, sofa::simulation::BehaviorUpdatePositionVisitor, sofa::simulation::BaseMechanicalVisitor, sofa::simulation::AnimateVisitor, sofa::simulation::TransformationVisitor, sofa::simulation::FindByTypeVisitor< T >, sofa::component::odesolver::testing::GetAssembledSizeVisitor, sofa::component::odesolver::testing::GetVectorVisitor, sofa::simulation::WriteStateVisitor, sofa::component::playback::WriteTopologyActivator, sofa::component::playback::WriteTopologyCreator, sofa::component::playback::WriteStateActivator, sofa::component::playback::WriteStateCreator, sofa::component::playback::ReadTopologyModifier, sofa::component::playback::ReadTopologyActivator, sofa::component::playback::ReadTopologyCreator, sofa::component::playback::ReadStateModifier, sofa::component::playback::ReadStateActivator, sofa::component::playback::ReadStateCreator, sofa::component::playback::CompareTopologyResult, sofa::component::playback::CompareTopologyCreator, sofa::component::playback::CompareStateResult, sofa::component::playback::CompareStateCreator, sofa::simulation::ExportVisualModelOBJVisitor, sofa::simulation::graph::ExportDotVisitor, and sofa::simulation::CleanupVisitor.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:26175,Testability,test,testing,26175,"a::simulation::UpdateLinksVisitor, sofa::simulation::UpdateInternalDataVisitor, sofa::simulation::UpdateVisualContextVisitor, sofa::simulation::UpdateSimulationContextVisitor, sofa::simulation::UpdateContextVisitor, sofa::simulation::UpdateBoundingBoxVisitor, sofa::simulation::TopologyChangeVisitor, sofa::simulation::StateChangeVisitor, sofa::simulation::SolveVisitor, sofa::simulation::StoreResetStateVisitor, sofa::simulation::ResetVisitor, sofa::simulation::PropagateEventVisitor, sofa::simulation::PrintVisitor, sofa::simulation::DofPrintVisitor, sofa::simulation::MechanicalVPrintWithElapsedTimeVisitor, sofa::simulation::MechanicalVPrintVisitor, sofa::simulation::InitVisitor, sofa::simulation::ExportGnuplotVisitor, sofa::simulation::InitGnuplotVisitor, sofa::simulation::DeactivationVisitor, sofa::simulation::CollisionVisitor, sofa::simulation::BehaviorUpdatePositionVisitor, sofa::simulation::BaseMechanicalVisitor, sofa::simulation::AnimateVisitor, sofa::simulation::TransformationVisitor, sofa::simulation::FindByTypeVisitor< T >, sofa::component::odesolver::testing::GetAssembledSizeVisitor, sofa::component::odesolver::testing::GetVectorVisitor, sofa::simulation::WriteStateVisitor, sofa::component::playback::WriteTopologyActivator, sofa::component::playback::WriteTopologyCreator, sofa::component::playback::WriteStateActivator, sofa::component::playback::WriteStateCreator, sofa::component::playback::ReadTopologyModifier, sofa::component::playback::ReadTopologyActivator, sofa::component::playback::ReadTopologyCreator, sofa::component::playback::ReadStateModifier, sofa::component::playback::ReadStateActivator, sofa::component::playback::ReadStateCreator, sofa::component::playback::CompareTopologyResult, sofa::component::playback::CompareTopologyCreator, sofa::component::playback::CompareStateResult, sofa::component::playback::CompareStateCreator, sofa::simulation::ExportVisualModelOBJVisitor, sofa::simulation::graph::ExportDotVisitor, and sofa::simulation::CleanupVisitor.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:28541,Testability,test,testTags,28541,"ag(). Visitor& sofa::simulation::Visitor::removeTag ; (; Tag ; t). inline . ◆ runVisitorTask() [1/2]. template<class VisitorType , class VContext , class ObjectType > . Visitor::Result sofa::simulation::Visitor::runVisitorTask ; (; VisitorType * ; visitor, . VContext * ; ctx, . Result(VisitorType::*)(VContext *, ObjectType *) ; task, . ObjectType * ; ptr, . const std::string & ; typeInfo = std::string(""type"") . ). protected . Function to be called when a visitor executes a main task It surrounds the task function with debug information . ◆ runVisitorTask() [2/2]. template<class VisitorType , class VContext , class ObjectType > . void sofa::simulation::Visitor::runVisitorTask ; (; VisitorType * ; visitor, . VContext * ; ctx, . void(VisitorType::*)(VContext *, ObjectType *) ; task, . ObjectType * ; ptr, . const std::string & ; typeInfo = std::string(""type"") . ). protected . Function to be called when a visitor executes a main task It surrounds the task function with debug information . ◆ setTags(). Visitor& sofa::simulation::Visitor::setTags ; (; const TagSet & ; t). inline . ◆ testTags(). bool sofa::simulation::Visitor::testTags ; (; sofa::core::objectmodel::BaseObject * ; obj). ◆ treeTraversal(). virtual bool sofa::simulation::Visitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). inlinevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented in sofa::simulation::XMLPrintVisitor, sofa::simulation::VisualVisitor, and sofa::simulation::PrintVisitor. Enum details. ◆ Result. enum sofa::simulation::Visitor::Result. EnumeratorRESULT_CONTINUE ; RESULT_PRUNE . ◆ TreeTraversalRepetition. enum sofa::simulation::Visitor::TreeTraversalRepetition. EnumeratorNO_REPETITION ; REPEAT_ALL ; REPEAT_ONCE . sofasimulationVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html:28585,Testability,test,testTags,28585,"ag(). Visitor& sofa::simulation::Visitor::removeTag ; (; Tag ; t). inline . ◆ runVisitorTask() [1/2]. template<class VisitorType , class VContext , class ObjectType > . Visitor::Result sofa::simulation::Visitor::runVisitorTask ; (; VisitorType * ; visitor, . VContext * ; ctx, . Result(VisitorType::*)(VContext *, ObjectType *) ; task, . ObjectType * ; ptr, . const std::string & ; typeInfo = std::string(""type"") . ). protected . Function to be called when a visitor executes a main task It surrounds the task function with debug information . ◆ runVisitorTask() [2/2]. template<class VisitorType , class VContext , class ObjectType > . void sofa::simulation::Visitor::runVisitorTask ; (; VisitorType * ; visitor, . VContext * ; ctx, . void(VisitorType::*)(VContext *, ObjectType *) ; task, . ObjectType * ; ptr, . const std::string & ; typeInfo = std::string(""type"") . ). protected . Function to be called when a visitor executes a main task It surrounds the task function with debug information . ◆ setTags(). Visitor& sofa::simulation::Visitor::setTags ; (; const TagSet & ; t). inline . ◆ testTags(). bool sofa::simulation::Visitor::testTags ; (; sofa::core::objectmodel::BaseObject * ; obj). ◆ treeTraversal(). virtual bool sofa::simulation::Visitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). inlinevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented in sofa::simulation::XMLPrintVisitor, sofa::simulation::VisualVisitor, and sofa::simulation::PrintVisitor. Enum details. ◆ Result. enum sofa::simulation::Visitor::Result. EnumeratorRESULT_CONTINUE ; RESULT_PRUNE . ◆ TreeTraversalRepetition. enum sofa::simulation::Visitor::TreeTraversalRepetition. EnumeratorNO_REPETITION ; REPEAT_ALL ; REPEAT_ONCE . sofasimulationVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor_1_1_visitor_context-members.html:254,Modifiability,inherit,inherited,254,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::Visitor::VisitorContext Member List . This is the complete list of members for sofa::simulation::Visitor::VisitorContext, including all inherited members. nodesofa::simulation::Visitor::VisitorContext; nodeDatasofa::simulation::Visitor::VisitorContext; rootsofa::simulation::Visitor::VisitorContext. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visitor_1_1_visitor_context-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visitor_1_1_visitor_context-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor-members.html:244,Modifiability,inherit,inherited,244,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::VisualClearVisitor Member List . This is the complete list of members for sofa::simulation::VisualClearVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor-members.html:4071,Testability,test,testTags,4071,"e *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::VisualVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(simulation::Node *, core::objectmodel::BaseObject *)sofa::simulation::VisualVisitorinlinevirtual; processVisualModel(simulation::Node *, core::visual::VisualModel *vm) overridesofa::simulation::VisualClearVisitorinlinevirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat) overridesofa::simulation::VisualVisitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; VisualClearVisitor(core::visual::VisualParams *params)sofa::simulation::VisualClearVisitorinline; VisualVisitor(core::visual::VisualParams *params)sofa::simulation::VisualVisitorinline; vparamssofa::simulation::VisualVisitorprotected; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:594,Modifiability,inherit,inherited,594,"﻿. SOFA API: sofa::simulation::VisualClearVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::VisualClearVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualClearVisitor:. [legend]. Public Member Functions;  VisualClearVisitor (core::visual::VisualParams *params);  ; void processVisualModel (simulation::Node *, core::visual::VisualModel *vm) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::object",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:1212,Modifiability,inherit,inherited,1212,"nctions;  VisualClearVisitor (core::visual::VisualParams *params);  ; void processVisualModel (simulation::Node *, core::visual::VisualModel *vm) override;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:3400,Modifiability,inherit,inherited,3400,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:3601,Modifiability,inherit,inherited,3601,"nfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ VisualClearVisitor(). sofa::simulation::VisualClearVisitor::VisualClearVisitor ; (; core::visual::VisualParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::VisualCle",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:3712,Modifiability,inherit,inherited,3712,"nfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ VisualClearVisitor(). sofa::simulation::VisualClearVisitor::VisualClearVisitor ; (; core::visual::VisualParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::VisualCle",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:3824,Modifiability,inherit,inherited,3824,"nfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ VisualClearVisitor(). sofa::simulation::VisualClearVisitor::VisualClearVisitor ; (; core::visual::VisualParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::VisualCle",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:3544,Security,access,access,3544,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html:1731,Testability,test,testTags,1731,"Down (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_clear_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor-members.html:256,Modifiability,inherit,inherited,256,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::VisualComputeBBoxVisitor Member List . This is the complete list of members for sofa::simulation::VisualComputeBBoxVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor-members.html:4316,Testability,test,testTags,4316,"torvirtual; processMechanicalState(simulation::Node *, core::behavior::BaseMechanicalState *vm)sofa::simulation::VisualComputeBBoxVisitorvirtual; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::VisualComputeBBoxVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processVisualModel(simulation::Node *, core::visual::VisualModel *vm)sofa::simulation::VisualComputeBBoxVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; VisualComputeBBoxVisitor(const core::ExecParams *params)sofa::simulation::VisualComputeBBoxVisitor; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html:467,Modifiability,inherit,inherited,467,"﻿. SOFA API: sofa::simulation::VisualComputeBBoxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualComputeBBoxVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualComputeBBoxVisitor:. [legend]. Public Attributes; SReal minBBox [3];  ; SReal maxBBox [3];  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualComputeBBoxVisitor (const core::ExecParams *params);  ; virtual void processBehaviorModel (simulation::Node *, core::BehaviorModel *vm);  ; virtual void processMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *vm);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html:1266,Modifiability,inherit,inherited,1266,"Attributes; SReal minBBox [3];  ; SReal maxBBox [3];  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualComputeBBoxVisitor (const core::ExecParams *params);  ; virtual void processBehaviorModel (simulation::Node *, core::BehaviorModel *vm);  ; virtual void processMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *vm);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html:3572,Modifiability,inherit,inherited,3572,"  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ maxBBox. SReal sofa::simulation::VisualComputeBBoxVisitor::maxBBox[3]. ◆ minBBox. SReal sofa::simulation::VisualComputeBBoxVisitor::minBBox[3]. Constructor details. ◆ VisualComputeBBoxVisitor(). sofa::simulation::VisualComputeBBoxVisitor::VisualComputeB",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html:3684,Modifiability,inherit,inherited,3684,"  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ maxBBox. SReal sofa::simulation::VisualComputeBBoxVisitor::maxBBox[3]. ◆ minBBox. SReal sofa::simulation::VisualComputeBBoxVisitor::minBBox[3]. Constructor details. ◆ VisualComputeBBoxVisitor(). sofa::simulation::VisualComputeBBoxVisitor::VisualComputeB",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html:611,Security,access,access,611,"﻿. SOFA API: sofa::simulation::VisualComputeBBoxVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualComputeBBoxVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualComputeBBoxVisitor:. [legend]. Public Attributes; SReal minBBox [3];  ; SReal maxBBox [3];  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualComputeBBoxVisitor (const core::ExecParams *params);  ; virtual void processBehaviorModel (simulation::Node *, core::BehaviorModel *vm);  ; virtual void processMechanicalState (simulation::Node *, core::behavior::BaseMechanicalState *vm);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html:1900,Testability,test,testTags,1900,";  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_compute_b_box_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::VisualDrawVisitor Member List . This is the complete list of members for sofa::simulation::VisualDrawVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; bwdVisualModel(simulation::Node *node, core::visual::VisualModel *vm)sofa::simulation::VisualDrawVisitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, v",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor-members.html:4403,Testability,test,testTags,4403,"calStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::VisualDrawVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(simulation::Node *node, core::objectmodel::BaseObject *o) overridesofa::simulation::VisualDrawVisitorvirtual; processVisualModel(simulation::Node *node, core::visual::VisualModel *vm) overridesofa::simulation::VisualDrawVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat) overridesofa::simulation::VisualVisitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; VisualDrawVisitor(core::visual::VisualParams *params)sofa::simulation::VisualDrawVisitorinline; VisualVisitor(core::visual::VisualParams *params)sofa::simulation::VisualVisitorinline; vparamssofa::simulation::VisualVisitorprotected; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:421,Modifiability,inherit,inherited,421,"﻿. SOFA API: sofa::simulation::VisualDrawVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualDrawVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualDrawVisitor:. [legend]. Public Attributes; bool hasShader;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualDrawVisitor (core::visual::VisualParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual void fwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; void processVisualModel (simulation::Node *node, core::visual::VisualModel *vm) override;  ; void processObject (simulation::Node *node, core::objectmodel::BaseObject *o) override;  ; virtual void bwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:1478,Modifiability,inherit,inherited,1478,"tes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualDrawVisitor (core::visual::VisualParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual void fwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; void processVisualModel (simulation::Node *node, core::visual::VisualModel *vm) override;  ; void processObject (simulation::Node *node, core::objectmodel::BaseObject *o) override;  ; virtual void bwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::No",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:1826,Modifiability,inherit,inherited,1826,"fter child node have been processed and before going back to the parent node. More...;  ; virtual void fwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; void processVisualModel (simulation::Node *node, core::visual::VisualModel *vm) override;  ; void processObject (simulation::Node *node, core::objectmodel::BaseObject *o) override;  ; virtual void bwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether t",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:3847,Modifiability,inherit,inherited,3847,"Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ hasShader. bool sofa::simulation::VisualDrawVisitor::hasShader. Constructor details. ◆ VisualDrawVisitor(). sofa::simulation::VisualDrawVisitor::VisualDrawVisitor ; (; core::visual::VisualParams * ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:3958,Modifiability,inherit,inherited,3958,"Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ hasShader. bool sofa::simulation::VisualDrawVisitor::hasShader. Constructor details. ◆ VisualDrawVisitor(). sofa::simulation::VisualDrawVisitor::VisualDrawVisitor ; (; core::visual::VisualParams * ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:4070,Modifiability,inherit,inherited,4070,"Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ hasShader. bool sofa::simulation::VisualDrawVisitor::hasShader. Constructor details. ◆ VisualDrawVisitor(). sofa::simulation::VisualDrawVisitor::VisualDrawVisitor ; (; core::visual::VisualParams * ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:565,Security,access,access,565,"﻿. SOFA API: sofa::simulation::VisualDrawVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualDrawVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualDrawVisitor:. [legend]. Public Attributes; bool hasShader;  ;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  . Public Member Functions;  VisualDrawVisitor (core::visual::VisualParams *params);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual void fwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; void processVisualModel (simulation::Node *node, core::visual::VisualModel *vm) override;  ; void processObject (simulation::Node *node, core::objectmodel::BaseObject *o) override;  ; virtual void bwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; vi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html:2175,Testability,test,testTags,2175,"mulation::Node *node, core::objectmodel::BaseObject *o) override;  ; virtual void bwdVisualModel (simulation::Node *node, core::visual::VisualModel *vm);  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_draw_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::VisualInitVisitor Member List . This is the complete list of members for sofa::simulation::VisualInitVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_ea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor-members.html:4065,Testability,test,testTags,4065,"::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::VisualInitVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(simulation::Node *, core::objectmodel::BaseObject *)sofa::simulation::VisualVisitorinlinevirtual; processVisualModel(simulation::Node *, core::visual::VisualModel *vm) overridesofa::simulation::VisualInitVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat) overridesofa::simulation::VisualVisitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; VisualInitVisitor(core::visual::VisualParams *params)sofa::simulation::VisualInitVisitorinline; VisualVisitor(core::visual::VisualParams *params)sofa::simulation::VisualVisitorinline; vparamssofa::simulation::VisualVisitorprotected; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html:783,Modifiability,inherit,inherited,783,"﻿. SOFA API: sofa::simulation::VisualInitVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::simulation::VisualInitVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualInitVisitor:. [legend]. Public Member Functions;  VisualInitVisitor (core::visual::VisualParams *params);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm) override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::ob",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html:1216,Modifiability,inherit,inherited,1216,";  VisualInitVisitor (core::visual::VisualParams *params);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm) override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html:3404,Modifiability,inherit,inherited,3404,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html:3605,Modifiability,inherit,inherited,3605,"nfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ VisualInitVisitor(). sofa::simulation::VisualInitVisitor::VisualInitVisitor ; (; core::visual::VisualParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::VisualInitVi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html:3716,Modifiability,inherit,inherited,3716,"nfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ VisualInitVisitor(). sofa::simulation::VisualInitVisitor::VisualInitVisitor ; (; core::visual::VisualParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::VisualInitVi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html:3828,Modifiability,inherit,inherited,3828,"nfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Constructor details. ◆ VisualInitVisitor(). sofa::simulation::VisualInitVisitor::VisualInitVisitor ; (; core::visual::VisualParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simulation::VisualInitVi",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html:3548,Security,access,access,3548,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html:1735,Testability,test,testTags,1735,"lation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_init_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor-members.html:246,Modifiability,inherit,inherited,246,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::VisualUpdateVisitor Member List . This is the complete list of members for sofa::simulation::VisualUpdateVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; fo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor-members.html:4132,Testability,test,testTags,4132,"node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::VisualUpdateVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(simulation::Node *, core::objectmodel::BaseObject *)sofa::simulation::VisualVisitorinlinevirtual; processVisualModel(simulation::Node *, core::visual::VisualModel *vm) overridesofa::simulation::VisualUpdateVisitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat) overridesofa::simulation::VisualVisitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; VisualUpdateVisitor(core::visual::VisualParams *params)sofa::simulation::VisualUpdateVisitorinline; VisualVisitor(core::visual::VisualParams *params)sofa::simulation::VisualVisitorinline; vparamssofa::simulation::VisualVisitorprotected; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html:460,Modifiability,inherit,inherited,460,"﻿. SOFA API: sofa::simulation::VisualUpdateVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualUpdateVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualUpdateVisitor:. [legend]. Protected Attributes; core::visual::VisualParams * m_vparams;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  VisualUpdateVisitor (core::visual::VisualParams *params);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm) override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html:571,Modifiability,inherit,inherited,571,"﻿. SOFA API: sofa::simulation::VisualUpdateVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualUpdateVisitor Class Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualUpdateVisitor:. [legend]. Protected Attributes; core::visual::VisualParams * m_vparams;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  VisualUpdateVisitor (core::visual::VisualParams *params);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm) override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ;",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html:1097,Modifiability,inherit,inherited,1097," Reference . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualUpdateVisitor:. [legend]. Protected Attributes; core::visual::VisualParams * m_vparams;  ;  Protected Attributes inherited from sofa::simulation::VisualVisitor; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  VisualUpdateVisitor (core::visual::VisualParams *params);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm) override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtu",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html:1530,Modifiability,inherit,inherited,1530," VisualUpdateVisitor (core::visual::VisualParams *params);  ; virtual void processVisualModel (simulation::Node *, core::visual::VisualModel *vm) override;  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html:3718,Modifiability,inherit,inherited,3718,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html:3925,Modifiability,inherit,inherited,3925,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_vparams. core::visual::VisualParams* sofa::simulation::VisualUpdateVisitor::m_vparams. protected . Constructor details. ◆ VisualUpdateVisitor(). sofa::simulation::VisualUpdateVisitor::VisualUpdateVisitor ; (; core::visual::VisualParams * ; params). inline . Function details. ◆ getClassName(). const char* sofa::simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html:3862,Security,access,access,3862,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html:2049,Testability,test,testTags,2049,"lation::VisualVisitor;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; const char * getCategoryName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_update_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor-members.html:234,Modifiability,inherit,inherited,234,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::VisualVisitor Member List . This is the complete list of members for sofa::simulation::VisualVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(Visit",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor-members.html:4047,Testability,test,testTags,4047,"NodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::VisualVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(simulation::Node *, core::objectmodel::BaseObject *)sofa::simulation::VisualVisitorinlinevirtual; processVisualModel(simulation::Node *node, core::visual::VisualModel *vm)=0sofa::simulation::VisualVisitorpure virtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat) overridesofa::simulation::VisualVisitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; VisualVisitor(core::visual::VisualParams *params)sofa::simulation::VisualVisitorinline; vparamssofa::simulation::VisualVisitorprotected; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html:448,Modifiability,inherit,inherited,448,"﻿. SOFA API: sofa::simulation::VisualVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::VisualVisitor Class Referenceabstract . #include <VisualVisitor.h>. Inheritance diagram for sofa::simulation::VisualVisitor:. [legend]. Protected Attributes; core::visual::VisualParams * vparams;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processVisualModel (simulation::Node *node, core::visual::VisualModel *vm)=0;  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html:1269,Modifiability,inherit,inherited,1269,"ms;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  VisualVisitor (core::visual::VisualParams *params);  ; virtual void processVisualModel (simulation::Node *node, core::visual::VisualModel *vm)=0;  ; virtual void processObject (simulation::Node *, core::objectmodel::BaseObject *);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simul",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html:3457,Modifiability,inherit,inherited,3457,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html:3664,Modifiability,inherit,inherited,3664,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ vparams. core::visual::VisualParams* sofa::simulation::VisualVisitor::vparams. protected . Constructor details. ◆ VisualVisitor(). sofa::simulation::VisualVisitor::VisualVisitor ; (; core::visual::VisualParams * ; params). inline . Function details. ◆ getCategoryName(). const char* sofa::simulation::VisualVisitor::get",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html:3601,Security,access,access,3601,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html:1788,Testability,test,testTags,1788,"k method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getCategoryName () const override;  ; const char * getClassName () const override;  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  visual visitor must be executed as a tree, such as forward and backward orders are coherent More...;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_visual_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_worker_thread-members.html:232,Modifiability,inherit,inherited,232,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::WorkerThread Member List . This is the complete list of members for sofa::simulation::WorkerThread, including all inherited members. addTask(Task *pTask)sofa::simulation::WorkerThread; DefaultTaskScheduler classsofa::simulation::WorkerThreadfriend; getCurrentStatus() constsofa::simulation::WorkerThreadinline; getId() constsofa::simulation::WorkerThread; getName() constsofa::simulation::WorkerThreadinline; getTaskCount()sofa::simulation::WorkerThreadinline; getTasksQueue()sofa::simulation::WorkerThreadinline; getType() constsofa::simulation::WorkerThreadinline; WorkerThread(DefaultTaskScheduler *const &taskScheduler, int index, const std::string &name=""Worker"")sofa::simulation::WorkerThread; workUntilDone(Task::Status *status)sofa::simulation::WorkerThread; ~WorkerThread()sofa::simulation::WorkerThread. Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_worker_thread-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_worker_thread-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor-members.html:242,Modifiability,inherit,inherited,242,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::WriteStateVisitor Member List . This is the complete list of members for sofa::simulation::WriteStateVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_ea",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor-members.html:3863,Testability,test,testTags,3863,"readSafe() constsofa::simulation::Visitorinlinevirtual; m_outsofa::simulation::WriteStateVisitorprotected; NO_REPETITION enum valuesofa::simulation::Visitor; paramssofa::simulation::Visitorprotected; processNodeBottomUp(simulation::Node *)sofa::simulation::Visitorinlinevirtual; processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *) overridesofa::simulation::WriteStateVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat)sofa::simulation::Visitorinlinevirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; WriteStateVisitor(const sofa::core::ExecParams *params, std::ostream &out)sofa::simulation::WriteStateVisitor; ~Visitor()sofa::simulation::Visitorvirtual; ~WriteStateVisitor() overridesofa::simulation::WriteStateVisitor.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html:440,Modifiability,inherit,inherited,440,"﻿. SOFA API: sofa::simulation::WriteStateVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::WriteStateVisitor Class Reference . #include <WriteStateVisitor.h>. Inheritance diagram for sofa::simulation::WriteStateVisitor:. [legend]. Protected Attributes; std::ostream & m_out;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  WriteStateVisitor (const sofa::core::ExecParams *params, std::ostream &out);  ;  ~WriteStateVisitor () override;  ; Result processNodeTopDown (simulation::Node *) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html:920,Modifiability,inherit,inherited,920,"or Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::WriteStateVisitor Class Reference . #include <WriteStateVisitor.h>. Inheritance diagram for sofa::simulation::WriteStateVisitor:. [legend]. Protected Attributes; std::ostream & m_out;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  WriteStateVisitor (const sofa::core::ExecParams *params, std::ostream &out);  ;  ~WriteStateVisitor () override;  ; Result processNodeTopDown (simulation::Node *) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html:3223,Modifiability,inherit,inherited,3223,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html:3430,Modifiability,inherit,inherited,3430,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ m_out. std::ostream& sofa::simulation::WriteStateVisitor::m_out. protected . Constructor details. ◆ WriteStateVisitor(). sofa::simulation::WriteStateVisitor::WriteStateVisitor ; (; const sofa::core::ExecParams * ; params, . std::ostream & ; out . ). ◆ ~WriteStateVisitor(). sofa::simulation::WriteStateVisitor::~WriteSt",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html:3367,Security,access,access,3367,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html:1554,Testability,test,testTags,1554,"const sofa::core::ExecParams *params, std::ostream &out);  ;  ~WriteStateVisitor () override;  ; Result processNodeTopDown (simulation::Node *) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; const char * getClassName () const override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual void processNodeBottomUp (simulation::Node *);  Callback method called after child node have been processed and before going back to the parent node. More...;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual bool treeTraversal (TreeTraversalRepetition &repeat);  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_write_state_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::simulation::XMLPrintVisitor Member List . This is the complete list of members for sofa::simulation::XMLPrintVisitor, including all inherited members. addTag(Tag t)sofa::simulation::Visitorinline; begin(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; begin(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorvirtual; canAccessSleepingNodesofa::simulation::Visitor; childOrderReversed(simulation::Node *)sofa::simulation::Visitorinlinevirtual; ctime_t typedefsofa::simulation::Visitor; debug_write_state_after(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; debug_write_state_before(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitorprotected; end(simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; end(simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0)sofa::simulation::Visitorvirtual; execParams() constsofa::simulation::Visitorinline; execute(sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false)sofa::simulation::Visitorvirtual; for_each(Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; for_each(VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo)sofa::simulation::Visitor; for_each(V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor-members.html:4270,Testability,test,testTags,4270,"bj)sofa::simulation::XMLPrintVisitor; processNodeBottomUp(simulation::Node *node) overridesofa::simulation::XMLPrintVisitorvirtual; sofa::simulation::Visitor::processNodeBottomUp(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processNodeTopDown(simulation::Node *node) overridesofa::simulation::XMLPrintVisitorvirtual; sofa::simulation::Visitor::processNodeTopDown(simulation::Node *node, LocalStorage *)=deletesofa::simulation::Visitorvirtual; processObject(T obj)sofa::simulation::XMLPrintVisitor; processObjects(Seq &list)sofa::simulation::XMLPrintVisitor; removeTag(Tag t)sofa::simulation::Visitorinline; REPEAT_ALL enum valuesofa::simulation::Visitor; REPEAT_ONCE enum valuesofa::simulation::Visitor; Result enum namesofa::simulation::Visitor; RESULT_CONTINUE enum valuesofa::simulation::Visitor; RESULT_PRUNE enum valuesofa::simulation::Visitor; runVisitorTask(VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; runVisitorTask(VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""))sofa::simulation::Visitorprotected; setLevel(int l)sofa::simulation::XMLPrintVisitorinline; setTags(const TagSet &t)sofa::simulation::Visitorinline; subsetsToManagesofa::simulation::Visitor; Tag typedefsofa::simulation::Visitor; TagSet typedefsofa::simulation::Visitor; testTags(sofa::core::objectmodel::BaseObject *obj)sofa::simulation::Visitor; treeTraversal(TreeTraversalRepetition &repeat) overridesofa::simulation::XMLPrintVisitorvirtual; TreeTraversalRepetition enum namesofa::simulation::Visitor; Visitor(const sofa::core::ExecParams *params)sofa::simulation::Visitorexplicit; XMLPrintVisitor(const sofa::core::ExecParams *params, std::ostream &out)sofa::simulation::XMLPrintVisitorinline; ~Visitor()sofa::simulation::Visitorvirtual.",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:6983,Deployability,configurat,configurations,6983,"imulation::XMLPrintVisitor::XMLPrintVisitor ; (; const sofa::core::ExecParams * ; params, . std::ostream & ; out . ). inline . Function details. ◆ getClassName(). const char* sofa::simulation::XMLPrintVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getLevel(). int sofa::simulation::XMLPrintVisitor::getLevel ; (; ); const. inline . ◆ processBaseObject(). void sofa::simulation::XMLPrintVisitor::processBaseObject ; (; sofa::core::objectmodel::BaseObject * ; obj). ◆ processNodeBottomUp(). void sofa::simulation::XMLPrintVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::XMLPrintVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ processObject(). template<class T > . void sofa::simulation::XMLPrintVisitor::processObject ; (; T ; obj). ◆ processObjects(). template<class Seq > . void sofa::simulation::XMLPrintVisitor::processObjects ; (; Seq & ; list). ◆ setLevel(). void sofa::simulation::XMLPrintVisitor::setLevel ; (; int ; l). inline . ◆ treeTraversal(). bool sofa::simulation::XMLPrintVisitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). overridevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented from sofa::simulation::Visitor. sofasimulationXMLPrintVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:446,Modifiability,inherit,inherited,446,"﻿. SOFA API: sofa::simulation::XMLPrintVisitor Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Protected Attributes |; Public Member Functions |; List of all members . sofa::simulation::XMLPrintVisitor Class Reference . #include <XMLPrintVisitor.h>. Inheritance diagram for sofa::simulation::XMLPrintVisitor:. [legend]. Protected Attributes; std::ostream & m_out;  ; int level;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  XMLPrintVisitor (const sofa::core::ExecParams *params, std::ostream &out);  ; template<class T > ; void processObject (T obj);  ; template<class Seq > ; void processObjects (Seq &list);  ; void processBaseObject (sofa::core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ; int getLevel () const;  ; void setLevel (int l);  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulati",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:1366,Modifiability,inherit,inherited,1366,"t level;  ;  Protected Attributes inherited from sofa::simulation::Visitor; const sofa::core::ExecParams * params;  . Public Member Functions;  XMLPrintVisitor (const sofa::core::ExecParams *params, std::ostream &out);  ; template<class T > ; void processObject (T obj);  ; template<class Seq > ; void processObjects (Seq &list);  ; void processBaseObject (sofa::core::objectmodel::BaseObject *obj);  ; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ; int getLevel () const;  ; void setLevel (int l);  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::V",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:3434,Modifiability,inherit,inherited,3434,"el::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:3641,Modifiability,inherit,inherited,3641,"nst Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; Visitor::Result for_each (Visit *visitor, VContext *ctx, const Container &list, Visitor::Result(Visit::*task)(VContext *, PointedType *), const std::string &typeInfo=std::string(""type""));  . Attribute details. ◆ level. int sofa::simulation::XMLPrintVisitor::level. protected . ◆ m_out. std::ostream& sofa::simulation::XMLPrintVisitor::m_out. protected . Constructor details. ◆ XMLPrintVisitor(). sofa::simulation::XMLPrintVisitor::XMLPrintVisitor ; (; const sofa::core::ExecParams * ; params, . std::ostream & ; out . ). inline . F",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:6983,Modifiability,config,configurations,6983,"imulation::XMLPrintVisitor::XMLPrintVisitor ; (; const sofa::core::ExecParams * ; params, . std::ostream & ; out . ). inline . Function details. ◆ getClassName(). const char* sofa::simulation::XMLPrintVisitor::getClassName ; (; ); const. inlineoverridevirtual . Return a class name for this visitor Only used for debugging / profiling purposes ; Reimplemented from sofa::simulation::Visitor. ◆ getLevel(). int sofa::simulation::XMLPrintVisitor::getLevel ; (; ); const. inline . ◆ processBaseObject(). void sofa::simulation::XMLPrintVisitor::processBaseObject ; (; sofa::core::objectmodel::BaseObject * ; obj). ◆ processNodeBottomUp(). void sofa::simulation::XMLPrintVisitor::processNodeBottomUp ; (; simulation::Node * ; ). overridevirtual . Callback method called after child node have been processed and before going back to the parent node. ; Reimplemented from sofa::simulation::Visitor. ◆ processNodeTopDown(). Visitor::Result sofa::simulation::XMLPrintVisitor::processNodeTopDown ; (; simulation::Node * ; ). overridevirtual . Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. ; Reimplemented from sofa::simulation::Visitor. ◆ processObject(). template<class T > . void sofa::simulation::XMLPrintVisitor::processObject ; (; T ; obj). ◆ processObjects(). template<class Seq > . void sofa::simulation::XMLPrintVisitor::processObjects ; (; Seq & ; list). ◆ setLevel(). void sofa::simulation::XMLPrintVisitor::setLevel ; (; int ; l). inline . ◆ treeTraversal(). bool sofa::simulation::XMLPrintVisitor::treeTraversal ; (; TreeTraversalRepetition & ; repeat). overridevirtual . ReturnstreeTraversal returns true if and only if a tree traversal must be enforced (even for a DAG) ; Parameters. repeatTell if a node callback can be executed several times (at each traversal in diamond configurations) . Reimplemented from sofa::simulation::Visitor. sofasimulationXMLPrintVisitor; Generated on Mon Nov 11 2024 03:34:14 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:3578,Security,access,access,3578,"rallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & addTag (Tag t);  ; Visitor & removeTag (Tag t);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; void for_each (VisitorType *visitor, VContext *ctx, const Container &list, void(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  ; template<class VisitorType , class VContext , class Container , typename PointedType > ; Visitor::Result for_each (VisitorType *visitor, VContext *ctx, const Container &list, Visitor::Result(VisitorType::*task)(VContext *, PointedType *), const std::string &typeInfo);  . Additional Inherited Members;  Public Attributes inherited from sofa::simulation::Visitor; TagSet subsetsToManage;  list of the subsets More...;  ; bool canAccessSleepingNode;  Can the visitor access sleeping nodes? More...;  ;  Protected Member Functions inherited from sofa::simulation::Visitor; void debug_write_state_before (sofa::core::objectmodel::BaseObject *obj);  ; void debug_write_state_after (sofa::core::objectmodel::BaseObject *obj);  ; template<class VisitorType , class VContext , class ObjectType > ; void runVisitorTask (VisitorType *visitor, VContext *ctx, void(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class VisitorType , class VContext , class ObjectType > ; Result runVisitorTask (VisitorType *visitor, VContext *ctx, Result(VisitorType::*task)(VContext *, ObjectType *), ObjectType *ptr, const std::string &typeInfo=std::string(""type""));  ; template<class Visit , class VContext , class Container , typename PointedType = typename Container::pointed_type> ; void for_each (Visit *visitor, VContext *ctx, const Container &list, void(Visit::*task)(VContext *, PointedType *), ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html:1765,Testability,test,testTags,1765,"; Result processNodeTopDown (simulation::Node *node) override;  Callback method called when descending to a new node. Recursion will stop if this method returns RESULT_PRUNE. More...;  ; void processNodeBottomUp (simulation::Node *node) override;  Callback method called after child node have been processed and before going back to the parent node. More...;  ; const char * getClassName () const override;  ; int getLevel () const;  ; void setLevel (int l);  ; bool treeTraversal (TreeTraversalRepetition &repeat) override;  ;  Public Member Functions inherited from sofa::simulation::Visitor;  Visitor (const sofa::core::ExecParams *params);  ; virtual ~Visitor ();  ; const sofa::core::ExecParams * execParams () const;  ; virtual bool childOrderReversed (simulation::Node *);  Return true to reverse the order of traversal of child nodes. More...;  ; virtual const char * getCategoryName () const;  ; virtual std::string getInfos () const;  ; bool testTags (sofa::core::objectmodel::BaseObject *obj);  ; virtual void execute (sofa::core::objectmodel::BaseContext *node, bool precomputedOrder=false);  Alias for context->executeVisitor(this) More...;  ; virtual ctime_t begin (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Node *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual ctime_t begin (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, const std::string &typeInfo=std::string(""type""));  ; virtual void end (simulation::Visitor::VisitorContext *node, sofa::core::objectmodel::BaseObject *obj, ctime_t t0);  ; virtual bool isThreadSafe () const;  Specify whether this visitor can be parallelized. More...;  ; virtual Result processNodeTopDown (simulation::Node *node, LocalStorage *)=delete;  ; virtual void processNodeBottomUp (simulation::Node *node, LocalStorage *)=delete;  ; Visitor & setTags (const TagSet &t);  ; Visitor & a",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1simulation_1_1_x_m_l_print_visitor.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:238,Modifiability,inherit,inherited,238,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:195,Testability,test,testing,195,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:283,Testability,test,testing,283,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:328,Testability,test,testing,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:390,Testability,test,testing,390,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:432,Testability,test,testing,432,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:464,Testability,test,testing,464,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:498,Testability,test,testing,498,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:548,Testability,test,testing,548,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:590,Testability,test,testing,590,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html:641,Testability,test,testing,641,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest Member List . This is the complete list of members for sofa::testing::BaseSimulationTest, including all inherited members. BaseSimulationTest()sofa::testing::BaseSimulationTest; BaseTest()sofa::testing::BaseTest; importPlugin(const std::string &name)sofa::testing::BaseSimulationTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:512,Modifiability,inherit,inherited,512,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:763,Modifiability,inherit,inherited,763,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:925,Modifiability,inherit,inherited,925,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:19,Testability,test,testing,19,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:204,Testability,test,testing,204,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:313,Testability,test,testing,313,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:533,Testability,test,testing,533,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:784,Testability,test,testing,784,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:809,Testability,test,testing,809,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:857,Testability,test,testing,857,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:946,Testability,test,testing,946,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:1088,Testability,test,testing,1088,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html:1191,Testability,test,testing,1191,﻿. SOFA API: sofa::testing::BaseSimulationTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Classes |; Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest Class Reference . #include <BaseSimulationTest.h>. Inheritance diagram for sofa::testing::BaseSimulationTest:. [legend]. Classes; class  SceneInstance;  . Public Member Functions;  BaseSimulationTest ();  ; bool importPlugin (const std::string &name);  ;  Public Member Functions inherited from sofa::testing::BaseTest;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::BaseTest; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  ;  Static Public Attributes inherited from sofa::testing::BaseTest; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Constructor details. ◆ BaseSimulationTest(). sofa::testing::BaseSimulationTest::BaseSimulationTest ; (; ). Function details. ◆ importPlugin(). bool sofa::testing::BaseSimulationTest::importPlugin ; (; const std::string & ; name). sofatestingBaseSimulationTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:268,Modifiability,inherit,inherited,268,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:445,Performance,load,loadSceneFile,445,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:210,Testability,test,testing,210,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:304,Testability,test,testing,304,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:395,Testability,test,testing,395,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:493,Testability,test,testing,493,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:547,Testability,test,testing,547,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:646,Testability,test,testing,646,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:761,Testability,test,testing,761,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:842,Testability,test,testing,842,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html:908,Testability,test,testing,908,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseSimulationTest::SceneInstance Member List . This is the complete list of members for sofa::testing::BaseSimulationTest::SceneInstance, including all inherited members. initScene()sofa::testing::BaseSimulationTest::SceneInstance; LoadFromFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstancestatic; loadSceneFile(const std::string &filename)sofa::testing::BaseSimulationTest::SceneInstance; rootsofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &rootname=""root"")sofa::testing::BaseSimulationTest::SceneInstance; SceneInstance(const std::string &type, const std::string &memory)sofa::testing::BaseSimulationTest::SceneInstance; simulate(const double timestep)sofa::testing::BaseSimulationTest::SceneInstance; ~SceneInstance()sofa::testing::BaseSimulationTest::SceneInstance. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:641,Performance,load,loadSceneFile,641,"﻿. SOFA API: sofa::testing::BaseSimulationTest::SceneInstance Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1733,Performance,load,loadSceneFile,1733,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1805,Performance,load,loadSceneFile,1805,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::BaseSimulationTest::SceneInstance Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:263,Testability,test,testing,263,"﻿. SOFA API: sofa::testing::BaseSimulationTest::SceneInstance Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:923,Testability,test,testing,923,"﻿. SOFA API: sofa::testing::BaseSimulationTest::SceneInstance Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneI",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1025,Testability,test,testing,1025,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1161,Testability,test,testing,1161,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1314,Testability,test,testing,1314,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1425,Testability,test,testing,1425,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1545,Testability,test,testing,1545,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1761,Testability,test,testing,1761,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html:1882,Testability,test,testing,1882,"rence. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; Static Public Member Functions |; List of all members . sofa::testing::BaseSimulationTest::SceneInstance Class Reference . #include <BaseSimulationTest.h>. Public Attributes; Node::SPtr root;  . Public Member Functions;  SceneInstance (const std::string &rootname=""root"");  ;  SceneInstance (const std::string &type, const std::string &memory);  ;  ~SceneInstance ();  ; void initScene ();  ; void simulate (const double timestep);  ; void loadSceneFile (const std::string &filename);  . Static Public Member Functions; static SceneInstance LoadFromFile (const std::string &filename);  Create a new scene instance from the content of the filename using the factory. More...;  . Attribute details. ◆ root. Node::SPtr sofa::testing::BaseSimulationTest::SceneInstance::root. Constructor details. ◆ SceneInstance() [1/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; rootname = ""root""). ◆ SceneInstance() [2/2]. sofa::testing::BaseSimulationTest::SceneInstance::SceneInstance ; (; const std::string & ; type, . const std::string & ; memory . ). ◆ ~SceneInstance(). sofa::testing::BaseSimulationTest::SceneInstance::~SceneInstance ; (; ). Function details. ◆ initScene(). void sofa::testing::BaseSimulationTest::SceneInstance::initScene ; (; ). ◆ LoadFromFile(). BaseSimulationTest::SceneInstance sofa::testing::BaseSimulationTest::SceneInstance::LoadFromFile ; (; const std::string & ; filename). static . Create a new scene instance from the content of the filename using the factory. . ◆ loadSceneFile(). void sofa::testing::BaseSimulationTest::SceneInstance::loadSceneFile ; (; const std::string & ; filename). ◆ simulate(). void sofa::testing::BaseSimulationTest::SceneInstance::simulate ; (; const double ; timestep). sofatestingBaseSimulationTestSceneInstance; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_simulation_test_1_1_scene_instance.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:218,Modifiability,inherit,inherited,218,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:185,Testability,test,testing,185,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:253,Testability,test,testing,253,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:285,Testability,test,testing,285,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:317,Testability,test,testing,317,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:351,Testability,test,testing,351,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:401,Testability,test,testing,401,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:443,Testability,test,testing,443,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html:494,Testability,test,testing,494,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::BaseTest Member List . This is the complete list of members for sofa::testing::BaseTest, including all inherited members. BaseTest()sofa::testing::BaseTest; m_errorsofa::testing::BaseTest; m_fatalsofa::testing::BaseTest; onSetUp()sofa::testing::BaseTestinlinevirtual; onTearDown()sofa::testing::BaseTestinlinevirtual; seedsofa::testing::BaseTeststatic; ~BaseTest() overridesofa::testing::BaseTest. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1134,Integrability,message,message,1134,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:232,Testability,test,testing,232,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:311,Testability,test,test,311,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:366,Testability,test,testing,366,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:438,Testability,test,test,438,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:480,Testability,test,testing,480,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:528,Testability,test,testing,528,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:891,Testability,test,testing,891,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:927,Testability,test,testing,927,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:972,Testability,test,testing,972,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1008,Testability,test,testing,1008,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1163,Testability,test,testing,1163,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1282,Testability,test,testing,1282,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1390,Testability,test,testing,1390,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1488,Testability,test,testing,1488,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1577,Testability,test,testing,1577,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1671,Testability,test,testing,1671,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1763,Testability,test,testing,1763,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html:1056,Usability,simpl,simply,1056,"﻿. SOFA API: sofa::testing::BaseTest Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Static Public Attributes |; Public Member Functions |; List of all members . sofa::testing::BaseTest Class Reference . #include <BaseTest.h>; Base class for Sofa test fixtures. ; More... Inheritance diagram for sofa::testing::BaseTest:. [legend]; Detailed Description; Base class for Sofa test fixtures. . Public Attributes; sofa::testing::MessageAsTestFailure m_fatal;  ; sofa::testing::MessageAsTestFailure m_error;  . Static Public Attributes; static int seed = (unsigned int)time(nullptr);  Seed value. More...;  . Public Member Functions;  BaseTest ();  Initialize Sofa and the random number generator. More...;  ;  ~BaseTest () override;  ; virtual void onSetUp ();  ; virtual void onTearDown ();  . Attribute details. ◆ m_error. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_error. ◆ m_fatal. sofa::testing::MessageAsTestFailure sofa::testing::BaseTest::m_fatal. To prevent that you simply need to add the line EXPECT_MSG_EMIT(Error); Where you want to allow a message. . ◆ seed. int sofa::testing::BaseTest::seed = (unsigned int)time(nullptr). static . Seed value. . Constructor details. ◆ BaseTest(). sofa::testing::BaseTest::BaseTest ; (; ). Initialize Sofa and the random number generator. . ◆ ~BaseTest(). sofa::testing::BaseTest::~BaseTest ; (; ). override . Function details. ◆ onSetUp(). virtual void sofa::testing::BaseTest::onSetUp ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >, and sofa::AdvancedTimerTest. ◆ onTearDown(). virtual void sofa::testing::BaseTest::onTearDown ; (; ). inlinevirtual . Reimplemented in sofa::linearalgebra::testing::TestBaseMatrix< T >. sofatestingBaseTest; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_base_test.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html:228,Modifiability,inherit,inherited,228,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::ExpectMessage Member List . This is the complete list of members for sofa::testing::ExpectMessage, including all inherited members. ExpectMessage(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::ExpectMessage; ~ExpectMessage()sofa::testing::ExpectMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::ExpectMessage Member List . This is the complete list of members for sofa::testing::ExpectMessage, including all inherited members. ExpectMessage(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::ExpectMessage; ~ExpectMessage()sofa::testing::ExpectMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html:190,Testability,test,testing,190,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::ExpectMessage Member List . This is the complete list of members for sofa::testing::ExpectMessage, including all inherited members. ExpectMessage(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::ExpectMessage; ~ExpectMessage()sofa::testing::ExpectMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html:269,Testability,log,logging,269,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::ExpectMessage Member List . This is the complete list of members for sofa::testing::ExpectMessage, including all inherited members. ExpectMessage(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::ExpectMessage; ~ExpectMessage()sofa::testing::ExpectMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html:346,Testability,test,testing,346,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::ExpectMessage Member List . This is the complete list of members for sofa::testing::ExpectMessage, including all inherited members. ExpectMessage(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::ExpectMessage; ~ExpectMessage()sofa::testing::ExpectMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html:392,Testability,test,testing,392,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::ExpectMessage Member List . This is the complete list of members for sofa::testing::ExpectMessage, including all inherited members. ExpectMessage(helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0)sofa::testing::ExpectMessage; ~ExpectMessage()sofa::testing::ExpectMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:297,Availability,failure,failure,297,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:504,Availability,failure,failure,504,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:353,Integrability,message,message,353,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:188,Testability,test,testing,188,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:481,Testability,log,logging,481,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:526,Testability,log,logging,526,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:615,Testability,log,logging,615,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:767,Testability,test,testing,767,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:818,Testability,log,logging,818,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html:935,Testability,test,testing,935,"﻿. SOFA API: sofa::testing::ExpectMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::ExpectMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Rise a gtest failure during the object destruction when the expected message have not been received. Better use the macro: EXPECT_MSG_EMIT(Error) as a more 'good looking' version of; sofa::helper::logging::ExpectMessage failure(sofa::helper::logging::Message::Error, FILE, LINE); . Public Member Functions;  ExpectMessage (helper::logging::Message::Type t, const char *filename=""unknown"", int lineno=0);  ; virtual ~ExpectMessage ();  . Constructor details. ◆ ExpectMessage(). sofa::testing::ExpectMessage::ExpectMessage ; (; helper::logging::Message::Type ; t, . const char * ; filename = ""unknown"", . int ; lineno = 0 . ). ◆ ~ExpectMessage(). sofa::testing::ExpectMessage::~ExpectMessage ; (; ). virtual . sofatestingExpectMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_expect_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:236,Modifiability,inherit,inherited,236,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:194,Testability,test,testing,194,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:271,Testability,test,testing,271,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:328,Testability,test,testing,328,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:370,Testability,test,testing,370,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:410,Testability,test,testing,410,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:462,Testability,test,testing,462,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html:529,Testability,test,testing,529,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrame Member List . This is the complete list of members for sofa::testing::GtestMessageFrame, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:213,Testability,test,testing,213,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:288,Testability,test,testing,288,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:957,Testability,test,testing,957,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:1019,Testability,test,testing,1019,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:1087,Testability,test,testing,1087,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:1182,Testability,test,testing,1182,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:1304,Testability,test,testing,1304,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:1388,Testability,test,testing,1388,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:1466,Testability,test,testing,1466,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:1561,Testability,test,testing,1561,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html:1617,Testability,test,testing,1617,"﻿. SOFA API: sofa::testing::GtestMessageFrame Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrame Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrame:. [legend]; Detailed Description; PRIVATE DECLARATION ///////////////////////////////////////////////// Here are declared the classes that are only used for internal use. In case someone want to use them it is easy to move that in .h file. Until that happens, keeps these here to hide the implementation details from the users of the .h And accelerate compilation of Sofa :) . Public Attributes; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Attribute details. ◆ m_filename. const char* sofa::testing::GtestMessageFrame::m_filename. ◆ m_lineno. int sofa::testing::GtestMessageFrame::m_lineno. ◆ m_type. Message::Type sofa::testing::GtestMessageFrame::m_type. Constructor details. ◆ ~GtestMessageFrame(). virtual sofa::testing::GtestMessageFrame::~GtestMessageFrame ; (; ). inlinevirtual . Function details. ◆ finalize(). virtual void sofa::testing::GtestMessageFrame::finalize ; (; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing. ◆ process(). virtual void sofa::testing::GtestMessageFrame::process ; (; Message & ; ). inlinevirtual . Reimplemented in sofa::testing::GtestMessageFrameFailureWhenMissing, and sofa::testing::GtestMessageFrameFailure. sofatestingGtestMessageFrame; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:588,Integrability,message,message,588,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:250,Modifiability,inherit,inherited,250,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:201,Testability,test,testing,201,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:285,Testability,test,testing,285,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:410,Testability,test,testing,410,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:461,Testability,test,testing,461,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:503,Testability,test,testing,503,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:543,Testability,test,testing,543,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:611,Testability,test,testing,611,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html:679,Testability,test,testing,679,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailure Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailure, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameFailure(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailure; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailurevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:460,Integrability,message,message,460,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:1147,Integrability,message,message,1147,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:507,Modifiability,inherit,inherited,507,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:668,Modifiability,inherit,inherited,668,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:199,Testability,test,testing,199,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:281,Testability,test,testing,281,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:528,Testability,test,testing,528,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:689,Testability,test,testing,689,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:844,Testability,test,testing,844,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:1087,Testability,test,testing,1087,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html:1200,Testability,test,testing,1200,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailure Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailure Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailure:. [legend]. Public Member Functions;  GtestMessageFrameFailure (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameFailure(). sofa::testing::GtestMessageFrameFailure::GtestMessageFrameFailure ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). DEFINITION OF PRIVATE CLASSES ////////////////////////////////// . Function details. ◆ process(). void sofa::testing::GtestMessageFrameFailure::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailure; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:717,Integrability,message,message,717,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:272,Modifiability,inherit,inherited,272,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:212,Testability,test,testing,212,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:316,Testability,test,testing,316,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:464,Testability,test,testing,464,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:526,Testability,test,testing,526,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:572,Testability,test,testing,572,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:632,Testability,test,testing,632,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:672,Testability,test,testing,672,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:740,Testability,test,testing,740,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html:819,Testability,test,testing,819,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameFailureWhenMissing Member List . This is the complete list of members for sofa::testing::GtestMessageFrameFailureWhenMissing, including all inherited members. finalize() overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; GtestMessageFrameFailureWhenMissing(Message::Type type, const char *filename, int lineno)sofa::testing::GtestMessageFrameFailureWhenMissing; m_filenamesofa::testing::GtestMessageFrame; m_gotMessagesofa::testing::GtestMessageFrameFailureWhenMissing; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &message) overridesofa::testing::GtestMessageFrameFailureWhenMissingvirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:712,Integrability,message,message,712,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:1482,Integrability,message,message,1482,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:449,Modifiability,inherit,inherited,449,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:789,Modifiability,inherit,inherited,789,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:231,Testability,test,testing,231,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:324,Testability,test,testing,324,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:470,Testability,test,testing,470,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:810,Testability,test,testing,810,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:918,Testability,test,testing,918,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:1054,Testability,test,testing,1054,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:1253,Testability,test,testing,1253,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:1359,Testability,test,testing,1359,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:1411,Testability,test,testing,1411,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html:1535,Testability,test,testing,1535,"﻿. SOFA API: sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Attributes |; Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameFailureWhenMissing Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameFailureWhenMissing:. [legend]. Public Attributes; bool m_gotMessage {false};  ;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Public Member Functions;  GtestMessageFrameFailureWhenMissing (Message::Type type, const char *filename, int lineno);  ; void process (Message &message) override;  ; void finalize () override;  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  . Attribute details. ◆ m_gotMessage. bool sofa::testing::GtestMessageFrameFailureWhenMissing::m_gotMessage {false}. Constructor details. ◆ GtestMessageFrameFailureWhenMissing(). sofa::testing::GtestMessageFrameFailureWhenMissing::GtestMessageFrameFailureWhenMissing ; (; Message::Type ; type, . const char * ; filename, . int ; lineno . ). Function details. ◆ finalize(). void sofa::testing::GtestMessageFrameFailureWhenMissing::finalize ; (; ). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. ◆ process(). void sofa::testing::GtestMessageFrameFailureWhenMissing::process ; (; Message & ; message). overridevirtual . Reimplemented from sofa::testing::GtestMessageFrame. sofatestingGtestMessageFrameFailureWhenMissing; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_failure_when_missing.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:200,Testability,test,testing,200,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:283,Testability,test,testing,283,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:373,Testability,test,testing,373,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:423,Testability,test,testing,423,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:465,Testability,test,testing,465,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:505,Testability,test,testing,505,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:557,Testability,test,testing,557,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html:624,Testability,test,testing,624,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageFrameIgnore Member List . This is the complete list of members for sofa::testing::GtestMessageFrameIgnore, including all inherited members. finalize()sofa::testing::GtestMessageFrameinlinevirtual; GtestMessageFrameIgnore(Message::Type type)sofa::testing::GtestMessageFrameIgnore; m_filenamesofa::testing::GtestMessageFrame; m_linenosofa::testing::GtestMessageFrame; m_typesofa::testing::GtestMessageFrame; process(Message &)sofa::testing::GtestMessageFrameinlinevirtual; ~GtestMessageFrame()sofa::testing::GtestMessageFrameinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html:424,Modifiability,inherit,inherited,424,﻿. SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameIgnore Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameIgnore:. [legend]. Public Member Functions;  GtestMessageFrameIgnore (Message::Type type);  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameIgnore(). sofa::testing::GtestMessageFrameIgnore::GtestMessageFrameIgnore ; (; Message::Type ; type). sofatestingGtestMessageFrameIgnore; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html:622,Modifiability,inherit,inherited,622,﻿. SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameIgnore Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameIgnore:. [legend]. Public Member Functions;  GtestMessageFrameIgnore (Message::Type type);  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameIgnore(). sofa::testing::GtestMessageFrameIgnore::GtestMessageFrameIgnore ; (; Message::Type ; type). sofatestingGtestMessageFrameIgnore; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html:19,Testability,test,testing,19,﻿. SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameIgnore Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameIgnore:. [legend]. Public Member Functions;  GtestMessageFrameIgnore (Message::Type type);  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameIgnore(). sofa::testing::GtestMessageFrameIgnore::GtestMessageFrameIgnore ; (; Message::Type ; type). sofatestingGtestMessageFrameIgnore; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html:198,Testability,test,testing,198,﻿. SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameIgnore Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameIgnore:. [legend]. Public Member Functions;  GtestMessageFrameIgnore (Message::Type type);  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameIgnore(). sofa::testing::GtestMessageFrameIgnore::GtestMessageFrameIgnore ; (; Message::Type ; type). sofatestingGtestMessageFrameIgnore; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html:279,Testability,test,testing,279,﻿. SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameIgnore Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameIgnore:. [legend]. Public Member Functions;  GtestMessageFrameIgnore (Message::Type type);  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameIgnore(). sofa::testing::GtestMessageFrameIgnore::GtestMessageFrameIgnore ; (; Message::Type ; type). sofatestingGtestMessageFrameIgnore; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html:445,Testability,test,testing,445,﻿. SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameIgnore Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameIgnore:. [legend]. Public Member Functions;  GtestMessageFrameIgnore (Message::Type type);  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameIgnore(). sofa::testing::GtestMessageFrameIgnore::GtestMessageFrameIgnore ; (; Message::Type ; type). sofatestingGtestMessageFrameIgnore; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html:643,Testability,test,testing,643,﻿. SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameIgnore Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameIgnore:. [legend]. Public Member Functions;  GtestMessageFrameIgnore (Message::Type type);  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameIgnore(). sofa::testing::GtestMessageFrameIgnore::GtestMessageFrameIgnore ; (; Message::Type ; type). sofatestingGtestMessageFrameIgnore; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html:797,Testability,test,testing,797,﻿. SOFA API: sofa::testing::GtestMessageFrameIgnore Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageFrameIgnore Class Reference . Inheritance diagram for sofa::testing::GtestMessageFrameIgnore:. [legend]. Public Member Functions;  GtestMessageFrameIgnore (Message::Type type);  ;  Public Member Functions inherited from sofa::testing::GtestMessageFrame; virtual ~GtestMessageFrame ();  ; virtual void process (Message &);  ; virtual void finalize ();  . Additional Inherited Members;  Public Attributes inherited from sofa::testing::GtestMessageFrame; Message::Type m_type;  ; const char * m_filename;  ; int m_lineno;  . Constructor details. ◆ GtestMessageFrameIgnore(). sofa::testing::GtestMessageFrameIgnore::GtestMessageFrameIgnore ; (; Message::Type ; type). sofatestingGtestMessageFrameIgnore; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_frame_ignore.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:240,Modifiability,inherit,inherited,240,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:196,Testability,test,testing,196,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:307,Testability,test,testing,307,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:371,Testability,test,testing,371,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:435,Testability,test,testing,435,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:533,Testability,test,testing,533,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:601,Testability,test,testing,601,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html:662,Testability,log,logging,662,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::GtestMessageHandler Member List . This is the complete list of members for sofa::testing::GtestMessageHandler, including all inherited members. GtestMessageHandler(Message::Class mclass)sofa::testing::GtestMessageHandler; popFrame(Message::Type type)sofa::testing::GtestMessageHandler; process(Message &m) overridesofa::testing::GtestMessageHandlervirtual; pushFrame(Message::Type type, GtestMessageFrame *frame)sofa::testing::GtestMessageHandler; ~ GtestMessageHandler() overridesofa::testing::GtestMessageHandler; ~MessageHandler()sofa::helper::logging::MessageHandlerinlinevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:635,Modifiability,inherit,inherited,635,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:194,Testability,test,testing,194,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:271,Testability,test,testing,271,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:664,Testability,log,logging,664,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:772,Testability,test,testing,772,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:886,Testability,test,testing,886,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:1000,Testability,test,testing,1000,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:1091,Testability,test,testing,1091,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:1226,Testability,log,logging,1226,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html:1277,Testability,test,testing,1277,"﻿. SOFA API: sofa::testing::GtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::GtestMessageHandler Class Reference . Inheritance diagram for sofa::testing::GtestMessageHandler:. [legend]. Public Member Functions;  GtestMessageHandler (Message::Class mclass);  ;  ~ GtestMessageHandler () override;  ; void process (Message &m) override;  Inherited from MessageHandler. More...;  ; void pushFrame (Message::Type type, GtestMessageFrame *frame);  ; void popFrame (Message::Type type);  ;  Public Member Functions inherited from sofa::helper::logging::MessageHandler; virtual ~MessageHandler ();  . Constructor details. ◆ GtestMessageHandler(). sofa::testing::GtestMessageHandler::GtestMessageHandler ; (; Message::Class ; mclass). ◆ ~ GtestMessageHandler(). sofa::testing::GtestMessageHandler::~ GtestMessageHandler ; (; ). override . Function details. ◆ popFrame(). void sofa::testing::GtestMessageHandler::popFrame ; (; Message::Type ; type). ◆ process(). void sofa::testing::GtestMessageHandler::process ; (; Message & ; m). overridevirtual . Inherited from MessageHandler. ; Implements sofa::helper::logging::MessageHandler. ◆ pushFrame(). void sofa::testing::GtestMessageHandler::pushFrame ; (; Message::Type ; type, . GtestMessageFrame * ; frame . ). sofatestingGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html:228,Modifiability,inherit,inherited,228,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::IgnoreMessage Member List . This is the complete list of members for sofa::testing::IgnoreMessage, including all inherited members. IgnoreMessage(helper::logging::Message::Type t)sofa::testing::IgnoreMessage; ~IgnoreMessage()sofa::testing::IgnoreMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::IgnoreMessage Member List . This is the complete list of members for sofa::testing::IgnoreMessage, including all inherited members. IgnoreMessage(helper::logging::Message::Type t)sofa::testing::IgnoreMessage; ~IgnoreMessage()sofa::testing::IgnoreMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html:190,Testability,test,testing,190,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::IgnoreMessage Member List . This is the complete list of members for sofa::testing::IgnoreMessage, including all inherited members. IgnoreMessage(helper::logging::Message::Type t)sofa::testing::IgnoreMessage; ~IgnoreMessage()sofa::testing::IgnoreMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html:269,Testability,log,logging,269,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::IgnoreMessage Member List . This is the complete list of members for sofa::testing::IgnoreMessage, including all inherited members. IgnoreMessage(helper::logging::Message::Type t)sofa::testing::IgnoreMessage; ~IgnoreMessage()sofa::testing::IgnoreMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html:300,Testability,test,testing,300,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::IgnoreMessage Member List . This is the complete list of members for sofa::testing::IgnoreMessage, including all inherited members. IgnoreMessage(helper::logging::Message::Type t)sofa::testing::IgnoreMessage; ~IgnoreMessage()sofa::testing::IgnoreMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html:346,Testability,test,testing,346,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::IgnoreMessage Member List . This is the complete list of members for sofa::testing::IgnoreMessage, including all inherited members. IgnoreMessage(helper::logging::Message::Type t)sofa::testing::IgnoreMessage; ~IgnoreMessage()sofa::testing::IgnoreMessagevirtual. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:313,Integrability,message,message,313,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:19,Testability,test,testing,19,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:188,Testability,test,testing,188,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:425,Testability,log,logging,425,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:469,Testability,log,logging,469,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:546,Testability,log,logging,546,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:652,Testability,test,testing,652,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:703,Testability,log,logging,703,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html:758,Testability,test,testing,758,﻿. SOFA API: sofa::testing::IgnoreMessage Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::IgnoreMessage Class Reference . #include <TestMessageHandler.h>; Detailed Description; Locally hide the fact that a message is expected. Better use the macro: IGNORE_MSG(Error) as a more 'good looking' version of; sofa::helper::logging::IgnoreMessage ignore(sofa::helper::logging::Message::Error); . Public Member Functions;  IgnoreMessage (helper::logging::Message::Type t);  ; virtual ~IgnoreMessage ();  . Constructor details. ◆ IgnoreMessage(). sofa::testing::IgnoreMessage::IgnoreMessage ; (; helper::logging::Message::Type ; t). ◆ ~IgnoreMessage(). sofa::testing::IgnoreMessage::~IgnoreMessage ; (; ). virtual . sofatestingIgnoreMessage; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ,MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_ignore_message.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html:268,Modifiability,inherit,inherited,268,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::LinearCongruentialRandomGenerator Member List . This is the complete list of members for sofa::testing::LinearCongruentialRandomGenerator, including all inherited members. generateInRange(double rmin, double rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInRange(float rmin, float rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInUnitRange()sofa::testing::LinearCongruentialRandomGeneratorinline; generateRandom()sofa::testing::LinearCongruentialRandomGenerator; LinearCongruentialRandomGenerator(unsigned int initialSeed)sofa::testing::LinearCongruentialRandomGeneratorexplicit. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::LinearCongruentialRandomGenerator Member List . This is the complete list of members for sofa::testing::LinearCongruentialRandomGenerator, including all inherited members. generateInRange(double rmin, double rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInRange(float rmin, float rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInUnitRange()sofa::testing::LinearCongruentialRandomGeneratorinline; generateRandom()sofa::testing::LinearCongruentialRandomGenerator; LinearCongruentialRandomGenerator(unsigned int initialSeed)sofa::testing::LinearCongruentialRandomGeneratorexplicit. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html:210,Testability,test,testing,210,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::LinearCongruentialRandomGenerator Member List . This is the complete list of members for sofa::testing::LinearCongruentialRandomGenerator, including all inherited members. generateInRange(double rmin, double rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInRange(float rmin, float rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInUnitRange()sofa::testing::LinearCongruentialRandomGeneratorinline; generateRandom()sofa::testing::LinearCongruentialRandomGenerator; LinearCongruentialRandomGenerator(unsigned int initialSeed)sofa::testing::LinearCongruentialRandomGeneratorexplicit. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html:334,Testability,test,testing,334,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::LinearCongruentialRandomGenerator Member List . This is the complete list of members for sofa::testing::LinearCongruentialRandomGenerator, including all inherited members. generateInRange(double rmin, double rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInRange(float rmin, float rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInUnitRange()sofa::testing::LinearCongruentialRandomGeneratorinline; generateRandom()sofa::testing::LinearCongruentialRandomGenerator; LinearCongruentialRandomGenerator(unsigned int initialSeed)sofa::testing::LinearCongruentialRandomGeneratorexplicit. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html:423,Testability,test,testing,423,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::LinearCongruentialRandomGenerator Member List . This is the complete list of members for sofa::testing::LinearCongruentialRandomGenerator, including all inherited members. generateInRange(double rmin, double rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInRange(float rmin, float rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInUnitRange()sofa::testing::LinearCongruentialRandomGeneratorinline; generateRandom()sofa::testing::LinearCongruentialRandomGenerator; LinearCongruentialRandomGenerator(unsigned int initialSeed)sofa::testing::LinearCongruentialRandomGeneratorexplicit. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html:494,Testability,test,testing,494,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::LinearCongruentialRandomGenerator Member List . This is the complete list of members for sofa::testing::LinearCongruentialRandomGenerator, including all inherited members. generateInRange(double rmin, double rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInRange(float rmin, float rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInUnitRange()sofa::testing::LinearCongruentialRandomGeneratorinline; generateRandom()sofa::testing::LinearCongruentialRandomGenerator; LinearCongruentialRandomGenerator(unsigned int initialSeed)sofa::testing::LinearCongruentialRandomGeneratorexplicit. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html:566,Testability,test,testing,566,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::LinearCongruentialRandomGenerator Member List . This is the complete list of members for sofa::testing::LinearCongruentialRandomGenerator, including all inherited members. generateInRange(double rmin, double rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInRange(float rmin, float rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInUnitRange()sofa::testing::LinearCongruentialRandomGeneratorinline; generateRandom()sofa::testing::LinearCongruentialRandomGenerator; LinearCongruentialRandomGenerator(unsigned int initialSeed)sofa::testing::LinearCongruentialRandomGeneratorexplicit. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html:675,Testability,test,testing,675,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::LinearCongruentialRandomGenerator Member List . This is the complete list of members for sofa::testing::LinearCongruentialRandomGenerator, including all inherited members. generateInRange(double rmin, double rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInRange(float rmin, float rmax)sofa::testing::LinearCongruentialRandomGenerator; generateInUnitRange()sofa::testing::LinearCongruentialRandomGeneratorinline; generateRandom()sofa::testing::LinearCongruentialRandomGenerator; LinearCongruentialRandomGenerator(unsigned int initialSeed)sofa::testing::LinearCongruentialRandomGeneratorexplicit. Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:3882,Deployability,update,update,3882,"ange(10.0, 20.0);; sofa::testing::LinearCongruentialRandomGenerator::generateInRangedouble generateInRange(double rmin, double rmax)Generates a pseudo-random double value within a specified range.Definition: LinearCongruentialRandomGenerator.cpp:41. ◆ generateInRange() [2/2]. float sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; float ; rmin, . float ; rmax . ). Generates a pseudo-random float value within a specified range. ; This function generates a pseudo-random float value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random float value in the specified range [rmin, rmax].; Example usage: float randomValue = generateInRange(10.f, 20.f);. ◆ generateInUnitRange(). template<class Scalar > . Scalar sofa::testing::LinearCongruentialRandomGenerator::generateInUnitRange ; (; ). inline . Generates a pseudo-random value within the unit interval [0, 1]. ; This templated function generates a pseudo-random value of the specified scalar type within the unit interval [0, 1]. It utilizes the underlying random number generator to produce a normalized random value within the unit range.; Template Parameters. ScalarThe scalar type for the generated value (e.g., float, double). . ReturnsA pseudo-random value of the specified scalar type within the range [0, 1].; Example usage: float randomFloat = generateInUnitRange<float>();; double randomDouble = generateInUnitRange<double>();. ◆ generateRandom(). unsigned sofa::testing::LinearCongruentialRandomGenerator::generateRandom ; (; ). Generates the next pseudo-random number. ; ReturnsThe generated pseudo-random number.; This method uses a Linear Congruential Generator (LCG) algorithm to update the seed and produce the next pseudo-random number. . sofatestingLinearCongruentialRandomGenerator; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:344,Modifiability,portab,portable,344,"﻿. SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::LinearCongruentialRandomGenerator Class Reference . #include <LinearCongruentialRandomGenerator.h>; A simple deterministic and portable random number generator. ; More...; Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax]",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:438,Modifiability,portab,portable,438,"﻿. SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::LinearCongruentialRandomGenerator Class Reference . #include <LinearCongruentialRandomGenerator.h>; A simple deterministic and portable random number generator. ; More...; Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax]",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:623,Modifiability,portab,portable,623,"﻿. SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::LinearCongruentialRandomGenerator Class Reference . #include <LinearCongruentialRandomGenerator.h>; A simple deterministic and portable random number generator. ; More...; Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax]",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::LinearCongruentialRandomGenerator Class Reference . #include <LinearCongruentialRandomGenerator.h>; A simple deterministic and portable random number generator. ; More...; Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax]",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:208,Testability,test,testing,208,"﻿. SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::LinearCongruentialRandomGenerator Class Reference . #include <LinearCongruentialRandomGenerator.h>; A simple deterministic and portable random number generator. ; More...; Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax]",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:684,Testability,test,testing,684,"﻿. SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::LinearCongruentialRandomGenerator Class Reference . #include <LinearCongruentialRandomGenerator.h>; A simple deterministic and portable random number generator. ; More...; Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax]",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:1336,Testability,test,testing,1336," Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax].; Example usage: double randomValue = generateInRange(10.0, 20.0);; sofa::testing::LinearCongruentialRandomGenerator::generateInRangedouble generateInRange(double rmin, double rmax)Generates a pseudo-random double value within a specified range.Definition: LinearCongruentialRandomGenerator.cpp:41. ◆ generateInRange() [2/2]. float sofa::testing::LinearCongruentialRandomGenerator::gene",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:1517,Testability,test,testing,1517,"erate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax].; Example usage: double randomValue = generateInRange(10.0, 20.0);; sofa::testing::LinearCongruentialRandomGenerator::generateInRangedouble generateInRange(double rmin, double rmax)Generates a pseudo-random double value within a specified range.Definition: LinearCongruentialRandomGenerator.cpp:41. ◆ generateInRange() [2/2]. float sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; float ; rmin, . float ; rmax . ). Generates a pseudo-random float value within a specified range. ; This function generates a pseudo-random float ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:2076,Testability,test,testing,2076,"ateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax].; Example usage: double randomValue = generateInRange(10.0, 20.0);; sofa::testing::LinearCongruentialRandomGenerator::generateInRangedouble generateInRange(double rmin, double rmax)Generates a pseudo-random double value within a specified range.Definition: LinearCongruentialRandomGenerator.cpp:41. ◆ generateInRange() [2/2]. float sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; float ; rmin, . float ; rmax . ). Generates a pseudo-random float value within a specified range. ; This function generates a pseudo-random float value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random float value in the specified range [rmin, rmax].; Example usage: float randomValue = generateInRange(10.f, 20.f);. ◆ generateInUnitRange(). template<class Scalar > . Scalar sofa::testing::LinearCongruentialRandomGenerator::generateInUnitRange ; (; ). inline . Generates a pseudo-random value within the unit interval [0, 1]. ; This templated function generates a pseudo-random value o",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:2340,Testability,test,testing,2340,"rator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax].; Example usage: double randomValue = generateInRange(10.0, 20.0);; sofa::testing::LinearCongruentialRandomGenerator::generateInRangedouble generateInRange(double rmin, double rmax)Generates a pseudo-random double value within a specified range.Definition: LinearCongruentialRandomGenerator.cpp:41. ◆ generateInRange() [2/2]. float sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; float ; rmin, . float ; rmax . ). Generates a pseudo-random float value within a specified range. ; This function generates a pseudo-random float value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random float value in the specified range [rmin, rmax].; Example usage: float randomValue = generateInRange(10.f, 20.f);. ◆ generateInUnitRange(). template<class Scalar > . Scalar sofa::testing::LinearCongruentialRandomGenerator::generateInUnitRange ; (; ). inline . Generates a pseudo-random value within the unit interval [0, 1]. ; This templated function generates a pseudo-random value of the specified scalar type within the unit interval [0, 1]. It utilizes the underlying random number generator to produce a normalized random value within the unit range.; Template Parameters. ScalarThe scalar type fo",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:2951,Testability,test,testing,2951,"ied range [rmin, rmax].; Example usage: double randomValue = generateInRange(10.0, 20.0);; sofa::testing::LinearCongruentialRandomGenerator::generateInRangedouble generateInRange(double rmin, double rmax)Generates a pseudo-random double value within a specified range.Definition: LinearCongruentialRandomGenerator.cpp:41. ◆ generateInRange() [2/2]. float sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; float ; rmin, . float ; rmax . ). Generates a pseudo-random float value within a specified range. ; This function generates a pseudo-random float value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random float value in the specified range [rmin, rmax].; Example usage: float randomValue = generateInRange(10.f, 20.f);. ◆ generateInUnitRange(). template<class Scalar > . Scalar sofa::testing::LinearCongruentialRandomGenerator::generateInUnitRange ; (; ). inline . Generates a pseudo-random value within the unit interval [0, 1]. ; This templated function generates a pseudo-random value of the specified scalar type within the unit interval [0, 1]. It utilizes the underlying random number generator to produce a normalized random value within the unit range.; Template Parameters. ScalarThe scalar type for the generated value (e.g., float, double). . ReturnsA pseudo-random value of the specified scalar type within the range [0, 1].; Example usage: float randomFloat = generateInUnitRange<float>();; double randomDouble = generateInUnitRange<double>();. ◆ generateRandom(). unsigned sofa::testing::LinearCongruentialRandomGenerator::generateRandom ; (; ). Generates the next pseudo-random number. ; ReturnsThe generated pseudo-random number.; This method uses a Linear Congruential Generator (LCG) algorithm to update the seed and produce the next pseudo-random number. . sofatestingLinearCongruentialRandomGe",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:3660,Testability,test,testing,3660,"ange(10.0, 20.0);; sofa::testing::LinearCongruentialRandomGenerator::generateInRangedouble generateInRange(double rmin, double rmax)Generates a pseudo-random double value within a specified range.Definition: LinearCongruentialRandomGenerator.cpp:41. ◆ generateInRange() [2/2]. float sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; float ; rmin, . float ; rmax . ). Generates a pseudo-random float value within a specified range. ; This function generates a pseudo-random float value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random float value in the specified range [rmin, rmax].; Example usage: float randomValue = generateInRange(10.f, 20.f);. ◆ generateInUnitRange(). template<class Scalar > . Scalar sofa::testing::LinearCongruentialRandomGenerator::generateInUnitRange ; (; ). inline . Generates a pseudo-random value within the unit interval [0, 1]. ; This templated function generates a pseudo-random value of the specified scalar type within the unit interval [0, 1]. It utilizes the underlying random number generator to produce a normalized random value within the unit range.; Template Parameters. ScalarThe scalar type for the generated value (e.g., float, double). . ReturnsA pseudo-random value of the specified scalar type within the range [0, 1].; Example usage: float randomFloat = generateInUnitRange<float>();; double randomDouble = generateInUnitRange<double>();. ◆ generateRandom(). unsigned sofa::testing::LinearCongruentialRandomGenerator::generateRandom ; (; ). Generates the next pseudo-random number. ; ReturnsThe generated pseudo-random number.; This method uses a Linear Congruential Generator (LCG) algorithm to update the seed and produce the next pseudo-random number. . sofatestingLinearCongruentialRandomGenerator; Generated on Mon Nov 11 2024 03:34:35 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:319,Usability,simpl,simple,319,"﻿. SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::LinearCongruentialRandomGenerator Class Reference . #include <LinearCongruentialRandomGenerator.h>; A simple deterministic and portable random number generator. ; More...; Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax]",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html:413,Usability,simpl,simple,413,"﻿. SOFA API: sofa::testing::LinearCongruentialRandomGenerator Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Public Member Functions |; List of all members . sofa::testing::LinearCongruentialRandomGenerator Class Reference . #include <LinearCongruentialRandomGenerator.h>; A simple deterministic and portable random number generator. ; More...; Detailed Description; A simple deterministic and portable random number generator. ; This class implements a Linear Congruential Generator (LCG) algorithm to generate pseudo-random numbers. It is designed to provide deterministic and portable random number generation, making it well-suited for testing purposes. . Public Member Functions;  LinearCongruentialRandomGenerator (unsigned int initialSeed);  ; unsigned int generateRandom ();  Generates the next pseudo-random number. More...;  ; template<class Scalar > ; Scalar generateInUnitRange ();  Generates a pseudo-random value within the unit interval [0, 1]. More...;  ; double generateInRange (double rmin, double rmax);  Generates a pseudo-random double value within a specified range. More...;  ; float generateInRange (float rmin, float rmax);  Generates a pseudo-random float value within a specified range. More...;  . Constructor details. ◆ LinearCongruentialRandomGenerator(). sofa::testing::LinearCongruentialRandomGenerator::LinearCongruentialRandomGenerator ; (; unsigned int ; initialSeed). explicit . Function details. ◆ generateInRange() [1/2]. double sofa::testing::LinearCongruentialRandomGenerator::generateInRange ; (; double ; rmin, . double ; rmax . ). Generates a pseudo-random double value within a specified range. ; This function generates a pseudo-random double value between the provided minimum (rmin) and maximum (rmax) values.; Parameters. rminThe minimum value of the desired range (inclusive). ; rmaxThe maximum value of the desired range (inclusive). . ReturnsA pseudo-random double value in the specified range [rmin, rmax]",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_linear_congruential_random_generator.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html:248,Modifiability,inherit,inherited,248,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandler Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandler, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerstatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html:106,Testability,test,testing,106,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandler Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandler, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerstatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html:200,Testability,test,testing,200,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandler Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandler, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerstatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html:286,Testability,test,testing,286,"﻿. SOFA API: Member List. . SOFA API;  679a9147. Open source framework for multi-physics simuation. sofa::testing::MainGtestMessageHandler Member List . This is the complete list of members for sofa::testing::MainGtestMessageHandler, including all inherited members. getInstance()sofa::testing::MainGtestMessageHandlerstatic. Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler-members.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:363,Deployability,install,installed,363,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:505,Deployability,install,install,505,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:467,Modifiability,inherit,inheriting,467,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:19,Testability,test,testing,19,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:205,Testability,test,testing,205,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html
https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html:385,Testability,test,testing,385,"﻿. SOFA API: sofa::testing::MainGtestMessageHandler Class Reference. . SOFA API;  679a9147. Open source framework for multi-physics simuation. Static Public Member Functions |; List of all members . sofa::testing::MainGtestMessageHandler Class Reference . #include <TestMessageHandler.h>; Detailed Description; Inherited from MessageHandler, this handler must be installed to have the testing subsystem working. By default it is added in Sofa_test but if you are not inheriting from Sofa_test you have to install it manually. . Static Public Member Functions; static helper::logging::MessageHandler * getInstance ();  . Function details. ◆ getInstance(). MessageHandler * sofa::testing::MainGtestMessageHandler::getInstance ; (; ). static . sofatestingMainGtestMessageHandler; Generated on Mon Nov 11 2024 03:35:59 for SOFA API by 1.9.1 . ",MatchSource.WIKI,api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html,sofa-framework,sofa,v24.06.00,https://www.sofa-framework.org,https://www.sofa-framework.org/api/master/sofa/html/classsofa_1_1testing_1_1_main_gtest_message_handler.html
